
Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bb4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000193c  08011cf4  08011cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013630  08013630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013638  08013638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801363c  0801363c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  20000008  08013640  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000016c  080137a4  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001a4  080137d9  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b8c  200001b8  080137ea  000151b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  080137ea  00015d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00016000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00016000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080137ea  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004fe95  00000000  00000000  00015a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000085d8  00000000  00000000  0006592c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004560  00000000  00000000  0006df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003559  00000000  00000000  00072468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00030f50  00000000  00000000  000759c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00044e7a  00000000  00000000  000a6911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010fb01  00000000  00000000  000eb78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001fb28c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00013214  00000000  00000000  001fb2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000065  00000000  00000000  0020e4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b8 	.word	0x200001b8
 800015c:	00000000 	.word	0x00000000
 8000160:	08011cdc 	.word	0x08011cdc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001bc 	.word	0x200001bc
 800017c:	08011cdc 	.word	0x08011cdc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__gedf2>:
 80007fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000800:	e006      	b.n	8000810 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__ledf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	e002      	b.n	8000810 <__cmpdf2+0x4>
 800080a:	bf00      	nop

0800080c <__cmpdf2>:
 800080c:	f04f 0c01 	mov.w	ip, #1
 8000810:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000814:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800081c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000826:	d01b      	beq.n	8000860 <__cmpdf2+0x54>
 8000828:	b001      	add	sp, #4
 800082a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800082e:	bf0c      	ite	eq
 8000830:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000834:	ea91 0f03 	teqne	r1, r3
 8000838:	bf02      	ittt	eq
 800083a:	ea90 0f02 	teqeq	r0, r2
 800083e:	2000      	moveq	r0, #0
 8000840:	4770      	bxeq	lr
 8000842:	f110 0f00 	cmn.w	r0, #0
 8000846:	ea91 0f03 	teq	r1, r3
 800084a:	bf58      	it	pl
 800084c:	4299      	cmppl	r1, r3
 800084e:	bf08      	it	eq
 8000850:	4290      	cmpeq	r0, r2
 8000852:	bf2c      	ite	cs
 8000854:	17d8      	asrcs	r0, r3, #31
 8000856:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800085a:	f040 0001 	orr.w	r0, r0, #1
 800085e:	4770      	bx	lr
 8000860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000868:	d102      	bne.n	8000870 <__cmpdf2+0x64>
 800086a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800086e:	d107      	bne.n	8000880 <__cmpdf2+0x74>
 8000870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000878:	d1d6      	bne.n	8000828 <__cmpdf2+0x1c>
 800087a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800087e:	d0d3      	beq.n	8000828 <__cmpdf2+0x1c>
 8000880:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <__aeabi_cdrcmple>:
 8000888:	4684      	mov	ip, r0
 800088a:	4610      	mov	r0, r2
 800088c:	4662      	mov	r2, ip
 800088e:	468c      	mov	ip, r1
 8000890:	4619      	mov	r1, r3
 8000892:	4663      	mov	r3, ip
 8000894:	e000      	b.n	8000898 <__aeabi_cdcmpeq>
 8000896:	bf00      	nop

08000898 <__aeabi_cdcmpeq>:
 8000898:	b501      	push	{r0, lr}
 800089a:	f7ff ffb7 	bl	800080c <__cmpdf2>
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf48      	it	mi
 80008a2:	f110 0f00 	cmnmi.w	r0, #0
 80008a6:	bd01      	pop	{r0, pc}

080008a8 <__aeabi_dcmpeq>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff fff4 	bl	8000898 <__aeabi_cdcmpeq>
 80008b0:	bf0c      	ite	eq
 80008b2:	2001      	moveq	r0, #1
 80008b4:	2000      	movne	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmplt>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffea 	bl	8000898 <__aeabi_cdcmpeq>
 80008c4:	bf34      	ite	cc
 80008c6:	2001      	movcc	r0, #1
 80008c8:	2000      	movcs	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmple>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffe0 	bl	8000898 <__aeabi_cdcmpeq>
 80008d8:	bf94      	ite	ls
 80008da:	2001      	movls	r0, #1
 80008dc:	2000      	movhi	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_dcmpge>:
 80008e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e8:	f7ff ffce 	bl	8000888 <__aeabi_cdrcmple>
 80008ec:	bf94      	ite	ls
 80008ee:	2001      	movls	r0, #1
 80008f0:	2000      	movhi	r0, #0
 80008f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f6:	bf00      	nop

080008f8 <__aeabi_dcmpgt>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff ffc4 	bl	8000888 <__aeabi_cdrcmple>
 8000900:	bf34      	ite	cc
 8000902:	2001      	movcc	r0, #1
 8000904:	2000      	movcs	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_d2iz>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d215      	bcs.n	8000942 <__aeabi_d2iz+0x36>
 8000916:	d511      	bpl.n	800093c <__aeabi_d2iz+0x30>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d912      	bls.n	8000948 <__aeabi_d2iz+0x3c>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	bf18      	it	ne
 8000938:	4240      	negne	r0, r0
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000946:	d105      	bne.n	8000954 <__aeabi_d2iz+0x48>
 8000948:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800094c:	bf08      	it	eq
 800094e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b96a 	b.w	8000c48 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9d08      	ldr	r5, [sp, #32]
 8000992:	460c      	mov	r4, r1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d14e      	bne.n	8000a36 <__udivmoddi4+0xaa>
 8000998:	4694      	mov	ip, r2
 800099a:	458c      	cmp	ip, r1
 800099c:	4686      	mov	lr, r0
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	d962      	bls.n	8000a6a <__udivmoddi4+0xde>
 80009a4:	b14a      	cbz	r2, 80009ba <__udivmoddi4+0x2e>
 80009a6:	f1c2 0320 	rsb	r3, r2, #32
 80009aa:	4091      	lsls	r1, r2
 80009ac:	fa20 f303 	lsr.w	r3, r0, r3
 80009b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b4:	4319      	orrs	r1, r3
 80009b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009be:	fa1f f68c 	uxth.w	r6, ip
 80009c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ca:	fb07 1114 	mls	r1, r7, r4, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb04 f106 	mul.w	r1, r4, r6
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x64>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f104 30ff 	add.w	r0, r4, #4294967295
 80009e2:	f080 8112 	bcs.w	8000c0a <__udivmoddi4+0x27e>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 810f 	bls.w	8000c0a <__udivmoddi4+0x27e>
 80009ec:	3c02      	subs	r4, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	1a59      	subs	r1, r3, r1
 80009f2:	fa1f f38e 	uxth.w	r3, lr
 80009f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009fa:	fb07 1110 	mls	r1, r7, r0, r1
 80009fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a02:	fb00 f606 	mul.w	r6, r0, r6
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x94>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a12:	f080 80fc 	bcs.w	8000c0e <__udivmoddi4+0x282>
 8000a16:	429e      	cmp	r6, r3
 8000a18:	f240 80f9 	bls.w	8000c0e <__udivmoddi4+0x282>
 8000a1c:	4463      	add	r3, ip
 8000a1e:	3802      	subs	r0, #2
 8000a20:	1b9b      	subs	r3, r3, r6
 8000a22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a26:	2100      	movs	r1, #0
 8000a28:	b11d      	cbz	r5, 8000a32 <__udivmoddi4+0xa6>
 8000a2a:	40d3      	lsrs	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d905      	bls.n	8000a46 <__udivmoddi4+0xba>
 8000a3a:	b10d      	cbz	r5, 8000a40 <__udivmoddi4+0xb4>
 8000a3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4608      	mov	r0, r1
 8000a44:	e7f5      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a46:	fab3 f183 	clz	r1, r3
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d146      	bne.n	8000adc <__udivmoddi4+0x150>
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xcc>
 8000a52:	4290      	cmp	r0, r2
 8000a54:	f0c0 80f0 	bcc.w	8000c38 <__udivmoddi4+0x2ac>
 8000a58:	1a86      	subs	r6, r0, r2
 8000a5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d0e6      	beq.n	8000a32 <__udivmoddi4+0xa6>
 8000a64:	e9c5 6300 	strd	r6, r3, [r5]
 8000a68:	e7e3      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f040 8090 	bne.w	8000b90 <__udivmoddi4+0x204>
 8000a70:	eba1 040c 	sub.w	r4, r1, ip
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	fa1f f78c 	uxth.w	r7, ip
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a86:	fb08 4416 	mls	r4, r8, r6, r4
 8000a8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8e:	fb07 f006 	mul.w	r0, r7, r6
 8000a92:	4298      	cmp	r0, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x11c>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x11a>
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	f200 80cd 	bhi.w	8000c40 <__udivmoddi4+0x2b4>
 8000aa6:	4626      	mov	r6, r4
 8000aa8:	1a1c      	subs	r4, r3, r0
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ab6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aba:	fb00 f707 	mul.w	r7, r0, r7
 8000abe:	429f      	cmp	r7, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x148>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x146>
 8000acc:	429f      	cmp	r7, r3
 8000ace:	f200 80b0 	bhi.w	8000c32 <__udivmoddi4+0x2a6>
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	1bdb      	subs	r3, r3, r7
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	e7a5      	b.n	8000a28 <__udivmoddi4+0x9c>
 8000adc:	f1c1 0620 	rsb	r6, r1, #32
 8000ae0:	408b      	lsls	r3, r1
 8000ae2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aec:	fa04 f301 	lsl.w	r3, r4, r1
 8000af0:	ea43 030c 	orr.w	r3, r3, ip
 8000af4:	40f4      	lsrs	r4, r6
 8000af6:	fa00 f801 	lsl.w	r8, r0, r1
 8000afa:	0c38      	lsrs	r0, r7, #16
 8000afc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b00:	fbb4 fef0 	udiv	lr, r4, r0
 8000b04:	fa1f fc87 	uxth.w	ip, r7
 8000b08:	fb00 441e 	mls	r4, r0, lr, r4
 8000b0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b10:	fb0e f90c 	mul.w	r9, lr, ip
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x1a6>
 8000b1c:	193c      	adds	r4, r7, r4
 8000b1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b22:	f080 8084 	bcs.w	8000c2e <__udivmoddi4+0x2a2>
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	f240 8081 	bls.w	8000c2e <__udivmoddi4+0x2a2>
 8000b2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b30:	443c      	add	r4, r7
 8000b32:	eba4 0409 	sub.w	r4, r4, r9
 8000b36:	fa1f f983 	uxth.w	r9, r3
 8000b3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b4a:	45a4      	cmp	ip, r4
 8000b4c:	d907      	bls.n	8000b5e <__udivmoddi4+0x1d2>
 8000b4e:	193c      	adds	r4, r7, r4
 8000b50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b54:	d267      	bcs.n	8000c26 <__udivmoddi4+0x29a>
 8000b56:	45a4      	cmp	ip, r4
 8000b58:	d965      	bls.n	8000c26 <__udivmoddi4+0x29a>
 8000b5a:	3b02      	subs	r3, #2
 8000b5c:	443c      	add	r4, r7
 8000b5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b62:	fba0 9302 	umull	r9, r3, r0, r2
 8000b66:	eba4 040c 	sub.w	r4, r4, ip
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	46ce      	mov	lr, r9
 8000b6e:	469c      	mov	ip, r3
 8000b70:	d351      	bcc.n	8000c16 <__udivmoddi4+0x28a>
 8000b72:	d04e      	beq.n	8000c12 <__udivmoddi4+0x286>
 8000b74:	b155      	cbz	r5, 8000b8c <__udivmoddi4+0x200>
 8000b76:	ebb8 030e 	subs.w	r3, r8, lr
 8000b7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b82:	40cb      	lsrs	r3, r1
 8000b84:	431e      	orrs	r6, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	e9c5 6400 	strd	r6, r4, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e750      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f103 	lsr.w	r1, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	430c      	orrs	r4, r1
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bac:	fa1f f78c 	uxth.w	r7, ip
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000bb8:	0c23      	lsrs	r3, r4, #16
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	fb00 f107 	mul.w	r1, r0, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x24c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bce:	d22c      	bcs.n	8000c2a <__udivmoddi4+0x29e>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d92a      	bls.n	8000c2a <__udivmoddi4+0x29e>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000be0:	fb08 3311 	mls	r3, r8, r1, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb01 f307 	mul.w	r3, r1, r7
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x276>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bf8:	d213      	bcs.n	8000c22 <__udivmoddi4+0x296>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d911      	bls.n	8000c22 <__udivmoddi4+0x296>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	1ae4      	subs	r4, r4, r3
 8000c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c08:	e739      	b.n	8000a7e <__udivmoddi4+0xf2>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	e6f0      	b.n	80009f0 <__udivmoddi4+0x64>
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e706      	b.n	8000a20 <__udivmoddi4+0x94>
 8000c12:	45c8      	cmp	r8, r9
 8000c14:	d2ae      	bcs.n	8000b74 <__udivmoddi4+0x1e8>
 8000c16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7a8      	b.n	8000b74 <__udivmoddi4+0x1e8>
 8000c22:	4631      	mov	r1, r6
 8000c24:	e7ed      	b.n	8000c02 <__udivmoddi4+0x276>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e799      	b.n	8000b5e <__udivmoddi4+0x1d2>
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	e7d4      	b.n	8000bd8 <__udivmoddi4+0x24c>
 8000c2e:	46d6      	mov	lr, sl
 8000c30:	e77f      	b.n	8000b32 <__udivmoddi4+0x1a6>
 8000c32:	4463      	add	r3, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	e74d      	b.n	8000ad4 <__udivmoddi4+0x148>
 8000c38:	4606      	mov	r6, r0
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	e70f      	b.n	8000a60 <__udivmoddi4+0xd4>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	e730      	b.n	8000aa8 <__udivmoddi4+0x11c>
 8000c46:	bf00      	nop

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d013      	beq.n	8000c8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00b      	beq.n	8000c8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c74:	e000      	b.n	8000c78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_write>:
static int validMovements = 0;
static int invalidMovements = 0;
bool BLE_CheckNewExerciseSignal=true;
bool BLE_CheckEndOfExerciseSignal=true;

int _write(int file, char *ptr, int len) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e009      	b.n	8000cc0 <_write+0x26>
        ITM_SendChar(*ptr++);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffc9 	bl	8000c4c <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf1      	blt.n	8000cac <_write+0x12>
    }
    return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_MEMS_Init>:

void MX_MEMS_Init(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
    Init_Sensors();
 8000cd8:	f000 f930 	bl	8000f3c <Init_Sensors>
    CalibrateSensors();
 8000cdc:	f000 f97c 	bl	8000fd8 <CalibrateSensors>
    // Initialisation des structures BenchRep
    referenceMovement.maxAmplitudeZ = 0;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
    referenceMovement.minAmplitudeZ = 0;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
    referenceMovement.duration = 0;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]

    currentMovement.maxAmplitudeZ = 0;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
    currentMovement.minAmplitudeZ = 0;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
    currentMovement.duration = 0;
 8000cfe:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000208 	.word	0x20000208
 8000d0c:	20000218 	.word	0x20000218

08000d10 <MX_MEMS_Process>:


void MX_MEMS_Process(void) {
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af06      	add	r7, sp, #24
    // Réinitialisation des compteurs et de l'état
    validMovements = 0;
 8000d16:	4b73      	ldr	r3, [pc, #460]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
    invalidMovements = 0;
 8000d1c:	4b72      	ldr	r3, [pc, #456]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
    isReferenceMovementRecorded = false;
 8000d22:	4b72      	ldr	r3, [pc, #456]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
    bool isExerciseStarted = false;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	71fb      	strb	r3, [r7, #7]
    bool isReferenceValidated = false;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	71bb      	strb	r3, [r7, #6]
    bool exerciseEnded = false;
 8000d30:	2300      	movs	r3, #0
 8000d32:	717b      	strb	r3, [r7, #5]

    while (true) {
    	exerciseEnded = false;
 8000d34:	2300      	movs	r3, #0
 8000d36:	717b      	strb	r3, [r7, #5]
        // Attendre le signal de démarrage d'un nouvel exercice
        if (!isExerciseStarted) {
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f083 0301 	eor.w	r3, r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d008      	beq.n	8000d56 <MX_MEMS_Process+0x46>
            if (BLE_CheckNewExerciseSignal) {
 8000d44:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef0 <MX_MEMS_Process+0x1e0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <MX_MEMS_Process+0x46>
                isExerciseStarted = true;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	71fb      	strb	r3, [r7, #7]
                printf("Nouvel exercice détecté, préparation à l'enregistrement...\n");
 8000d50:	4868      	ldr	r0, [pc, #416]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000d52:	f010 f87b 	bl	8010e4c <puts>
            }
        }

        if (isExerciseStarted && !isReferenceMovementRecorded) {
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d020      	beq.n	8000d9e <MX_MEMS_Process+0x8e>
 8000d5c:	4b63      	ldr	r3, [pc, #396]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	f083 0301 	eor.w	r3, r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d019      	beq.n	8000d9e <MX_MEMS_Process+0x8e>
            printf("Enregistrement du mouvement de référence...\n");
 8000d6a:	4863      	ldr	r0, [pc, #396]	@ (8000ef8 <MX_MEMS_Process+0x1e8>)
 8000d6c:	f010 f86e 	bl	8010e4c <puts>
            if (!recordBenchRep(&referenceMovement)) {
 8000d70:	4862      	ldr	r0, [pc, #392]	@ (8000efc <MX_MEMS_Process+0x1ec>)
 8000d72:	f000 f9c9 	bl	8001108 <recordBenchRep>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f083 0301 	eor.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <MX_MEMS_Process+0x7e>
                printf("Aucun mouvement de référence détecté, fin de la tentative.\n");
 8000d82:	485f      	ldr	r0, [pc, #380]	@ (8000f00 <MX_MEMS_Process+0x1f0>)
 8000d84:	f010 f862 	bl	8010e4c <puts>
                isExerciseStarted = false; // Réinitialiser pour un nouveau signal
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
                continue;
 8000d8c:	e0a9      	b.n	8000ee2 <MX_MEMS_Process+0x1d2>
            }
            isReferenceMovementRecorded = true;
 8000d8e:	4b57      	ldr	r3, [pc, #348]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
            BLE_MVT_REF();
 8000d94:	f00f f84c 	bl	800fe30 <BLE_MVT_REF>
            printf("Mouvement de référence enregistré. En attente de validation...\n");
 8000d98:	485a      	ldr	r0, [pc, #360]	@ (8000f04 <MX_MEMS_Process+0x1f4>)
 8000d9a:	f010 f857 	bl	8010e4c <puts>
        }

        // Phase de validation du mouvement de référence
        if (isReferenceMovementRecorded && !isReferenceValidated) {
 8000d9e:	4b53      	ldr	r3, [pc, #332]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d035      	beq.n	8000e12 <MX_MEMS_Process+0x102>
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	f083 0301 	eor.w	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d02f      	beq.n	8000e12 <MX_MEMS_Process+0x102>
            printf("Enregistrement du mouvement pour validation...\n");
 8000db2:	4855      	ldr	r0, [pc, #340]	@ (8000f08 <MX_MEMS_Process+0x1f8>)
 8000db4:	f010 f84a 	bl	8010e4c <puts>
            if (!recordBenchRep(&currentMovement)) {
 8000db8:	4854      	ldr	r0, [pc, #336]	@ (8000f0c <MX_MEMS_Process+0x1fc>)
 8000dba:	f000 f9a5 	bl	8001108 <recordBenchRep>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f083 0301 	eor.w	r3, r3, #1
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d006      	beq.n	8000dd8 <MX_MEMS_Process+0xc8>
                printf("Aucun mouvement détecté pour validation, veuillez réessayer.\n");
 8000dca:	4851      	ldr	r0, [pc, #324]	@ (8000f10 <MX_MEMS_Process+0x200>)
 8000dcc:	f010 f83e 	bl	8010e4c <puts>
                isReferenceMovementRecorded = false; // Demande de réenregistrer le mouvement de référence
 8000dd0:	4b46      	ldr	r3, [pc, #280]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
                continue;
 8000dd6:	e084      	b.n	8000ee2 <MX_MEMS_Process+0x1d2>
            }

            if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000dd8:	4d48      	ldr	r5, [pc, #288]	@ (8000efc <MX_MEMS_Process+0x1ec>)
 8000dda:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000dde:	9304      	str	r3, [sp, #16]
 8000de0:	4b4a      	ldr	r3, [pc, #296]	@ (8000f0c <MX_MEMS_Process+0x1fc>)
 8000de2:	466c      	mov	r4, sp
 8000de4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dee:	f000 fa4b 	bl	8001288 <compareBenchReps>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <MX_MEMS_Process+0xf4>
                isReferenceValidated = true;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	71bb      	strb	r3, [r7, #6]
                printf("Validation réussie. Commencement des répétitions.\n");
 8000dfc:	4845      	ldr	r0, [pc, #276]	@ (8000f14 <MX_MEMS_Process+0x204>)
 8000dfe:	f010 f825 	bl	8010e4c <puts>
 8000e02:	e006      	b.n	8000e12 <MX_MEMS_Process+0x102>
            } else {
                printf("Validation échouée, veuillez réenregistrer le mouvement de référence.\n");
 8000e04:	4844      	ldr	r0, [pc, #272]	@ (8000f18 <MX_MEMS_Process+0x208>)
 8000e06:	f010 f821 	bl	8010e4c <puts>
                isReferenceMovementRecorded = false; // Réinitialiser pour enregistrer à nouveau le mouvement de référence
 8000e0a:	4b38      	ldr	r3, [pc, #224]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
                continue;
 8000e10:	e067      	b.n	8000ee2 <MX_MEMS_Process+0x1d2>
            }
        }
        // Réinitialiser les compteurs pour une nouvelle série
               validMovements = 0;
 8000e12:	4b34      	ldr	r3, [pc, #208]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
               invalidMovements = 0;
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]

               // Enregistrement des répétitions
               while (!exerciseEnded) {
 8000e1e:	e048      	b.n	8000eb2 <MX_MEMS_Process+0x1a2>
                   printf("Enregistrement d'une nouvelle répétition...\n");
 8000e20:	483e      	ldr	r0, [pc, #248]	@ (8000f1c <MX_MEMS_Process+0x20c>)
 8000e22:	f010 f813 	bl	8010e4c <puts>
                   if (!recordBenchRep(&currentMovement)) {
 8000e26:	4839      	ldr	r0, [pc, #228]	@ (8000f0c <MX_MEMS_Process+0x1fc>)
 8000e28:	f000 f96e 	bl	8001108 <recordBenchRep>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f083 0301 	eor.w	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <MX_MEMS_Process+0x130>
                       printf("Fin de la série détectée après une période d'inactivité.\n");
 8000e38:	4839      	ldr	r0, [pc, #228]	@ (8000f20 <MX_MEMS_Process+0x210>)
 8000e3a:	f010 f807 	bl	8010e4c <puts>
                       break;  // Sortir de la boucle interne si inactivité détectée
 8000e3e:	e03e      	b.n	8000ebe <MX_MEMS_Process+0x1ae>
                   }

                   if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000e40:	4d2e      	ldr	r5, [pc, #184]	@ (8000efc <MX_MEMS_Process+0x1ec>)
 8000e42:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e46:	9304      	str	r3, [sp, #16]
 8000e48:	4b30      	ldr	r3, [pc, #192]	@ (8000f0c <MX_MEMS_Process+0x1fc>)
 8000e4a:	466c      	mov	r4, sp
 8000e4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e56:	f000 fa17 	bl	8001288 <compareBenchReps>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d008      	beq.n	8000e72 <MX_MEMS_Process+0x162>
                       validMovements++;
 8000e60:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e68:	6013      	str	r3, [r2, #0]
                       printf("Répétition valide.\n");
 8000e6a:	482e      	ldr	r0, [pc, #184]	@ (8000f24 <MX_MEMS_Process+0x214>)
 8000e6c:	f00f ffee 	bl	8010e4c <puts>
 8000e70:	e007      	b.n	8000e82 <MX_MEMS_Process+0x172>
                   } else {
                       invalidMovements++;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000e7a:	6013      	str	r3, [r2, #0]
                       printf("Répétition non valide.\n");
 8000e7c:	482a      	ldr	r0, [pc, #168]	@ (8000f28 <MX_MEMS_Process+0x218>)
 8000e7e:	f00f ffe5 	bl	8010e4c <puts>
                   }

                   // Vérification de la notification de fin d'exercice
                   if (BLE_CheckEndOfExerciseSignal) {
 8000e82:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d013      	beq.n	8000eb2 <MX_MEMS_Process+0x1a2>
                       exerciseEnded = true;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	717b      	strb	r3, [r7, #5]
                       printf("Fin de l'exercice détectée. Terminaison du programme.\n");
 8000e8e:	4828      	ldr	r0, [pc, #160]	@ (8000f30 <MX_MEMS_Process+0x220>)
 8000e90:	f00f ffdc 	bl	8010e4c <puts>
                       validMovements = 0;
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
                       invalidMovements = 0;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
                       isReferenceMovementRecorded = false;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
                      isExerciseStarted = false;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	71fb      	strb	r3, [r7, #7]
                       isReferenceValidated = false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71bb      	strb	r3, [r7, #6]
                       MX_MEMS_Init();
 8000eae:	f7ff ff11 	bl	8000cd4 <MX_MEMS_Init>
               while (!exerciseEnded) {
 8000eb2:	797b      	ldrb	r3, [r7, #5]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1b0      	bne.n	8000e20 <MX_MEMS_Process+0x110>

                   }
               }

               // Affichage des résultats à la fin de la série
               printf("Mouvements valides: %d, Mouvements non valides: %d\n", validMovements, invalidMovements);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481a      	ldr	r0, [pc, #104]	@ (8000f34 <MX_MEMS_Process+0x224>)
 8000eca:	f00f ff4f 	bl	8010d6c <iprintf>

               // Si la fin de l'exercice n'a pas été signalée, recommencez une nouvelle série
               if (!exerciseEnded) {
 8000ece:	797b      	ldrb	r3, [r7, #5]
 8000ed0:	f083 0301 	eor.w	r3, r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f43f af2c 	beq.w	8000d34 <MX_MEMS_Process+0x24>
                   printf("Préparation pour une nouvelle série...\n");
 8000edc:	4816      	ldr	r0, [pc, #88]	@ (8000f38 <MX_MEMS_Process+0x228>)
 8000ede:	f00f ffb5 	bl	8010e4c <puts>
    	exerciseEnded = false;
 8000ee2:	e727      	b.n	8000d34 <MX_MEMS_Process+0x24>
 8000ee4:	20000228 	.word	0x20000228
 8000ee8:	2000022c 	.word	0x2000022c
 8000eec:	20000204 	.word	0x20000204
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	08011cf4 	.word	0x08011cf4
 8000ef8:	08011d34 	.word	0x08011d34
 8000efc:	20000208 	.word	0x20000208
 8000f00:	08011d64 	.word	0x08011d64
 8000f04:	08011da4 	.word	0x08011da4
 8000f08:	08011de8 	.word	0x08011de8
 8000f0c:	20000218 	.word	0x20000218
 8000f10:	08011e18 	.word	0x08011e18
 8000f14:	08011e58 	.word	0x08011e58
 8000f18:	08011e90 	.word	0x08011e90
 8000f1c:	08011edc 	.word	0x08011edc
 8000f20:	08011f0c 	.word	0x08011f0c
 8000f24:	08011f4c 	.word	0x08011f4c
 8000f28:	08011f64 	.word	0x08011f64
 8000f2c:	20000009 	.word	0x20000009
 8000f30:	08011f80 	.word	0x08011f80
 8000f34:	08011fb8 	.word	0x08011fb8
 8000f38:	08011fec 	.word	0x08011fec

08000f3c <Init_Sensors>:





void Init_Sensors(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    BSP_SENSOR_ACC_Init();
 8000f40:	f001 fca1 	bl	8002886 <BSP_SENSOR_ACC_Init>
    BSP_SENSOR_GYR_Init();
 8000f44:	f001 fca7 	bl	8002896 <BSP_SENSOR_GYR_Init>

    BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8000f48:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8000f5c <Init_Sensors+0x20>
 8000f4c:	f001 fcc5 	bl	80028da <BSP_SENSOR_ACC_SetOutputDataRate>
    BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8000f50:	2004      	movs	r0, #4
 8000f52:	f001 fcd1 	bl	80028f8 <BSP_SENSOR_ACC_SetFullScale>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	42480000 	.word	0x42480000

08000f60 <ReadSensorData>:

void ReadSensorData(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    BSP_SENSOR_ACC_GetAxes(&AccValue);
 8000f64:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <ReadSensorData+0x68>)
 8000f66:	f001 fc9e 	bl	80028a6 <BSP_SENSOR_ACC_GetAxes>
    BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8000f6a:	4818      	ldr	r0, [pc, #96]	@ (8000fcc <ReadSensorData+0x6c>)
 8000f6c:	f001 fca8 	bl	80028c0 <BSP_SENSOR_GYR_GetAxes>

    // Appliquer le décalage après la calibration
    AccValue.x -= AccOffset.x;
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <ReadSensorData+0x68>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ReadSensorData+0x70>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <ReadSensorData+0x68>)
 8000f7c:	6013      	str	r3, [r2, #0]
    AccValue.y -= AccOffset.y;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <ReadSensorData+0x68>)
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ReadSensorData+0x70>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <ReadSensorData+0x68>)
 8000f8a:	6053      	str	r3, [r2, #4]
    AccValue.z -= AccOffset.z;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <ReadSensorData+0x68>)
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <ReadSensorData+0x70>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <ReadSensorData+0x68>)
 8000f98:	6093      	str	r3, [r2, #8]

    GyrValue.x -= GyrOffset.x;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <ReadSensorData+0x6c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <ReadSensorData+0x74>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	4a09      	ldr	r2, [pc, #36]	@ (8000fcc <ReadSensorData+0x6c>)
 8000fa6:	6013      	str	r3, [r2, #0]
    GyrValue.y -= GyrOffset.y;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <ReadSensorData+0x6c>)
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <ReadSensorData+0x74>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <ReadSensorData+0x6c>)
 8000fb4:	6053      	str	r3, [r2, #4]
    GyrValue.z -= GyrOffset.z;
 8000fb6:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <ReadSensorData+0x6c>)
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <ReadSensorData+0x74>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	4a02      	ldr	r2, [pc, #8]	@ (8000fcc <ReadSensorData+0x6c>)
 8000fc2:	6093      	str	r3, [r2, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200001d4 	.word	0x200001d4
 8000fcc:	200001e0 	.word	0x200001e0
 8000fd0:	200001ec 	.word	0x200001ec
 8000fd4:	200001f8 	.word	0x200001f8

08000fd8 <CalibrateSensors>:
    printf("Accéléromètre [X: %ld, Y: %ld, Z: %ld]\n", (long)AccValue.x, (long)AccValue.y, (long)AccValue.z);
    printf("Gyroscope [X: %ld, Y: %ld, Z: %ld]\n", (long)GyrValue.x, (long)GyrValue.y, (long)GyrValue.z);
    HAL_Delay(2000);
}

void CalibrateSensors(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
    CalibrateAccelerometer();
 8000fdc:	f000 f804 	bl	8000fe8 <CalibrateAccelerometer>
    CalibrateGyroscope();
 8000fe0:	f000 f84a 	bl	8001078 <CalibrateGyroscope>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <CalibrateAccelerometer>:

void CalibrateAccelerometer(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
    int sumX = 0, sumY = 0, sumZ = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
    MOTION_SENSOR_Axes_t tempVal;

    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e015      	b.n	800102c <CalibrateAccelerometer+0x44>
        BSP_SENSOR_ACC_GetAxes(&tempVal);
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fc4f 	bl	80028a6 <BSP_SENSOR_ACC_GetAxes>
        sumX += tempVal.x;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	4413      	add	r3, r2
 800100e:	61fb      	str	r3, [r7, #28]
        sumY += tempVal.y;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4413      	add	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        sumZ += tempVal.z;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4413      	add	r3, r2
 800101e:	617b      	str	r3, [r7, #20]
        HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 fdc7 	bl	8001bb4 <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	3301      	adds	r3, #1
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	2b63      	cmp	r3, #99	@ 0x63
 8001030:	dde6      	ble.n	8001000 <CalibrateAccelerometer+0x18>
    }

    AccOffset.x = sumX / CALIBRATION_SAMPLES;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <CalibrateAccelerometer+0x88>)
 8001036:	fb82 1203 	smull	r1, r2, r2, r3
 800103a:	1152      	asrs	r2, r2, #5
 800103c:	17db      	asrs	r3, r3, #31
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <CalibrateAccelerometer+0x8c>)
 8001042:	6013      	str	r3, [r2, #0]
    AccOffset.y = sumY / CALIBRATION_SAMPLES;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <CalibrateAccelerometer+0x88>)
 8001048:	fb82 1203 	smull	r1, r2, r2, r3
 800104c:	1152      	asrs	r2, r2, #5
 800104e:	17db      	asrs	r3, r3, #31
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <CalibrateAccelerometer+0x8c>)
 8001054:	6053      	str	r3, [r2, #4]
    AccOffset.z = sumZ / CALIBRATION_SAMPLES;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <CalibrateAccelerometer+0x88>)
 800105a:	fb82 1203 	smull	r1, r2, r2, r3
 800105e:	1152      	asrs	r2, r2, #5
 8001060:	17db      	asrs	r3, r3, #31
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	4a03      	ldr	r2, [pc, #12]	@ (8001074 <CalibrateAccelerometer+0x8c>)
 8001066:	6093      	str	r3, [r2, #8]
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	51eb851f 	.word	0x51eb851f
 8001074:	200001ec 	.word	0x200001ec

08001078 <CalibrateGyroscope>:

void CalibrateGyroscope(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
    int sumX = 0, sumY = 0, sumZ = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
    MOTION_SENSOR_Axes_t tempVal;

    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	e015      	b.n	80010bc <CalibrateGyroscope+0x44>
        BSP_SENSOR_GYR_GetAxes(&tempVal);
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fc14 	bl	80028c0 <BSP_SENSOR_GYR_GetAxes>
        sumX += tempVal.x;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4413      	add	r3, r2
 800109e:	61fb      	str	r3, [r7, #28]
        sumY += tempVal.y;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4413      	add	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        sumZ += tempVal.z;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4413      	add	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]
        HAL_Delay(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f000 fd7f 	bl	8001bb4 <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	3301      	adds	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	2b63      	cmp	r3, #99	@ 0x63
 80010c0:	dde6      	ble.n	8001090 <CalibrateGyroscope+0x18>
    }

    GyrOffset.x = sumX / CALIBRATION_SAMPLES;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <CalibrateGyroscope+0x88>)
 80010c6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ca:	1152      	asrs	r2, r2, #5
 80010cc:	17db      	asrs	r3, r3, #31
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <CalibrateGyroscope+0x8c>)
 80010d2:	6013      	str	r3, [r2, #0]
    GyrOffset.y = sumY / CALIBRATION_SAMPLES;
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <CalibrateGyroscope+0x88>)
 80010d8:	fb82 1203 	smull	r1, r2, r2, r3
 80010dc:	1152      	asrs	r2, r2, #5
 80010de:	17db      	asrs	r3, r3, #31
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <CalibrateGyroscope+0x8c>)
 80010e4:	6053      	str	r3, [r2, #4]
    GyrOffset.z = sumZ / CALIBRATION_SAMPLES;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <CalibrateGyroscope+0x88>)
 80010ea:	fb82 1203 	smull	r1, r2, r2, r3
 80010ee:	1152      	asrs	r2, r2, #5
 80010f0:	17db      	asrs	r3, r3, #31
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	4a03      	ldr	r2, [pc, #12]	@ (8001104 <CalibrateGyroscope+0x8c>)
 80010f6:	6093      	str	r3, [r2, #8]
}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	51eb851f 	.word	0x51eb851f
 8001104:	200001f8 	.word	0x200001f8

08001108 <recordBenchRep>:

bool recordBenchRep(BenchRep *rep) {
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b08c      	sub	sp, #48	@ 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    int maxValueZ = INT_MIN;
 8001110:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int minValueZ = INT_MAX;
 8001116:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t startTime = HAL_GetTick();
 800111c:	f007 f996 	bl	800844c <HAL_GetTick>
 8001120:	6278      	str	r0, [r7, #36]	@ 0x24
    uint32_t lastMovementTime = startTime;
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	623b      	str	r3, [r7, #32]
    uint32_t currentTime;
    bool movementDetected = false;
 8001126:	2300      	movs	r3, #0
 8001128:	77fb      	strb	r3, [r7, #31]
    bool isAscending = false; // Initialisation différée
 800112a:	2300      	movs	r3, #0
 800112c:	77bb      	strb	r3, [r7, #30]
    int changeOfDirectionCount = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
    bool directionDetermined = false;
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
    uint32_t inactivityStartTime = HAL_GetTick(); // Pour détecter l'inactivité initiale
 8001136:	f007 f989 	bl	800844c <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

    while (true) {
        ReadSensorData();
 800113c:	f7ff ff10 	bl	8000f60 <ReadSensorData>

        // Détecter l'inactivité initiale
        if (!movementDetected && (HAL_GetTick() - inactivityStartTime > 5000)) {
 8001140:	7ffb      	ldrb	r3, [r7, #31]
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00a      	beq.n	8001162 <recordBenchRep+0x5a>
 800114c:	f007 f97e 	bl	800844c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <recordBenchRep+0x5a>
            return false; // Aucun mouvement détecté dans les 5 premières secondes
 800115e:	2300      	movs	r3, #0
 8001160:	e08c      	b.n	800127c <recordBenchRep+0x174>
        }

        if (abs(AccValue.z) > MOVEMENT_THRESHOLD) {
 8001162:	4b48      	ldr	r3, [pc, #288]	@ (8001284 <recordBenchRep+0x17c>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	bfb8      	it	lt
 800116a:	425b      	neglt	r3, r3
 800116c:	2b64      	cmp	r3, #100	@ 0x64
 800116e:	dd66      	ble.n	800123e <recordBenchRep+0x136>
            if (!movementDetected) {
 8001170:	7ffb      	ldrb	r3, [r7, #31]
 8001172:	f083 0301 	eor.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d009      	beq.n	8001190 <recordBenchRep+0x88>
                movementDetected = true;
 800117c:	2301      	movs	r3, #1
 800117e:	77fb      	strb	r3, [r7, #31]
                startTime = HAL_GetTick();
 8001180:	f007 f964 	bl	800844c <HAL_GetTick>
 8001184:	6278      	str	r0, [r7, #36]	@ 0x24
                lastMovementTime = startTime;
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	623b      	str	r3, [r7, #32]
                inactivityStartTime = 0; // Réinitialiser puisqu'un mouvement a été détecté
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	e002      	b.n	8001196 <recordBenchRep+0x8e>
            } else {
                lastMovementTime = HAL_GetTick();
 8001190:	f007 f95c 	bl	800844c <HAL_GetTick>
 8001194:	6238      	str	r0, [r7, #32]
            }
            maxValueZ = fmax(maxValueZ, AccValue.z);
 8001196:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001198:	f7ff fac6 	bl	8000728 <__aeabi_i2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <recordBenchRep+0x17c>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fabf 	bl	8000728 <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b11 	vmov	d1, r2, r3
 80011b2:	ec45 4b10 	vmov	d0, r4, r5
 80011b6:	f010 fd13 	bl	8011be0 <fmax>
 80011ba:	ec53 2b10 	vmov	r2, r3, d0
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fba3 	bl	800090c <__aeabi_d2iz>
 80011c6:	4603      	mov	r3, r0
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            minValueZ = fmin(minValueZ, AccValue.z);
 80011ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80011cc:	f7ff faac 	bl	8000728 <__aeabi_i2d>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <recordBenchRep+0x17c>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff faa5 	bl	8000728 <__aeabi_i2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	ec43 2b11 	vmov	d1, r2, r3
 80011e6:	ec45 4b10 	vmov	d0, r4, r5
 80011ea:	f010 fd23 	bl	8011c34 <fmin>
 80011ee:	ec53 2b10 	vmov	r2, r3, d0
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fb89 	bl	800090c <__aeabi_d2iz>
 80011fa:	4603      	mov	r3, r0
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28

            if (!directionDetermined) {
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	f083 0301 	eor.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <recordBenchRep+0x116>
                isAscending = AccValue.z > 0;
 800120a:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <recordBenchRep+0x17c>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	bfcc      	ite	gt
 8001212:	2301      	movgt	r3, #1
 8001214:	2300      	movle	r3, #0
 8001216:	77bb      	strb	r3, [r7, #30]
                directionDetermined = true;
 8001218:	2301      	movs	r3, #1
 800121a:	75fb      	strb	r3, [r7, #23]
 800121c:	e00f      	b.n	800123e <recordBenchRep+0x136>
            } else {
                bool currentAscending = AccValue.z > 0;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <recordBenchRep+0x17c>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	bfcc      	ite	gt
 8001226:	2301      	movgt	r3, #1
 8001228:	2300      	movle	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
                if (currentAscending != isAscending) {
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	7fbb      	ldrb	r3, [r7, #30]
 8001230:	429a      	cmp	r2, r3
 8001232:	d004      	beq.n	800123e <recordBenchRep+0x136>
                    changeOfDirectionCount++;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	3301      	adds	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
                    isAscending = currentAscending;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	77bb      	strb	r3, [r7, #30]
                }
            }
        }

        currentTime = HAL_GetTick();
 800123e:	f007 f905 	bl	800844c <HAL_GetTick>
 8001242:	60b8      	str	r0, [r7, #8]
        if (movementDetected && (currentTime - lastMovementTime > REPETITION_TIME_OUT)) {
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f43f af78 	beq.w	800113c <recordBenchRep+0x34>
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001256:	d800      	bhi.n	800125a <recordBenchRep+0x152>
        ReadSensorData();
 8001258:	e770      	b.n	800113c <recordBenchRep+0x34>
            break; // Fin de l'enregistrement d'un mouvement
 800125a:	bf00      	nop
        }
    }

    // Enregistrement des données du mouvement
    rep->maxAmplitudeZ = maxValueZ;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001260:	601a      	str	r2, [r3, #0]
    rep->minAmplitudeZ = minValueZ;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001266:	605a      	str	r2, [r3, #4]
    rep->duration = currentTime - startTime;
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	461a      	mov	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
    rep->changeOfDirectionCount = changeOfDirectionCount;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	60da      	str	r2, [r3, #12]

    return true; // Mouvement détecté et enregistré
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3730      	adds	r7, #48	@ 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bdb0      	pop	{r4, r5, r7, pc}
 8001284:	200001d4 	.word	0x200001d4

08001288 <compareBenchReps>:



bool compareBenchReps(BenchRep refRep, BenchRep newRep, int tolerance) {
 8001288:	b490      	push	{r4, r7}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	463c      	mov	r4, r7
 8001290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance &&
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	bfb8      	it	lt
 800129e:	425b      	neglt	r3, r3
 80012a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a2:	429a      	cmp	r2, r3
 80012a4:	db17      	blt.n	80012d6 <compareBenchReps+0x4e>
        abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance &&
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bfb8      	it	lt
 80012b0:	425b      	neglt	r3, r3
    if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance &&
 80012b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012b4:	429a      	cmp	r2, r3
 80012b6:	db0e      	blt.n	80012d6 <compareBenchReps+0x4e>
        abs(refRep.duration - newRep.duration) <= tolerance &&
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bfb8      	it	lt
 80012c2:	425b      	neglt	r3, r3
        abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance &&
 80012c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012c6:	429a      	cmp	r2, r3
 80012c8:	db05      	blt.n	80012d6 <compareBenchReps+0x4e>
        refRep.changeOfDirectionCount == newRep.changeOfDirectionCount) {
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        abs(refRep.duration - newRep.duration) <= tolerance &&
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d101      	bne.n	80012d6 <compareBenchReps+0x4e>
        return true;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <compareBenchReps+0x50>
    }
    return false;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc90      	pop	{r4, r7}
 80012e0:	4770      	bx	lr
	...

080012e4 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <APPD_EnableCPU2+0x34>)
 80012ec:	1d3c      	adds	r4, r7, #4
 80012ee:	461d      	mov	r5, r3
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f8:	c403      	stmia	r4!, {r0, r1}
 80012fa:	8022      	strh	r2, [r4, #0]
 80012fc:	3402      	adds	r4, #2
 80012fe:	0c13      	lsrs	r3, r2, #16
 8001300:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001302:	f00d fc1f 	bl	800eb44 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4618      	mov	r0, r3
 800130a:	f00c feb0 	bl	800e06e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800130e:	bf00      	nop
}
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}
 8001316:	bf00      	nop
 8001318:	08012068 	.word	0x08012068

0800131c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <LL_C2_PWR_SetPowerMode+0x28>)
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800132a:	f023 0207 	bic.w	r2, r3, #7
 800132e:	4905      	ldr	r1, [pc, #20]	@ (8001344 <LL_C2_PWR_SetPowerMode+0x28>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4313      	orrs	r3, r2
 8001334:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	58000400 	.word	0x58000400

08001348 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <LL_EXTI_EnableIT_32_63+0x24>)
 8001352:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001356:	4905      	ldr	r1, [pc, #20]	@ (800136c <LL_EXTI_EnableIT_32_63+0x24>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4313      	orrs	r3, r2
 800135c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	58000800 	.word	0x58000800

08001370 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137c:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800137e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001386:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800138a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001396:	4313      	orrs	r3, r2
 8001398:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	cafecafe 	.word	0xcafecafe

080013ac <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001402:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800142c:	d101      	bne.n	8001432 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001452:	d101      	bne.n	8001458 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800146c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001470:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001472:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4313      	orrs	r3, r2
 800147a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001488:	68fb      	ldr	r3, [r7, #12]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <LL_DBGMCU_GetDeviceID+0x18>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e0042000 	.word	0xe0042000

080014b4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80014b8:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <LL_DBGMCU_GetRevisionID+0x18>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	b29b      	uxth	r3, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e0042000 	.word	0xe0042000

080014d0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	605a      	str	r2, [r3, #4]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	605a      	str	r2, [r3, #4]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	615a      	str	r2, [r3, #20]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	615a      	str	r2, [r3, #20]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	609a      	str	r2, [r3, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	619a      	str	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001598:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <LL_LPM_EnableSleep+0x1c>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <LL_LPM_EnableSleep+0x1c>)
 800159e:	f023 0304 	bic.w	r3, r3, #4
 80015a2:	6113      	str	r3, [r2, #16]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	22ff      	movs	r2, #255	@ 0xff
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	22ca      	movs	r2, #202	@ 0xca
 80015da:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2253      	movs	r2, #83	@ 0x53
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 0207 	bic.w	r2, r3, #7
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <MX_APPE_Config+0x18>)
 800161a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800161e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001620:	f000 f824 	bl	800166c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001624:	f000 f864 	bl	80016f0 <Config_HSE>

  return;
 8001628:	bf00      	nop
}
 800162a:	bd80      	pop	{r7, pc}
 800162c:	58004000 	.word	0x58004000

08001630 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001634:	f000 f870 	bl	8001718 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001638:	f000 f888 	bl	800174c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800163c:	4903      	ldr	r1, [pc, #12]	@ (800164c <MX_APPE_Init+0x1c>)
 800163e:	2000      	movs	r0, #0
 8001640:	f000 ff30 	bl	80024a4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001644:	f000 f890 	bl	8001768 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001648:	bf00      	nop
}
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000030c 	.word	0x2000030c

08001650 <Init_Smps>:

void Init_Smps(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001654:	bf00      	nop
}
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <Init_Exti>:

void Init_Exti(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001662:	2050      	movs	r0, #80	@ 0x50
 8001664:	f7ff fe70 	bl	8001348 <LL_EXTI_EnableIT_32_63>

  return;
 8001668:	bf00      	nop
}
 800166a:	bd80      	pop	{r7, pc}

0800166c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001670:	f000 f804 	bl	800167c <Reset_BackupDomain>

  Reset_IPCC();
 8001674:	f000 f81a 	bl	80016ac <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001678:	bf00      	nop
}
 800167a:	bd80      	pop	{r7, pc}

0800167c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001680:	f7ff feca 	bl	8001418 <LL_RCC_IsActiveFlag_PINRST>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00d      	beq.n	80016a6 <Reset_BackupDomain+0x2a>
 800168a:	f7ff fed8 	bl	800143e <LL_RCC_IsActiveFlag_SFTRST>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d108      	bne.n	80016a6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001694:	f008 fcdc 	bl	800a050 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001698:	f008 fcda 	bl	800a050 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800169c:	f7ff fe9a 	bl	80013d4 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80016a0:	f7ff fea9 	bl	80013f6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
}
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80016b0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80016b4:	f7ff fed6 	bl	8001464 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80016b8:	213f      	movs	r1, #63	@ 0x3f
 80016ba:	480c      	ldr	r0, [pc, #48]	@ (80016ec <Reset_IPCC+0x40>)
 80016bc:	f7ff ff4e 	bl	800155c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80016c0:	213f      	movs	r1, #63	@ 0x3f
 80016c2:	480a      	ldr	r0, [pc, #40]	@ (80016ec <Reset_IPCC+0x40>)
 80016c4:	f7ff ff58 	bl	8001578 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80016c8:	213f      	movs	r1, #63	@ 0x3f
 80016ca:	4808      	ldr	r0, [pc, #32]	@ (80016ec <Reset_IPCC+0x40>)
 80016cc:	f7ff ff00 	bl	80014d0 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80016d0:	213f      	movs	r1, #63	@ 0x3f
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <Reset_IPCC+0x40>)
 80016d4:	f7ff ff1f 	bl	8001516 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80016d8:	213f      	movs	r1, #63	@ 0x3f
 80016da:	4804      	ldr	r0, [pc, #16]	@ (80016ec <Reset_IPCC+0x40>)
 80016dc:	f7ff ff0a 	bl	80014f4 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80016e0:	213f      	movs	r1, #63	@ 0x3f
 80016e2:	4802      	ldr	r0, [pc, #8]	@ (80016ec <Reset_IPCC+0x40>)
 80016e4:	f7ff ff29 	bl	800153a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80016e8:	bf00      	nop
}
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	58000c00 	.word	0x58000c00

080016f0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f00d fad8 	bl	800ecac <OTP_Read>
 80016fc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	799b      	ldrb	r3, [r3, #6]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fe31 	bl	8001370 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800170e:	bf00      	nop
 8001710:	bf00      	nop
}
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <System_Init>:

static void System_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  Init_Smps();
 800171c:	f7ff ff98 	bl	8001650 <Init_Smps>

  Init_Exti();
 8001720:	f7ff ff9d 	bl	800165e <Init_Exti>

  Init_Rtc();
 8001724:	f000 f802 	bl	800172c <Init_Rtc>

  return;
 8001728:	bf00      	nop
}
 800172a:	bd80      	pop	{r7, pc}

0800172c <Init_Rtc>:

static void Init_Rtc(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001730:	4805      	ldr	r0, [pc, #20]	@ (8001748 <Init_Rtc+0x1c>)
 8001732:	f7ff ff4c 	bl	80015ce <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001736:	2100      	movs	r1, #0
 8001738:	4803      	ldr	r0, [pc, #12]	@ (8001748 <Init_Rtc+0x1c>)
 800173a:	f7ff ff58 	bl	80015ee <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800173e:	4802      	ldr	r0, [pc, #8]	@ (8001748 <Init_Rtc+0x1c>)
 8001740:	f7ff ff38 	bl	80015b4 <LL_RTC_EnableWriteProtection>

  return;
 8001744:	bf00      	nop
}
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40002800 	.word	0x40002800

0800174c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001750:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001754:	f7ff fe2a 	bl	80013ac <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001758:	f00e ffca 	bl	80106f0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800175c:	2004      	movs	r0, #4
 800175e:	f7ff fddd 	bl	800131c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001762:	bf00      	nop
}
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 800176e:	f00d f833 	bl	800e7d8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001772:	4a11      	ldr	r2, [pc, #68]	@ (80017b8 <appe_Tl_Init+0x50>)
 8001774:	2100      	movs	r1, #0
 8001776:	2008      	movs	r0, #8
 8001778:	f00f f8f8 	bl	801096c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800177c:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <appe_Tl_Init+0x54>)
 800177e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <appe_Tl_Init+0x58>)
 8001782:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001784:	463b      	mov	r3, r7
 8001786:	4619      	mov	r1, r3
 8001788:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <appe_Tl_Init+0x5c>)
 800178a:	f00c fee7 	bl	800e55c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <appe_Tl_Init+0x60>)
 8001790:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <appe_Tl_Init+0x64>)
 8001794:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <appe_Tl_Init+0x68>)
 8001798:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800179a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800179e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00d f959 	bl	800ea5c <TL_MM_Init>

  TL_Enable();
 80017aa:	f00d f80f 	bl	800e7cc <TL_Enable>

  return;
 80017ae:	bf00      	nop
}
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	0800e595 	.word	0x0800e595
 80017bc:	20030734 	.word	0x20030734
 80017c0:	080017d5 	.word	0x080017d5
 80017c4:	080017ed 	.word	0x080017ed
 80017c8:	2003094c 	.word	0x2003094c
 80017cc:	20030840 	.word	0x20030840
 80017d0:	200301f8 	.word	0x200301f8

080017d4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80017de:	bf00      	nop
}
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	330b      	adds	r3, #11
 80017fa:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001806:	2b07      	cmp	r3, #7
 8001808:	f200 80d0 	bhi.w	80019ac <APPE_SysUserEvtRx+0x1c0>
 800180c:	a201      	add	r2, pc, #4	@ (adr r2, 8001814 <APPE_SysUserEvtRx+0x28>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	08001835 	.word	0x08001835
 8001818:	080018c7 	.word	0x080018c7
 800181c:	080018e9 	.word	0x080018e9
 8001820:	080019ad 	.word	0x080019ad
 8001824:	0800192d 	.word	0x0800192d
 8001828:	08001951 	.word	0x08001951
 800182c:	0800196d 	.word	0x0800196d
 8001830:	08001991 	.word	0x08001991
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4618      	mov	r0, r3
 800183a:	f00c fc45 	bl	800e0c8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800183e:	485e      	ldr	r0, [pc, #376]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 8001840:	f00d fa0c 	bl	800ec5c <DbgTraceGetFileName>
 8001844:	4601      	mov	r1, r0
 8001846:	f240 136b 	movw	r3, #363	@ 0x16b
 800184a:	4a5c      	ldr	r2, [pc, #368]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 800184c:	485c      	ldr	r0, [pc, #368]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 800184e:	f00f fa8d 	bl	8010d6c <iprintf>
 8001852:	7b3b      	ldrb	r3, [r7, #12]
 8001854:	4619      	mov	r1, r3
 8001856:	7b7b      	ldrb	r3, [r7, #13]
 8001858:	461a      	mov	r2, r3
 800185a:	7bbb      	ldrb	r3, [r7, #14]
 800185c:	4859      	ldr	r0, [pc, #356]	@ (80019c4 <APPE_SysUserEvtRx+0x1d8>)
 800185e:	f00f fa85 	bl	8010d6c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001862:	4855      	ldr	r0, [pc, #340]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 8001864:	f00d f9fa 	bl	800ec5c <DbgTraceGetFileName>
 8001868:	4601      	mov	r1, r0
 800186a:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800186e:	4a53      	ldr	r2, [pc, #332]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 8001870:	4853      	ldr	r0, [pc, #332]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 8001872:	f00f fa7b 	bl	8010d6c <iprintf>
 8001876:	7c3b      	ldrb	r3, [r7, #16]
 8001878:	4619      	mov	r1, r3
 800187a:	4853      	ldr	r0, [pc, #332]	@ (80019c8 <APPE_SysUserEvtRx+0x1dc>)
 800187c:	f00f fa76 	bl	8010d6c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001880:	484d      	ldr	r0, [pc, #308]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 8001882:	f00d f9eb 	bl	800ec5c <DbgTraceGetFileName>
 8001886:	4601      	mov	r1, r0
 8001888:	f240 136d 	movw	r3, #365	@ 0x16d
 800188c:	4a4b      	ldr	r2, [pc, #300]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 800188e:	484c      	ldr	r0, [pc, #304]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 8001890:	f00f fa6c 	bl	8010d6c <iprintf>
 8001894:	7dbb      	ldrb	r3, [r7, #22]
 8001896:	4619      	mov	r1, r3
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	461a      	mov	r2, r3
 800189c:	7e3b      	ldrb	r3, [r7, #24]
 800189e:	484b      	ldr	r0, [pc, #300]	@ (80019cc <APPE_SysUserEvtRx+0x1e0>)
 80018a0:	f00f fa64 	bl	8010d6c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80018a4:	4844      	ldr	r0, [pc, #272]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 80018a6:	f00d f9d9 	bl	800ec5c <DbgTraceGetFileName>
 80018aa:	4601      	mov	r1, r0
 80018ac:	f240 136f 	movw	r3, #367	@ 0x16f
 80018b0:	4a42      	ldr	r2, [pc, #264]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 80018b2:	4843      	ldr	r0, [pc, #268]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 80018b4:	f00f fa5a 	bl	8010d6c <iprintf>
 80018b8:	4845      	ldr	r0, [pc, #276]	@ (80019d0 <APPE_SysUserEvtRx+0x1e4>)
 80018ba:	f00f fa57 	bl	8010d6c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f8e0 	bl	8001a84 <APPE_SysEvtReadyProcessing>
    break;
 80018c4:	e073      	b.n	80019ae <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80018c6:	483c      	ldr	r0, [pc, #240]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 80018c8:	f00d f9c8 	bl	800ec5c <DbgTraceGetFileName>
 80018cc:	4601      	mov	r1, r0
 80018ce:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 80018d2:	4a3a      	ldr	r2, [pc, #232]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 80018d4:	483a      	ldr	r0, [pc, #232]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 80018d6:	f00f fa49 	bl	8010d6c <iprintf>
 80018da:	483e      	ldr	r0, [pc, #248]	@ (80019d4 <APPE_SysUserEvtRx+0x1e8>)
 80018dc:	f00f fa46 	bl	8010d6c <iprintf>
    APPE_SysEvtError(pPayload);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f885 	bl	80019f0 <APPE_SysEvtError>
    break;
 80018e6:	e062      	b.n	80019ae <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80018e8:	4833      	ldr	r0, [pc, #204]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 80018ea:	f00d f9b7 	bl	800ec5c <DbgTraceGetFileName>
 80018ee:	4601      	mov	r1, r0
 80018f0:	f240 1379 	movw	r3, #377	@ 0x179
 80018f4:	4a31      	ldr	r2, [pc, #196]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 80018f6:	4832      	ldr	r0, [pc, #200]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 80018f8:	f00f fa38 	bl	8010d6c <iprintf>
 80018fc:	4836      	ldr	r0, [pc, #216]	@ (80019d8 <APPE_SysUserEvtRx+0x1ec>)
 80018fe:	f00f faa5 	bl	8010e4c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001902:	482d      	ldr	r0, [pc, #180]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 8001904:	f00d f9aa 	bl	800ec5c <DbgTraceGetFileName>
 8001908:	4601      	mov	r1, r0
 800190a:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
 800190e:	4a2b      	ldr	r2, [pc, #172]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 8001910:	482b      	ldr	r0, [pc, #172]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 8001912:	f00f fa2b 	bl	8010d6c <iprintf>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3302      	adds	r3, #2
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	3302      	adds	r3, #2
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	461a      	mov	r2, r3
 8001924:	482d      	ldr	r0, [pc, #180]	@ (80019dc <APPE_SysUserEvtRx+0x1f0>)
 8001926:	f00f fa21 	bl	8010d6c <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800192a:	e040      	b.n	80019ae <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800192c:	4822      	ldr	r0, [pc, #136]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 800192e:	f00d f995 	bl	800ec5c <DbgTraceGetFileName>
 8001932:	4601      	mov	r1, r0
 8001934:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001938:	4a20      	ldr	r2, [pc, #128]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 800193a:	4821      	ldr	r0, [pc, #132]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 800193c:	f00f fa16 	bl	8010d6c <iprintf>
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	3302      	adds	r3, #2
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	4825      	ldr	r0, [pc, #148]	@ (80019e0 <APPE_SysUserEvtRx+0x1f4>)
 800194a:	f00f fa0f 	bl	8010d6c <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800194e:	e02e      	b.n	80019ae <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001950:	4819      	ldr	r0, [pc, #100]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 8001952:	f00d f983 	bl	800ec5c <DbgTraceGetFileName>
 8001956:	4601      	mov	r1, r0
 8001958:	f240 1385 	movw	r3, #389	@ 0x185
 800195c:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 800195e:	4818      	ldr	r0, [pc, #96]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 8001960:	f00f fa04 	bl	8010d6c <iprintf>
 8001964:	481f      	ldr	r0, [pc, #124]	@ (80019e4 <APPE_SysUserEvtRx+0x1f8>)
 8001966:	f00f fa01 	bl	8010d6c <iprintf>
    break;
 800196a:	e020      	b.n	80019ae <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800196c:	4812      	ldr	r0, [pc, #72]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 800196e:	f00d f975 	bl	800ec5c <DbgTraceGetFileName>
 8001972:	4601      	mov	r1, r0
 8001974:	f240 1389 	movw	r3, #393	@ 0x189
 8001978:	4a10      	ldr	r2, [pc, #64]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 800197a:	4811      	ldr	r0, [pc, #68]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 800197c:	f00f f9f6 	bl	8010d6c <iprintf>
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3302      	adds	r3, #2
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	4817      	ldr	r0, [pc, #92]	@ (80019e8 <APPE_SysUserEvtRx+0x1fc>)
 800198a:	f00f f9ef 	bl	8010d6c <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800198e:	e00e      	b.n	80019ae <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001990:	4809      	ldr	r0, [pc, #36]	@ (80019b8 <APPE_SysUserEvtRx+0x1cc>)
 8001992:	f00d f963 	bl	800ec5c <DbgTraceGetFileName>
 8001996:	4601      	mov	r1, r0
 8001998:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <APPE_SysUserEvtRx+0x1d0>)
 800199e:	4808      	ldr	r0, [pc, #32]	@ (80019c0 <APPE_SysUserEvtRx+0x1d4>)
 80019a0:	f00f f9e4 	bl	8010d6c <iprintf>
 80019a4:	4811      	ldr	r0, [pc, #68]	@ (80019ec <APPE_SysUserEvtRx+0x200>)
 80019a6:	f00f f9e1 	bl	8010d6c <iprintf>
    break;
 80019aa:	e000      	b.n	80019ae <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80019ac:	bf00      	nop
  }

  return;
 80019ae:	bf00      	nop
}
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	08012084 	.word	0x08012084
 80019bc:	08013400 	.word	0x08013400
 80019c0:	0801209c 	.word	0x0801209c
 80019c4:	080120b0 	.word	0x080120b0
 80019c8:	080120d4 	.word	0x080120d4
 80019cc:	080120f0 	.word	0x080120f0
 80019d0:	08012108 	.word	0x08012108
 80019d4:	08012128 	.word	0x08012128
 80019d8:	0801214c 	.word	0x0801214c
 80019dc:	0801219c 	.word	0x0801219c
 80019e0:	080121c4 	.word	0x080121c4
 80019e4:	08012200 	.word	0x08012200
 80019e8:	08012224 	.word	0x08012224
 80019ec:	08012260 	.word	0x08012260

080019f0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	330b      	adds	r3, #11
 80019fe:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3302      	adds	r3, #2
 8001a04:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001a06:	4819      	ldr	r0, [pc, #100]	@ (8001a6c <APPE_SysEvtError+0x7c>)
 8001a08:	f00d f928 	bl	800ec5c <DbgTraceGetFileName>
 8001a0c:	4601      	mov	r1, r0
 8001a0e:	f44f 73d3 	mov.w	r3, #422	@ 0x1a6
 8001a12:	4a17      	ldr	r2, [pc, #92]	@ (8001a70 <APPE_SysEvtError+0x80>)
 8001a14:	4817      	ldr	r0, [pc, #92]	@ (8001a74 <APPE_SysEvtError+0x84>)
 8001a16:	f00f f9a9 	bl	8010d6c <iprintf>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4815      	ldr	r0, [pc, #84]	@ (8001a78 <APPE_SysEvtError+0x88>)
 8001a22:	f00f f9a3 	bl	8010d6c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001a2e:	480f      	ldr	r0, [pc, #60]	@ (8001a6c <APPE_SysEvtError+0x7c>)
 8001a30:	f00d f914 	bl	800ec5c <DbgTraceGetFileName>
 8001a34:	4601      	mov	r1, r0
 8001a36:	f240 13ab 	movw	r3, #427	@ 0x1ab
 8001a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <APPE_SysEvtError+0x80>)
 8001a3c:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <APPE_SysEvtError+0x84>)
 8001a3e:	f00f f995 	bl	8010d6c <iprintf>
 8001a42:	480e      	ldr	r0, [pc, #56]	@ (8001a7c <APPE_SysEvtError+0x8c>)
 8001a44:	f00f fa02 	bl	8010e4c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001a48:	e00d      	b.n	8001a66 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001a4a:	4808      	ldr	r0, [pc, #32]	@ (8001a6c <APPE_SysEvtError+0x7c>)
 8001a4c:	f00d f906 	bl	800ec5c <DbgTraceGetFileName>
 8001a50:	4601      	mov	r1, r0
 8001a52:	f240 13af 	movw	r3, #431	@ 0x1af
 8001a56:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <APPE_SysEvtError+0x80>)
 8001a58:	4806      	ldr	r0, [pc, #24]	@ (8001a74 <APPE_SysEvtError+0x84>)
 8001a5a:	f00f f987 	bl	8010d6c <iprintf>
 8001a5e:	4808      	ldr	r0, [pc, #32]	@ (8001a80 <APPE_SysEvtError+0x90>)
 8001a60:	f00f f9f4 	bl	8010e4c <puts>
  return;
 8001a64:	bf00      	nop
}
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	08012084 	.word	0x08012084
 8001a70:	08013414 	.word	0x08013414
 8001a74:	0801209c 	.word	0x0801209c
 8001a78:	08012284 	.word	0x08012284
 8001a7c:	080122b4 	.word	0x080122b4
 8001a80:	080122f0 	.word	0x080122f0

08001a84 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001a8c:	f107 0308 	add.w	r3, r7, #8
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	330b      	adds	r3, #11
 8001aa8:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3302      	adds	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d146      	bne.n	8001b46 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001ab8:	4836      	ldr	r0, [pc, #216]	@ (8001b94 <APPE_SysEvtReadyProcessing+0x110>)
 8001aba:	f00d f8cf 	bl	800ec5c <DbgTraceGetFileName>
 8001abe:	4601      	mov	r1, r0
 8001ac0:	f240 13c5 	movw	r3, #453	@ 0x1c5
 8001ac4:	4a34      	ldr	r2, [pc, #208]	@ (8001b98 <APPE_SysEvtReadyProcessing+0x114>)
 8001ac6:	4835      	ldr	r0, [pc, #212]	@ (8001b9c <APPE_SysEvtReadyProcessing+0x118>)
 8001ac8:	f00f f950 	bl	8010d6c <iprintf>
 8001acc:	4834      	ldr	r0, [pc, #208]	@ (8001ba0 <APPE_SysEvtReadyProcessing+0x11c>)
 8001ace:	f00f f9bd 	bl	8010e4c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001ad2:	f7ff fc07 	bl	80012e4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001ad6:	230f      	movs	r3, #15
 8001ad8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001ada:	237f      	movs	r3, #127	@ 0x7f
 8001adc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001ade:	f7ff fce9 	bl	80014b4 <LL_DBGMCU_GetRevisionID>
 8001ae2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001ae4:	482b      	ldr	r0, [pc, #172]	@ (8001b94 <APPE_SysEvtReadyProcessing+0x110>)
 8001ae6:	f00d f8b9 	bl	800ec5c <DbgTraceGetFileName>
 8001aea:	4601      	mov	r1, r0
 8001aec:	f240 13dd 	movw	r3, #477	@ 0x1dd
 8001af0:	4a29      	ldr	r2, [pc, #164]	@ (8001b98 <APPE_SysEvtReadyProcessing+0x114>)
 8001af2:	482a      	ldr	r0, [pc, #168]	@ (8001b9c <APPE_SysEvtReadyProcessing+0x118>)
 8001af4:	f00f f93a 	bl	8010d6c <iprintf>
 8001af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001afa:	482a      	ldr	r0, [pc, #168]	@ (8001ba4 <APPE_SysEvtReadyProcessing+0x120>)
 8001afc:	f00f f936 	bl	8010d6c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001b06:	f7ff fcc7 	bl	8001498 <LL_DBGMCU_GetDeviceID>
 8001b0a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001b0c:	4821      	ldr	r0, [pc, #132]	@ (8001b94 <APPE_SysEvtReadyProcessing+0x110>)
 8001b0e:	f00d f8a5 	bl	800ec5c <DbgTraceGetFileName>
 8001b12:	4601      	mov	r1, r0
 8001b14:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 8001b18:	4a1f      	ldr	r2, [pc, #124]	@ (8001b98 <APPE_SysEvtReadyProcessing+0x114>)
 8001b1a:	4820      	ldr	r0, [pc, #128]	@ (8001b9c <APPE_SysEvtReadyProcessing+0x118>)
 8001b1c:	f00f f926 	bl	8010d6c <iprintf>
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	4821      	ldr	r0, [pc, #132]	@ (8001ba8 <APPE_SysEvtReadyProcessing+0x124>)
 8001b24:	f00f f922 	bl	8010d6c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00c fab2 	bl	800e09c <SHCI_C2_Config>

    APP_BLE_Init();
 8001b38:	f00d f9c2 	bl	800eec0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f00e fde8 	bl	8010714 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001b44:	e022      	b.n	8001b8c <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d110      	bne.n	8001b70 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001b4e:	4811      	ldr	r0, [pc, #68]	@ (8001b94 <APPE_SysEvtReadyProcessing+0x110>)
 8001b50:	f00d f884 	bl	800ec5c <DbgTraceGetFileName>
 8001b54:	4601      	mov	r1, r0
 8001b56:	f240 13ef 	movw	r3, #495	@ 0x1ef
 8001b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b98 <APPE_SysEvtReadyProcessing+0x114>)
 8001b5c:	480f      	ldr	r0, [pc, #60]	@ (8001b9c <APPE_SysEvtReadyProcessing+0x118>)
 8001b5e:	f00f f905 	bl	8010d6c <iprintf>
 8001b62:	4812      	ldr	r0, [pc, #72]	@ (8001bac <APPE_SysEvtReadyProcessing+0x128>)
 8001b64:	f00f f902 	bl	8010d6c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
  return;
 8001b6e:	e00d      	b.n	8001b8c <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001b70:	4808      	ldr	r0, [pc, #32]	@ (8001b94 <APPE_SysEvtReadyProcessing+0x110>)
 8001b72:	f00d f873 	bl	800ec5c <DbgTraceGetFileName>
 8001b76:	4601      	mov	r1, r0
 8001b78:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8001b7c:	4a06      	ldr	r2, [pc, #24]	@ (8001b98 <APPE_SysEvtReadyProcessing+0x114>)
 8001b7e:	4807      	ldr	r0, [pc, #28]	@ (8001b9c <APPE_SysEvtReadyProcessing+0x118>)
 8001b80:	f00f f8f4 	bl	8010d6c <iprintf>
 8001b84:	480a      	ldr	r0, [pc, #40]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x12c>)
 8001b86:	f00f f8f1 	bl	8010d6c <iprintf>
  return;
 8001b8a:	bf00      	nop
}
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	08012084 	.word	0x08012084
 8001b98:	08013428 	.word	0x08013428
 8001b9c:	0801209c 	.word	0x0801209c
 8001ba0:	08012328 	.word	0x08012328
 8001ba4:	08012344 	.word	0x08012344
 8001ba8:	08012368 	.word	0x08012368
 8001bac:	08012388 	.word	0x08012388
 8001bb0:	080123bc 	.word	0x080123bc

08001bb4 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f006 fc46 	bl	800844c <HAL_GetTick>
 8001bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d00a      	beq.n	8001be4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001bce:	f006 fc55 	bl	800847c <HAL_GetTickFreq>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bdc:	e002      	b.n	8001be4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001bde:	f7ff fcd9 	bl	8001594 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001be2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001be4:	f006 fc32 	bl	800844c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f4      	bhi.n	8001bde <HAL_Delay+0x2a>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295
 8001c06:	f00e fdb5 	bl	8010774 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001c12:	bf00      	nop
}
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c26:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2a:	f00e fda3 	bl	8010774 <UTIL_SEQ_Run>
  return;
 8001c2e:	bf00      	nop
}
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2008      	movs	r0, #8
 8001c42:	f00e feb5 	bl	80109b0 <UTIL_SEQ_SetTask>
  return;
 8001c46:	bf00      	nop
}
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001c56:	2002      	movs	r0, #2
 8001c58:	f00e ff16 	bl	8010a88 <UTIL_SEQ_SetEvt>
  return;
 8001c5c:	bf00      	nop
}
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f00e ff2b 	bl	8010ac8 <UTIL_SEQ_WaitEvt>
  return;
 8001c72:	bf00      	nop
}
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <LL_EXTI_EnableIT_0_31>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001c86:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001c8a:	4905      	ldr	r1, [pc, #20]	@ (8001ca0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	58000800 	.word	0x58000800

08001ca4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4904      	ldr	r1, [pc, #16]	@ (8001cc4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]

}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	58000800 	.word	0x58000800

08001cc8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <ReadRtcSsrValue+0x3c>)
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <ReadRtcSsrValue+0x3c>)
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001cde:	e005      	b.n	8001cec <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ce4:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <ReadRtcSsrValue+0x3c>)
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1f5      	bne.n	8001ce0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001cf4:	683b      	ldr	r3, [r7, #0]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40002800 	.word	0x40002800

08001d08 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460a      	mov	r2, r1
 8001d12:	71fb      	strb	r3, [r7, #7]
 8001d14:	4613      	mov	r3, r2
 8001d16:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001d18:	79ba      	ldrb	r2, [r7, #6]
 8001d1a:	491d      	ldr	r1, [pc, #116]	@ (8001d90 <LinkTimerAfter+0x88>)
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	3315      	adds	r3, #21
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d009      	beq.n	8001d46 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	4916      	ldr	r1, [pc, #88]	@ (8001d90 <LinkTimerAfter+0x88>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	3314      	adds	r3, #20
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001d46:	79fa      	ldrb	r2, [r7, #7]
 8001d48:	4911      	ldr	r1, [pc, #68]	@ (8001d90 <LinkTimerAfter+0x88>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	3315      	adds	r3, #21
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <LinkTimerAfter+0x88>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3314      	adds	r3, #20
 8001d6a:	79ba      	ldrb	r2, [r7, #6]
 8001d6c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001d6e:	79ba      	ldrb	r2, [r7, #6]
 8001d70:	4907      	ldr	r1, [pc, #28]	@ (8001d90 <LinkTimerAfter+0x88>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3315      	adds	r3, #21
 8001d7e:	79fa      	ldrb	r2, [r7, #7]
 8001d80:	701a      	strb	r2, [r3, #0]

  return;
 8001d82:	bf00      	nop
}
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000230 	.word	0x20000230

08001d94 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001da4:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <LinkTimerBefore+0xb8>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	79ba      	ldrb	r2, [r7, #6]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d032      	beq.n	8001e16 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001db0:	79ba      	ldrb	r2, [r7, #6]
 8001db2:	4927      	ldr	r1, [pc, #156]	@ (8001e50 <LinkTimerBefore+0xbc>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3314      	adds	r3, #20
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	4922      	ldr	r1, [pc, #136]	@ (8001e50 <LinkTimerBefore+0xbc>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3315      	adds	r3, #21
 8001dd4:	79fa      	ldrb	r2, [r7, #7]
 8001dd6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	491d      	ldr	r1, [pc, #116]	@ (8001e50 <LinkTimerBefore+0xbc>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	3315      	adds	r3, #21
 8001de8:	79ba      	ldrb	r2, [r7, #6]
 8001dea:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001dec:	79fa      	ldrb	r2, [r7, #7]
 8001dee:	4918      	ldr	r1, [pc, #96]	@ (8001e50 <LinkTimerBefore+0xbc>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	3314      	adds	r3, #20
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e00:	79ba      	ldrb	r2, [r7, #6]
 8001e02:	4913      	ldr	r1, [pc, #76]	@ (8001e50 <LinkTimerBefore+0xbc>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3314      	adds	r3, #20
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001e14:	e014      	b.n	8001e40 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	490d      	ldr	r1, [pc, #52]	@ (8001e50 <LinkTimerBefore+0xbc>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	3315      	adds	r3, #21
 8001e26:	79ba      	ldrb	r2, [r7, #6]
 8001e28:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e2a:	79ba      	ldrb	r2, [r7, #6]
 8001e2c:	4908      	ldr	r1, [pc, #32]	@ (8001e50 <LinkTimerBefore+0xbc>)
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	3314      	adds	r3, #20
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	701a      	strb	r2, [r3, #0]
  return;
 8001e3e:	bf00      	nop
}
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200002c0 	.word	0x200002c0
 8001e50:	20000230 	.word	0x20000230

08001e54 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f98 <linkTimer+0x144>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d118      	bne.n	8001e9a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e68:	4b4b      	ldr	r3, [pc, #300]	@ (8001f98 <linkTimer+0x144>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f9c <linkTimer+0x148>)
 8001e70:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001e72:	4a49      	ldr	r2, [pc, #292]	@ (8001f98 <linkTimer+0x144>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001e78:	79fa      	ldrb	r2, [r7, #7]
 8001e7a:	4949      	ldr	r1, [pc, #292]	@ (8001fa0 <linkTimer+0x14c>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	3315      	adds	r3, #21
 8001e88:	2206      	movs	r2, #6
 8001e8a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e8c:	4b45      	ldr	r3, [pc, #276]	@ (8001fa4 <linkTimer+0x150>)
 8001e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e92:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	81fb      	strh	r3, [r7, #14]
 8001e98:	e078      	b.n	8001f8c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001e9a:	f000 f909 	bl	80020b0 <ReturnTimeElapsed>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	493e      	ldr	r1, [pc, #248]	@ (8001fa0 <linkTimer+0x14c>)
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	89fb      	ldrh	r3, [r7, #14]
 8001eb6:	79fa      	ldrb	r2, [r7, #7]
 8001eb8:	4419      	add	r1, r3
 8001eba:	4839      	ldr	r0, [pc, #228]	@ (8001fa0 <linkTimer+0x14c>)
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4403      	add	r3, r0
 8001ec6:	3308      	adds	r3, #8
 8001ec8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001eca:	79fa      	ldrb	r2, [r7, #7]
 8001ecc:	4934      	ldr	r1, [pc, #208]	@ (8001fa0 <linkTimer+0x14c>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3308      	adds	r3, #8
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001ede:	4b2e      	ldr	r3, [pc, #184]	@ (8001f98 <linkTimer+0x144>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8001fa0 <linkTimer+0x14c>)
 8001ee8:	460b      	mov	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	440b      	add	r3, r1
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d337      	bcc.n	8001f6c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001efc:	4b26      	ldr	r3, [pc, #152]	@ (8001f98 <linkTimer+0x144>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f02:	7b7a      	ldrb	r2, [r7, #13]
 8001f04:	4926      	ldr	r1, [pc, #152]	@ (8001fa0 <linkTimer+0x14c>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3315      	adds	r3, #21
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f16:	e013      	b.n	8001f40 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001f18:	7b7a      	ldrb	r2, [r7, #13]
 8001f1a:	4921      	ldr	r1, [pc, #132]	@ (8001fa0 <linkTimer+0x14c>)
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	3315      	adds	r3, #21
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001f2c:	7b7a      	ldrb	r2, [r7, #13]
 8001f2e:	491c      	ldr	r1, [pc, #112]	@ (8001fa0 <linkTimer+0x14c>)
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	3315      	adds	r3, #21
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f40:	7b3b      	ldrb	r3, [r7, #12]
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d00b      	beq.n	8001f5e <linkTimer+0x10a>
 8001f46:	7b3a      	ldrb	r2, [r7, #12]
 8001f48:	4915      	ldr	r1, [pc, #84]	@ (8001fa0 <linkTimer+0x14c>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3308      	adds	r3, #8
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d2dc      	bcs.n	8001f18 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001f5e:	7b7a      	ldrb	r2, [r7, #13]
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fecf 	bl	8001d08 <LinkTimerAfter>
 8001f6a:	e00f      	b.n	8001f8c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <linkTimer+0x144>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff0c 	bl	8001d94 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <linkTimer+0x144>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <linkTimer+0x148>)
 8001f84:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001f86:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <linkTimer+0x144>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200002c0 	.word	0x200002c0
 8001f9c:	200002c1 	.word	0x200002c1
 8001fa0:	20000230 	.word	0x20000230
 8001fa4:	200002c4 	.word	0x200002c4

08001fa8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	71fb      	strb	r3, [r7, #7]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001fb8:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <UnlinkTimer+0xf8>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d111      	bne.n	8001fe8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001fc4:	4b36      	ldr	r3, [pc, #216]	@ (80020a0 <UnlinkTimer+0xf8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b36      	ldr	r3, [pc, #216]	@ (80020a4 <UnlinkTimer+0xfc>)
 8001fcc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001fce:	79fa      	ldrb	r2, [r7, #7]
 8001fd0:	4935      	ldr	r1, [pc, #212]	@ (80020a8 <UnlinkTimer+0x100>)
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	3315      	adds	r3, #21
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80020a0 <UnlinkTimer+0xf8>)
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e03e      	b.n	8002066 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001fe8:	79fa      	ldrb	r2, [r7, #7]
 8001fea:	492f      	ldr	r1, [pc, #188]	@ (80020a8 <UnlinkTimer+0x100>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3314      	adds	r3, #20
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001ffc:	79fa      	ldrb	r2, [r7, #7]
 8001ffe:	492a      	ldr	r1, [pc, #168]	@ (80020a8 <UnlinkTimer+0x100>)
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	3315      	adds	r3, #21
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002010:	79f9      	ldrb	r1, [r7, #7]
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	4824      	ldr	r0, [pc, #144]	@ (80020a8 <UnlinkTimer+0x100>)
 8002016:	460b      	mov	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	440b      	add	r3, r1
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4403      	add	r3, r0
 8002020:	3315      	adds	r3, #21
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b2d8      	uxtb	r0, r3
 8002026:	4920      	ldr	r1, [pc, #128]	@ (80020a8 <UnlinkTimer+0x100>)
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3315      	adds	r3, #21
 8002034:	4602      	mov	r2, r0
 8002036:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002038:	7bbb      	ldrb	r3, [r7, #14]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d013      	beq.n	8002066 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800203e:	79f9      	ldrb	r1, [r7, #7]
 8002040:	7bba      	ldrb	r2, [r7, #14]
 8002042:	4819      	ldr	r0, [pc, #100]	@ (80020a8 <UnlinkTimer+0x100>)
 8002044:	460b      	mov	r3, r1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	440b      	add	r3, r1
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4403      	add	r3, r0
 800204e:	3314      	adds	r3, #20
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b2d8      	uxtb	r0, r3
 8002054:	4914      	ldr	r1, [pc, #80]	@ (80020a8 <UnlinkTimer+0x100>)
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	3314      	adds	r3, #20
 8002062:	4602      	mov	r2, r0
 8002064:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002066:	79fa      	ldrb	r2, [r7, #7]
 8002068:	490f      	ldr	r1, [pc, #60]	@ (80020a8 <UnlinkTimer+0x100>)
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	330c      	adds	r3, #12
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <UnlinkTimer+0xf8>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b06      	cmp	r3, #6
 8002082:	d107      	bne.n	8002094 <UnlinkTimer+0xec>
 8002084:	79bb      	ldrb	r3, [r7, #6]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d104      	bne.n	8002094 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <UnlinkTimer+0x104>)
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	601a      	str	r2, [r3, #0]
  }

  return;
 8002092:	bf00      	nop
 8002094:	bf00      	nop
}
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	200002c0 	.word	0x200002c0
 80020a4:	200002c1 	.word	0x200002c1
 80020a8:	20000230 	.word	0x20000230
 80020ac:	200002c4 	.word	0x200002c4

080020b0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <ReturnTimeElapsed+0x70>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d026      	beq.n	800210e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80020c0:	f7ff fe02 	bl	8001cc8 <ReadRtcSsrValue>
 80020c4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80020c6:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <ReturnTimeElapsed+0x70>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d805      	bhi.n	80020dc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <ReturnTimeElapsed+0x70>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	e00a      	b.n	80020f2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <ReturnTimeElapsed+0x74>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <ReturnTimeElapsed+0x70>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80020f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <ReturnTimeElapsed+0x78>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002100:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <ReturnTimeElapsed+0x7c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	40d3      	lsrs	r3, r2
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	e001      	b.n	8002112 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	b29b      	uxth	r3, r3
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200002c4 	.word	0x200002c4
 8002124:	200002cc 	.word	0x200002cc
 8002128:	200002ca 	.word	0x200002ca
 800212c:	200002c9 	.word	0x200002c9

08002130 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d108      	bne.n	8002152 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002140:	f7ff fdc2 	bl	8001cc8 <ReadRtcSsrValue>
 8002144:	4603      	mov	r3, r0
 8002146:	4a21      	ldr	r2, [pc, #132]	@ (80021cc <RestartWakeupCounter+0x9c>)
 8002148:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800214a:	2003      	movs	r0, #3
 800214c:	f006 fb1f 	bl	800878e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002150:	e039      	b.n	80021c6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d803      	bhi.n	8002160 <RestartWakeupCounter+0x30>
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <RestartWakeupCounter+0xa0>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d002      	beq.n	8002166 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	3b01      	subs	r3, #1
 8002164:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002166:	bf00      	nop
 8002168:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <RestartWakeupCounter+0xa4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f8      	beq.n	8002168 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002176:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <RestartWakeupCounter+0xa4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <RestartWakeupCounter+0xa4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002186:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <RestartWakeupCounter+0xa8>)
 800218a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800218e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002190:	2003      	movs	r0, #3
 8002192:	f006 fb0a 	bl	80087aa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <RestartWakeupCounter+0xac>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	490e      	ldr	r1, [pc, #56]	@ (80021dc <RestartWakeupCounter+0xac>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021a6:	f7ff fd8f 	bl	8001cc8 <ReadRtcSsrValue>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a07      	ldr	r2, [pc, #28]	@ (80021cc <RestartWakeupCounter+0x9c>)
 80021ae:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80021b0:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <RestartWakeupCounter+0xa4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <RestartWakeupCounter+0xa4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021be:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80021c0:	f3af 8000 	nop.w
  return ;
 80021c4:	bf00      	nop
}
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200002c4 	.word	0x200002c4
 80021d0:	200002c9 	.word	0x200002c9
 80021d4:	2000030c 	.word	0x2000030c
 80021d8:	58000800 	.word	0x58000800
 80021dc:	40002800 	.word	0x40002800

080021e0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80021e6:	4b45      	ldr	r3, [pc, #276]	@ (80022fc <RescheduleTimerList+0x11c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f2:	d107      	bne.n	8002204 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80021f4:	bf00      	nop
 80021f6:	4b42      	ldr	r3, [pc, #264]	@ (8002300 <RescheduleTimerList+0x120>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f8      	bne.n	80021f6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002204:	4b3e      	ldr	r3, [pc, #248]	@ (8002300 <RescheduleTimerList+0x120>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	4b3d      	ldr	r3, [pc, #244]	@ (8002300 <RescheduleTimerList+0x120>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002212:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002214:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <RescheduleTimerList+0x124>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	493a      	ldr	r1, [pc, #232]	@ (8002308 <RescheduleTimerList+0x128>)
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	3308      	adds	r3, #8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800222e:	f7ff ff3f 	bl	80020b0 <ReturnTimeElapsed>
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	429a      	cmp	r2, r3
 800223c:	d205      	bcs.n	800224a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002242:	4b32      	ldr	r3, [pc, #200]	@ (800230c <RescheduleTimerList+0x12c>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e04d      	b.n	80022e6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	4a30      	ldr	r2, [pc, #192]	@ (8002310 <RescheduleTimerList+0x130>)
 800224e:	8812      	ldrh	r2, [r2, #0]
 8002250:	b292      	uxth	r2, r2
 8002252:	4413      	add	r3, r2
 8002254:	461a      	mov	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4293      	cmp	r3, r2
 800225a:	d906      	bls.n	800226a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800225c:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <RescheduleTimerList+0x130>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002262:	4b2a      	ldr	r3, [pc, #168]	@ (800230c <RescheduleTimerList+0x12c>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e03d      	b.n	80022e6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	b29a      	uxth	r2, r3
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002274:	4b25      	ldr	r3, [pc, #148]	@ (800230c <RescheduleTimerList+0x12c>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800227a:	e034      	b.n	80022e6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	4922      	ldr	r1, [pc, #136]	@ (8002308 <RescheduleTimerList+0x128>)
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	3308      	adds	r3, #8
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	429a      	cmp	r2, r3
 8002292:	d20a      	bcs.n	80022aa <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	491c      	ldr	r1, [pc, #112]	@ (8002308 <RescheduleTimerList+0x128>)
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	3308      	adds	r3, #8
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e013      	b.n	80022d2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	4916      	ldr	r1, [pc, #88]	@ (8002308 <RescheduleTimerList+0x128>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	3308      	adds	r3, #8
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	1ac9      	subs	r1, r1, r3
 80022c2:	4811      	ldr	r0, [pc, #68]	@ (8002308 <RescheduleTimerList+0x128>)
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4403      	add	r3, r0
 80022ce:	3308      	adds	r3, #8
 80022d0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	490c      	ldr	r1, [pc, #48]	@ (8002308 <RescheduleTimerList+0x128>)
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	3315      	adds	r3, #21
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d1c7      	bne.n	800227c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80022ec:	89bb      	ldrh	r3, [r7, #12]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff1e 	bl	8002130 <RestartWakeupCounter>

  return ;
 80022f4:	bf00      	nop
}
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40002800 	.word	0x40002800
 8002300:	2000030c 	.word	0x2000030c
 8002304:	200002c0 	.word	0x200002c0
 8002308:	20000230 	.word	0x20000230
 800230c:	200002c8 	.word	0x200002c8
 8002310:	200002ce 	.word	0x200002ce

08002314 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800231a:	f3ef 8310 	mrs	r3, PRIMASK
 800231e:	617b      	str	r3, [r7, #20]
  return(result);
 8002320:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002328:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	22ca      	movs	r2, #202	@ 0xca
 800232e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002330:	4b57      	ldr	r3, [pc, #348]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2253      	movs	r2, #83	@ 0x53
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002338:	4b55      	ldr	r3, [pc, #340]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	4b54      	ldr	r3, [pc, #336]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002346:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002348:	4b52      	ldr	r3, [pc, #328]	@ (8002494 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002350:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002354:	4950      	ldr	r1, [pc, #320]	@ (8002498 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	330c      	adds	r3, #12
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d16e      	bne.n	8002448 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800236a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800236e:	494a      	ldr	r1, [pc, #296]	@ (8002498 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800237e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002382:	4945      	ldr	r1, [pc, #276]	@ (8002498 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3310      	adds	r3, #16
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002394:	4b41      	ldr	r3, [pc, #260]	@ (800249c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d04c      	beq.n	8002438 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800239e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023a2:	493d      	ldr	r1, [pc, #244]	@ (8002498 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	330d      	adds	r3, #13
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d124      	bne.n	8002402 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80023b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fdf2 	bl	8001fa8 <UnlinkTimer>
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f383 8810 	msr	PRIMASK, r3
}
 80023ce:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80023d0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023d4:	4930      	ldr	r1, [pc, #192]	@ (8002498 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	3304      	adds	r3, #4
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f9b8 	bl	8002760 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	22ca      	movs	r2, #202	@ 0xca
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80023f8:	4b25      	ldr	r3, [pc, #148]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2253      	movs	r2, #83	@ 0x53
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002400:	e012      	b.n	8002428 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f383 8810 	msr	PRIMASK, r3
}
 800240c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800240e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f920 	bl	8002658 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002418:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	22ca      	movs	r2, #202	@ 0xca
 800241e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2253      	movs	r2, #83	@ 0x53
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002428:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	4619      	mov	r1, r3
 8002430:	69b8      	ldr	r0, [r7, #24]
 8002432:	f000 fa1b 	bl	800286c <HW_TS_RTC_Int_AppNot>
 8002436:	e022      	b.n	800247e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002438:	f7ff fed2 	bl	80021e0 <RescheduleTimerList>
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f383 8810 	msr	PRIMASK, r3
}
 8002446:	e01a      	b.n	800247e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002448:	bf00      	nop
 800244a:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f8      	beq.n	800244a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002458:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002468:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800246a:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800246c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f383 8810 	msr	PRIMASK, r3
}
 800247c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800247e:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	22ff      	movs	r2, #255	@ 0xff
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002486:	bf00      	nop
}
 8002488:	3728      	adds	r7, #40	@ 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000030c 	.word	0x2000030c
 8002494:	200002c0 	.word	0x200002c0
 8002498:	20000230 	.word	0x20000230
 800249c:	200002c8 	.word	0x200002c8
 80024a0:	58000800 	.word	0x58000800

080024a4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024b0:	4b5e      	ldr	r3, [pc, #376]	@ (800262c <HW_TS_Init+0x188>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	22ca      	movs	r2, #202	@ 0xca
 80024b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80024b8:	4b5c      	ldr	r3, [pc, #368]	@ (800262c <HW_TS_Init+0x188>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2253      	movs	r2, #83	@ 0x53
 80024be:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80024c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002630 <HW_TS_Init+0x18c>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002630 <HW_TS_Init+0x18c>)
 80024c6:	f043 0320 	orr.w	r3, r3, #32
 80024ca:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80024cc:	4b58      	ldr	r3, [pc, #352]	@ (8002630 <HW_TS_Init+0x18c>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f1c3 0304 	rsb	r3, r3, #4
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b55      	ldr	r3, [pc, #340]	@ (8002634 <HW_TS_Init+0x190>)
 80024e0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80024e2:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HW_TS_Init+0x18c>)
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80024ea:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80024ee:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	fa92 f2a2 	rbit	r2, r2
 80024f6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	2a00      	cmp	r2, #0
 8002500:	d101      	bne.n	8002506 <HW_TS_Init+0x62>
  {
    return 32U;
 8002502:	2220      	movs	r2, #32
 8002504:	e003      	b.n	800250e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	fab2 f282 	clz	r2, r2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	40d3      	lsrs	r3, r2
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b48      	ldr	r3, [pc, #288]	@ (8002638 <HW_TS_Init+0x194>)
 8002518:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800251a:	4b45      	ldr	r3, [pc, #276]	@ (8002630 <HW_TS_Init+0x18c>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	b29b      	uxth	r3, r3
 8002520:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002524:	b29b      	uxth	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b44      	ldr	r3, [pc, #272]	@ (800263c <HW_TS_Init+0x198>)
 800252c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800252e:	4b43      	ldr	r3, [pc, #268]	@ (800263c <HW_TS_Init+0x198>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	3b01      	subs	r3, #1
 8002534:	4a40      	ldr	r2, [pc, #256]	@ (8002638 <HW_TS_Init+0x194>)
 8002536:	7812      	ldrb	r2, [r2, #0]
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002540:	4a3c      	ldr	r2, [pc, #240]	@ (8002634 <HW_TS_Init+0x190>)
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	40d3      	lsrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800254e:	4293      	cmp	r3, r2
 8002550:	d904      	bls.n	800255c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002552:	4b3b      	ldr	r3, [pc, #236]	@ (8002640 <HW_TS_Init+0x19c>)
 8002554:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002558:	801a      	strh	r2, [r3, #0]
 800255a:	e003      	b.n	8002564 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b37      	ldr	r3, [pc, #220]	@ (8002640 <HW_TS_Init+0x19c>)
 8002562:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002564:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002568:	f7ff fb9c 	bl	8001ca4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800256c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002570:	f7ff fb84 	bl	8001c7c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d13d      	bne.n	80025f6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800257a:	4b32      	ldr	r3, [pc, #200]	@ (8002644 <HW_TS_Init+0x1a0>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002580:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <HW_TS_Init+0x1a4>)
 8002582:	f04f 32ff 	mov.w	r2, #4294967295
 8002586:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002588:	2300      	movs	r3, #0
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	e00c      	b.n	80025a8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800258e:	7ffa      	ldrb	r2, [r7, #31]
 8002590:	492e      	ldr	r1, [pc, #184]	@ (800264c <HW_TS_Init+0x1a8>)
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	330c      	adds	r3, #12
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025a2:	7ffb      	ldrb	r3, [r7, #31]
 80025a4:	3301      	adds	r3, #1
 80025a6:	77fb      	strb	r3, [r7, #31]
 80025a8:	7ffb      	ldrb	r3, [r7, #31]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d9ef      	bls.n	800258e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80025ae:	4b28      	ldr	r3, [pc, #160]	@ (8002650 <HW_TS_Init+0x1ac>)
 80025b0:	2206      	movs	r2, #6
 80025b2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80025b4:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HW_TS_Init+0x188>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <HW_TS_Init+0x188>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80025c4:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HW_TS_Init+0x188>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HW_TS_Init+0x188>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80025d4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80025d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <HW_TS_Init+0x1b0>)
 80025d8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025dc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80025de:	2003      	movs	r0, #3
 80025e0:	f006 f8e3 	bl	80087aa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HW_TS_Init+0x188>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <HW_TS_Init+0x188>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e009      	b.n	800260a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80025f6:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <HW_TS_Init+0x188>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002604:	2003      	movs	r0, #3
 8002606:	f006 f8c2 	bl	800878e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800260a:	4b08      	ldr	r3, [pc, #32]	@ (800262c <HW_TS_Init+0x188>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	22ff      	movs	r2, #255	@ 0xff
 8002610:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002612:	2200      	movs	r2, #0
 8002614:	2103      	movs	r1, #3
 8002616:	2003      	movs	r0, #3
 8002618:	f006 f877 	bl	800870a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800261c:	2003      	movs	r0, #3
 800261e:	f006 f88e 	bl	800873e <HAL_NVIC_EnableIRQ>

  return;
 8002622:	bf00      	nop
}
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000030c 	.word	0x2000030c
 8002630:	40002800 	.word	0x40002800
 8002634:	200002c9 	.word	0x200002c9
 8002638:	200002ca 	.word	0x200002ca
 800263c:	200002cc 	.word	0x200002cc
 8002640:	200002ce 	.word	0x200002ce
 8002644:	200002c8 	.word	0x200002c8
 8002648:	200002c4 	.word	0x200002c4
 800264c:	20000230 	.word	0x20000230
 8002650:	200002c0 	.word	0x200002c0
 8002654:	58000800 	.word	0x58000800

08002658 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002662:	f3ef 8310 	mrs	r3, PRIMASK
 8002666:	60fb      	str	r3, [r7, #12]
  return(result);
 8002668:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800266a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800266c:	b672      	cpsid	i
}
 800266e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002670:	2003      	movs	r0, #3
 8002672:	f006 f872 	bl	800875a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002676:	4b34      	ldr	r3, [pc, #208]	@ (8002748 <HW_TS_Stop+0xf0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	22ca      	movs	r2, #202	@ 0xca
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <HW_TS_Stop+0xf0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2253      	movs	r2, #83	@ 0x53
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002686:	79fa      	ldrb	r2, [r7, #7]
 8002688:	4930      	ldr	r1, [pc, #192]	@ (800274c <HW_TS_Stop+0xf4>)
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	330c      	adds	r3, #12
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d142      	bne.n	8002724 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fc80 	bl	8001fa8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80026a8:	4b29      	ldr	r3, [pc, #164]	@ (8002750 <HW_TS_Stop+0xf8>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d12f      	bne.n	8002714 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80026b4:	4b27      	ldr	r3, [pc, #156]	@ (8002754 <HW_TS_Stop+0xfc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c0:	d107      	bne.n	80026d2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80026c2:	bf00      	nop
 80026c4:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <HW_TS_Stop+0xf0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f8      	bne.n	80026c4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80026d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <HW_TS_Stop+0xf0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <HW_TS_Stop+0xf0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80026e2:	bf00      	nop
 80026e4:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <HW_TS_Stop+0xf0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f8      	beq.n	80026e4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <HW_TS_Stop+0xf0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <HW_TS_Stop+0xf0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002702:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <HW_TS_Stop+0x100>)
 8002706:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800270a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800270c:	2003      	movs	r0, #3
 800270e:	f006 f84c 	bl	80087aa <HAL_NVIC_ClearPendingIRQ>
 8002712:	e007      	b.n	8002724 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HW_TS_Stop+0x104>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	7cfa      	ldrb	r2, [r7, #19]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002720:	f7ff fd5e 	bl	80021e0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <HW_TS_Stop+0xf0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	22ff      	movs	r2, #255	@ 0xff
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800272c:	2003      	movs	r0, #3
 800272e:	f006 f806 	bl	800873e <HAL_NVIC_EnableIRQ>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f383 8810 	msr	PRIMASK, r3
}
 800273c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800273e:	bf00      	nop
}
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000030c 	.word	0x2000030c
 800274c:	20000230 	.word	0x20000230
 8002750:	200002c0 	.word	0x200002c0
 8002754:	40002800 	.word	0x40002800
 8002758:	58000800 	.word	0x58000800
 800275c:	200002c1 	.word	0x200002c1

08002760 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800276c:	79fa      	ldrb	r2, [r7, #7]
 800276e:	493b      	ldr	r1, [pc, #236]	@ (800285c <HW_TS_Start+0xfc>)
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	330c      	adds	r3, #12
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d103      	bne.n	800278c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff ff66 	bl	8002658 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278c:	f3ef 8310 	mrs	r3, PRIMASK
 8002790:	60fb      	str	r3, [r7, #12]
  return(result);
 8002792:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002794:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002796:	b672      	cpsid	i
}
 8002798:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800279a:	2003      	movs	r0, #3
 800279c:	f005 ffdd 	bl	800875a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80027a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002860 <HW_TS_Start+0x100>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	22ca      	movs	r2, #202	@ 0xca
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80027a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <HW_TS_Start+0x100>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2253      	movs	r2, #83	@ 0x53
 80027ae:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	492a      	ldr	r1, [pc, #168]	@ (800285c <HW_TS_Start+0xfc>)
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	330c      	adds	r3, #12
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	4925      	ldr	r1, [pc, #148]	@ (800285c <HW_TS_Start+0xfc>)
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	3308      	adds	r3, #8
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	4920      	ldr	r1, [pc, #128]	@ (800285c <HW_TS_Start+0xfc>)
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	3304      	adds	r3, #4
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fb30 	bl	8001e54 <linkTimer>
 80027f4:	4603      	mov	r3, r0
 80027f6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <HW_TS_Start+0x104>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80027fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002868 <HW_TS_Start+0x108>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	7c7a      	ldrb	r2, [r7, #17]
 8002806:	429a      	cmp	r2, r3
 8002808:	d002      	beq.n	8002810 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800280a:	f7ff fce9 	bl	80021e0 <RescheduleTimerList>
 800280e:	e013      	b.n	8002838 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002810:	79fa      	ldrb	r2, [r7, #7]
 8002812:	4912      	ldr	r1, [pc, #72]	@ (800285c <HW_TS_Start+0xfc>)
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	3308      	adds	r3, #8
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	8a7b      	ldrh	r3, [r7, #18]
 8002824:	79fa      	ldrb	r2, [r7, #7]
 8002826:	1ac9      	subs	r1, r1, r3
 8002828:	480c      	ldr	r0, [pc, #48]	@ (800285c <HW_TS_Start+0xfc>)
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4403      	add	r3, r0
 8002834:	3308      	adds	r3, #8
 8002836:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HW_TS_Start+0x100>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	22ff      	movs	r2, #255	@ 0xff
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002840:	2003      	movs	r0, #3
 8002842:	f005 ff7c 	bl	800873e <HAL_NVIC_EnableIRQ>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f383 8810 	msr	PRIMASK, r3
}
 8002850:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002852:	bf00      	nop
}
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000230 	.word	0x20000230
 8002860:	2000030c 	.word	0x2000030c
 8002864:	200002c0 	.word	0x200002c0
 8002868:	200002c1 	.word	0x200002c1

0800286c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	460b      	mov	r3, r1
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4798      	blx	r3

  return;
 800287e:	bf00      	nop
}
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800288a:	2102      	movs	r1, #2
 800288c:	2000      	movs	r0, #0
 800288e:	f005 f995 	bl	8007bbc <IKS01A3_MOTION_SENSOR_Init>
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}

08002896 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800289a:	2101      	movs	r1, #1
 800289c:	2000      	movs	r0, #0
 800289e:	f005 f98d 	bl	8007bbc <IKS01A3_MOTION_SENSOR_Init>
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	2102      	movs	r1, #2
 80028b2:	2000      	movs	r0, #0
 80028b4:	f005 fa7e 	bl	8007db4 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	2101      	movs	r1, #1
 80028cc:	2000      	movs	r0, #0
 80028ce:	f005 fa71 	bl	8007db4 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 80028e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80028e8:	2102      	movs	r1, #2
 80028ea:	2000      	movs	r0, #0
 80028ec:	f005 faa6 	bl	8007e3c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	2102      	movs	r1, #2
 8002904:	2000      	movs	r0, #0
 8002906:	f005 fadf 	bl	8007ec8 <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <LL_RCC_LSE_SetDriveCapability>:
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002922:	f023 0218 	bic.w	r2, r3, #24
 8002926:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_AHB1_GRP1_EnableClock>:
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800294c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4313      	orrs	r3, r2
 8002954:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_AHB2_GRP1_EnableClock>:
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800297e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4313      	orrs	r3, r2
 8002986:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4013      	ands	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002994:	68fb      	ldr	r3, [r7, #12]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029a6:	f005 fce3 	bl	8008370 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80029aa:	f7fe fe33 	bl	8001614 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ae:	f000 f81b 	bl	80029e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80029b2:	f000 f891 	bl	8002ad8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80029b6:	f000 f8af 	bl	8002b18 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029ba:	f000 f985 	bl	8002cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80029be:	f000 f971 	bl	8002ca4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80029c2:	f000 f8f9 	bl	8002bb8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80029c6:	f000 f945 	bl	8002c54 <MX_USB_PCD_Init>
  MX_RTC_Init();
 80029ca:	f000 f8c1 	bl	8002b50 <MX_RTC_Init>
  MX_RF_Init();
 80029ce:	f000 f8b7 	bl	8002b40 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 80029d2:	f7fe f97f 	bl	8000cd4 <MX_MEMS_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80029d6:	f7fe fe2b 	bl	8001630 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_APPE_Process();
 80029da:	f7ff f910 	bl	8001bfe <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    MX_MEMS_Process();
 80029de:	f7fe f997 	bl	8000d10 <MX_MEMS_Process>
    MX_APPE_Process();
 80029e2:	bf00      	nop
 80029e4:	e7f9      	b.n	80029da <main+0x38>
	...

080029e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b09a      	sub	sp, #104	@ 0x68
 80029ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ee:	f107 0320 	add.w	r3, r7, #32
 80029f2:	2248      	movs	r2, #72	@ 0x48
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f00e fb08 	bl	801100c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	615a      	str	r2, [r3, #20]
 8002a0c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a1c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f023 0303 	bic.w	r3, r3, #3
 8002a28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a32:	f007 fb0d 	bl	800a050 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7ff ff6b 	bl	8002912 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <SystemClock_Config+0xec>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a44:	4a23      	ldr	r2, [pc, #140]	@ (8002ad4 <SystemClock_Config+0xec>)
 8002a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <SystemClock_Config+0xec>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002a58:	232f      	movs	r3, #47	@ 0x2f
 8002a5a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a62:	2301      	movs	r3, #1
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a70:	2340      	movs	r3, #64	@ 0x40
 8002a72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002a74:	2300      	movs	r3, #0
 8002a76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002a78:	2360      	movs	r3, #96	@ 0x60
 8002a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a7c:	2305      	movs	r3, #5
 8002a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a84:	f107 0320 	add.w	r3, r7, #32
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f007 fe75 	bl	800a778 <HAL_RCC_OscConfig>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002a94:	f000 f960 	bl	8002d58 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002a98:	236f      	movs	r3, #111	@ 0x6f
 8002a9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f008 f9d1 	bl	800ae60 <HAL_RCC_ClockConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002ac4:	f000 f948 	bl	8002d58 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002ac8:	f008 ff8c 	bl	800b9e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002acc:	bf00      	nop
 8002ace:	3768      	adds	r7, #104	@ 0x68
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	58000400 	.word	0x58000400

08002ad8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b094      	sub	sp, #80	@ 0x50
 8002adc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ade:	463b      	mov	r3, r7
 8002ae0:	2250      	movs	r2, #80	@ 0x50
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f00e fa91 	bl	801100c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002aea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002aee:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002af0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002af4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002af6:	2300      	movs	r3, #0
 8002af8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002afe:	463b      	mov	r3, r7
 8002b00:	4618      	mov	r0, r3
 8002b02:	f008 fdf9 	bl	800b6f8 <HAL_RCCEx_PeriphCLKConfig>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002b0c:	f000 f924 	bl	8002d58 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002b10:	bf00      	nop
 8002b12:	3750      	adds	r7, #80	@ 0x50
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <MX_IPCC_Init+0x20>)
 8002b1e:	4a07      	ldr	r2, [pc, #28]	@ (8002b3c <MX_IPCC_Init+0x24>)
 8002b20:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002b22:	4805      	ldr	r0, [pc, #20]	@ (8002b38 <MX_IPCC_Init+0x20>)
 8002b24:	f007 f916 	bl	8009d54 <HAL_IPCC_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002b2e:	f000 f913 	bl	8002d58 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200002d0 	.word	0x200002d0
 8002b3c:	58000c00 	.word	0x58000c00

08002b40 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b54:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b56:	4a17      	ldr	r2, [pc, #92]	@ (8002bb4 <MX_RTC_Init+0x64>)
 8002b58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002b60:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b62:	220f      	movs	r2, #15
 8002b64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002b66:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b68:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002b6c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b6e:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b74:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b86:	480a      	ldr	r0, [pc, #40]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b88:	f009 f844 	bl	800bc14 <HAL_RTC_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002b92:	f000 f8e1 	bl	8002d58 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4805      	ldr	r0, [pc, #20]	@ (8002bb0 <MX_RTC_Init+0x60>)
 8002b9c:	f009 f93a 	bl	800be14 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002ba6:	f000 f8d7 	bl	8002d58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000030c 	.word	0x2000030c
 8002bb4:	40002800 	.word	0x40002800

08002bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bbc:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bbe:	4a24      	ldr	r2, [pc, #144]	@ (8002c50 <MX_USART1_UART_Init+0x98>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002be8:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bee:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bf0:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bf6:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c02:	4812      	ldr	r0, [pc, #72]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002c04:	f009 f9e2 	bl	800bfcc <HAL_UART_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002c0e:	f000 f8a3 	bl	8002d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c12:	2100      	movs	r1, #0
 8002c14:	480d      	ldr	r0, [pc, #52]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002c16:	f009 fea9 	bl	800c96c <HAL_UARTEx_SetTxFifoThreshold>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002c20:	f000 f89a 	bl	8002d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c24:	2100      	movs	r1, #0
 8002c26:	4809      	ldr	r0, [pc, #36]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002c28:	f009 fede 	bl	800c9e8 <HAL_UARTEx_SetRxFifoThreshold>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002c32:	f000 f891 	bl	8002d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c36:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <MX_USART1_UART_Init+0x94>)
 8002c38:	f009 fe5f 	bl	800c8fa <HAL_UARTEx_DisableFifoMode>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002c42:	f000 f889 	bl	8002d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000330 	.word	0x20000330
 8002c50:	40013800 	.word	0x40013800

08002c54 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002c58:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <MX_USB_PCD_Init+0x48>)
 8002c5a:	4a11      	ldr	r2, [pc, #68]	@ (8002ca0 <MX_USB_PCD_Init+0x4c>)
 8002c5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <MX_USB_PCD_Init+0x48>)
 8002c60:	2208      	movs	r2, #8
 8002c62:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002c64:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <MX_USB_PCD_Init+0x48>)
 8002c66:	2202      	movs	r2, #2
 8002c68:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <MX_USB_PCD_Init+0x48>)
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002c70:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <MX_USB_PCD_Init+0x48>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002c76:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <MX_USB_PCD_Init+0x48>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002c7c:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <MX_USB_PCD_Init+0x48>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <MX_USB_PCD_Init+0x48>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002c88:	4804      	ldr	r0, [pc, #16]	@ (8002c9c <MX_USB_PCD_Init+0x48>)
 8002c8a:	f007 f8e9 	bl	8009e60 <HAL_PCD_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002c94:	f000 f860 	bl	8002d58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000424 	.word	0x20000424
 8002ca0:	40006800 	.word	0x40006800

08002ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ca8:	2004      	movs	r0, #4
 8002caa:	f7ff fe48 	bl	800293e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002cae:	2002      	movs	r0, #2
 8002cb0:	f7ff fe45 	bl	800293e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	203a      	movs	r0, #58	@ 0x3a
 8002cba:	f005 fd26 	bl	800870a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002cbe:	203a      	movs	r0, #58	@ 0x3a
 8002cc0:	f005 fd3d 	bl	800873e <HAL_NVIC_EnableIRQ>

}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cdc:	2004      	movs	r0, #4
 8002cde:	f7ff fe47 	bl	8002970 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f7ff fe44 	bl	8002970 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f7ff fe41 	bl	8002970 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cee:	2008      	movs	r0, #8
 8002cf0:	f7ff fe3e 	bl	8002970 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2123      	movs	r1, #35	@ 0x23
 8002cf8:	4814      	ldr	r0, [pc, #80]	@ (8002d4c <MX_GPIO_Init+0x84>)
 8002cfa:	f006 f96f 	bl	8008fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cfe:	2310      	movs	r3, #16
 8002d00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4810      	ldr	r0, [pc, #64]	@ (8002d50 <MX_GPIO_Init+0x88>)
 8002d10:	f005 ff16 	bl	8008b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002d14:	2323      	movs	r3, #35	@ 0x23
 8002d16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	4619      	mov	r1, r3
 8002d28:	4808      	ldr	r0, [pc, #32]	@ (8002d4c <MX_GPIO_Init+0x84>)
 8002d2a:	f005 ff09 	bl	8008b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4805      	ldr	r0, [pc, #20]	@ (8002d54 <MX_GPIO_Init+0x8c>)
 8002d40:	f005 fefe 	bl	8008b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d44:	bf00      	nop
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	48000400 	.word	0x48000400
 8002d50:	48000800 	.word	0x48000800
 8002d54:	48000c00 	.word	0x48000c00

08002d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d5c:	b672      	cpsid	i
}
 8002d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <Error_Handler+0x8>

08002d64 <LL_RCC_EnableRTC>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_AHB2_GRP1_EnableClock>:
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_AHB3_GRP1_EnableClock>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002df8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e40:	68fb      	ldr	r3, [r7, #12]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002e52:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e56:	f7ff ffaf 	bl	8002db8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	202e      	movs	r0, #46	@ 0x2e
 8002e60:	f005 fc53 	bl	800870a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002e64:	202e      	movs	r0, #46	@ 0x2e
 8002e66:	f005 fc6a 	bl	800873e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb4 <HAL_IPCC_MspInit+0x44>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d113      	bne.n	8002eaa <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002e82:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002e86:	f7ff ff97 	bl	8002db8 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	202c      	movs	r0, #44	@ 0x2c
 8002e90:	f005 fc3b 	bl	800870a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002e94:	202c      	movs	r0, #44	@ 0x2c
 8002e96:	f005 fc52 	bl	800873e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	202d      	movs	r0, #45	@ 0x2d
 8002ea0:	f005 fc33 	bl	800870a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002ea4:	202d      	movs	r0, #45	@ 0x2d
 8002ea6:	f005 fc4a 	bl	800873e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	58000c00 	.word	0x58000c00

08002eb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b096      	sub	sp, #88	@ 0x58
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	2250      	movs	r2, #80	@ 0x50
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00e f89f 	bl	801100c <memset>
  if(hrtc->Instance==RTC)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <HAL_RTC_MspInit+0x68>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d11f      	bne.n	8002f18 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8002ed8:	f007 f8ba 	bl	800a050 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002edc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ee0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ee8:	f107 0308 	add.w	r3, r7, #8
 8002eec:	4618      	mov	r0, r3
 8002eee:	f008 fc03 	bl	800b6f8 <HAL_RCCEx_PeriphCLKConfig>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8002ef8:	f7ff ff2e 	bl	8002d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002efc:	f7ff ff32 	bl	8002d64 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002f00:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002f04:	f7ff ff71 	bl	8002dea <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	f005 fbfc 	bl	800870a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002f12:	2003      	movs	r0, #3
 8002f14:	f005 fc13 	bl	800873e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f18:	bf00      	nop
 8002f1a:	3758      	adds	r7, #88	@ 0x58
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40002800 	.word	0x40002800

08002f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b09c      	sub	sp, #112	@ 0x70
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	2250      	movs	r2, #80	@ 0x50
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f00e f861 	bl	801100c <memset>
  if(huart->Instance==USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff8 <HAL_UART_MspInit+0xd4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d14d      	bne.n	8002ff0 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f54:	2301      	movs	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	4618      	mov	r0, r3
 8002f62:	f008 fbc9 	bl	800b6f8 <HAL_RCCEx_PeriphCLKConfig>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f6c:	f7ff fef4 	bl	8002d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f70:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002f74:	f7ff ff52 	bl	8002e1c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f78:	2002      	movs	r0, #2
 8002f7a:	f7ff ff04 	bl	8002d86 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f7e:	23c0      	movs	r3, #192	@ 0xc0
 8002f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f86:	2301      	movs	r3, #1
 8002f88:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f8e:	2307      	movs	r3, #7
 8002f90:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f92:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f96:	4619      	mov	r1, r3
 8002f98:	4818      	ldr	r0, [pc, #96]	@ (8002ffc <HAL_UART_MspInit+0xd8>)
 8002f9a:	f005 fdd1 	bl	8008b40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002f9e:	4b18      	ldr	r3, [pc, #96]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fa0:	4a18      	ldr	r2, [pc, #96]	@ (8003004 <HAL_UART_MspInit+0xe0>)
 8002fa2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002fa4:	4b16      	ldr	r3, [pc, #88]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002faa:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fac:	2210      	movs	r2, #16
 8002fae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb0:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb6:	4b12      	ldr	r3, [pc, #72]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fb8:	2280      	movs	r2, #128	@ 0x80
 8002fba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fbc:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fce:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fd4:	480a      	ldr	r0, [pc, #40]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fd6:	f005 fbf7 	bl	80087c8 <HAL_DMA_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002fe0:	f7ff feba 	bl	8002d58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a06      	ldr	r2, [pc, #24]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fe8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002fea:	4a05      	ldr	r2, [pc, #20]	@ (8003000 <HAL_UART_MspInit+0xdc>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ff0:	bf00      	nop
 8002ff2:	3770      	adds	r7, #112	@ 0x70
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	48000400 	.word	0x48000400
 8003000:	200003c4 	.word	0x200003c4
 8003004:	40020444 	.word	0x40020444

08003008 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b09c      	sub	sp, #112	@ 0x70
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	2250      	movs	r2, #80	@ 0x50
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f00d ffef 	bl	801100c <memset>
  if(hpcd->Instance==USB)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1f      	ldr	r2, [pc, #124]	@ (80030b0 <HAL_PCD_MspInit+0xa8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d136      	bne.n	80030a6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800303c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800303e:	2318      	movs	r3, #24
 8003040:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003042:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003046:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800304c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800304e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003052:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8003054:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003058:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800305a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800305e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003060:	f107 030c 	add.w	r3, r7, #12
 8003064:	4618      	mov	r0, r3
 8003066:	f008 fb47 	bl	800b6f8 <HAL_RCCEx_PeriphCLKConfig>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8003070:	f7ff fe72 	bl	8002d58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003074:	2001      	movs	r0, #1
 8003076:	f7ff fe86 	bl	8002d86 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800307a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800307e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800308c:	230a      	movs	r3, #10
 800308e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003090:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003094:	4619      	mov	r1, r3
 8003096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800309a:	f005 fd51 	bl	8008b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800309e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80030a2:	f7ff fea2 	bl	8002dea <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80030a6:	bf00      	nop
 80030a8:	3770      	adds	r7, #112	@ 0x70
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40006800 	.word	0x40006800

080030b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <NMI_Handler+0x4>

080030bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <MemManage_Handler+0x4>

080030cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <BusFault_Handler+0x4>

080030d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <UsageFault_Handler+0x4>

080030dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800310a:	f005 f98b 	bl	8008424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}

08003112 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003116:	f7ff f8fd 	bl	8002314 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}

0800311e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003122:	f00d f9a7 	bl	8010474 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}

0800312a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800312e:	f00d f9d7 	bl	80104e0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}

08003136 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800313a:	f005 ff67 	bl	800900c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003148:	4802      	ldr	r0, [pc, #8]	@ (8003154 <DMA2_Channel4_IRQHandler+0x10>)
 800314a:	f005 fbe5 	bl	8008918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200003c4 	.word	0x200003c4

08003158 <LL_AHB2_GRP1_EnableClock>:
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003164:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4313      	orrs	r3, r2
 800316e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003174:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800317c:	68fb      	ldr	r3, [r7, #12]
}
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_APB1_GRP1_EnableClock>:
{
 800318a:	b480      	push	{r7}
 800318c:	b085      	sub	sp, #20
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003196:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003198:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4313      	orrs	r3, r2
 80031a0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4013      	ands	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_APB1_GRP1_DisableClock>:
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031d2:	4013      	ands	r3, r2
 80031d4:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80031ee:	4b19      	ldr	r3, [pc, #100]	@ (8003254 <BSP_I2C1_Init+0x70>)
 80031f0:	4a19      	ldr	r2, [pc, #100]	@ (8003258 <BSP_I2C1_Init+0x74>)
 80031f2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80031f4:	4b19      	ldr	r3, [pc, #100]	@ (800325c <BSP_I2C1_Init+0x78>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	4918      	ldr	r1, [pc, #96]	@ (800325c <BSP_I2C1_Init+0x78>)
 80031fc:	600a      	str	r2, [r1, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d122      	bne.n	8003248 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003202:	4814      	ldr	r0, [pc, #80]	@ (8003254 <BSP_I2C1_Init+0x70>)
 8003204:	f006 fa32 	bl	800966c <HAL_I2C_GetState>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11c      	bne.n	8003248 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800320e:	4811      	ldr	r0, [pc, #68]	@ (8003254 <BSP_I2C1_Init+0x70>)
 8003210:	f000 f8fe 	bl	8003410 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800321a:	480e      	ldr	r0, [pc, #56]	@ (8003254 <BSP_I2C1_Init+0x70>)
 800321c:	f000 f8b4 	bl	8003388 <MX_I2C1_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003226:	f06f 0307 	mvn.w	r3, #7
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	e00c      	b.n	8003248 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800322e:	2100      	movs	r1, #0
 8003230:	4808      	ldr	r0, [pc, #32]	@ (8003254 <BSP_I2C1_Init+0x70>)
 8003232:	f006 fcf7 	bl	8009c24 <HAL_I2CEx_ConfigAnalogFilter>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800323c:	f06f 0307 	mvn.w	r3, #7
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	e001      	b.n	8003248 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003244:	2300      	movs	r3, #0
 8003246:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000700 	.word	0x20000700
 8003258:	40005400 	.word	0x40005400
 800325c:	20000754 	.word	0x20000754

08003260 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800326a:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <BSP_I2C1_DeInit+0x48>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d014      	beq.n	800329c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8003272:	4b0d      	ldr	r3, [pc, #52]	@ (80032a8 <BSP_I2C1_DeInit+0x48>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3b01      	subs	r3, #1
 8003278:	4a0b      	ldr	r2, [pc, #44]	@ (80032a8 <BSP_I2C1_DeInit+0x48>)
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <BSP_I2C1_DeInit+0x48>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8003284:	4809      	ldr	r0, [pc, #36]	@ (80032ac <BSP_I2C1_DeInit+0x4c>)
 8003286:	f000 f907 	bl	8003498 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800328a:	4808      	ldr	r0, [pc, #32]	@ (80032ac <BSP_I2C1_DeInit+0x4c>)
 800328c:	f005 ff7d 	bl	800918a <HAL_I2C_DeInit>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8003296:	f06f 0307 	mvn.w	r3, #7
 800329a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800329c:	687b      	ldr	r3, [r7, #4]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000754 	.word	0x20000754
 80032ac:	20000700 	.word	0x20000700

080032b0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	@ 0x28
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	60ba      	str	r2, [r7, #8]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	81fb      	strh	r3, [r7, #14]
 80032be:	460b      	mov	r3, r1
 80032c0:	81bb      	strh	r3, [r7, #12]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80032ca:	89ba      	ldrh	r2, [r7, #12]
 80032cc:	89f9      	ldrh	r1, [r7, #14]
 80032ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032d2:	9302      	str	r3, [sp, #8]
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2301      	movs	r3, #1
 80032de:	480c      	ldr	r0, [pc, #48]	@ (8003310 <BSP_I2C1_WriteReg+0x60>)
 80032e0:	f005 ff96 	bl	8009210 <HAL_I2C_Mem_Write>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00c      	beq.n	8003304 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80032ea:	4809      	ldr	r0, [pc, #36]	@ (8003310 <BSP_I2C1_WriteReg+0x60>)
 80032ec:	f006 f9cc 	bl	8009688 <HAL_I2C_GetError>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d103      	bne.n	80032fe <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80032f6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	e002      	b.n	8003304 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80032fe:	f06f 0303 	mvn.w	r3, #3
 8003302:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003304:	697b      	ldr	r3, [r7, #20]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000700 	.word	0x20000700

08003314 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af04      	add	r7, sp, #16
 800331a:	60ba      	str	r2, [r7, #8]
 800331c:	461a      	mov	r2, r3
 800331e:	4603      	mov	r3, r0
 8003320:	81fb      	strh	r3, [r7, #14]
 8003322:	460b      	mov	r3, r1
 8003324:	81bb      	strh	r3, [r7, #12]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800332e:	89ba      	ldrh	r2, [r7, #12]
 8003330:	89f9      	ldrh	r1, [r7, #14]
 8003332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003336:	9302      	str	r3, [sp, #8]
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2301      	movs	r3, #1
 8003342:	480c      	ldr	r0, [pc, #48]	@ (8003374 <BSP_I2C1_ReadReg+0x60>)
 8003344:	f006 f878 	bl	8009438 <HAL_I2C_Mem_Read>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800334e:	4809      	ldr	r0, [pc, #36]	@ (8003374 <BSP_I2C1_ReadReg+0x60>)
 8003350:	f006 f99a 	bl	8009688 <HAL_I2C_GetError>
 8003354:	4603      	mov	r3, r0
 8003356:	2b04      	cmp	r3, #4
 8003358:	d103      	bne.n	8003362 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800335a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	e002      	b.n	8003368 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003362:	f06f 0303 	mvn.w	r3, #3
 8003366:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003368:	697b      	ldr	r3, [r7, #20]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000700 	.word	0x20000700

08003378 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800337c:	f005 f866 	bl	800844c <HAL_GetTick>
 8003380:	4603      	mov	r3, r0
}
 8003382:	4618      	mov	r0, r3
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <MX_I2C1_Init+0x80>)
 8003398:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <MX_I2C1_Init+0x84>)
 800339e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f005 fe42 	bl	8009054 <HAL_I2C_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033da:	2100      	movs	r1, #0
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f006 fc21 	bl	8009c24 <HAL_I2CEx_ConfigAnalogFilter>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80033ec:	2100      	movs	r1, #0
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f006 fc63 	bl	8009cba <HAL_I2CEx_ConfigDigitalFilter>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40005400 	.word	0x40005400
 800340c:	00707cbb 	.word	0x00707cbb

08003410 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b09c      	sub	sp, #112	@ 0x70
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	2250      	movs	r2, #80	@ 0x50
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f00d fdf3 	bl	801100c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003426:	2304      	movs	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800342a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800342e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003430:	f107 030c 	add.w	r3, r7, #12
 8003434:	4618      	mov	r0, r3
 8003436:	f008 f95f 	bl	800b6f8 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	2002      	movs	r0, #2
 800343c:	f7ff fe8c 	bl	8003158 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003444:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003446:	2312      	movs	r3, #18
 8003448:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344e:	2300      	movs	r3, #0
 8003450:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003452:	2304      	movs	r3, #4
 8003454:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003456:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800345a:	4619      	mov	r1, r3
 800345c:	480d      	ldr	r0, [pc, #52]	@ (8003494 <I2C1_MspInit+0x84>)
 800345e:	f005 fb6f 	bl	8008b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003462:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003466:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003468:	2312      	movs	r3, #18
 800346a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003470:	2300      	movs	r3, #0
 8003472:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003474:	2304      	movs	r3, #4
 8003476:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003478:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800347c:	4619      	mov	r1, r3
 800347e:	4805      	ldr	r0, [pc, #20]	@ (8003494 <I2C1_MspInit+0x84>)
 8003480:	f005 fb5e 	bl	8008b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003484:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003488:	f7ff fe7f 	bl	800318a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800348c:	bf00      	nop
 800348e:	3770      	adds	r7, #112	@ 0x70
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	48000400 	.word	0x48000400

08003498 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80034a0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80034a4:	f7ff fe8a 	bl	80031bc <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80034a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034ac:	4805      	ldr	r0, [pc, #20]	@ (80034c4 <I2C1_MspDeInit+0x2c>)
 80034ae:	f005 fcb7 	bl	8008e20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80034b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034b6:	4803      	ldr	r0, [pc, #12]	@ (80034c4 <I2C1_MspDeInit+0x2c>)
 80034b8:	f005 fcb2 	bl	8008e20 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	48000400 	.word	0x48000400

080034c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e00a      	b.n	80034f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034da:	f3af 8000 	nop.w
 80034de:	4601      	mov	r1, r0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	60ba      	str	r2, [r7, #8]
 80034e6:	b2ca      	uxtb	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbf0      	blt.n	80034da <_read+0x12>
  }

  return len;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800352a:	605a      	str	r2, [r3, #4]
  return 0;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_isatty>:

int _isatty(int file)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003542:	2301      	movs	r3, #1
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003574:	4a14      	ldr	r2, [pc, #80]	@ (80035c8 <_sbrk+0x5c>)
 8003576:	4b15      	ldr	r3, [pc, #84]	@ (80035cc <_sbrk+0x60>)
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003580:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <_sbrk+0x64>)
 800358a:	4a12      	ldr	r2, [pc, #72]	@ (80035d4 <_sbrk+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800358e:	4b10      	ldr	r3, [pc, #64]	@ (80035d0 <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d207      	bcs.n	80035ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800359c:	f00d fd9a 	bl	80110d4 <__errno>
 80035a0:	4603      	mov	r3, r0
 80035a2:	220c      	movs	r2, #12
 80035a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e009      	b.n	80035c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035ac:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035b2:	4b07      	ldr	r3, [pc, #28]	@ (80035d0 <_sbrk+0x64>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	4a05      	ldr	r2, [pc, #20]	@ (80035d0 <_sbrk+0x64>)
 80035bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20030000 	.word	0x20030000
 80035cc:	00000400 	.word	0x00000400
 80035d0:	20000758 	.word	0x20000758
 80035d4:	20000d48 	.word	0x20000d48

080035d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80035dc:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <SystemInit+0x98>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e2:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <SystemInit+0x98>)
 80035e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003600:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003604:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003610:	4b18      	ldr	r3, [pc, #96]	@ (8003674 <SystemInit+0x9c>)
 8003612:	4013      	ands	r3, r2
 8003614:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800361e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003622:	f023 0305 	bic.w	r3, r3, #5
 8003626:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003642:	4a0d      	ldr	r2, [pc, #52]	@ (8003678 <SystemInit+0xa0>)
 8003644:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364a:	4a0b      	ldr	r2, [pc, #44]	@ (8003678 <SystemInit+0xa0>)
 800364c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003658:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003662:	2200      	movs	r2, #0
 8003664:	619a      	str	r2, [r3, #24]
}
 8003666:	bf00      	nop
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	e000ed00 	.word	0xe000ed00
 8003674:	faf6fefb 	.word	0xfaf6fefb
 8003678:	22041000 	.word	0x22041000

0800367c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800367c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800367e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003680:	3304      	adds	r3, #4

08003682 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003682:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003684:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003686:	d3f9      	bcc.n	800367c <CopyDataInit>
  bx lr
 8003688:	4770      	bx	lr

0800368a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800368a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800368c:	3004      	adds	r0, #4

0800368e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800368e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003690:	d3fb      	bcc.n	800368a <FillZerobss>
  bx lr
 8003692:	4770      	bx	lr

08003694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003694:	480c      	ldr	r0, [pc, #48]	@ (80036c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003698:	f7ff ff9e 	bl	80035d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800369c:	480b      	ldr	r0, [pc, #44]	@ (80036cc <LoopForever+0x6>)
 800369e:	490c      	ldr	r1, [pc, #48]	@ (80036d0 <LoopForever+0xa>)
 80036a0:	4a0c      	ldr	r2, [pc, #48]	@ (80036d4 <LoopForever+0xe>)
 80036a2:	2300      	movs	r3, #0
 80036a4:	f7ff ffed 	bl	8003682 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80036a8:	480b      	ldr	r0, [pc, #44]	@ (80036d8 <LoopForever+0x12>)
 80036aa:	490c      	ldr	r1, [pc, #48]	@ (80036dc <LoopForever+0x16>)
 80036ac:	4a0c      	ldr	r2, [pc, #48]	@ (80036e0 <LoopForever+0x1a>)
 80036ae:	2300      	movs	r3, #0
 80036b0:	f7ff ffe7 	bl	8003682 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80036b4:	480b      	ldr	r0, [pc, #44]	@ (80036e4 <LoopForever+0x1e>)
 80036b6:	490c      	ldr	r1, [pc, #48]	@ (80036e8 <LoopForever+0x22>)
 80036b8:	2300      	movs	r3, #0
 80036ba:	f7ff ffe8 	bl	800368e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036be:	f00d fd0f 	bl	80110e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80036c2:	f7ff f96e 	bl	80029a2 <main>

080036c6 <LoopForever>:

LoopForever:
  b LoopForever
 80036c6:	e7fe      	b.n	80036c6 <LoopForever>
  ldr   r0, =_estack
 80036c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80036cc:	20000008 	.word	0x20000008
 80036d0:	2000016c 	.word	0x2000016c
 80036d4:	08013640 	.word	0x08013640
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80036d8:	200301e4 	.word	0x200301e4
 80036dc:	20030a67 	.word	0x20030a67
 80036e0:	080137ea 	.word	0x080137ea
  INIT_BSS _sbss, _ebss
 80036e4:	200001b8 	.word	0x200001b8
 80036e8:	20000d44 	.word	0x20000d44

080036ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036ec:	e7fe      	b.n	80036ec <ADC1_IRQHandler>
	...

080036f0 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003704:	f04f 33ff 	mov.w	r3, #4294967295
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e051      	b.n	80037b0 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	7b1a      	ldrb	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1d      	ldr	r2, [pc, #116]	@ (80037bc <LIS2DW12_RegisterBusIO+0xcc>)
 8003748:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1c      	ldr	r2, [pc, #112]	@ (80037c0 <LIS2DW12_RegisterBusIO+0xd0>)
 800374e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e020      	b.n	80037b0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4798      	blx	r3
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e016      	b.n	80037b0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d112      	bne.n	80037b0 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10d      	bne.n	80037b0 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8003794:	2305      	movs	r3, #5
 8003796:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8003798:	7afb      	ldrb	r3, [r7, #11]
 800379a:	461a      	mov	r2, r3
 800379c:	2121      	movs	r1, #33	@ 0x21
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fcc1 	bl	8004126 <LIS2DW12_Write_Reg>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80037b0:	68fb      	ldr	r3, [r7, #12]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	080044b9 	.word	0x080044b9
 80037c0:	080044ef 	.word	0x080044ef

080037c4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3320      	adds	r3, #32
 80037d0:	2101      	movs	r1, #1
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 f9cb 	bl	8004b6e <lis2dw12_auto_increment_set>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	e04b      	b.n	800387c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3320      	adds	r3, #32
 80037e8:	2101      	movs	r1, #1
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 f8e2 	bl	80049b4 <lis2dw12_block_data_update_set>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	e03f      	b.n	800387c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3320      	adds	r3, #32
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f001 f9d9 	bl	8004bba <lis2dw12_fifo_mode_set>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
 8003812:	e033      	b.n	800387c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3320      	adds	r3, #32
 8003818:	2104      	movs	r1, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f000 feb2 	bl	8004584 <lis2dw12_power_mode_set>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	e027      	b.n	800387c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a15      	ldr	r2, [pc, #84]	@ (8003884 <LIS2DW12_Init+0xc0>)
 8003830:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3320      	adds	r3, #32
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f000 ffa3 	bl	8004794 <lis2dw12_data_rate_set>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295
 8003858:	e010      	b.n	800387c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3320      	adds	r3, #32
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f001 f8cd 	bl	8004a00 <lis2dw12_full_scale_set>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
 8003870:	e004      	b.n	800387c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	42c80000 	.word	0x42c80000

08003888 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f888 	bl	80039a6 <LIS2DW12_ACC_Disable>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	e010      	b.n	80038c4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3320      	adds	r3, #32
 80038da:	6839      	ldr	r1, [r7, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 f935 	bl	8004b4c <lis2dw12_device_id_get>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	e000      	b.n	80038f0 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2200      	movs	r2, #0
 8003912:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2200      	movs	r2, #0
 800391e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2210      	movs	r2, #16
 8003924:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4a06      	ldr	r2, [pc, #24]	@ (8003950 <LIS2DW12_GetCapabilities+0x58>)
 8003938:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	44c80000 	.word	0x44c80000

08003954 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e019      	b.n	800399e <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800397c:	461a      	mov	r2, r3
 800397e:	eeb0 0a67 	vmov.f32	s0, s15
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fbea 	bl	800415c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	e004      	b.n	800399e <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e010      	b.n	80039de <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3320      	adds	r3, #32
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fee6 	bl	8004794 <lis2dw12_data_rate_set>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
 80039d2:	e004      	b.n	80039de <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3320      	adds	r3, #32
 80039fa:	f107 020b 	add.w	r2, r7, #11
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 f823 	bl	8004a4c <lis2dw12_full_scale_get>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	e080      	b.n	8003b14 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3320      	adds	r3, #32
 8003a16:	f107 020a 	add.w	r2, r7, #10
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fdff 	bl	8004620 <lis2dw12_power_mode_get>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2c:	e072      	b.n	8003b14 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003a2e:	7abb      	ldrb	r3, [r7, #10]
 8003a30:	2b1b      	cmp	r3, #27
 8003a32:	bf8c      	ite	hi
 8003a34:	2201      	movhi	r2, #1
 8003a36:	2200      	movls	r2, #0
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	2a00      	cmp	r2, #0
 8003a3c:	d162      	bne.n	8003b04 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003a3e:	2201      	movs	r2, #1
 8003a40:	409a      	lsls	r2, r3
 8003a42:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003a46:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d12f      	bne.n	8003ab8 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003a58:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d04c      	beq.n	8003b04 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d81b      	bhi.n	8003aa8 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003a70:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a91 	.word	0x08003a91
 8003a80:	08003a99 	.word	0x08003a99
 8003a84:	08003aa1 	.word	0x08003aa1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4a24      	ldr	r2, [pc, #144]	@ (8003b1c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003a8c:	601a      	str	r2, [r3, #0]
          break;
 8003a8e:	e012      	b.n	8003ab6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4a23      	ldr	r2, [pc, #140]	@ (8003b20 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003a94:	601a      	str	r2, [r3, #0]
          break;
 8003a96:	e00e      	b.n	8003ab6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4a22      	ldr	r2, [pc, #136]	@ (8003b24 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003a9c:	601a      	str	r2, [r3, #0]
          break;
 8003a9e:	e00a      	b.n	8003ab6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4a21      	ldr	r2, [pc, #132]	@ (8003b28 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003aa4:	601a      	str	r2, [r3, #0]
          break;
 8003aa6:	e006      	b.n	8003ab6 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	4a20      	ldr	r2, [pc, #128]	@ (8003b2c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003aac:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab2:	60fb      	str	r3, [r7, #12]
          break;
 8003ab4:	bf00      	nop
      }
      break;
 8003ab6:	e02c      	b.n	8003b12 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d81a      	bhi.n	8003af4 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003abe:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003add 	.word	0x08003add
 8003acc:	08003ae5 	.word	0x08003ae5
 8003ad0:	08003aed 	.word	0x08003aed
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4a16      	ldr	r2, [pc, #88]	@ (8003b30 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003ad8:	601a      	str	r2, [r3, #0]
          break;
 8003ada:	e012      	b.n	8003b02 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	4a15      	ldr	r2, [pc, #84]	@ (8003b34 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003ae0:	601a      	str	r2, [r3, #0]
          break;
 8003ae2:	e00e      	b.n	8003b02 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b1c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003ae8:	601a      	str	r2, [r3, #0]
          break;
 8003aea:	e00a      	b.n	8003b02 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4a0c      	ldr	r2, [pc, #48]	@ (8003b20 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003af0:	601a      	str	r2, [r3, #0]
          break;
 8003af2:	e006      	b.n	8003b02 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b2c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003af8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	60fb      	str	r3, [r7, #12]
          break;
 8003b00:	bf00      	nop
      }
      break;
 8003b02:	e006      	b.n	8003b12 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4a09      	ldr	r2, [pc, #36]	@ (8003b2c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003b08:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0e:	60fb      	str	r3, [r7, #12]
      break;
 8003b10:	bf00      	nop
  }

  return ret;
 8003b12:	68fb      	ldr	r3, [r7, #12]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	3f79db23 	.word	0x3f79db23
 8003b20:	3ff9db23 	.word	0x3ff9db23
 8003b24:	4079db23 	.word	0x4079db23
 8003b28:	40f9db23 	.word	0x40f9db23
 8003b2c:	bf800000 	.word	0xbf800000
 8003b30:	3e79db23 	.word	0x3e79db23
 8003b34:	3ef9db23 	.word	0x3ef9db23

08003b38 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	f107 020b 	add.w	r2, r7, #11
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fe65 	bl	8004820 <lis2dw12_data_rate_get>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	e14f      	b.n	8003e02 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3320      	adds	r3, #32
 8003b66:	f107 020a 	add.w	r2, r7, #10
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fd57 	bl	8004620 <lis2dw12_power_mode_get>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	e141      	b.n	8003e02 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003b7e:	7afb      	ldrb	r3, [r7, #11]
 8003b80:	2b32      	cmp	r3, #50	@ 0x32
 8003b82:	f200 8136 	bhi.w	8003df2 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003b86:	a201      	add	r2, pc, #4	@ (adr r2, 8003b8c <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003c59 	.word	0x08003c59
 8003b90:	08003c63 	.word	0x08003c63
 8003b94:	08003cbd 	.word	0x08003cbd
 8003b98:	08003cc5 	.word	0x08003cc5
 8003b9c:	08003ccd 	.word	0x08003ccd
 8003ba0:	08003cd5 	.word	0x08003cd5
 8003ba4:	08003cdd 	.word	0x08003cdd
 8003ba8:	08003ce5 	.word	0x08003ce5
 8003bac:	08003d3f 	.word	0x08003d3f
 8003bb0:	08003d99 	.word	0x08003d99
 8003bb4:	08003df3 	.word	0x08003df3
 8003bb8:	08003df3 	.word	0x08003df3
 8003bbc:	08003df3 	.word	0x08003df3
 8003bc0:	08003df3 	.word	0x08003df3
 8003bc4:	08003df3 	.word	0x08003df3
 8003bc8:	08003df3 	.word	0x08003df3
 8003bcc:	08003df3 	.word	0x08003df3
 8003bd0:	08003df3 	.word	0x08003df3
 8003bd4:	08003c59 	.word	0x08003c59
 8003bd8:	08003df3 	.word	0x08003df3
 8003bdc:	08003df3 	.word	0x08003df3
 8003be0:	08003df3 	.word	0x08003df3
 8003be4:	08003df3 	.word	0x08003df3
 8003be8:	08003df3 	.word	0x08003df3
 8003bec:	08003df3 	.word	0x08003df3
 8003bf0:	08003df3 	.word	0x08003df3
 8003bf4:	08003df3 	.word	0x08003df3
 8003bf8:	08003df3 	.word	0x08003df3
 8003bfc:	08003df3 	.word	0x08003df3
 8003c00:	08003df3 	.word	0x08003df3
 8003c04:	08003df3 	.word	0x08003df3
 8003c08:	08003df3 	.word	0x08003df3
 8003c0c:	08003df3 	.word	0x08003df3
 8003c10:	08003df3 	.word	0x08003df3
 8003c14:	08003df3 	.word	0x08003df3
 8003c18:	08003df3 	.word	0x08003df3
 8003c1c:	08003df3 	.word	0x08003df3
 8003c20:	08003df3 	.word	0x08003df3
 8003c24:	08003df3 	.word	0x08003df3
 8003c28:	08003df3 	.word	0x08003df3
 8003c2c:	08003df3 	.word	0x08003df3
 8003c30:	08003df3 	.word	0x08003df3
 8003c34:	08003df3 	.word	0x08003df3
 8003c38:	08003df3 	.word	0x08003df3
 8003c3c:	08003df3 	.word	0x08003df3
 8003c40:	08003df3 	.word	0x08003df3
 8003c44:	08003df3 	.word	0x08003df3
 8003c48:	08003df3 	.word	0x08003df3
 8003c4c:	08003df3 	.word	0x08003df3
 8003c50:	08003df3 	.word	0x08003df3
 8003c54:	08003c59 	.word	0x08003c59
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
      break;
 8003c60:	e0ce      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003c62:	7abb      	ldrb	r3, [r7, #10]
 8003c64:	2b1b      	cmp	r3, #27
 8003c66:	bf8c      	ite	hi
 8003c68:	2201      	movhi	r2, #1
 8003c6a:	2200      	movls	r2, #0
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	2a00      	cmp	r2, #0
 8003c70:	d11c      	bne.n	8003cac <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003c72:	2201      	movs	r2, #1
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003c7c:	2a00      	cmp	r2, #0
 8003c7e:	bf14      	ite	ne
 8003c80:	2201      	movne	r2, #1
 8003c82:	2200      	moveq	r2, #0
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	d10c      	bne.n	8003ca4 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003c8a:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf14      	ite	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	2300      	moveq	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e0c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003ca0:	601a      	str	r2, [r3, #0]
          break;
 8003ca2:	e00a      	b.n	8003cba <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e10 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003ca8:	601a      	str	r2, [r3, #0]
          break;
 8003caa:	e006      	b.n	8003cba <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4a59      	ldr	r2, [pc, #356]	@ (8003e14 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003cb0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	60fb      	str	r3, [r7, #12]
          break;
 8003cb8:	bf00      	nop
      }
      break;
 8003cba:	e0a1      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4a53      	ldr	r2, [pc, #332]	@ (8003e0c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003cc0:	601a      	str	r2, [r3, #0]
      break;
 8003cc2:	e09d      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4a54      	ldr	r2, [pc, #336]	@ (8003e18 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003cc8:	601a      	str	r2, [r3, #0]
      break;
 8003cca:	e099      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4a53      	ldr	r2, [pc, #332]	@ (8003e1c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003cd0:	601a      	str	r2, [r3, #0]
      break;
 8003cd2:	e095      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4a52      	ldr	r2, [pc, #328]	@ (8003e20 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003cd8:	601a      	str	r2, [r3, #0]
      break;
 8003cda:	e091      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4a51      	ldr	r2, [pc, #324]	@ (8003e24 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003ce0:	601a      	str	r2, [r3, #0]
      break;
 8003ce2:	e08d      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003ce4:	7abb      	ldrb	r3, [r7, #10]
 8003ce6:	2b1b      	cmp	r3, #27
 8003ce8:	bf8c      	ite	hi
 8003cea:	2201      	movhi	r2, #1
 8003cec:	2200      	movls	r2, #0
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	d11c      	bne.n	8003d2e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003cfe:	2a00      	cmp	r2, #0
 8003d00:	bf14      	ite	ne
 8003d02:	2201      	movne	r2, #1
 8003d04:	2200      	moveq	r2, #0
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	2a00      	cmp	r2, #0
 8003d0a:	d10c      	bne.n	8003d26 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003d0c:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	4a41      	ldr	r2, [pc, #260]	@ (8003e28 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8003d22:	601a      	str	r2, [r3, #0]
          break;
 8003d24:	e00a      	b.n	8003d3c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	4a3e      	ldr	r2, [pc, #248]	@ (8003e24 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003d2a:	601a      	str	r2, [r3, #0]
          break;
 8003d2c:	e006      	b.n	8003d3c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	4a38      	ldr	r2, [pc, #224]	@ (8003e14 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003d32:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
 8003d38:	60fb      	str	r3, [r7, #12]
          break;
 8003d3a:	bf00      	nop
      }
      break;
 8003d3c:	e060      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003d3e:	7abb      	ldrb	r3, [r7, #10]
 8003d40:	2b1b      	cmp	r3, #27
 8003d42:	bf8c      	ite	hi
 8003d44:	2201      	movhi	r2, #1
 8003d46:	2200      	movls	r2, #0
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	d11c      	bne.n	8003d88 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8003d4e:	2201      	movs	r2, #1
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003d58:	2a00      	cmp	r2, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2201      	movne	r2, #1
 8003d5e:	2200      	moveq	r2, #0
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	2a00      	cmp	r2, #0
 8003d64:	d10c      	bne.n	8003d80 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8003d66:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bf14      	ite	ne
 8003d6e:	2301      	movne	r3, #1
 8003d70:	2300      	moveq	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8003d7c:	601a      	str	r2, [r3, #0]
          break;
 8003d7e:	e00a      	b.n	8003d96 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	4a28      	ldr	r2, [pc, #160]	@ (8003e24 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003d84:	601a      	str	r2, [r3, #0]
          break;
 8003d86:	e006      	b.n	8003d96 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4a22      	ldr	r2, [pc, #136]	@ (8003e14 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003d8c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d92:	60fb      	str	r3, [r7, #12]
          break;
 8003d94:	bf00      	nop
      }
      break;
 8003d96:	e033      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003d98:	7abb      	ldrb	r3, [r7, #10]
 8003d9a:	2b1b      	cmp	r3, #27
 8003d9c:	bf8c      	ite	hi
 8003d9e:	2201      	movhi	r2, #1
 8003da0:	2200      	movls	r2, #0
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	d11c      	bne.n	8003de2 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8003da8:	2201      	movs	r2, #1
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003db2:	2a00      	cmp	r2, #0
 8003db4:	bf14      	ite	ne
 8003db6:	2201      	movne	r2, #1
 8003db8:	2200      	moveq	r2, #0
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	2a00      	cmp	r2, #0
 8003dbe:	d10c      	bne.n	8003dda <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8003dc0:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4a16      	ldr	r2, [pc, #88]	@ (8003e30 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8003dd6:	601a      	str	r2, [r3, #0]
          break;
 8003dd8:	e00a      	b.n	8003df0 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	4a11      	ldr	r2, [pc, #68]	@ (8003e24 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003dde:	601a      	str	r2, [r3, #0]
          break;
 8003de0:	e006      	b.n	8003df0 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	4a0b      	ldr	r2, [pc, #44]	@ (8003e14 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003de6:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dec:	60fb      	str	r3, [r7, #12]
          break;
 8003dee:	bf00      	nop
      }
      break;
 8003df0:	e006      	b.n	8003e00 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	4a07      	ldr	r2, [pc, #28]	@ (8003e14 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003df6:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003df8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfc:	60fb      	str	r3, [r7, #12]
      break;
 8003dfe:	bf00      	nop
  }

  return ret;
 8003e00:	68fb      	ldr	r3, [r7, #12]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	41480000 	.word	0x41480000
 8003e10:	3fcccccd 	.word	0x3fcccccd
 8003e14:	bf800000 	.word	0xbf800000
 8003e18:	41c80000 	.word	0x41c80000
 8003e1c:	42480000 	.word	0x42480000
 8003e20:	42c80000 	.word	0x42c80000
 8003e24:	43480000 	.word	0x43480000
 8003e28:	43c80000 	.word	0x43c80000
 8003e2c:	44480000 	.word	0x44480000
 8003e30:	44c80000 	.word	0x44c80000

08003e34 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003e40:	2200      	movs	r2, #0
 8003e42:	2100      	movs	r1, #0
 8003e44:	ed97 0a00 	vldr	s0, [r7]
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f805 	bl	8003e58 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003e4e:	4603      	mov	r3, r0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e64:	460b      	mov	r3, r1
 8003e66:	71fb      	strb	r3, [r7, #7]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d109      	bne.n	8003e8a <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003e76:	79ba      	ldrb	r2, [r7, #6]
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f96b 	bl	800415c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003e86:	4603      	mov	r3, r0
 8003e88:	e008      	b.n	8003e9c <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003e8a:	79ba      	ldrb	r2, [r7, #6]
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	ed97 0a02 	vldr	s0, [r7, #8]
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fa7d 	bl	8004394 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003e9a:	4603      	mov	r3, r0
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3320      	adds	r3, #32
 8003eb6:	f107 020b 	add.w	r2, r7, #11
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fdc5 	bl	8004a4c <lis2dw12_full_scale_get>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ecc:	e027      	b.n	8003f1e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8003ece:	7afb      	ldrb	r3, [r7, #11]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d81b      	bhi.n	8003f0c <LIS2DW12_ACC_GetFullScale+0x68>
 8003ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8003edc <LIS2DW12_ACC_GetFullScale+0x38>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003ef5 	.word	0x08003ef5
 8003ee4:	08003efd 	.word	0x08003efd
 8003ee8:	08003f05 	.word	0x08003f05
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	601a      	str	r2, [r3, #0]
      break;
 8003ef2:	e013      	b.n	8003f1c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	601a      	str	r2, [r3, #0]
      break;
 8003efa:	e00f      	b.n	8003f1c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2208      	movs	r2, #8
 8003f00:	601a      	str	r2, [r3, #0]
      break;
 8003f02:	e00b      	b.n	8003f1c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2210      	movs	r2, #16
 8003f08:	601a      	str	r2, [r3, #0]
      break;
 8003f0a:	e007      	b.n	8003f1c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f12:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	60fb      	str	r3, [r7, #12]
      break;
 8003f1a:	bf00      	nop
  }

  return ret;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop

08003f28 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	dd0b      	ble.n	8003f50 <LIS2DW12_ACC_SetFullScale+0x28>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	dd06      	ble.n	8003f4c <LIS2DW12_ACC_SetFullScale+0x24>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	dc01      	bgt.n	8003f48 <LIS2DW12_ACC_SetFullScale+0x20>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e004      	b.n	8003f52 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e002      	b.n	8003f52 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003f50:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003f52:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3320      	adds	r3, #32
 8003f58:	7bfa      	ldrb	r2, [r7, #15]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fd4f 	bl	8004a00 <lis2dw12_full_scale_set>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003f68:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6c:	e000      	b.n	8003f70 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3320      	adds	r3, #32
 8003f8a:	f107 020b 	add.w	r2, r7, #11
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fb45 	bl	8004620 <lis2dw12_power_mode_get>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	e068      	b.n	8004074 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3320      	adds	r3, #32
 8003fa6:	f107 020c 	add.w	r2, r7, #12
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fd85 	bl	8004abc <lis2dw12_acceleration_raw_get>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbc:	e05a      	b.n	8004074 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
 8003fc0:	2b1b      	cmp	r3, #27
 8003fc2:	bf8c      	ite	hi
 8003fc4:	2201      	movhi	r2, #1
 8003fc6:	2200      	movls	r2, #0
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	2a00      	cmp	r2, #0
 8003fcc:	d14d      	bne.n	800406a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003fce:	2201      	movs	r2, #1
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003fd6:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf14      	ite	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	2300      	moveq	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d124      	bne.n	8004032 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8003fe8:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d037      	beq.n	800406a <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003ffa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da00      	bge.n	8004004 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8004002:	330f      	adds	r3, #15
 8004004:	111b      	asrs	r3, r3, #4
 8004006:	b21a      	sxth	r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800400c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004010:	2b00      	cmp	r3, #0
 8004012:	da00      	bge.n	8004016 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8004014:	330f      	adds	r3, #15
 8004016:	111b      	asrs	r3, r3, #4
 8004018:	b21a      	sxth	r2, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800401e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	da00      	bge.n	8004028 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8004026:	330f      	adds	r3, #15
 8004028:	111b      	asrs	r3, r3, #4
 800402a:	b21a      	sxth	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	809a      	strh	r2, [r3, #4]
      break;
 8004030:	e01f      	b.n	8004072 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8004032:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	da00      	bge.n	800403c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800403a:	3303      	adds	r3, #3
 800403c:	109b      	asrs	r3, r3, #2
 800403e:	b21a      	sxth	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8004044:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004048:	2b00      	cmp	r3, #0
 800404a:	da00      	bge.n	800404e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800404c:	3303      	adds	r3, #3
 800404e:	109b      	asrs	r3, r3, #2
 8004050:	b21a      	sxth	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8004056:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	da00      	bge.n	8004060 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800405e:	3303      	adds	r3, #3
 8004060:	109b      	asrs	r3, r3, #2
 8004062:	b21a      	sxth	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	809a      	strh	r2, [r3, #4]
      break;
 8004068:	e003      	b.n	8004072 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	617b      	str	r3, [r7, #20]
      break;
 8004070:	bf00      	nop
  }

  return ret;
 8004072:	697b      	ldr	r3, [r7, #20]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800408c:	f107 0310 	add.w	r3, r7, #16
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ff70 	bl	8003f78 <LIS2DW12_ACC_GetAxesRaw>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	e03c      	b.n	800411e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80040a4:	f107 030c 	add.w	r3, r7, #12
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fc9c 	bl	80039e8 <LIS2DW12_ACC_GetSensitivity>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ba:	e030      	b.n	800411e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80040bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040c0:	ee07 3a90 	vmov	s15, r3
 80040c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040d4:	ee17 2a90 	vmov	r2, s15
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80040dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040f4:	ee17 2a90 	vmov	r2, s15
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80040fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004100:	ee07 3a90 	vmov	s15, r3
 8004104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004108:	edd7 7a03 	vldr	s15, [r7, #12]
 800410c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004114:	ee17 2a90 	vmov	r2, s15
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	70fb      	strb	r3, [r7, #3]
 8004132:	4613      	mov	r3, r2
 8004134:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f103 0020 	add.w	r0, r3, #32
 800413c:	1cba      	adds	r2, r7, #2
 800413e:	78f9      	ldrb	r1, [r7, #3]
 8004140:	2301      	movs	r3, #1
 8004142:	f000 fa07 	bl	8004554 <lis2dw12_write_reg>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800414c:	f04f 33ff 	mov.w	r3, #4294967295
 8004150:	e000      	b.n	8004154 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	ed87 0a02 	vstr	s0, [r7, #8]
 8004168:	460b      	mov	r3, r1
 800416a:	71fb      	strb	r3, [r7, #7]
 800416c:	4613      	mov	r3, r2
 800416e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	3b01      	subs	r3, #1
 8004174:	2b03      	cmp	r3, #3
 8004176:	d80b      	bhi.n	8004190 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8004178:	a201      	add	r2, pc, #4	@ (adr r2, 8004180 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	080041bd 	.word	0x080041bd
 8004184:	080041e9 	.word	0x080041e9
 8004188:	08004215 	.word	0x08004215
 800418c:	08004241 	.word	0x08004241
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8004190:	79bb      	ldrb	r3, [r7, #6]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d002      	beq.n	800419c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8004196:	2304      	movs	r3, #4
 8004198:	75fb      	strb	r3, [r7, #23]
          break;
 800419a:	e002      	b.n	80041a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800419c:	2314      	movs	r3, #20
 800419e:	75fb      	strb	r3, [r7, #23]
          break;
 80041a0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80041a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80041a6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80041aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b2:	d400      	bmi.n	80041b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80041b4:	e05a      	b.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80041b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004374 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80041b8:	60bb      	str	r3, [r7, #8]
      break;
 80041ba:	e057      	b.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80041bc:	79bb      	ldrb	r3, [r7, #6]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d002      	beq.n	80041c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80041c2:	2303      	movs	r3, #3
 80041c4:	75fb      	strb	r3, [r7, #23]
          break;
 80041c6:	e002      	b.n	80041ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80041c8:	2313      	movs	r3, #19
 80041ca:	75fb      	strb	r3, [r7, #23]
          break;
 80041cc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80041ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80041d2:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8004378 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80041d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041de:	dc00      	bgt.n	80041e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80041e0:	e044      	b.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80041e2:	4b66      	ldr	r3, [pc, #408]	@ (800437c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80041e4:	60bb      	str	r3, [r7, #8]
      break;
 80041e6:	e041      	b.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80041e8:	79bb      	ldrb	r3, [r7, #6]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d002      	beq.n	80041f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80041ee:	2302      	movs	r3, #2
 80041f0:	75fb      	strb	r3, [r7, #23]
          break;
 80041f2:	e002      	b.n	80041fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80041f4:	2312      	movs	r3, #18
 80041f6:	75fb      	strb	r3, [r7, #23]
          break;
 80041f8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80041fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80041fe:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8004378 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420a:	dc00      	bgt.n	800420e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800420c:	e02e      	b.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800420e:	4b5b      	ldr	r3, [pc, #364]	@ (800437c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004210:	60bb      	str	r3, [r7, #8]
      break;
 8004212:	e02b      	b.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004214:	79bb      	ldrb	r3, [r7, #6]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d002      	beq.n	8004220 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
          break;
 800421e:	e002      	b.n	8004226 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004220:	2311      	movs	r3, #17
 8004222:	75fb      	strb	r3, [r7, #23]
          break;
 8004224:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004226:	edd7 7a02 	vldr	s15, [r7, #8]
 800422a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8004378 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800422e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	dc00      	bgt.n	800423a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8004238:	e018      	b.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800423a:	4b50      	ldr	r3, [pc, #320]	@ (800437c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800423c:	60bb      	str	r3, [r7, #8]
      break;
 800423e:	e015      	b.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8004240:	79bb      	ldrb	r3, [r7, #6]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d002      	beq.n	800424c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8004246:	2300      	movs	r3, #0
 8004248:	75fb      	strb	r3, [r7, #23]
          break;
 800424a:	e002      	b.n	8004252 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800424c:	2310      	movs	r3, #16
 800424e:	75fb      	strb	r3, [r7, #23]
          break;
 8004250:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004252:	edd7 7a02 	vldr	s15, [r7, #8]
 8004256:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8004378 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800425a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004262:	dc00      	bgt.n	8004266 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8004264:	e001      	b.n	800426a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8004266:	4b45      	ldr	r3, [pc, #276]	@ (800437c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004268:	60bb      	str	r3, [r7, #8]
      break;
 800426a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800426c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004270:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8004380 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8004274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427c:	d801      	bhi.n	8004282 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800427e:	2301      	movs	r3, #1
 8004280:	e04d      	b.n	800431e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004282:	edd7 7a02 	vldr	s15, [r7, #8]
 8004286:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800428a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004292:	d801      	bhi.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8004294:	2302      	movs	r3, #2
 8004296:	e042      	b.n	800431e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004298:	edd7 7a02 	vldr	s15, [r7, #8]
 800429c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80042a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	d801      	bhi.n	80042ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80042aa:	2303      	movs	r3, #3
 80042ac:	e037      	b.n	800431e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80042ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80042b2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004384 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80042b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042be:	d801      	bhi.n	80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80042c0:	2304      	movs	r3, #4
 80042c2:	e02c      	b.n	800431e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80042c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80042c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004388 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80042cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d4:	d801      	bhi.n	80042da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80042d6:	2305      	movs	r3, #5
 80042d8:	e021      	b.n	800431e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80042da:	edd7 7a02 	vldr	s15, [r7, #8]
 80042de:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004378 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80042e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d801      	bhi.n	80042f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80042ec:	2306      	movs	r3, #6
 80042ee:	e016      	b.n	800431e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80042f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80042f4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800438c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 80042f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	d801      	bhi.n	8004306 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8004302:	2307      	movs	r3, #7
 8004304:	e00b      	b.n	800431e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004306:	edd7 7a02 	vldr	s15, [r7, #8]
 800430a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004390 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800430e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	d801      	bhi.n	800431c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004318:	2308      	movs	r3, #8
 800431a:	e000      	b.n	800431e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800431c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800431e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3320      	adds	r3, #32
 8004324:	7dba      	ldrb	r2, [r7, #22]
 8004326:	4611      	mov	r1, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fa33 	bl	8004794 <lis2dw12_data_rate_set>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8004334:	f04f 33ff 	mov.w	r3, #4294967295
 8004338:	e018      	b.n	800436c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3320      	adds	r3, #32
 800433e:	7dfa      	ldrb	r2, [r7, #23]
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f91e 	bl	8004584 <lis2dw12_power_mode_set>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800434e:	f04f 33ff 	mov.w	r3, #4294967295
 8004352:	e00b      	b.n	800436c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	79fa      	ldrb	r2, [r7, #7]
 800435e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	79ba      	ldrb	r2, [r7, #6]
 8004366:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	41480000 	.word	0x41480000
 8004378:	43480000 	.word	0x43480000
 800437c:	43480000 	.word	0x43480000
 8004380:	3fcccccd 	.word	0x3fcccccd
 8004384:	42480000 	.word	0x42480000
 8004388:	42c80000 	.word	0x42c80000
 800438c:	43c80000 	.word	0x43c80000
 8004390:	44480000 	.word	0x44480000

08004394 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	ed87 0a02 	vstr	s0, [r7, #8]
 80043a0:	460b      	mov	r3, r1
 80043a2:	71fb      	strb	r3, [r7, #7]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	79fa      	ldrb	r2, [r7, #7]
 80043ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	79ba      	ldrb	r2, [r7, #6]
 80043b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80043b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80043bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800447c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80043c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	d801      	bhi.n	80043ce <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80043ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004480 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80043cc:	e04d      	b.n	800446a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 80043ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80043d2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80043d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	d801      	bhi.n	80043e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80043e0:	4b28      	ldr	r3, [pc, #160]	@ (8004484 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80043e2:	e042      	b.n	800446a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 80043e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043e8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80043ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f4:	d801      	bhi.n	80043fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043f6:	4b24      	ldr	r3, [pc, #144]	@ (8004488 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80043f8:	e037      	b.n	800446a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 80043fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80043fe:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800448c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440a:	d801      	bhi.n	8004410 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800440c:	4b20      	ldr	r3, [pc, #128]	@ (8004490 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800440e:	e02c      	b.n	800446a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8004410:	edd7 7a02 	vldr	s15, [r7, #8]
 8004414:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8004494 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800441c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004420:	d801      	bhi.n	8004426 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004422:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8004424:	e021      	b.n	800446a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8004426:	edd7 7a02 	vldr	s15, [r7, #8]
 800442a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800449c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800442e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004436:	d801      	bhi.n	800443c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004438:	4b19      	ldr	r3, [pc, #100]	@ (80044a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800443a:	e016      	b.n	800446a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 800443c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004440:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80044a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	d801      	bhi.n	8004452 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800444e:	4b16      	ldr	r3, [pc, #88]	@ (80044a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8004450:	e00b      	b.n	800446a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8004452:	edd7 7a02 	vldr	s15, [r7, #8]
 8004456:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80044ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800445a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	d801      	bhi.n	8004468 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004464:	4b12      	ldr	r3, [pc, #72]	@ (80044b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8004466:	e000      	b.n	800446a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8004468:	4b12      	ldr	r3, [pc, #72]	@ (80044b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	3fcccccd 	.word	0x3fcccccd
 8004480:	3fcccccd 	.word	0x3fcccccd
 8004484:	41480000 	.word	0x41480000
 8004488:	41c80000 	.word	0x41c80000
 800448c:	42480000 	.word	0x42480000
 8004490:	42480000 	.word	0x42480000
 8004494:	42c80000 	.word	0x42c80000
 8004498:	42c80000 	.word	0x42c80000
 800449c:	43480000 	.word	0x43480000
 80044a0:	43480000 	.word	0x43480000
 80044a4:	43c80000 	.word	0x43c80000
 80044a8:	43c80000 	.word	0x43c80000
 80044ac:	44480000 	.word	0x44480000
 80044b0:	44480000 	.word	0x44480000
 80044b4:	44c80000 	.word	0x44c80000

080044b8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	461a      	mov	r2, r3
 80044c4:	460b      	mov	r3, r1
 80044c6:	72fb      	strb	r3, [r7, #11]
 80044c8:	4613      	mov	r3, r2
 80044ca:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	695c      	ldr	r4, [r3, #20]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	7b1b      	ldrb	r3, [r3, #12]
 80044d8:	4618      	mov	r0, r3
 80044da:	7afb      	ldrb	r3, [r7, #11]
 80044dc:	b299      	uxth	r1, r3
 80044de:	893b      	ldrh	r3, [r7, #8]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	47a0      	blx	r4
 80044e4:	4603      	mov	r3, r0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd90      	pop	{r4, r7, pc}

080044ee <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044ee:	b590      	push	{r4, r7, lr}
 80044f0:	b087      	sub	sp, #28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	461a      	mov	r2, r3
 80044fa:	460b      	mov	r3, r1
 80044fc:	72fb      	strb	r3, [r7, #11]
 80044fe:	4613      	mov	r3, r2
 8004500:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	691c      	ldr	r4, [r3, #16]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	7b1b      	ldrb	r3, [r3, #12]
 800450e:	4618      	mov	r0, r3
 8004510:	7afb      	ldrb	r3, [r7, #11]
 8004512:	b299      	uxth	r1, r3
 8004514:	893b      	ldrh	r3, [r7, #8]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	47a0      	blx	r4
 800451a:	4603      	mov	r3, r0
}
 800451c:	4618      	mov	r0, r3
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	bd90      	pop	{r4, r7, pc}

08004524 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	461a      	mov	r2, r3
 8004530:	460b      	mov	r3, r1
 8004532:	72fb      	strb	r3, [r7, #11]
 8004534:	4613      	mov	r3, r2
 8004536:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685c      	ldr	r4, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68d8      	ldr	r0, [r3, #12]
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	7af9      	ldrb	r1, [r7, #11]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	47a0      	blx	r4
 8004548:	6178      	str	r0, [r7, #20]

  return ret;
 800454a:	697b      	ldr	r3, [r7, #20]
}
 800454c:	4618      	mov	r0, r3
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd90      	pop	{r4, r7, pc}

08004554 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	461a      	mov	r2, r3
 8004560:	460b      	mov	r3, r1
 8004562:	72fb      	strb	r3, [r7, #11]
 8004564:	4613      	mov	r3, r2
 8004566:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681c      	ldr	r4, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68d8      	ldr	r0, [r3, #12]
 8004570:	893b      	ldrh	r3, [r7, #8]
 8004572:	7af9      	ldrb	r1, [r7, #11]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	47a0      	blx	r4
 8004578:	6178      	str	r0, [r7, #20]

  return ret;
 800457a:	697b      	ldr	r3, [r7, #20]
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	bd90      	pop	{r4, r7, pc}

08004584 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004590:	f107 0210 	add.w	r2, r7, #16
 8004594:	2301      	movs	r3, #1
 8004596:	2120      	movs	r1, #32
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ffc3 	bl	8004524 <lis2dw12_read_reg>
 800459e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d118      	bne.n	80045d8 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	089b      	lsrs	r3, r3, #2
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	7c3b      	ldrb	r3, [r7, #16]
 80045b2:	f362 0383 	bfi	r3, r2, #2, #2
 80045b6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	7c3b      	ldrb	r3, [r7, #16]
 80045c2:	f362 0301 	bfi	r3, r2, #0, #2
 80045c6:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80045c8:	f107 0210 	add.w	r2, r7, #16
 80045cc:	2301      	movs	r3, #1
 80045ce:	2120      	movs	r1, #32
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff ffbf 	bl	8004554 <lis2dw12_write_reg>
 80045d6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d107      	bne.n	80045ee <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80045de:	f107 020c 	add.w	r2, r7, #12
 80045e2:	2301      	movs	r3, #1
 80045e4:	2125      	movs	r1, #37	@ 0x25
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff ff9c 	bl	8004524 <lis2dw12_read_reg>
 80045ec:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d110      	bne.n	8004616 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	7b3b      	ldrb	r3, [r7, #12]
 8004600:	f362 0382 	bfi	r3, r2, #2, #1
 8004604:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004606:	f107 020c 	add.w	r2, r7, #12
 800460a:	2301      	movs	r3, #1
 800460c:	2125      	movs	r1, #37	@ 0x25
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ffa0 	bl	8004554 <lis2dw12_write_reg>
 8004614:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004616:	697b      	ldr	r3, [r7, #20]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800462a:	f107 0210 	add.w	r2, r7, #16
 800462e:	2301      	movs	r3, #1
 8004630:	2120      	movs	r1, #32
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff ff76 	bl	8004524 <lis2dw12_read_reg>
 8004638:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f040 80a3 	bne.w	8004788 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004642:	f107 020c 	add.w	r2, r7, #12
 8004646:	2301      	movs	r3, #1
 8004648:	2125      	movs	r1, #37	@ 0x25
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ff6a 	bl	8004524 <lis2dw12_read_reg>
 8004650:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004652:	7b3b      	ldrb	r3, [r7, #12]
 8004654:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	011a      	lsls	r2, r3, #4
 800465c:	7c3b      	ldrb	r3, [r7, #16]
 800465e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004662:	b2db      	uxtb	r3, r3
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8004668:	7c3a      	ldrb	r2, [r7, #16]
 800466a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800466e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004670:	4413      	add	r3, r2
 8004672:	2b1b      	cmp	r3, #27
 8004674:	f200 8084 	bhi.w	8004780 <lis2dw12_power_mode_get+0x160>
 8004678:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <lis2dw12_power_mode_get+0x60>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	08004711 	.word	0x08004711
 8004684:	08004709 	.word	0x08004709
 8004688:	08004701 	.word	0x08004701
 800468c:	080046f9 	.word	0x080046f9
 8004690:	080046f1 	.word	0x080046f1
 8004694:	08004781 	.word	0x08004781
 8004698:	08004781 	.word	0x08004781
 800469c:	08004781 	.word	0x08004781
 80046a0:	08004731 	.word	0x08004731
 80046a4:	08004729 	.word	0x08004729
 80046a8:	08004721 	.word	0x08004721
 80046ac:	08004719 	.word	0x08004719
 80046b0:	08004781 	.word	0x08004781
 80046b4:	08004781 	.word	0x08004781
 80046b8:	08004781 	.word	0x08004781
 80046bc:	08004781 	.word	0x08004781
 80046c0:	08004759 	.word	0x08004759
 80046c4:	08004751 	.word	0x08004751
 80046c8:	08004749 	.word	0x08004749
 80046cc:	08004741 	.word	0x08004741
 80046d0:	08004739 	.word	0x08004739
 80046d4:	08004781 	.word	0x08004781
 80046d8:	08004781 	.word	0x08004781
 80046dc:	08004781 	.word	0x08004781
 80046e0:	08004779 	.word	0x08004779
 80046e4:	08004771 	.word	0x08004771
 80046e8:	08004769 	.word	0x08004769
 80046ec:	08004761 	.word	0x08004761
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2204      	movs	r2, #4
 80046f4:	701a      	strb	r2, [r3, #0]
        break;
 80046f6:	e047      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2203      	movs	r2, #3
 80046fc:	701a      	strb	r2, [r3, #0]
        break;
 80046fe:	e043      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2202      	movs	r2, #2
 8004704:	701a      	strb	r2, [r3, #0]
        break;
 8004706:	e03f      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
        break;
 800470e:	e03b      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
        break;
 8004716:	e037      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	220b      	movs	r2, #11
 800471c:	701a      	strb	r2, [r3, #0]
        break;
 800471e:	e033      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	220a      	movs	r2, #10
 8004724:	701a      	strb	r2, [r3, #0]
        break;
 8004726:	e02f      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2209      	movs	r2, #9
 800472c:	701a      	strb	r2, [r3, #0]
        break;
 800472e:	e02b      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2208      	movs	r2, #8
 8004734:	701a      	strb	r2, [r3, #0]
        break;
 8004736:	e027      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2214      	movs	r2, #20
 800473c:	701a      	strb	r2, [r3, #0]
        break;
 800473e:	e023      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2213      	movs	r2, #19
 8004744:	701a      	strb	r2, [r3, #0]
        break;
 8004746:	e01f      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2212      	movs	r2, #18
 800474c:	701a      	strb	r2, [r3, #0]
        break;
 800474e:	e01b      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2211      	movs	r2, #17
 8004754:	701a      	strb	r2, [r3, #0]
        break;
 8004756:	e017      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2210      	movs	r2, #16
 800475c:	701a      	strb	r2, [r3, #0]
        break;
 800475e:	e013      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	221b      	movs	r2, #27
 8004764:	701a      	strb	r2, [r3, #0]
        break;
 8004766:	e00f      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	221a      	movs	r2, #26
 800476c:	701a      	strb	r2, [r3, #0]
        break;
 800476e:	e00b      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2219      	movs	r2, #25
 8004774:	701a      	strb	r2, [r3, #0]
        break;
 8004776:	e007      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2218      	movs	r2, #24
 800477c:	701a      	strb	r2, [r3, #0]
        break;
 800477e:	e003      	b.n	8004788 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2204      	movs	r2, #4
 8004784:	701a      	strb	r2, [r3, #0]
        break;
 8004786:	bf00      	nop
    }
  }

  return ret;
 8004788:	697b      	ldr	r3, [r7, #20]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80047a0:	f107 0210 	add.w	r2, r7, #16
 80047a4:	2301      	movs	r3, #1
 80047a6:	2120      	movs	r1, #32
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff febb 	bl	8004524 <lis2dw12_read_reg>
 80047ae:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	7c3b      	ldrb	r3, [r7, #16]
 80047c0:	f362 1307 	bfi	r3, r2, #4, #4
 80047c4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80047c6:	f107 0210 	add.w	r2, r7, #16
 80047ca:	2301      	movs	r3, #1
 80047cc:	2120      	movs	r1, #32
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fec0 	bl	8004554 <lis2dw12_write_reg>
 80047d4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80047dc:	f107 020c 	add.w	r2, r7, #12
 80047e0:	2301      	movs	r3, #1
 80047e2:	2122      	movs	r1, #34	@ 0x22
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fe9d 	bl	8004524 <lis2dw12_read_reg>
 80047ea:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d110      	bne.n	8004814 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	7b3b      	ldrb	r3, [r7, #12]
 80047fe:	f362 0301 	bfi	r3, r2, #0, #2
 8004802:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004804:	f107 020c 	add.w	r2, r7, #12
 8004808:	2301      	movs	r3, #1
 800480a:	2122      	movs	r1, #34	@ 0x22
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fea1 	bl	8004554 <lis2dw12_write_reg>
 8004812:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004814:	697b      	ldr	r3, [r7, #20]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800482a:	f107 0210 	add.w	r2, r7, #16
 800482e:	2301      	movs	r3, #1
 8004830:	2120      	movs	r1, #32
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff fe76 	bl	8004524 <lis2dw12_read_reg>
 8004838:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 80b3 	bne.w	80049a8 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004842:	f107 020c 	add.w	r2, r7, #12
 8004846:	2301      	movs	r3, #1
 8004848:	2122      	movs	r1, #34	@ 0x22
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff fe6a 	bl	8004524 <lis2dw12_read_reg>
 8004850:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004852:	7b3b      	ldrb	r3, [r7, #12]
 8004854:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004858:	b2db      	uxtb	r3, r3
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	7c3a      	ldrb	r2, [r7, #16]
 800485e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	4413      	add	r3, r2
 8004866:	2b32      	cmp	r3, #50	@ 0x32
 8004868:	f200 809a 	bhi.w	80049a0 <lis2dw12_data_rate_get+0x180>
 800486c:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <lis2dw12_data_rate_get+0x54>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004941 	.word	0x08004941
 8004878:	08004949 	.word	0x08004949
 800487c:	08004951 	.word	0x08004951
 8004880:	08004959 	.word	0x08004959
 8004884:	08004961 	.word	0x08004961
 8004888:	08004969 	.word	0x08004969
 800488c:	08004971 	.word	0x08004971
 8004890:	08004979 	.word	0x08004979
 8004894:	08004981 	.word	0x08004981
 8004898:	08004989 	.word	0x08004989
 800489c:	080049a1 	.word	0x080049a1
 80048a0:	080049a1 	.word	0x080049a1
 80048a4:	080049a1 	.word	0x080049a1
 80048a8:	080049a1 	.word	0x080049a1
 80048ac:	080049a1 	.word	0x080049a1
 80048b0:	080049a1 	.word	0x080049a1
 80048b4:	080049a1 	.word	0x080049a1
 80048b8:	080049a1 	.word	0x080049a1
 80048bc:	08004999 	.word	0x08004999
 80048c0:	080049a1 	.word	0x080049a1
 80048c4:	080049a1 	.word	0x080049a1
 80048c8:	080049a1 	.word	0x080049a1
 80048cc:	080049a1 	.word	0x080049a1
 80048d0:	080049a1 	.word	0x080049a1
 80048d4:	080049a1 	.word	0x080049a1
 80048d8:	080049a1 	.word	0x080049a1
 80048dc:	080049a1 	.word	0x080049a1
 80048e0:	080049a1 	.word	0x080049a1
 80048e4:	080049a1 	.word	0x080049a1
 80048e8:	080049a1 	.word	0x080049a1
 80048ec:	080049a1 	.word	0x080049a1
 80048f0:	080049a1 	.word	0x080049a1
 80048f4:	080049a1 	.word	0x080049a1
 80048f8:	080049a1 	.word	0x080049a1
 80048fc:	080049a1 	.word	0x080049a1
 8004900:	080049a1 	.word	0x080049a1
 8004904:	080049a1 	.word	0x080049a1
 8004908:	080049a1 	.word	0x080049a1
 800490c:	080049a1 	.word	0x080049a1
 8004910:	080049a1 	.word	0x080049a1
 8004914:	080049a1 	.word	0x080049a1
 8004918:	080049a1 	.word	0x080049a1
 800491c:	080049a1 	.word	0x080049a1
 8004920:	080049a1 	.word	0x080049a1
 8004924:	080049a1 	.word	0x080049a1
 8004928:	080049a1 	.word	0x080049a1
 800492c:	080049a1 	.word	0x080049a1
 8004930:	080049a1 	.word	0x080049a1
 8004934:	080049a1 	.word	0x080049a1
 8004938:	080049a1 	.word	0x080049a1
 800493c:	08004991 	.word	0x08004991
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
        break;
 8004946:	e02f      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
        break;
 800494e:	e02b      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2202      	movs	r2, #2
 8004954:	701a      	strb	r2, [r3, #0]
        break;
 8004956:	e027      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2203      	movs	r2, #3
 800495c:	701a      	strb	r2, [r3, #0]
        break;
 800495e:	e023      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2204      	movs	r2, #4
 8004964:	701a      	strb	r2, [r3, #0]
        break;
 8004966:	e01f      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2205      	movs	r2, #5
 800496c:	701a      	strb	r2, [r3, #0]
        break;
 800496e:	e01b      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2206      	movs	r2, #6
 8004974:	701a      	strb	r2, [r3, #0]
        break;
 8004976:	e017      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2207      	movs	r2, #7
 800497c:	701a      	strb	r2, [r3, #0]
        break;
 800497e:	e013      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2208      	movs	r2, #8
 8004984:	701a      	strb	r2, [r3, #0]
        break;
 8004986:	e00f      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2209      	movs	r2, #9
 800498c:	701a      	strb	r2, [r3, #0]
        break;
 800498e:	e00b      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2232      	movs	r2, #50	@ 0x32
 8004994:	701a      	strb	r2, [r3, #0]
        break;
 8004996:	e007      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2212      	movs	r2, #18
 800499c:	701a      	strb	r2, [r3, #0]
        break;
 800499e:	e003      	b.n	80049a8 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
        break;
 80049a6:	bf00      	nop
    }
  }

  return ret;
 80049a8:	697b      	ldr	r3, [r7, #20]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop

080049b4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80049c0:	f107 0208 	add.w	r2, r7, #8
 80049c4:	2301      	movs	r3, #1
 80049c6:	2121      	movs	r1, #33	@ 0x21
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff fdab 	bl	8004524 <lis2dw12_read_reg>
 80049ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10f      	bne.n	80049f6 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	7a3b      	ldrb	r3, [r7, #8]
 80049e0:	f362 03c3 	bfi	r3, r2, #3, #1
 80049e4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80049e6:	f107 0208 	add.w	r2, r7, #8
 80049ea:	2301      	movs	r3, #1
 80049ec:	2121      	movs	r1, #33	@ 0x21
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff fdb0 	bl	8004554 <lis2dw12_write_reg>
 80049f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004a0c:	f107 0208 	add.w	r2, r7, #8
 8004a10:	2301      	movs	r3, #1
 8004a12:	2125      	movs	r1, #37	@ 0x25
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff fd85 	bl	8004524 <lis2dw12_read_reg>
 8004a1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10f      	bne.n	8004a42 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	7a3b      	ldrb	r3, [r7, #8]
 8004a2c:	f362 1305 	bfi	r3, r2, #4, #2
 8004a30:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004a32:	f107 0208 	add.w	r2, r7, #8
 8004a36:	2301      	movs	r3, #1
 8004a38:	2125      	movs	r1, #37	@ 0x25
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fd8a 	bl	8004554 <lis2dw12_write_reg>
 8004a40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004a56:	f107 0208 	add.w	r2, r7, #8
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	2125      	movs	r1, #37	@ 0x25
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff fd60 	bl	8004524 <lis2dw12_read_reg>
 8004a64:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004a66:	7a3b      	ldrb	r3, [r7, #8]
 8004a68:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d81a      	bhi.n	8004aa8 <lis2dw12_full_scale_get+0x5c>
 8004a72:	a201      	add	r2, pc, #4	@ (adr r2, 8004a78 <lis2dw12_full_scale_get+0x2c>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004a89 	.word	0x08004a89
 8004a7c:	08004a91 	.word	0x08004a91
 8004a80:	08004a99 	.word	0x08004a99
 8004a84:	08004aa1 	.word	0x08004aa1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
      break;
 8004a8e:	e00f      	b.n	8004ab0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
      break;
 8004a96:	e00b      	b.n	8004ab0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	701a      	strb	r2, [r3, #0]
      break;
 8004a9e:	e007      	b.n	8004ab0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	701a      	strb	r2, [r3, #0]
      break;
 8004aa6:	e003      	b.n	8004ab0 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
      break;
 8004aae:	bf00      	nop
  }

  return ret;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop

08004abc <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004ac6:	f107 020c 	add.w	r2, r7, #12
 8004aca:	2306      	movs	r3, #6
 8004acc:	2128      	movs	r1, #40	@ 0x28
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fd28 	bl	8004524 <lis2dw12_read_reg>
 8004ad4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004ad6:	7b7b      	ldrb	r3, [r7, #13]
 8004ad8:	b21a      	sxth	r2, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	7b3a      	ldrb	r2, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b21a      	sxth	r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	3302      	adds	r3, #2
 8004afc:	b212      	sxth	r2, r2
 8004afe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	3302      	adds	r3, #2
 8004b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	7bba      	ldrb	r2, [r7, #14]
 8004b10:	4413      	add	r3, r2
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	3302      	adds	r3, #2
 8004b18:	b212      	sxth	r2, r2
 8004b1a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004b1c:	7c7a      	ldrb	r2, [r7, #17]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	3304      	adds	r3, #4
 8004b22:	b212      	sxth	r2, r2
 8004b24:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	7c3a      	ldrb	r2, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	b212      	sxth	r2, r2
 8004b40:	801a      	strh	r2, [r3, #0]

  return ret;
 8004b42:	697b      	ldr	r3, [r7, #20]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004b56:	2301      	movs	r3, #1
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	210f      	movs	r1, #15
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fce1 	bl	8004524 <lis2dw12_read_reg>
 8004b62:	60f8      	str	r0, [r7, #12]

  return ret;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004b7a:	f107 0208 	add.w	r2, r7, #8
 8004b7e:	2301      	movs	r3, #1
 8004b80:	2121      	movs	r1, #33	@ 0x21
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fcce 	bl	8004524 <lis2dw12_read_reg>
 8004b88:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10f      	bne.n	8004bb0 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	7a3b      	ldrb	r3, [r7, #8]
 8004b9a:	f362 0382 	bfi	r3, r2, #2, #1
 8004b9e:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004ba0:	f107 0208 	add.w	r2, r7, #8
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	2121      	movs	r1, #33	@ 0x21
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff fcd3 	bl	8004554 <lis2dw12_write_reg>
 8004bae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004bc6:	f107 0208 	add.w	r2, r7, #8
 8004bca:	2301      	movs	r3, #1
 8004bcc:	212e      	movs	r1, #46	@ 0x2e
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff fca8 	bl	8004524 <lis2dw12_read_reg>
 8004bd4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	7a3b      	ldrb	r3, [r7, #8]
 8004be6:	f362 1347 	bfi	r3, r2, #5, #3
 8004bea:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004bec:	f107 0208 	add.w	r2, r7, #8
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	212e      	movs	r1, #46	@ 0x2e
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fcad 	bl	8004554 <lis2dw12_write_reg>
 8004bfa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d103      	bne.n	8004c24 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	e067      	b.n	8004cf4 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	7b1a      	ldrb	r2, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a28      	ldr	r2, [pc, #160]	@ (8004d00 <LIS2MDL_RegisterBusIO+0xf8>)
 8004c60:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a27      	ldr	r2, [pc, #156]	@ (8004d04 <LIS2MDL_RegisterBusIO+0xfc>)
 8004c66:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e036      	b.n	8004cf4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4798      	blx	r3
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004c92:	f04f 33ff 	mov.w	r3, #4294967295
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e02c      	b.n	8004cf4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d028      	beq.n	8004cf4 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d123      	bne.n	8004cf4 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d10d      	bne.n	8004cd0 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004cb4:	2334      	movs	r3, #52	@ 0x34
 8004cb6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004cb8:	7afb      	ldrb	r3, [r7, #11]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2162      	movs	r1, #98	@ 0x62
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fb18 	bl	80052f4 <LIS2MDL_Write_Reg>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d014      	beq.n	8004cf4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	e012      	b.n	8004cf6 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d101      	bne.n	8004cdc <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	e00c      	b.n	8004cf6 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3320      	adds	r3, #32
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 ff69 	bl	8005bba <lis2mdl_i2c_interface_set>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf2:	e000      	b.n	8004cf6 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	0800534b 	.word	0x0800534b
 8004d04:	080053cd 	.word	0x080053cd

08004d08 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d144      	bne.n	8004da2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004d18:	f107 0208 	add.w	r2, r7, #8
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	2162      	movs	r1, #98	@ 0x62
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fb94 	bl	800544e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d30:	e06c      	b.n	8004e0c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004d32:	f107 020c 	add.w	r2, r7, #12
 8004d36:	2301      	movs	r3, #1
 8004d38:	2160      	movs	r1, #96	@ 0x60
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fb87 	bl	800544e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004d46:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4a:	e05f      	b.n	8004e0c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004d4c:	7a3b      	ldrb	r3, [r7, #8]
 8004d4e:	f043 0310 	orr.w	r3, r3, #16
 8004d52:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004d54:	7a3b      	ldrb	r3, [r7, #8]
 8004d56:	f36f 0341 	bfc	r3, #1, #1
 8004d5a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004d5c:	7b3b      	ldrb	r3, [r7, #12]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f362 0301 	bfi	r3, r2, #0, #2
 8004d64:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004d66:	7b3b      	ldrb	r3, [r7, #12]
 8004d68:	f043 030c 	orr.w	r3, r3, #12
 8004d6c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004d6e:	f107 0208 	add.w	r2, r7, #8
 8004d72:	2301      	movs	r3, #1
 8004d74:	2162      	movs	r1, #98	@ 0x62
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fca8 	bl	80056cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
 8004d86:	e041      	b.n	8004e0c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004d88:	f107 020c 	add.w	r2, r7, #12
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	2160      	movs	r1, #96	@ 0x60
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fc9b 	bl	80056cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d032      	beq.n	8004e02 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004da0:	e034      	b.n	8004e0c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3320      	adds	r3, #32
 8004da6:	2101      	movs	r1, #1
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fe61 	bl	8005a70 <lis2mdl_block_data_update_set>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004db4:	f04f 33ff 	mov.w	r3, #4294967295
 8004db8:	e028      	b.n	8004e0c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3320      	adds	r3, #32
 8004dbe:	2102      	movs	r1, #2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fdd1 	bl	8005968 <lis2mdl_operating_mode_set>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd0:	e01c      	b.n	8004e0c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3320      	adds	r3, #32
 8004dd6:	2103      	movs	r1, #3
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fdeb 	bl	80059b4 <lis2mdl_data_rate_set>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004de4:	f04f 33ff 	mov.w	r3, #4294967295
 8004de8:	e010      	b.n	8004e0c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3320      	adds	r3, #32
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 febc 	bl	8005b6e <lis2mdl_self_test_set>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004e00:	e004      	b.n	8004e0c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f8a5 	bl	8004f6c <LIS2MDL_MAG_Disable>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2c:	e004      	b.n	8004e38 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d10b      	bne.n	8004e6a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004e52:	2301      	movs	r3, #1
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	214f      	movs	r1, #79	@ 0x4f
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 faf8 	bl	800544e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004e64:	f04f 33ff 	mov.w	r3, #4294967295
 8004e68:	e00c      	b.n	8004e84 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3320      	adds	r3, #32
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fe6b 	bl	8005b4c <lis2mdl_device_id_get>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e80:	e000      	b.n	8004e84 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2232      	movs	r2, #50	@ 0x32
 8004ebe:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	4a04      	ldr	r2, [pc, #16]	@ (8004ee4 <LIS2MDL_GetCapabilities+0x58>)
 8004ed4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	42c80000 	.word	0x42c80000

08004ee8 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e032      	b.n	8004f64 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d11d      	bne.n	8004f42 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f06:	f107 020c 	add.w	r2, r7, #12
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	2160      	movs	r1, #96	@ 0x60
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa9d 	bl	800544e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1e:	e021      	b.n	8004f64 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004f20:	7b3b      	ldrb	r3, [r7, #12]
 8004f22:	f36f 0301 	bfc	r3, #0, #2
 8004f26:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f28:	f107 020c 	add.w	r2, r7, #12
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	2160      	movs	r1, #96	@ 0x60
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fbcb 	bl	80056cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00e      	beq.n	8004f5a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	e010      	b.n	8004f64 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3320      	adds	r3, #32
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fd0d 	bl	8005968 <lis2mdl_operating_mode_set>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004f54:	f04f 33ff 	mov.w	r3, #4294967295
 8004f58:	e004      	b.n	8004f64 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e033      	b.n	8004fea <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d11e      	bne.n	8004fc8 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f8a:	f107 020c 	add.w	r2, r7, #12
 8004f8e:	2301      	movs	r3, #1
 8004f90:	2160      	movs	r1, #96	@ 0x60
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa5b 	bl	800544e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa2:	e022      	b.n	8004fea <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004fa4:	7b3b      	ldrb	r3, [r7, #12]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f362 0301 	bfi	r3, r2, #0, #2
 8004fac:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004fae:	f107 020c 	add.w	r2, r7, #12
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	2160      	movs	r1, #96	@ 0x60
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fb88 	bl	80056cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00e      	beq.n	8004fe0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc6:	e010      	b.n	8004fea <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3320      	adds	r3, #32
 8004fcc:	2102      	movs	r1, #2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fcca 	bl	8005968 <lis2mdl_operating_mode_set>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	e004      	b.n	8004fea <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8005002:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3320      	adds	r3, #32
 8005026:	f107 020b 	add.w	r2, r7, #11
 800502a:	4611      	mov	r1, r2
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fce7 	bl	8005a00 <lis2mdl_data_rate_get>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8005038:	f04f 33ff 	mov.w	r3, #4294967295
 800503c:	e023      	b.n	8005086 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800503e:	7afb      	ldrb	r3, [r7, #11]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d81b      	bhi.n	800507c <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8005044:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	0800505d 	.word	0x0800505d
 8005050:	08005065 	.word	0x08005065
 8005054:	0800506d 	.word	0x0800506d
 8005058:	08005075 	.word	0x08005075
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4a0c      	ldr	r2, [pc, #48]	@ (8005090 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8005060:	601a      	str	r2, [r3, #0]
      break;
 8005062:	e00f      	b.n	8005084 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4a0b      	ldr	r2, [pc, #44]	@ (8005094 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8005068:	601a      	str	r2, [r3, #0]
      break;
 800506a:	e00b      	b.n	8005084 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	4a0a      	ldr	r2, [pc, #40]	@ (8005098 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8005070:	601a      	str	r2, [r3, #0]
      break;
 8005072:	e007      	b.n	8005084 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	4a09      	ldr	r2, [pc, #36]	@ (800509c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8005078:	601a      	str	r2, [r3, #0]
      break;
 800507a:	e003      	b.n	8005084 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 800507c:	f04f 33ff 	mov.w	r3, #4294967295
 8005080:	60fb      	str	r3, [r7, #12]
      break;
 8005082:	bf00      	nop
  }

  return ret;
 8005084:	68fb      	ldr	r3, [r7, #12]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	41200000 	.word	0x41200000
 8005094:	41a00000 	.word	0x41a00000
 8005098:	42480000 	.word	0x42480000
 800509c:	42c80000 	.word	0x42c80000

080050a0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80050ac:	edd7 7a00 	vldr	s15, [r7]
 80050b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80050b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050bc:	d801      	bhi.n	80050c2 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80050be:	2300      	movs	r3, #0
 80050c0:	e016      	b.n	80050f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80050c2:	edd7 7a00 	vldr	s15, [r7]
 80050c6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80050ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d2:	d801      	bhi.n	80050d8 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e00b      	b.n	80050f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80050d8:	edd7 7a00 	vldr	s15, [r7]
 80050dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005164 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80050e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e8:	d801      	bhi.n	80050ee <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e000      	b.n	80050f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80050ee:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80050f0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d121      	bne.n	800513e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80050fa:	f107 020c 	add.w	r2, r7, #12
 80050fe:	2301      	movs	r3, #1
 8005100:	2160      	movs	r1, #96	@ 0x60
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9a3 	bl	800544e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800510e:	f04f 33ff 	mov.w	r3, #4294967295
 8005112:	e022      	b.n	800515a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	b2da      	uxtb	r2, r3
 800511c:	7b3b      	ldrb	r3, [r7, #12]
 800511e:	f362 0383 	bfi	r3, r2, #2, #2
 8005122:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005124:	f107 020c 	add.w	r2, r7, #12
 8005128:	2301      	movs	r3, #1
 800512a:	2160      	movs	r1, #96	@ 0x60
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 facd 	bl	80056cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00f      	beq.n	8005158 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005138:	f04f 33ff 	mov.w	r3, #4294967295
 800513c:	e00d      	b.n	800515a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3320      	adds	r3, #32
 8005142:	7bfa      	ldrb	r2, [r7, #15]
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fc34 	bl	80059b4 <lis2mdl_data_rate_set>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005152:	f04f 33ff 	mov.w	r3, #4294967295
 8005156:	e000      	b.n	800515a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	42480000 	.word	0x42480000

08005168 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2232      	movs	r2, #50	@ 0x32
 8005176:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3320      	adds	r3, #32
 80051ac:	f107 0208 	add.w	r2, r7, #8
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fc82 	bl	8005abc <lis2mdl_magnetic_raw_get>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	e00c      	b.n	80051de <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80051c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80051cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80051d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b088      	sub	sp, #32
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d134      	bne.n	8005262 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80051f8:	f107 0218 	add.w	r2, r7, #24
 80051fc:	2306      	movs	r3, #6
 80051fe:	2168      	movs	r1, #104	@ 0x68
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f924 	bl	800544e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	e06c      	b.n	80052ec <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005212:	7e7b      	ldrb	r3, [r7, #25]
 8005214:	b21b      	sxth	r3, r3
 8005216:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005218:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800521c:	b29b      	uxth	r3, r3
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	b29b      	uxth	r3, r3
 8005222:	7e3a      	ldrb	r2, [r7, #24]
 8005224:	4413      	add	r3, r2
 8005226:	b29b      	uxth	r3, r3
 8005228:	b21b      	sxth	r3, r3
 800522a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800522c:	7efb      	ldrb	r3, [r7, #27]
 800522e:	b21b      	sxth	r3, r3
 8005230:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8005232:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005236:	b29b      	uxth	r3, r3
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	b29b      	uxth	r3, r3
 800523c:	7eba      	ldrb	r2, [r7, #26]
 800523e:	4413      	add	r3, r2
 8005240:	b29b      	uxth	r3, r3
 8005242:	b21b      	sxth	r3, r3
 8005244:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8005246:	7f7b      	ldrb	r3, [r7, #29]
 8005248:	b21b      	sxth	r3, r3
 800524a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800524c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005250:	b29b      	uxth	r3, r3
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	b29b      	uxth	r3, r3
 8005256:	7f3a      	ldrb	r2, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	b29b      	uxth	r3, r3
 800525c:	b21b      	sxth	r3, r3
 800525e:	82bb      	strh	r3, [r7, #20]
 8005260:	e00d      	b.n	800527e <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3320      	adds	r3, #32
 8005266:	f107 0210 	add.w	r2, r7, #16
 800526a:	4611      	mov	r1, r2
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fc25 	bl	8005abc <lis2mdl_magnetic_raw_get>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 8005278:	f04f 33ff 	mov.w	r3, #4294967295
 800527c:	e036      	b.n	80052ec <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff feb4 	bl	8004ff2 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800528a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005296:	edd7 7a03 	vldr	s15, [r7, #12]
 800529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052a2:	ee17 2a90 	vmov	r2, s15
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80052aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052c2:	ee17 2a90 	vmov	r2, s15
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80052ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80052da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052e2:	ee17 2a90 	vmov	r2, s15
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
 8005300:	4613      	mov	r3, r2
 8005302:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d10b      	bne.n	8005324 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800530c:	1cba      	adds	r2, r7, #2
 800530e:	78f9      	ldrb	r1, [r7, #3]
 8005310:	2301      	movs	r3, #1
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9da 	bl	80056cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d010      	beq.n	8005340 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800531e:	f04f 33ff 	mov.w	r3, #4294967295
 8005322:	e00e      	b.n	8005342 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f103 0020 	add.w	r0, r3, #32
 800532a:	1cba      	adds	r2, r7, #2
 800532c:	78f9      	ldrb	r1, [r7, #3]
 800532e:	2301      	movs	r3, #1
 8005330:	f000 fb02 	bl	8005938 <lis2mdl_write_reg>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	e000      	b.n	8005342 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800534a:	b590      	push	{r4, r7, lr}
 800534c:	b087      	sub	sp, #28
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	461a      	mov	r2, r3
 8005356:	460b      	mov	r3, r1
 8005358:	72fb      	strb	r3, [r7, #11]
 800535a:	4613      	mov	r3, r2
 800535c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10e      	bne.n	8005388 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	695c      	ldr	r4, [r3, #20]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	7b1b      	ldrb	r3, [r3, #12]
 8005372:	4618      	mov	r0, r3
 8005374:	7afb      	ldrb	r3, [r7, #11]
 8005376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800537a:	b2db      	uxtb	r3, r3
 800537c:	4619      	mov	r1, r3
 800537e:	893b      	ldrh	r3, [r7, #8]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	47a0      	blx	r4
 8005384:	4603      	mov	r3, r0
 8005386:	e01d      	b.n	80053c4 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d10b      	bne.n	80053a8 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	695c      	ldr	r4, [r3, #20]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	7b1b      	ldrb	r3, [r3, #12]
 8005398:	4618      	mov	r0, r3
 800539a:	7afb      	ldrb	r3, [r7, #11]
 800539c:	b299      	uxth	r1, r3
 800539e:	893b      	ldrh	r3, [r7, #8]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	47a0      	blx	r4
 80053a4:	4603      	mov	r3, r0
 80053a6:	e00d      	b.n	80053c4 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	695c      	ldr	r4, [r3, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	7b1b      	ldrb	r3, [r3, #12]
 80053b0:	4618      	mov	r0, r3
 80053b2:	7afb      	ldrb	r3, [r7, #11]
 80053b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	4619      	mov	r1, r3
 80053bc:	893b      	ldrh	r3, [r7, #8]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	47a0      	blx	r4
 80053c2:	4603      	mov	r3, r0
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd90      	pop	{r4, r7, pc}

080053cc <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	461a      	mov	r2, r3
 80053d8:	460b      	mov	r3, r1
 80053da:	72fb      	strb	r3, [r7, #11]
 80053dc:	4613      	mov	r3, r2
 80053de:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10e      	bne.n	800540a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	691c      	ldr	r4, [r3, #16]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	7b1b      	ldrb	r3, [r3, #12]
 80053f4:	4618      	mov	r0, r3
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	4619      	mov	r1, r3
 8005400:	893b      	ldrh	r3, [r7, #8]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	47a0      	blx	r4
 8005406:	4603      	mov	r3, r0
 8005408:	e01d      	b.n	8005446 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d10b      	bne.n	800542a <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	691c      	ldr	r4, [r3, #16]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	7b1b      	ldrb	r3, [r3, #12]
 800541a:	4618      	mov	r0, r3
 800541c:	7afb      	ldrb	r3, [r7, #11]
 800541e:	b299      	uxth	r1, r3
 8005420:	893b      	ldrh	r3, [r7, #8]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	47a0      	blx	r4
 8005426:	4603      	mov	r3, r0
 8005428:	e00d      	b.n	8005446 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	691c      	ldr	r4, [r3, #16]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	7b1b      	ldrb	r3, [r3, #12]
 8005432:	4618      	mov	r0, r3
 8005434:	7afb      	ldrb	r3, [r7, #11]
 8005436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800543a:	b2db      	uxtb	r3, r3
 800543c:	4619      	mov	r1, r3
 800543e:	893b      	ldrh	r3, [r7, #8]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	47a0      	blx	r4
 8005444:	4603      	mov	r3, r0
  }
}
 8005446:	4618      	mov	r0, r3
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	bd90      	pop	{r4, r7, pc}

0800544e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b08c      	sub	sp, #48	@ 0x30
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	461a      	mov	r2, r3
 800545a:	460b      	mov	r3, r1
 800545c:	72fb      	strb	r3, [r7, #11]
 800545e:	4613      	mov	r3, r2
 8005460:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005468:	2340      	movs	r3, #64	@ 0x40
 800546a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800546e:	2300      	movs	r3, #0
 8005470:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8005474:	233d      	movs	r3, #61	@ 0x3d
 8005476:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005478:	2315      	movs	r3, #21
 800547a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800547e:	2316      	movs	r3, #22
 8005480:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005484:	2317      	movs	r3, #23
 8005486:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 800548a:	2314      	movs	r3, #20
 800548c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005490:	2344      	movs	r3, #68	@ 0x44
 8005492:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8005494:	2302      	movs	r3, #2
 8005496:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800549a:	2339      	movs	r3, #57	@ 0x39
 800549c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80054a6:	2329      	movs	r3, #41	@ 0x29
 80054a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80054ac:	231e      	movs	r3, #30
 80054ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 80054b8:	893b      	ldrh	r3, [r7, #8]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80054be:	2310      	movs	r3, #16
 80054c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80054ca:	2340      	movs	r3, #64	@ 0x40
 80054cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f103 0020 	add.w	r0, r3, #32
 80054d6:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80054da:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80054de:	2301      	movs	r3, #1
 80054e0:	f000 fa2a 	bl	8005938 <lis2mdl_write_reg>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80054ea:	f04f 33ff 	mov.w	r3, #4294967295
 80054ee:	e0e9      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f103 0020 	add.w	r0, r3, #32
 80054f6:	f107 021f 	add.w	r2, r7, #31
 80054fa:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80054fe:	2301      	movs	r3, #1
 8005500:	f000 fa1a 	bl	8005938 <lis2mdl_write_reg>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295
 800550e:	e0d9      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f103 0020 	add.w	r0, r3, #32
 8005516:	f107 020b 	add.w	r2, r7, #11
 800551a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800551e:	2301      	movs	r3, #1
 8005520:	f000 fa0a 	bl	8005938 <lis2mdl_write_reg>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	e0c9      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f103 0020 	add.w	r0, r3, #32
 8005536:	f107 021d 	add.w	r2, r7, #29
 800553a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800553e:	2301      	movs	r3, #1
 8005540:	f000 f9fa 	bl	8005938 <lis2mdl_write_reg>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800554a:	f04f 33ff 	mov.w	r3, #4294967295
 800554e:	e0b9      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f103 0020 	add.w	r0, r3, #32
 8005556:	f107 021e 	add.w	r2, r7, #30
 800555a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800555e:	2301      	movs	r3, #1
 8005560:	f000 f9ea 	bl	8005938 <lis2mdl_write_reg>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	e0a9      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f103 0020 	add.w	r0, r3, #32
 8005576:	f107 0220 	add.w	r2, r7, #32
 800557a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800557e:	2301      	movs	r3, #1
 8005580:	f000 f9da 	bl	8005938 <lis2mdl_write_reg>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
 800558e:	e099      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f103 0020 	add.w	r0, r3, #32
 8005596:	f107 021c 	add.w	r2, r7, #28
 800559a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800559e:	2301      	movs	r3, #1
 80055a0:	f000 f9b2 	bl	8005908 <lis2mdl_read_reg>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295
 80055ae:	e089      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80055b0:	7f3b      	ldrb	r3, [r7, #28]
 80055b2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d102      	bne.n	80055c0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80055ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80055be:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f103 0020 	add.w	r0, r3, #32
 80055c6:	f107 021c 	add.w	r2, r7, #28
 80055ca:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80055ce:	2301      	movs	r3, #1
 80055d0:	f000 f9b2 	bl	8005938 <lis2mdl_write_reg>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80055da:	f04f 33ff 	mov.w	r3, #4294967295
 80055de:	e071      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f103 0020 	add.w	r0, r3, #32
 80055e6:	f107 0214 	add.w	r2, r7, #20
 80055ea:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80055ee:	2306      	movs	r3, #6
 80055f0:	f000 f98a 	bl	8005908 <lis2mdl_read_reg>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	e061      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f103 0020 	add.w	r0, r3, #32
 8005606:	f107 021b 	add.w	r2, r7, #27
 800560a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800560e:	2301      	movs	r3, #1
 8005610:	f000 f97a 	bl	8005908 <lis2mdl_read_reg>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800561a:	f04f 33ff 	mov.w	r3, #4294967295
 800561e:	e051      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005620:	7efa      	ldrb	r2, [r7, #27]
 8005622:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005626:	4013      	ands	r3, r2
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800562e:	429a      	cmp	r2, r3
 8005630:	d1e6      	bne.n	8005600 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f103 0020 	add.w	r0, r3, #32
 8005638:	f107 021b 	add.w	r2, r7, #27
 800563c:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8005640:	2301      	movs	r3, #1
 8005642:	f000 f961 	bl	8005908 <lis2mdl_read_reg>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800564c:	f04f 33ff 	mov.w	r3, #4294967295
 8005650:	e038      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005652:	7efa      	ldrb	r2, [r7, #27]
 8005654:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005658:	4013      	ands	r3, r2
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005660:	429a      	cmp	r2, r3
 8005662:	d1e6      	bne.n	8005632 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f103 0020 	add.w	r0, r3, #32
 800566a:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800566e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005672:	2301      	movs	r3, #1
 8005674:	f000 f960 	bl	8005938 <lis2mdl_write_reg>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
 8005682:	e01f      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f103 0020 	add.w	r0, r3, #32
 800568a:	893b      	ldrh	r3, [r7, #8]
 800568c:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	f000 f939 	bl	8005908 <lis2mdl_read_reg>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
 80056a0:	e010      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f103 0020 	add.w	r0, r3, #32
 80056a8:	f107 0220 	add.w	r2, r7, #32
 80056ac:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80056b0:	2301      	movs	r3, #1
 80056b2:	f000 f941 	bl	8005938 <lis2mdl_write_reg>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80056bc:	f04f 33ff 	mov.w	r3, #4294967295
 80056c0:	e000      	b.n	80056c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3730      	adds	r7, #48	@ 0x30
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08c      	sub	sp, #48	@ 0x30
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	461a      	mov	r2, r3
 80056d8:	460b      	mov	r3, r1
 80056da:	72fb      	strb	r3, [r7, #11]
 80056dc:	4613      	mov	r3, r2
 80056de:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80056e6:	2340      	movs	r3, #64	@ 0x40
 80056e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80056f2:	233c      	movs	r3, #60	@ 0x3c
 80056f4:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80056f6:	2315      	movs	r3, #21
 80056f8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80056fc:	2316      	movs	r3, #22
 80056fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005702:	2317      	movs	r3, #23
 8005704:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005708:	2300      	movs	r3, #0
 800570a:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800570c:	2314      	movs	r3, #20
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005712:	2344      	movs	r3, #68	@ 0x44
 8005714:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005716:	2339      	movs	r3, #57	@ 0x39
 8005718:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 800571c:	2380      	movs	r3, #128	@ 0x80
 800571e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005722:	2329      	movs	r3, #41	@ 0x29
 8005724:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005728:	231e      	movs	r3, #30
 800572a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800573a:	2300      	movs	r3, #0
 800573c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005740:	2340      	movs	r3, #64	@ 0x40
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005746:	230e      	movs	r3, #14
 8005748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f103 0020 	add.w	r0, r3, #32
 8005752:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005756:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800575a:	2301      	movs	r3, #1
 800575c:	f000 f8ec 	bl	8005938 <lis2mdl_write_reg>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	e0c9      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f103 0020 	add.w	r0, r3, #32
 8005772:	f107 021f 	add.w	r2, r7, #31
 8005776:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800577a:	2301      	movs	r3, #1
 800577c:	f000 f8dc 	bl	8005938 <lis2mdl_write_reg>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005786:	f04f 33ff 	mov.w	r3, #4294967295
 800578a:	e0b9      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f103 0020 	add.w	r0, r3, #32
 8005792:	f107 020b 	add.w	r2, r7, #11
 8005796:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800579a:	2301      	movs	r3, #1
 800579c:	f000 f8cc 	bl	8005938 <lis2mdl_write_reg>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80057a6:	f04f 33ff 	mov.w	r3, #4294967295
 80057aa:	e0a9      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f103 0020 	add.w	r0, r3, #32
 80057b2:	f107 021e 	add.w	r2, r7, #30
 80057b6:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80057ba:	2301      	movs	r3, #1
 80057bc:	f000 f8bc 	bl	8005938 <lis2mdl_write_reg>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80057c6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ca:	e099      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f103 0020 	add.w	r0, r3, #32
 80057d2:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80057d6:	2301      	movs	r3, #1
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	f000 f8ad 	bl	8005938 <lis2mdl_write_reg>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80057e4:	f04f 33ff 	mov.w	r3, #4294967295
 80057e8:	e08a      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f103 0020 	add.w	r0, r3, #32
 80057f0:	f107 021d 	add.w	r2, r7, #29
 80057f4:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80057f8:	2301      	movs	r3, #1
 80057fa:	f000 f89d 	bl	8005938 <lis2mdl_write_reg>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005804:	f04f 33ff 	mov.w	r3, #4294967295
 8005808:	e07a      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f103 0020 	add.w	r0, r3, #32
 8005810:	f107 0220 	add.w	r2, r7, #32
 8005814:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005818:	2301      	movs	r3, #1
 800581a:	f000 f88d 	bl	8005938 <lis2mdl_write_reg>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005824:	f04f 33ff 	mov.w	r3, #4294967295
 8005828:	e06a      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f103 0020 	add.w	r0, r3, #32
 8005830:	f107 021c 	add.w	r2, r7, #28
 8005834:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005838:	2301      	movs	r3, #1
 800583a:	f000 f865 	bl	8005908 <lis2mdl_read_reg>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
 8005848:	e05a      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800584a:	7f3b      	ldrb	r3, [r7, #28]
 800584c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005850:	429a      	cmp	r2, r3
 8005852:	d102      	bne.n	800585a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005854:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005858:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f103 0020 	add.w	r0, r3, #32
 8005860:	f107 021c 	add.w	r2, r7, #28
 8005864:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005868:	2301      	movs	r3, #1
 800586a:	f000 f865 	bl	8005938 <lis2mdl_write_reg>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005874:	f04f 33ff 	mov.w	r3, #4294967295
 8005878:	e042      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f103 0020 	add.w	r0, r3, #32
 8005880:	f107 0214 	add.w	r2, r7, #20
 8005884:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8005888:	2306      	movs	r3, #6
 800588a:	f000 f83d 	bl	8005908 <lis2mdl_read_reg>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005894:	f04f 33ff 	mov.w	r3, #4294967295
 8005898:	e032      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f103 0020 	add.w	r0, r3, #32
 80058a0:	f107 021b 	add.w	r2, r7, #27
 80058a4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80058a8:	2301      	movs	r3, #1
 80058aa:	f000 f82d 	bl	8005908 <lis2mdl_read_reg>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80058b4:	f04f 33ff 	mov.w	r3, #4294967295
 80058b8:	e022      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80058ba:	7efa      	ldrb	r2, [r7, #27]
 80058bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058c0:	4013      	ands	r3, r2
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d1e6      	bne.n	800589a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f103 0020 	add.w	r0, r3, #32
 80058d2:	f107 021b 	add.w	r2, r7, #27
 80058d6:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80058da:	2301      	movs	r3, #1
 80058dc:	f000 f814 	bl	8005908 <lis2mdl_read_reg>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ea:	e009      	b.n	8005900 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80058ec:	7efa      	ldrb	r2, [r7, #27]
 80058ee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80058f2:	4013      	ands	r3, r2
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d1e6      	bne.n	80058cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3730      	adds	r7, #48	@ 0x30
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	461a      	mov	r2, r3
 8005914:	460b      	mov	r3, r1
 8005916:	72fb      	strb	r3, [r7, #11]
 8005918:	4613      	mov	r3, r2
 800591a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685c      	ldr	r4, [r3, #4]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68d8      	ldr	r0, [r3, #12]
 8005924:	893b      	ldrh	r3, [r7, #8]
 8005926:	7af9      	ldrb	r1, [r7, #11]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	47a0      	blx	r4
 800592c:	6178      	str	r0, [r7, #20]

  return ret;
 800592e:	697b      	ldr	r3, [r7, #20]
}
 8005930:	4618      	mov	r0, r3
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	bd90      	pop	{r4, r7, pc}

08005938 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005938:	b590      	push	{r4, r7, lr}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	607a      	str	r2, [r7, #4]
 8005942:	461a      	mov	r2, r3
 8005944:	460b      	mov	r3, r1
 8005946:	72fb      	strb	r3, [r7, #11]
 8005948:	4613      	mov	r3, r2
 800594a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681c      	ldr	r4, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68d8      	ldr	r0, [r3, #12]
 8005954:	893b      	ldrh	r3, [r7, #8]
 8005956:	7af9      	ldrb	r1, [r7, #11]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	47a0      	blx	r4
 800595c:	6178      	str	r0, [r7, #20]

  return ret;
 800595e:	697b      	ldr	r3, [r7, #20]
}
 8005960:	4618      	mov	r0, r3
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	bd90      	pop	{r4, r7, pc}

08005968 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005974:	f107 0208 	add.w	r2, r7, #8
 8005978:	2301      	movs	r3, #1
 800597a:	2160      	movs	r1, #96	@ 0x60
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff ffc3 	bl	8005908 <lis2mdl_read_reg>
 8005982:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10f      	bne.n	80059aa <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	b2da      	uxtb	r2, r3
 8005992:	7a3b      	ldrb	r3, [r7, #8]
 8005994:	f362 0301 	bfi	r3, r2, #0, #2
 8005998:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800599a:	f107 0208 	add.w	r2, r7, #8
 800599e:	2301      	movs	r3, #1
 80059a0:	2160      	movs	r1, #96	@ 0x60
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff ffc8 	bl	8005938 <lis2mdl_write_reg>
 80059a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059aa:	68fb      	ldr	r3, [r7, #12]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80059c0:	f107 0208 	add.w	r2, r7, #8
 80059c4:	2301      	movs	r3, #1
 80059c6:	2160      	movs	r1, #96	@ 0x60
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff ff9d 	bl	8005908 <lis2mdl_read_reg>
 80059ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10f      	bne.n	80059f6 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	7a3b      	ldrb	r3, [r7, #8]
 80059e0:	f362 0383 	bfi	r3, r2, #2, #2
 80059e4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80059e6:	f107 0208 	add.w	r2, r7, #8
 80059ea:	2301      	movs	r3, #1
 80059ec:	2160      	movs	r1, #96	@ 0x60
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff ffa2 	bl	8005938 <lis2mdl_write_reg>
 80059f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059f6:	68fb      	ldr	r3, [r7, #12]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a0a:	f107 0208 	add.w	r2, r7, #8
 8005a0e:	2301      	movs	r3, #1
 8005a10:	2160      	movs	r1, #96	@ 0x60
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff ff78 	bl	8005908 <lis2mdl_read_reg>
 8005a18:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005a1a:	7a3b      	ldrb	r3, [r7, #8]
 8005a1c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d81a      	bhi.n	8005a5c <lis2mdl_data_rate_get+0x5c>
 8005a26:	a201      	add	r2, pc, #4	@ (adr r2, 8005a2c <lis2mdl_data_rate_get+0x2c>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a45 	.word	0x08005a45
 8005a34:	08005a4d 	.word	0x08005a4d
 8005a38:	08005a55 	.word	0x08005a55
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
      break;
 8005a42:	e00f      	b.n	8005a64 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
      break;
 8005a4a:	e00b      	b.n	8005a64 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	701a      	strb	r2, [r3, #0]
      break;
 8005a52:	e007      	b.n	8005a64 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2203      	movs	r2, #3
 8005a58:	701a      	strb	r2, [r3, #0]
      break;
 8005a5a:	e003      	b.n	8005a64 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	701a      	strb	r2, [r3, #0]
      break;
 8005a62:	bf00      	nop
  }

  return ret;
 8005a64:	68fb      	ldr	r3, [r7, #12]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop

08005a70 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005a7c:	f107 0208 	add.w	r2, r7, #8
 8005a80:	2301      	movs	r3, #1
 8005a82:	2162      	movs	r1, #98	@ 0x62
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff ff3f 	bl	8005908 <lis2mdl_read_reg>
 8005a8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10f      	bne.n	8005ab2 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	7a3b      	ldrb	r3, [r7, #8]
 8005a9c:	f362 1304 	bfi	r3, r2, #4, #1
 8005aa0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005aa2:	f107 0208 	add.w	r2, r7, #8
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	2162      	movs	r1, #98	@ 0x62
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ff44 	bl	8005938 <lis2mdl_write_reg>
 8005ab0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005ac6:	f107 020c 	add.w	r2, r7, #12
 8005aca:	2306      	movs	r3, #6
 8005acc:	2168      	movs	r1, #104	@ 0x68
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff ff1a 	bl	8005908 <lis2mdl_read_reg>
 8005ad4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005ad6:	7b7b      	ldrb	r3, [r7, #13]
 8005ad8:	b21a      	sxth	r2, r3
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	7b3a      	ldrb	r2, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	b21a      	sxth	r2, r3
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005af6:	7bfa      	ldrb	r2, [r7, #15]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	3302      	adds	r3, #2
 8005afc:	b212      	sxth	r2, r2
 8005afe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	3302      	adds	r3, #2
 8005b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	7bba      	ldrb	r2, [r7, #14]
 8005b10:	4413      	add	r3, r2
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	3302      	adds	r3, #2
 8005b18:	b212      	sxth	r2, r2
 8005b1a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005b1c:	7c7a      	ldrb	r2, [r7, #17]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	3304      	adds	r3, #4
 8005b22:	b212      	sxth	r2, r2
 8005b24:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	7c3a      	ldrb	r2, [r7, #16]
 8005b36:	4413      	add	r3, r2
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	b212      	sxth	r2, r2
 8005b40:	801a      	strh	r2, [r3, #0]

  return ret;
 8005b42:	697b      	ldr	r3, [r7, #20]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005b56:	2301      	movs	r3, #1
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	214f      	movs	r1, #79	@ 0x4f
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fed3 	bl	8005908 <lis2mdl_read_reg>
 8005b62:	60f8      	str	r0, [r7, #12]

  return ret;
 8005b64:	68fb      	ldr	r3, [r7, #12]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	460b      	mov	r3, r1
 8005b78:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b7a:	f107 0208 	add.w	r2, r7, #8
 8005b7e:	2301      	movs	r3, #1
 8005b80:	2162      	movs	r1, #98	@ 0x62
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fec0 	bl	8005908 <lis2mdl_read_reg>
 8005b88:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10f      	bne.n	8005bb0 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	7a3b      	ldrb	r3, [r7, #8]
 8005b9a:	f362 0341 	bfi	r3, r2, #1, #1
 8005b9e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ba0:	f107 0208 	add.w	r2, r7, #8
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	2162      	movs	r1, #98	@ 0x62
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fec5 	bl	8005938 <lis2mdl_write_reg>
 8005bae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005bc6:	f107 0208 	add.w	r2, r7, #8
 8005bca:	2301      	movs	r3, #1
 8005bcc:	2162      	movs	r1, #98	@ 0x62
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff fe9a 	bl	8005908 <lis2mdl_read_reg>
 8005bd4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10f      	bne.n	8005bfc <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	7a3b      	ldrb	r3, [r7, #8]
 8005be6:	f362 1345 	bfi	r3, r2, #5, #1
 8005bea:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005bec:	f107 0208 	add.w	r2, r7, #8
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	2162      	movs	r1, #98	@ 0x62
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff fe9f 	bl	8005938 <lis2mdl_write_reg>
 8005bfa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e051      	b.n	8005cc8 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	7b1a      	ldrb	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <LSM6DSO_RegisterBusIO+0xcc>)
 8005c60:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd8 <LSM6DSO_RegisterBusIO+0xd0>)
 8005c66:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d103      	bne.n	8005c86 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e020      	b.n	8005cc8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4798      	blx	r3
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e016      	b.n	8005cc8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d112      	bne.n	8005cc8 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10d      	bne.n	8005cc8 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005cac:	230c      	movs	r3, #12
 8005cae:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2112      	movs	r1, #18
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 ff5d 	bl	8006b76 <LSM6DSO_Write_Reg>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	08007019 	.word	0x08007019
 8005cd8:	0800704f 	.word	0x0800704f

08005cdc <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d00b      	beq.n	8005d04 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3320      	adds	r3, #32
 8005cf0:	2180      	movs	r1, #128	@ 0x80
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 fe84 	bl	8007a00 <lsm6dso_i3c_disable_set>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8005cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005d02:	e060      	b.n	8005dc6 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3320      	adds	r3, #32
 8005d08:	2101      	movs	r1, #1
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 fe52 	bl	80079b4 <lsm6dso_auto_increment_set>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8005d16:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1a:	e054      	b.n	8005dc6 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3320      	adds	r3, #32
 8005d20:	2101      	movs	r1, #1
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 fd62 	bl	80077ec <lsm6dso_block_data_update_set>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8005d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d32:	e048      	b.n	8005dc6 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3320      	adds	r3, #32
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fea8 	bl	8007a90 <lsm6dso_fifo_mode_set>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8005d46:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4a:	e03c      	b.n	8005dc6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3320      	adds	r3, #32
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 fa20 	bl	80071a0 <lsm6dso_xl_data_rate_set>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8005d66:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6a:	e02c      	b.n	8005dc6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3320      	adds	r3, #32
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f9b6 	bl	80070e4 <lsm6dso_xl_full_scale_set>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8005d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d82:	e020      	b.n	8005dc6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2204      	movs	r2, #4
 8005d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3320      	adds	r3, #32
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fbce 	bl	8007534 <lsm6dso_gy_data_rate_set>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8005d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005da2:	e010      	b.n	8005dc6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3320      	adds	r3, #32
 8005da8:	2106      	movs	r1, #6
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fb5a 	bl	8007464 <lsm6dso_gy_full_scale_set>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8005db6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dba:	e004      	b.n	8005dc6 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f888 	bl	8005eec <LSM6DSO_ACC_Disable>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
 8005de6:	e015      	b.n	8005e14 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fc2e 	bl	800664a <LSM6DSO_GYRO_Disable>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005df4:	f04f 33ff 	mov.w	r3, #4294967295
 8005df8:	e00c      	b.n	8005e14 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3320      	adds	r3, #32
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 fdb0 	bl	8007992 <lsm6dso_device_id_get>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005e38:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3c:	e000      	b.n	8005e40 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2201      	movs	r2, #1
 8005e56:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2200      	movs	r2, #0
 8005e62:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2200      	movs	r2, #0
 8005e68:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005e70:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2210      	movs	r2, #16
 8005e76:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	4a07      	ldr	r2, [pc, #28]	@ (8005ea0 <LSM6DSO_GetCapabilities+0x58>)
 8005e82:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	4a06      	ldr	r2, [pc, #24]	@ (8005ea0 <LSM6DSO_GetCapabilities+0x58>)
 8005e88:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	45d02000 	.word	0x45d02000

08005ea4 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e014      	b.n	8005ee4 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f103 0220 	add.w	r2, r3, #32
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f001 f969 	bl	80071a0 <lsm6dso_xl_data_rate_set>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed8:	e004      	b.n	8005ee4 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e01f      	b.n	8005f42 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f103 0220 	add.w	r2, r3, #32
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3333      	adds	r3, #51	@ 0x33
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f001 fa40 	bl	8007394 <lsm6dso_xl_data_rate_get>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1e:	e010      	b.n	8005f42 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3320      	adds	r3, #32
 8005f24:	2100      	movs	r1, #0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 f93a 	bl	80071a0 <lsm6dso_xl_data_rate_set>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	e004      	b.n	8005f42 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3320      	adds	r3, #32
 8005f5e:	f107 020b 	add.w	r2, r7, #11
 8005f62:	4611      	mov	r1, r2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 f8e3 	bl	8007130 <lsm6dso_xl_full_scale_get>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005f70:	f04f 33ff 	mov.w	r3, #4294967295
 8005f74:	e023      	b.n	8005fbe <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d81b      	bhi.n	8005fb4 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f84 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005f95 	.word	0x08005f95
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005fa5 	.word	0x08005fa5
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005f98:	601a      	str	r2, [r3, #0]
      break;
 8005f9a:	e00f      	b.n	8005fbc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8005fcc <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005fa0:	601a      	str	r2, [r3, #0]
      break;
 8005fa2:	e00b      	b.n	8005fbc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005fa8:	601a      	str	r2, [r3, #0]
      break;
 8005faa:	e007      	b.n	8005fbc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	4a09      	ldr	r2, [pc, #36]	@ (8005fd4 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005fb0:	601a      	str	r2, [r3, #0]
      break;
 8005fb2:	e003      	b.n	8005fbc <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	60fb      	str	r3, [r7, #12]
      break;
 8005fba:	bf00      	nop
  }

  return ret;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	3d79db23 	.word	0x3d79db23
 8005fcc:	3df9db23 	.word	0x3df9db23
 8005fd0:	3e79db23 	.word	0x3e79db23
 8005fd4:	3ef9db23 	.word	0x3ef9db23

08005fd8 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3320      	adds	r3, #32
 8005fea:	f107 020b 	add.w	r2, r7, #11
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 f9cf 	bl	8007394 <lsm6dso_xl_data_rate_get>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8006000:	e054      	b.n	80060ac <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006002:	7afb      	ldrb	r3, [r7, #11]
 8006004:	2b0b      	cmp	r3, #11
 8006006:	d84c      	bhi.n	80060a2 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8006008:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006041 	.word	0x08006041
 8006014:	08006053 	.word	0x08006053
 8006018:	0800605b 	.word	0x0800605b
 800601c:	08006063 	.word	0x08006063
 8006020:	0800606b 	.word	0x0800606b
 8006024:	08006073 	.word	0x08006073
 8006028:	0800607b 	.word	0x0800607b
 800602c:	08006083 	.word	0x08006083
 8006030:	0800608b 	.word	0x0800608b
 8006034:	08006093 	.word	0x08006093
 8006038:	0800609b 	.word	0x0800609b
 800603c:	0800604b 	.word	0x0800604b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
      break;
 8006048:	e02f      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	4a19      	ldr	r2, [pc, #100]	@ (80060b4 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800604e:	601a      	str	r2, [r3, #0]
      break;
 8006050:	e02b      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	4a18      	ldr	r2, [pc, #96]	@ (80060b8 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8006056:	601a      	str	r2, [r3, #0]
      break;
 8006058:	e027      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	4a17      	ldr	r2, [pc, #92]	@ (80060bc <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800605e:	601a      	str	r2, [r3, #0]
      break;
 8006060:	e023      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	4a16      	ldr	r2, [pc, #88]	@ (80060c0 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8006066:	601a      	str	r2, [r3, #0]
      break;
 8006068:	e01f      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	4a15      	ldr	r2, [pc, #84]	@ (80060c4 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800606e:	601a      	str	r2, [r3, #0]
      break;
 8006070:	e01b      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	4a14      	ldr	r2, [pc, #80]	@ (80060c8 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8006076:	601a      	str	r2, [r3, #0]
      break;
 8006078:	e017      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	4a13      	ldr	r2, [pc, #76]	@ (80060cc <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800607e:	601a      	str	r2, [r3, #0]
      break;
 8006080:	e013      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	4a12      	ldr	r2, [pc, #72]	@ (80060d0 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8006086:	601a      	str	r2, [r3, #0]
      break;
 8006088:	e00f      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	4a11      	ldr	r2, [pc, #68]	@ (80060d4 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800608e:	601a      	str	r2, [r3, #0]
      break;
 8006090:	e00b      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	4a10      	ldr	r2, [pc, #64]	@ (80060d8 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8006096:	601a      	str	r2, [r3, #0]
      break;
 8006098:	e007      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	4a0f      	ldr	r2, [pc, #60]	@ (80060dc <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 800609e:	601a      	str	r2, [r3, #0]
      break;
 80060a0:	e003      	b.n	80060aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
 80060a6:	60fb      	str	r3, [r7, #12]
      break;
 80060a8:	bf00      	nop
  }

  return ret;
 80060aa:	68fb      	ldr	r3, [r7, #12]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	3fcccccd 	.word	0x3fcccccd
 80060b8:	41480000 	.word	0x41480000
 80060bc:	41d00000 	.word	0x41d00000
 80060c0:	42500000 	.word	0x42500000
 80060c4:	42d00000 	.word	0x42d00000
 80060c8:	43500000 	.word	0x43500000
 80060cc:	43d08000 	.word	0x43d08000
 80060d0:	44504000 	.word	0x44504000
 80060d4:	44d06000 	.word	0x44d06000
 80060d8:	45505000 	.word	0x45505000
 80060dc:	45d05800 	.word	0x45d05800

080060e0 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80060ec:	2100      	movs	r1, #0
 80060ee:	ed97 0a00 	vldr	s0, [r7]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f806 	bl	8006104 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80060f8:	4603      	mov	r3, r0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	@ 0x30
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006110:	460b      	mov	r3, r1
 8006112:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	2b02      	cmp	r3, #2
 8006120:	f000 80ea 	beq.w	80062f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006124:	2b02      	cmp	r3, #2
 8006126:	f300 8163 	bgt.w	80063f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800612e:	2b01      	cmp	r3, #1
 8006130:	d074      	beq.n	800621c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8006132:	e15d      	b.n	80063f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f103 0020 	add.w	r0, r3, #32
 800613a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800613e:	2301      	movs	r3, #1
 8006140:	2114      	movs	r1, #20
 8006142:	f000 ff9f 	bl	8007084 <lsm6dso_read_reg>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	e16c      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006152:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006156:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d025      	beq.n	80061ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10b      	bne.n	8006182 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3320      	adds	r3, #32
 800616e:	2100      	movs	r1, #0
 8006170:	4618      	mov	r0, r3
 8006172:	f001 f815 	bl	80071a0 <lsm6dso_xl_data_rate_set>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 800617c:	f04f 33ff 	mov.w	r3, #4294967295
 8006180:	e154      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006182:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006186:	f36f 13c7 	bfc	r3, #7, #1
 800618a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f103 0020 	add.w	r0, r3, #32
 8006194:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006198:	2301      	movs	r3, #1
 800619a:	2114      	movs	r1, #20
 800619c:	f000 ff8a 	bl	80070b4 <lsm6dso_write_reg>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295
 80061aa:	e13f      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f103 0020 	add.w	r0, r3, #32
 80061b2:	f107 0220 	add.w	r2, r7, #32
 80061b6:	2301      	movs	r3, #1
 80061b8:	2115      	movs	r1, #21
 80061ba:	f000 ff63 	bl	8007084 <lsm6dso_read_reg>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295
 80061c8:	e130      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80061ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d014      	beq.n	8006202 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80061d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061dc:	f36f 1304 	bfc	r3, #4, #1
 80061e0:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f103 0020 	add.w	r0, r3, #32
 80061ea:	f107 0220 	add.w	r2, r7, #32
 80061ee:	2301      	movs	r3, #1
 80061f0:	2115      	movs	r1, #21
 80061f2:	f000 ff5f 	bl	80070b4 <lsm6dso_write_reg>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80061fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006200:	e114      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006202:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006206:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800620a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800620e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006212:	d400      	bmi.n	8006216 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006214:	e0f0      	b.n	80063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8006216:	4b87      	ldr	r3, [pc, #540]	@ (8006434 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8006218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800621a:	e0ed      	b.n	80063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f103 0020 	add.w	r0, r3, #32
 8006222:	f107 021c 	add.w	r2, r7, #28
 8006226:	2301      	movs	r3, #1
 8006228:	2114      	movs	r1, #20
 800622a:	f000 ff2b 	bl	8007084 <lsm6dso_read_reg>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006234:	f04f 33ff 	mov.w	r3, #4294967295
 8006238:	e0f8      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800623a:	7f3b      	ldrb	r3, [r7, #28]
 800623c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d023      	beq.n	800628e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10b      	bne.n	8006268 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3320      	adds	r3, #32
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f000 ffa2 	bl	80071a0 <lsm6dso_xl_data_rate_set>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8006262:	f04f 33ff 	mov.w	r3, #4294967295
 8006266:	e0e1      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006268:	7f3b      	ldrb	r3, [r7, #28]
 800626a:	f36f 13c7 	bfc	r3, #7, #1
 800626e:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f103 0020 	add.w	r0, r3, #32
 8006276:	f107 021c 	add.w	r2, r7, #28
 800627a:	2301      	movs	r3, #1
 800627c:	2114      	movs	r1, #20
 800627e:	f000 ff19 	bl	80070b4 <lsm6dso_write_reg>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8006288:	f04f 33ff 	mov.w	r3, #4294967295
 800628c:	e0ce      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f103 0020 	add.w	r0, r3, #32
 8006294:	f107 0218 	add.w	r2, r7, #24
 8006298:	2301      	movs	r3, #1
 800629a:	2115      	movs	r1, #21
 800629c:	f000 fef2 	bl	8007084 <lsm6dso_read_reg>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295
 80062aa:	e0bf      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80062ac:	7e3b      	ldrb	r3, [r7, #24]
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d112      	bne.n	80062de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80062b8:	7e3b      	ldrb	r3, [r7, #24]
 80062ba:	f043 0310 	orr.w	r3, r3, #16
 80062be:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f103 0020 	add.w	r0, r3, #32
 80062c6:	f107 0218 	add.w	r2, r7, #24
 80062ca:	2301      	movs	r3, #1
 80062cc:	2115      	movs	r1, #21
 80062ce:	f000 fef1 	bl	80070b4 <lsm6dso_write_reg>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80062d8:	f04f 33ff 	mov.w	r3, #4294967295
 80062dc:	e0a6      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80062de:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80062e2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006438 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80062e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ee:	dc00      	bgt.n	80062f2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80062f0:	e082      	b.n	80063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80062f2:	4b52      	ldr	r3, [pc, #328]	@ (800643c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80062f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062f6:	e07f      	b.n	80063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f103 0020 	add.w	r0, r3, #32
 80062fe:	f107 0210 	add.w	r2, r7, #16
 8006302:	2301      	movs	r3, #1
 8006304:	2115      	movs	r1, #21
 8006306:	f000 febd 	bl	8007084 <lsm6dso_read_reg>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006310:	f04f 33ff 	mov.w	r3, #4294967295
 8006314:	e08a      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006316:	7c3b      	ldrb	r3, [r7, #16]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d012      	beq.n	8006348 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006322:	7c3b      	ldrb	r3, [r7, #16]
 8006324:	f36f 1304 	bfc	r3, #4, #1
 8006328:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f103 0020 	add.w	r0, r3, #32
 8006330:	f107 0210 	add.w	r2, r7, #16
 8006334:	2301      	movs	r3, #1
 8006336:	2115      	movs	r1, #21
 8006338:	f000 febc 	bl	80070b4 <lsm6dso_write_reg>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8006342:	f04f 33ff 	mov.w	r3, #4294967295
 8006346:	e071      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800634e:	2b01      	cmp	r3, #1
 8006350:	d108      	bne.n	8006364 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f979 	bl	800664a <LSM6DSO_GYRO_Disable>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 800635e:	f04f 33ff 	mov.w	r3, #4294967295
 8006362:	e063      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f103 0020 	add.w	r0, r3, #32
 800636a:	f107 0214 	add.w	r2, r7, #20
 800636e:	2301      	movs	r3, #1
 8006370:	2114      	movs	r1, #20
 8006372:	f000 fe87 	bl	8007084 <lsm6dso_read_reg>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	e054      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8006382:	7d3b      	ldrb	r3, [r7, #20]
 8006384:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d123      	bne.n	80063d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006394:	2b01      	cmp	r3, #1
 8006396:	d10b      	bne.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3320      	adds	r3, #32
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fefe 	bl	80071a0 <lsm6dso_xl_data_rate_set>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80063aa:	f04f 33ff 	mov.w	r3, #4294967295
 80063ae:	e03d      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80063b0:	7d3b      	ldrb	r3, [r7, #20]
 80063b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b6:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f103 0020 	add.w	r0, r3, #32
 80063be:	f107 0214 	add.w	r2, r7, #20
 80063c2:	2301      	movs	r3, #1
 80063c4:	2114      	movs	r1, #20
 80063c6:	f000 fe75 	bl	80070b4 <lsm6dso_write_reg>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80063d0:	f04f 33ff 	mov.w	r3, #4294967295
 80063d4:	e02a      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80063d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80063da:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006438 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80063de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e6:	dc00      	bgt.n	80063ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80063e8:	e006      	b.n	80063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80063ea:	4b14      	ldr	r3, [pc, #80]	@ (800643c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80063ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ee:	e003      	b.n	80063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80063f0:	f04f 33ff 	mov.w	r3, #4294967295
 80063f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80063f6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80063f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d102      	bne.n	8006406 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006400:	f04f 33ff 	mov.w	r3, #4294967295
 8006404:	e012      	b.n	800642c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800640c:	2b01      	cmp	r3, #1
 800640e:	d106      	bne.n	800641e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006410:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fbc9 	bl	8006bac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800641a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800641c:	e005      	b.n	800642a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800641e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 fc5a 	bl	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006428:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800642c:	4618      	mov	r0, r3
 800642e:	3730      	adds	r7, #48	@ 0x30
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	41480000 	.word	0x41480000
 8006438:	43500000 	.word	0x43500000
 800643c:	43500000 	.word	0x43500000

08006440 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3320      	adds	r3, #32
 8006452:	f107 020b 	add.w	r2, r7, #11
 8006456:	4611      	mov	r1, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fe69 	bl	8007130 <lsm6dso_xl_full_scale_get>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	e023      	b.n	80064b2 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800646a:	7afb      	ldrb	r3, [r7, #11]
 800646c:	2b03      	cmp	r3, #3
 800646e:	d81b      	bhi.n	80064a8 <LSM6DSO_ACC_GetFullScale+0x68>
 8006470:	a201      	add	r2, pc, #4	@ (adr r2, 8006478 <LSM6DSO_ACC_GetFullScale+0x38>)
 8006472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006476:	bf00      	nop
 8006478:	08006489 	.word	0x08006489
 800647c:	080064a1 	.word	0x080064a1
 8006480:	08006491 	.word	0x08006491
 8006484:	08006499 	.word	0x08006499
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2202      	movs	r2, #2
 800648c:	601a      	str	r2, [r3, #0]
      break;
 800648e:	e00f      	b.n	80064b0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2204      	movs	r2, #4
 8006494:	601a      	str	r2, [r3, #0]
      break;
 8006496:	e00b      	b.n	80064b0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2208      	movs	r2, #8
 800649c:	601a      	str	r2, [r3, #0]
      break;
 800649e:	e007      	b.n	80064b0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2210      	movs	r2, #16
 80064a4:	601a      	str	r2, [r3, #0]
      break;
 80064a6:	e003      	b.n	80064b0 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80064a8:	f04f 33ff 	mov.w	r3, #4294967295
 80064ac:	60fb      	str	r3, [r7, #12]
      break;
 80064ae:	bf00      	nop
  }

  return ret;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop

080064bc <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	dd0b      	ble.n	80064e4 <LSM6DSO_ACC_SetFullScale+0x28>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	dd06      	ble.n	80064e0 <LSM6DSO_ACC_SetFullScale+0x24>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	dc01      	bgt.n	80064dc <LSM6DSO_ACC_SetFullScale+0x20>
 80064d8:	2303      	movs	r3, #3
 80064da:	e004      	b.n	80064e6 <LSM6DSO_ACC_SetFullScale+0x2a>
 80064dc:	2301      	movs	r3, #1
 80064de:	e002      	b.n	80064e6 <LSM6DSO_ACC_SetFullScale+0x2a>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e000      	b.n	80064e6 <LSM6DSO_ACC_SetFullScale+0x2a>
 80064e4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80064e6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3320      	adds	r3, #32
 80064ec:	7bfa      	ldrb	r2, [r7, #15]
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fdf7 	bl	80070e4 <lsm6dso_xl_full_scale_set>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80064fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006500:	e000      	b.n	8006504 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3320      	adds	r3, #32
 800651a:	f107 0208 	add.w	r2, r7, #8
 800651e:	4611      	mov	r1, r2
 8006520:	4618      	mov	r0, r3
 8006522:	f001 f9d1 	bl	80078c8 <lsm6dso_acceleration_raw_get>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800652c:	f04f 33ff 	mov.w	r3, #4294967295
 8006530:	e00c      	b.n	800654c <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006532:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800653a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006542:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3320      	adds	r3, #32
 8006568:	f107 0210 	add.w	r2, r7, #16
 800656c:	4611      	mov	r1, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f9aa 	bl	80078c8 <lsm6dso_acceleration_raw_get>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800657a:	f04f 33ff 	mov.w	r3, #4294967295
 800657e:	e03c      	b.n	80065fa <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006580:	f107 030c 	add.w	r3, r7, #12
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fce0 	bl	8005f4c <LSM6DSO_ACC_GetSensitivity>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
 8006596:	e030      	b.n	80065fa <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006598:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800659c:	ee07 3a90 	vmov	s15, r3
 80065a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80065a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065b0:	ee17 2a90 	vmov	r2, s15
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80065b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065bc:	ee07 3a90 	vmov	s15, r3
 80065c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80065c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065d0:	ee17 2a90 	vmov	r2, s15
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80065d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80065dc:	ee07 3a90 	vmov	s15, r3
 80065e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80065e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065f0:	ee17 2a90 	vmov	r2, s15
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	e014      	b.n	8006642 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f103 0220 	add.w	r2, r3, #32
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f000 ff84 	bl	8007534 <lsm6dso_gy_data_rate_set>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006632:	f04f 33ff 	mov.w	r3, #4294967295
 8006636:	e004      	b.n	8006642 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	e01f      	b.n	80066a0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f103 0220 	add.w	r2, r3, #32
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3334      	adds	r3, #52	@ 0x34
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f001 f85b 	bl	8007728 <lsm6dso_gy_data_rate_get>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8006678:	f04f 33ff 	mov.w	r3, #4294967295
 800667c:	e010      	b.n	80066a0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3320      	adds	r3, #32
 8006682:	2100      	movs	r1, #0
 8006684:	4618      	mov	r0, r3
 8006686:	f000 ff55 	bl	8007534 <lsm6dso_gy_data_rate_set>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006690:	f04f 33ff 	mov.w	r3, #4294967295
 8006694:	e004      	b.n	80066a0 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3320      	adds	r3, #32
 80066ba:	f107 020b 	add.w	r2, r7, #11
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fef5 	bl	80074b0 <lsm6dso_gy_full_scale_get>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295
 80066d0:	e02d      	b.n	800672e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80066d2:	7afb      	ldrb	r3, [r7, #11]
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	d825      	bhi.n	8006724 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80066d8:	a201      	add	r2, pc, #4	@ (adr r2, 80066e0 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	08006705 	.word	0x08006705
 80066e4:	080066fd 	.word	0x080066fd
 80066e8:	0800670d 	.word	0x0800670d
 80066ec:	08006725 	.word	0x08006725
 80066f0:	08006715 	.word	0x08006715
 80066f4:	08006725 	.word	0x08006725
 80066f8:	0800671d 	.word	0x0800671d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006738 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8006700:	601a      	str	r2, [r3, #0]
      break;
 8006702:	e013      	b.n	800672c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4a0d      	ldr	r2, [pc, #52]	@ (800673c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8006708:	601a      	str	r2, [r3, #0]
      break;
 800670a:	e00f      	b.n	800672c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	4a0c      	ldr	r2, [pc, #48]	@ (8006740 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006710:	601a      	str	r2, [r3, #0]
      break;
 8006712:	e00b      	b.n	800672c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	4a0b      	ldr	r2, [pc, #44]	@ (8006744 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006718:	601a      	str	r2, [r3, #0]
      break;
 800671a:	e007      	b.n	800672c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	4a0a      	ldr	r2, [pc, #40]	@ (8006748 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8006720:	601a      	str	r2, [r3, #0]
      break;
 8006722:	e003      	b.n	800672c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006724:	f04f 33ff 	mov.w	r3, #4294967295
 8006728:	60fb      	str	r3, [r7, #12]
      break;
 800672a:	bf00      	nop
  }

  return ret;
 800672c:	68fb      	ldr	r3, [r7, #12]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	408c0000 	.word	0x408c0000
 800673c:	410c0000 	.word	0x410c0000
 8006740:	418c0000 	.word	0x418c0000
 8006744:	420c0000 	.word	0x420c0000
 8006748:	428c0000 	.word	0x428c0000

0800674c <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3320      	adds	r3, #32
 800675e:	f107 020b 	add.w	r2, r7, #11
 8006762:	4611      	mov	r1, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f000 ffdf 	bl	8007728 <lsm6dso_gy_data_rate_get>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006770:	f04f 33ff 	mov.w	r3, #4294967295
 8006774:	e04e      	b.n	8006814 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8006776:	7afb      	ldrb	r3, [r7, #11]
 8006778:	2b0a      	cmp	r3, #10
 800677a:	d846      	bhi.n	800680a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 800677c:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	080067b1 	.word	0x080067b1
 8006788:	080067bb 	.word	0x080067bb
 800678c:	080067c3 	.word	0x080067c3
 8006790:	080067cb 	.word	0x080067cb
 8006794:	080067d3 	.word	0x080067d3
 8006798:	080067db 	.word	0x080067db
 800679c:	080067e3 	.word	0x080067e3
 80067a0:	080067eb 	.word	0x080067eb
 80067a4:	080067f3 	.word	0x080067f3
 80067a8:	080067fb 	.word	0x080067fb
 80067ac:	08006803 	.word	0x08006803
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
      break;
 80067b8:	e02b      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	4a17      	ldr	r2, [pc, #92]	@ (800681c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80067be:	601a      	str	r2, [r3, #0]
      break;
 80067c0:	e027      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	4a16      	ldr	r2, [pc, #88]	@ (8006820 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80067c6:	601a      	str	r2, [r3, #0]
      break;
 80067c8:	e023      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	4a15      	ldr	r2, [pc, #84]	@ (8006824 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80067ce:	601a      	str	r2, [r3, #0]
      break;
 80067d0:	e01f      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	4a14      	ldr	r2, [pc, #80]	@ (8006828 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80067d6:	601a      	str	r2, [r3, #0]
      break;
 80067d8:	e01b      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	4a13      	ldr	r2, [pc, #76]	@ (800682c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80067de:	601a      	str	r2, [r3, #0]
      break;
 80067e0:	e017      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	4a12      	ldr	r2, [pc, #72]	@ (8006830 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80067e6:	601a      	str	r2, [r3, #0]
      break;
 80067e8:	e013      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	4a11      	ldr	r2, [pc, #68]	@ (8006834 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80067ee:	601a      	str	r2, [r3, #0]
      break;
 80067f0:	e00f      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	4a10      	ldr	r2, [pc, #64]	@ (8006838 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80067f6:	601a      	str	r2, [r3, #0]
      break;
 80067f8:	e00b      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	4a0f      	ldr	r2, [pc, #60]	@ (800683c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80067fe:	601a      	str	r2, [r3, #0]
      break;
 8006800:	e007      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	4a0e      	ldr	r2, [pc, #56]	@ (8006840 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8006806:	601a      	str	r2, [r3, #0]
      break;
 8006808:	e003      	b.n	8006812 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	60fb      	str	r3, [r7, #12]
      break;
 8006810:	bf00      	nop
  }

  return ret;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	41480000 	.word	0x41480000
 8006820:	41d00000 	.word	0x41d00000
 8006824:	42500000 	.word	0x42500000
 8006828:	42d00000 	.word	0x42d00000
 800682c:	43500000 	.word	0x43500000
 8006830:	43d08000 	.word	0x43d08000
 8006834:	44504000 	.word	0x44504000
 8006838:	44d06000 	.word	0x44d06000
 800683c:	45505000 	.word	0x45505000
 8006840:	45d05800 	.word	0x45d05800

08006844 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8006850:	2100      	movs	r1, #0
 8006852:	ed97 0a00 	vldr	s0, [r7]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f806 	bl	8006868 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 800685c:	4603      	mov	r3, r0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	ed87 0a02 	vstr	s0, [r7, #8]
 8006874:	460b      	mov	r3, r1
 8006876:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8006886:	2b01      	cmp	r3, #1
 8006888:	d028      	beq.n	80068dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800688a:	e05c      	b.n	8006946 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f103 0020 	add.w	r0, r3, #32
 8006892:	f107 0214 	add.w	r2, r7, #20
 8006896:	2301      	movs	r3, #1
 8006898:	2116      	movs	r1, #22
 800689a:	f000 fbf3 	bl	8007084 <lsm6dso_read_reg>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80068a4:	f04f 33ff 	mov.w	r3, #4294967295
 80068a8:	e06c      	b.n	8006984 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80068aa:	7d3b      	ldrb	r3, [r7, #20]
 80068ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d04b      	beq.n	800694e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80068b6:	7d3b      	ldrb	r3, [r7, #20]
 80068b8:	f36f 13c7 	bfc	r3, #7, #1
 80068bc:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f103 0020 	add.w	r0, r3, #32
 80068c4:	f107 0214 	add.w	r2, r7, #20
 80068c8:	2301      	movs	r3, #1
 80068ca:	2116      	movs	r1, #22
 80068cc:	f000 fbf2 	bl	80070b4 <lsm6dso_write_reg>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d03b      	beq.n	800694e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295
 80068da:	e053      	b.n	8006984 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f103 0020 	add.w	r0, r3, #32
 80068e2:	f107 0210 	add.w	r2, r7, #16
 80068e6:	2301      	movs	r3, #1
 80068e8:	2116      	movs	r1, #22
 80068ea:	f000 fbcb 	bl	8007084 <lsm6dso_read_reg>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295
 80068f8:	e044      	b.n	8006984 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80068fa:	7c3b      	ldrb	r3, [r7, #16]
 80068fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d112      	bne.n	800692c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006906:	7c3b      	ldrb	r3, [r7, #16]
 8006908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f103 0020 	add.w	r0, r3, #32
 8006914:	f107 0210 	add.w	r2, r7, #16
 8006918:	2301      	movs	r3, #1
 800691a:	2116      	movs	r1, #22
 800691c:	f000 fbca 	bl	80070b4 <lsm6dso_write_reg>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006926:	f04f 33ff 	mov.w	r3, #4294967295
 800692a:	e02b      	b.n	8006984 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800692c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006930:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800698c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693c:	dc00      	bgt.n	8006940 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800693e:	e007      	b.n	8006950 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8006940:	4b13      	ldr	r3, [pc, #76]	@ (8006990 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	e004      	b.n	8006950 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006946:	f04f 33ff 	mov.w	r3, #4294967295
 800694a:	61fb      	str	r3, [r7, #28]
      break;
 800694c:	e000      	b.n	8006950 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800694e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006956:	d102      	bne.n	800695e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006958:	f04f 33ff 	mov.w	r3, #4294967295
 800695c:	e012      	b.n	8006984 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006964:	2b01      	cmp	r3, #1
 8006966:	d106      	bne.n	8006976 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006968:	ed97 0a06 	vldr	s0, [r7, #24]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fa45 	bl	8006dfc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8006972:	61f8      	str	r0, [r7, #28]
 8006974:	e005      	b.n	8006982 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006976:	ed97 0a06 	vldr	s0, [r7, #24]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 faca 	bl	8006f14 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8006980:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8006982:	69fb      	ldr	r3, [r7, #28]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3720      	adds	r7, #32
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	43500000 	.word	0x43500000
 8006990:	43500000 	.word	0x43500000

08006994 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3320      	adds	r3, #32
 80069a6:	f107 020b 	add.w	r2, r7, #11
 80069aa:	4611      	mov	r1, r2
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fd7f 	bl	80074b0 <lsm6dso_gy_full_scale_get>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295
 80069bc:	e030      	b.n	8006a20 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	2b06      	cmp	r3, #6
 80069c2:	d828      	bhi.n	8006a16 <LSM6DSO_GYRO_GetFullScale+0x82>
 80069c4:	a201      	add	r2, pc, #4	@ (adr r2, 80069cc <LSM6DSO_GYRO_GetFullScale+0x38>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069f1 	.word	0x080069f1
 80069d0:	080069e9 	.word	0x080069e9
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a17 	.word	0x08006a17
 80069dc:	08006a03 	.word	0x08006a03
 80069e0:	08006a17 	.word	0x08006a17
 80069e4:	08006a0d 	.word	0x08006a0d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	227d      	movs	r2, #125	@ 0x7d
 80069ec:	601a      	str	r2, [r3, #0]
      break;
 80069ee:	e016      	b.n	8006a1e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	22fa      	movs	r2, #250	@ 0xfa
 80069f4:	601a      	str	r2, [r3, #0]
      break;
 80069f6:	e012      	b.n	8006a1e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80069fe:	601a      	str	r2, [r3, #0]
      break;
 8006a00:	e00d      	b.n	8006a1e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a08:	601a      	str	r2, [r3, #0]
      break;
 8006a0a:	e008      	b.n	8006a1e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006a12:	601a      	str	r2, [r3, #0]
      break;
 8006a14:	e003      	b.n	8006a1e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006a16:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1a:	60fb      	str	r3, [r7, #12]
      break;
 8006a1c:	bf00      	nop
  }

  return ret;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b7d      	cmp	r3, #125	@ 0x7d
 8006a36:	dd12      	ble.n	8006a5e <LSM6DSO_GYRO_SetFullScale+0x36>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2bfa      	cmp	r3, #250	@ 0xfa
 8006a3c:	dd0d      	ble.n	8006a5a <LSM6DSO_GYRO_SetFullScale+0x32>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006a44:	dd07      	ble.n	8006a56 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a4c:	dc01      	bgt.n	8006a52 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8006a4e:	2304      	movs	r3, #4
 8006a50:	e006      	b.n	8006a60 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006a52:	2306      	movs	r3, #6
 8006a54:	e004      	b.n	8006a60 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e002      	b.n	8006a60 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e000      	b.n	8006a60 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006a5e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006a60:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3320      	adds	r3, #32
 8006a66:	7bfa      	ldrb	r2, [r7, #15]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fcfa 	bl	8007464 <lsm6dso_gy_full_scale_set>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7a:	e000      	b.n	8006a7e <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3320      	adds	r3, #32
 8006a94:	f107 0208 	add.w	r2, r7, #8
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fecc 	bl	8007838 <lsm6dso_angular_rate_raw_get>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aaa:	e00c      	b.n	8006ac6 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006aac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006ab4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006abc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b086      	sub	sp, #24
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3320      	adds	r3, #32
 8006adc:	f107 0210 	add.w	r2, r7, #16
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fea8 	bl	8007838 <lsm6dso_angular_rate_raw_get>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295
 8006af2:	e03c      	b.n	8006b6e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006af4:	f107 030c 	add.w	r3, r7, #12
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff fdd4 	bl	80066a8 <LSM6DSO_GYRO_GetSensitivity>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0a:	e030      	b.n	8006b6e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006b0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b18:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b24:	ee17 2a90 	vmov	r2, s15
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006b2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b44:	ee17 2a90 	vmov	r2, s15
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006b4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b64:	ee17 2a90 	vmov	r2, s15
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
 8006b82:	4613      	mov	r3, r2
 8006b84:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f103 0020 	add.w	r0, r3, #32
 8006b8c:	1cba      	adds	r2, r7, #2
 8006b8e:	78f9      	ldrb	r1, [r7, #3]
 8006b90:	2301      	movs	r3, #1
 8006b92:	f000 fa8f 	bl	80070b4 <lsm6dso_write_reg>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba0:	e000      	b.n	8006ba4 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006bb8:	edd7 7a00 	vldr	s15, [r7]
 8006bbc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006cbc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc8:	d801      	bhi.n	8006bce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006bca:	230b      	movs	r3, #11
 8006bcc:	e063      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006bce:	edd7 7a00 	vldr	s15, [r7]
 8006bd2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bde:	d801      	bhi.n	8006be4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e058      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006be4:	edd7 7a00 	vldr	s15, [r7]
 8006be8:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf4:	d801      	bhi.n	8006bfa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e04d      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006bfa:	edd7 7a00 	vldr	s15, [r7]
 8006bfe:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006cc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0a:	d801      	bhi.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e042      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c10:	edd7 7a00 	vldr	s15, [r7]
 8006c14:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006cc4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	d801      	bhi.n	8006c26 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006c22:	2304      	movs	r3, #4
 8006c24:	e037      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c26:	edd7 7a00 	vldr	s15, [r7]
 8006c2a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006cc8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c36:	d801      	bhi.n	8006c3c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006c38:	2305      	movs	r3, #5
 8006c3a:	e02c      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c3c:	edd7 7a00 	vldr	s15, [r7]
 8006c40:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006ccc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4c:	d801      	bhi.n	8006c52 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006c4e:	2306      	movs	r3, #6
 8006c50:	e021      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c52:	edd7 7a00 	vldr	s15, [r7]
 8006c56:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006cd0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c62:	d801      	bhi.n	8006c68 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006c64:	2307      	movs	r3, #7
 8006c66:	e016      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c68:	edd7 7a00 	vldr	s15, [r7]
 8006c6c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006cd4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c78:	d801      	bhi.n	8006c7e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	e00b      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c7e:	edd7 7a00 	vldr	s15, [r7]
 8006c82:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8e:	d801      	bhi.n	8006c94 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006c90:	2309      	movs	r3, #9
 8006c92:	e000      	b.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c94:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006c96:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3320      	adds	r3, #32
 8006c9c:	7bfa      	ldrb	r2, [r7, #15]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fa7d 	bl	80071a0 <lsm6dso_xl_data_rate_set>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb0:	e000      	b.n	8006cb4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	3fcccccd 	.word	0x3fcccccd
 8006cc0:	42500000 	.word	0x42500000
 8006cc4:	42d00000 	.word	0x42d00000
 8006cc8:	43500000 	.word	0x43500000
 8006ccc:	43d08000 	.word	0x43d08000
 8006cd0:	44504000 	.word	0x44504000
 8006cd4:	44d06000 	.word	0x44d06000
 8006cd8:	45505000 	.word	0x45505000

08006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006ce8:	edd7 7a00 	vldr	s15, [r7]
 8006cec:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006ddc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf8:	d801      	bhi.n	8006cfe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006cfa:	230b      	movs	r3, #11
 8006cfc:	e063      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006cfe:	edd7 7a00 	vldr	s15, [r7]
 8006d02:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0e:	d801      	bhi.n	8006d14 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e058      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d14:	edd7 7a00 	vldr	s15, [r7]
 8006d18:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d24:	d801      	bhi.n	8006d2a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e04d      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d2a:	edd7 7a00 	vldr	s15, [r7]
 8006d2e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006de0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3a:	d801      	bhi.n	8006d40 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e042      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d40:	edd7 7a00 	vldr	s15, [r7]
 8006d44:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006de4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d50:	d801      	bhi.n	8006d56 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006d52:	2304      	movs	r3, #4
 8006d54:	e037      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d56:	edd7 7a00 	vldr	s15, [r7]
 8006d5a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006de8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d66:	d801      	bhi.n	8006d6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006d68:	2305      	movs	r3, #5
 8006d6a:	e02c      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d6c:	edd7 7a00 	vldr	s15, [r7]
 8006d70:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006dec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7c:	d801      	bhi.n	8006d82 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006d7e:	2306      	movs	r3, #6
 8006d80:	e021      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d82:	edd7 7a00 	vldr	s15, [r7]
 8006d86:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006df0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d92:	d801      	bhi.n	8006d98 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006d94:	2307      	movs	r3, #7
 8006d96:	e016      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d98:	edd7 7a00 	vldr	s15, [r7]
 8006d9c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006df4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da8:	d801      	bhi.n	8006dae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006daa:	2308      	movs	r3, #8
 8006dac:	e00b      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006dae:	edd7 7a00 	vldr	s15, [r7]
 8006db2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8006df8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8006db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dbe:	d801      	bhi.n	8006dc4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006dc0:	2309      	movs	r3, #9
 8006dc2:	e000      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006dc4:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	3fcccccd 	.word	0x3fcccccd
 8006de0:	42500000 	.word	0x42500000
 8006de4:	42d00000 	.word	0x42d00000
 8006de8:	43500000 	.word	0x43500000
 8006dec:	43d08000 	.word	0x43d08000
 8006df0:	44504000 	.word	0x44504000
 8006df4:	44d06000 	.word	0x44d06000
 8006df8:	45505000 	.word	0x45505000

08006dfc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006e08:	edd7 7a00 	vldr	s15, [r7]
 8006e0c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e18:	d801      	bhi.n	8006e1e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e058      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e1e:	edd7 7a00 	vldr	s15, [r7]
 8006e22:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e2e:	d801      	bhi.n	8006e34 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e04d      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e34:	edd7 7a00 	vldr	s15, [r7]
 8006e38:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006ef8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e44:	d801      	bhi.n	8006e4a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006e46:	2303      	movs	r3, #3
 8006e48:	e042      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e4a:	edd7 7a00 	vldr	s15, [r7]
 8006e4e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5a:	d801      	bhi.n	8006e60 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	e037      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e60:	edd7 7a00 	vldr	s15, [r7]
 8006e64:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006f00 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e70:	d801      	bhi.n	8006e76 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006e72:	2305      	movs	r3, #5
 8006e74:	e02c      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e76:	edd7 7a00 	vldr	s15, [r7]
 8006e7a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006f04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e86:	d801      	bhi.n	8006e8c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006e88:	2306      	movs	r3, #6
 8006e8a:	e021      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e8c:	edd7 7a00 	vldr	s15, [r7]
 8006e90:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006f08 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9c:	d801      	bhi.n	8006ea2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006e9e:	2307      	movs	r3, #7
 8006ea0:	e016      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006ea2:	edd7 7a00 	vldr	s15, [r7]
 8006ea6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006f0c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb2:	d801      	bhi.n	8006eb8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	e00b      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006eb8:	edd7 7a00 	vldr	s15, [r7]
 8006ebc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006f10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec8:	d801      	bhi.n	8006ece <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006eca:	2309      	movs	r3, #9
 8006ecc:	e000      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006ece:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006ed0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3320      	adds	r3, #32
 8006ed6:	7bfa      	ldrb	r2, [r7, #15]
 8006ed8:	4611      	mov	r1, r2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fb2a 	bl	8007534 <lsm6dso_gy_data_rate_set>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8006ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eea:	e000      	b.n	8006eee <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	42500000 	.word	0x42500000
 8006efc:	42d00000 	.word	0x42d00000
 8006f00:	43500000 	.word	0x43500000
 8006f04:	43d08000 	.word	0x43d08000
 8006f08:	44504000 	.word	0x44504000
 8006f0c:	44d06000 	.word	0x44d06000
 8006f10:	45505000 	.word	0x45505000

08006f14 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006f20:	edd7 7a00 	vldr	s15, [r7]
 8006f24:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f30:	d801      	bhi.n	8006f36 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e058      	b.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f36:	edd7 7a00 	vldr	s15, [r7]
 8006f3a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f46:	d801      	bhi.n	8006f4c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e04d      	b.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f4c:	edd7 7a00 	vldr	s15, [r7]
 8006f50:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006ffc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f5c:	d801      	bhi.n	8006f62 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e042      	b.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f62:	edd7 7a00 	vldr	s15, [r7]
 8006f66:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f72:	d801      	bhi.n	8006f78 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006f74:	2304      	movs	r3, #4
 8006f76:	e037      	b.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f78:	edd7 7a00 	vldr	s15, [r7]
 8006f7c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007004 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f88:	d801      	bhi.n	8006f8e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006f8a:	2305      	movs	r3, #5
 8006f8c:	e02c      	b.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f8e:	edd7 7a00 	vldr	s15, [r7]
 8006f92:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007008 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f9e:	d801      	bhi.n	8006fa4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8006fa0:	2306      	movs	r3, #6
 8006fa2:	e021      	b.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fa4:	edd7 7a00 	vldr	s15, [r7]
 8006fa8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800700c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb4:	d801      	bhi.n	8006fba <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8006fb6:	2307      	movs	r3, #7
 8006fb8:	e016      	b.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fba:	edd7 7a00 	vldr	s15, [r7]
 8006fbe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007010 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fca:	d801      	bhi.n	8006fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	e00b      	b.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fd0:	edd7 7a00 	vldr	s15, [r7]
 8006fd4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe0:	d801      	bhi.n	8006fe6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006fe2:	2309      	movs	r3, #9
 8006fe4:	e000      	b.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fe6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	42500000 	.word	0x42500000
 8007000:	42d00000 	.word	0x42d00000
 8007004:	43500000 	.word	0x43500000
 8007008:	43d08000 	.word	0x43d08000
 800700c:	44504000 	.word	0x44504000
 8007010:	44d06000 	.word	0x44d06000
 8007014:	45505000 	.word	0x45505000

08007018 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	607a      	str	r2, [r7, #4]
 8007022:	461a      	mov	r2, r3
 8007024:	460b      	mov	r3, r1
 8007026:	72fb      	strb	r3, [r7, #11]
 8007028:	4613      	mov	r3, r2
 800702a:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	695c      	ldr	r4, [r3, #20]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	7b1b      	ldrb	r3, [r3, #12]
 8007038:	4618      	mov	r0, r3
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	b299      	uxth	r1, r3
 800703e:	893b      	ldrh	r3, [r7, #8]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	47a0      	blx	r4
 8007044:	4603      	mov	r3, r0
}
 8007046:	4618      	mov	r0, r3
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd90      	pop	{r4, r7, pc}

0800704e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800704e:	b590      	push	{r4, r7, lr}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	461a      	mov	r2, r3
 800705a:	460b      	mov	r3, r1
 800705c:	72fb      	strb	r3, [r7, #11]
 800705e:	4613      	mov	r3, r2
 8007060:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	691c      	ldr	r4, [r3, #16]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	7b1b      	ldrb	r3, [r3, #12]
 800706e:	4618      	mov	r0, r3
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	b299      	uxth	r1, r3
 8007074:	893b      	ldrh	r3, [r7, #8]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	47a0      	blx	r4
 800707a:	4603      	mov	r3, r0
}
 800707c:	4618      	mov	r0, r3
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	bd90      	pop	{r4, r7, pc}

08007084 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007084:	b590      	push	{r4, r7, lr}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	461a      	mov	r2, r3
 8007090:	460b      	mov	r3, r1
 8007092:	72fb      	strb	r3, [r7, #11]
 8007094:	4613      	mov	r3, r2
 8007096:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	685c      	ldr	r4, [r3, #4]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	68d8      	ldr	r0, [r3, #12]
 80070a0:	893b      	ldrh	r3, [r7, #8]
 80070a2:	7af9      	ldrb	r1, [r7, #11]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	47a0      	blx	r4
 80070a8:	6178      	str	r0, [r7, #20]

  return ret;
 80070aa:	697b      	ldr	r3, [r7, #20]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd90      	pop	{r4, r7, pc}

080070b4 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80070b4:	b590      	push	{r4, r7, lr}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	461a      	mov	r2, r3
 80070c0:	460b      	mov	r3, r1
 80070c2:	72fb      	strb	r3, [r7, #11]
 80070c4:	4613      	mov	r3, r2
 80070c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681c      	ldr	r4, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	68d8      	ldr	r0, [r3, #12]
 80070d0:	893b      	ldrh	r3, [r7, #8]
 80070d2:	7af9      	ldrb	r1, [r7, #11]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	47a0      	blx	r4
 80070d8:	6178      	str	r0, [r7, #20]

  return ret;
 80070da:	697b      	ldr	r3, [r7, #20]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd90      	pop	{r4, r7, pc}

080070e4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80070f0:	f107 0208 	add.w	r2, r7, #8
 80070f4:	2301      	movs	r3, #1
 80070f6:	2110      	movs	r1, #16
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff ffc3 	bl	8007084 <lsm6dso_read_reg>
 80070fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10f      	bne.n	8007126 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	b2da      	uxtb	r2, r3
 800710e:	7a3b      	ldrb	r3, [r7, #8]
 8007110:	f362 0383 	bfi	r3, r2, #2, #2
 8007114:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007116:	f107 0208 	add.w	r2, r7, #8
 800711a:	2301      	movs	r3, #1
 800711c:	2110      	movs	r1, #16
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff ffc8 	bl	80070b4 <lsm6dso_write_reg>
 8007124:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007126:	68fb      	ldr	r3, [r7, #12]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800713a:	f107 0208 	add.w	r2, r7, #8
 800713e:	2301      	movs	r3, #1
 8007140:	2110      	movs	r1, #16
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff ff9e 	bl	8007084 <lsm6dso_read_reg>
 8007148:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800714a:	7a3b      	ldrb	r3, [r7, #8]
 800714c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b03      	cmp	r3, #3
 8007154:	d81a      	bhi.n	800718c <lsm6dso_xl_full_scale_get+0x5c>
 8007156:	a201      	add	r2, pc, #4	@ (adr r2, 800715c <lsm6dso_xl_full_scale_get+0x2c>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	0800716d 	.word	0x0800716d
 8007160:	08007175 	.word	0x08007175
 8007164:	0800717d 	.word	0x0800717d
 8007168:	08007185 	.word	0x08007185
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	701a      	strb	r2, [r3, #0]
      break;
 8007172:	e00f      	b.n	8007194 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2201      	movs	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
      break;
 800717a:	e00b      	b.n	8007194 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
      break;
 8007182:	e007      	b.n	8007194 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2203      	movs	r2, #3
 8007188:	701a      	strb	r2, [r3, #0]
      break;
 800718a:	e003      	b.n	8007194 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
      break;
 8007192:	bf00      	nop
  }

  return ret;
 8007194:	68fb      	ldr	r3, [r7, #12]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop

080071a0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80071b0:	f107 030c 	add.w	r3, r7, #12
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc90 	bl	8007adc <lsm6dso_fsm_enable_get>
 80071bc:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <lsm6dso_xl_data_rate_set+0x28>
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	e0e0      	b.n	800738a <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80071c8:	7b3b      	ldrb	r3, [r7, #12]
 80071ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80071d0:	7b3b      	ldrb	r3, [r7, #12]
 80071d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80071d6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80071d8:	4313      	orrs	r3, r2
 80071da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80071dc:	7b3b      	ldrb	r3, [r7, #12]
 80071de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80071e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80071e4:	4313      	orrs	r3, r2
 80071e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80071e8:	7b3b      	ldrb	r3, [r7, #12]
 80071ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80071ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80071f0:	4313      	orrs	r3, r2
 80071f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80071f4:	7b3b      	ldrb	r3, [r7, #12]
 80071f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80071fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007200:	7b3b      	ldrb	r3, [r7, #12]
 8007202:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007206:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007208:	4313      	orrs	r3, r2
 800720a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800720c:	7b3b      	ldrb	r3, [r7, #12]
 800720e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007212:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007214:	4313      	orrs	r3, r2
 8007216:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007218:	7b3b      	ldrb	r3, [r7, #12]
 800721a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800721e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007220:	4313      	orrs	r3, r2
 8007222:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007224:	7b7b      	ldrb	r3, [r7, #13]
 8007226:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800722a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800722c:	4313      	orrs	r3, r2
 800722e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007230:	7b7b      	ldrb	r3, [r7, #13]
 8007232:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007236:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007238:	4313      	orrs	r3, r2
 800723a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800723c:	7b7b      	ldrb	r3, [r7, #13]
 800723e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007242:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007244:	4313      	orrs	r3, r2
 8007246:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007248:	7b7b      	ldrb	r3, [r7, #13]
 800724a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800724e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007250:	4313      	orrs	r3, r2
 8007252:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007254:	7b7b      	ldrb	r3, [r7, #13]
 8007256:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800725a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800725c:	4313      	orrs	r3, r2
 800725e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007260:	7b7b      	ldrb	r3, [r7, #13]
 8007262:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007266:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007268:	4313      	orrs	r3, r2
 800726a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800726c:	7b7b      	ldrb	r3, [r7, #13]
 800726e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007272:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007274:	4313      	orrs	r3, r2
 8007276:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007278:	7b7b      	ldrb	r3, [r7, #13]
 800727a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800727e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007280:	4313      	orrs	r3, r2
 8007282:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007284:	2b01      	cmp	r3, #1
 8007286:	d164      	bne.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007288:	f107 030b 	add.w	r3, r7, #11
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fc46 	bl	8007b20 <lsm6dso_fsm_data_rate_get>
 8007294:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <lsm6dso_xl_data_rate_set+0x100>
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	e074      	b.n	800738a <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d852      	bhi.n	800734c <lsm6dso_xl_data_rate_set+0x1ac>
 80072a6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <lsm6dso_xl_data_rate_set+0x10c>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	080072bd 	.word	0x080072bd
 80072b0:	080072cf 	.word	0x080072cf
 80072b4:	080072ed 	.word	0x080072ed
 80072b8:	08007317 	.word	0x08007317
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80072bc:	78fb      	ldrb	r3, [r7, #3]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d102      	bne.n	80072c8 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80072c2:	2301      	movs	r3, #1
 80072c4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80072c6:	e044      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	75fb      	strb	r3, [r7, #23]
        break;
 80072cc:	e041      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80072d4:	2302      	movs	r3, #2
 80072d6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80072d8:	e03b      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d102      	bne.n	80072e6 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80072e0:	2302      	movs	r3, #2
 80072e2:	75fb      	strb	r3, [r7, #23]
        break;
 80072e4:	e035      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	75fb      	strb	r3, [r7, #23]
        break;
 80072ea:	e032      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80072f2:	2303      	movs	r3, #3
 80072f4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80072f6:	e02c      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d102      	bne.n	8007304 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80072fe:	2303      	movs	r3, #3
 8007300:	75fb      	strb	r3, [r7, #23]
        break;
 8007302:	e026      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	2b02      	cmp	r3, #2
 8007308:	d102      	bne.n	8007310 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800730a:	2303      	movs	r3, #3
 800730c:	75fb      	strb	r3, [r7, #23]
        break;
 800730e:	e020      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	75fb      	strb	r3, [r7, #23]
        break;
 8007314:	e01d      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800731c:	2304      	movs	r3, #4
 800731e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007320:	e017      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d102      	bne.n	800732e <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007328:	2304      	movs	r3, #4
 800732a:	75fb      	strb	r3, [r7, #23]
        break;
 800732c:	e011      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d102      	bne.n	800733a <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007334:	2304      	movs	r3, #4
 8007336:	75fb      	strb	r3, [r7, #23]
        break;
 8007338:	e00b      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d102      	bne.n	8007346 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007340:	2304      	movs	r3, #4
 8007342:	75fb      	strb	r3, [r7, #23]
        break;
 8007344:	e005      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	75fb      	strb	r3, [r7, #23]
        break;
 800734a:	e002      	b.n	8007352 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	75fb      	strb	r3, [r7, #23]
        break;
 8007350:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007352:	f107 0208 	add.w	r2, r7, #8
 8007356:	2301      	movs	r3, #1
 8007358:	2110      	movs	r1, #16
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fe92 	bl	8007084 <lsm6dso_read_reg>
 8007360:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	b2da      	uxtb	r2, r3
 800736a:	7a3b      	ldrb	r3, [r7, #8]
 800736c:	f362 1307 	bfi	r3, r2, #4, #4
 8007370:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007372:	f107 0208 	add.w	r2, r7, #8
 8007376:	2301      	movs	r3, #1
 8007378:	2110      	movs	r1, #16
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fe9a 	bl	80070b4 <lsm6dso_write_reg>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4413      	add	r3, r2
 8007386:	613b      	str	r3, [r7, #16]

  return ret;
 8007388:	693b      	ldr	r3, [r7, #16]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop

08007394 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800739e:	f107 0208 	add.w	r2, r7, #8
 80073a2:	2301      	movs	r3, #1
 80073a4:	2110      	movs	r1, #16
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff fe6c 	bl	8007084 <lsm6dso_read_reg>
 80073ac:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80073ae:	7a3b      	ldrb	r3, [r7, #8]
 80073b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b0b      	cmp	r3, #11
 80073b8:	d84a      	bhi.n	8007450 <lsm6dso_xl_data_rate_get+0xbc>
 80073ba:	a201      	add	r2, pc, #4	@ (adr r2, 80073c0 <lsm6dso_xl_data_rate_get+0x2c>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	080073f1 	.word	0x080073f1
 80073c4:	080073f9 	.word	0x080073f9
 80073c8:	08007401 	.word	0x08007401
 80073cc:	08007409 	.word	0x08007409
 80073d0:	08007411 	.word	0x08007411
 80073d4:	08007419 	.word	0x08007419
 80073d8:	08007421 	.word	0x08007421
 80073dc:	08007429 	.word	0x08007429
 80073e0:	08007431 	.word	0x08007431
 80073e4:	08007439 	.word	0x08007439
 80073e8:	08007441 	.word	0x08007441
 80073ec:	08007449 	.word	0x08007449
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	701a      	strb	r2, [r3, #0]
      break;
 80073f6:	e02f      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2201      	movs	r2, #1
 80073fc:	701a      	strb	r2, [r3, #0]
      break;
 80073fe:	e02b      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2202      	movs	r2, #2
 8007404:	701a      	strb	r2, [r3, #0]
      break;
 8007406:	e027      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2203      	movs	r2, #3
 800740c:	701a      	strb	r2, [r3, #0]
      break;
 800740e:	e023      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2204      	movs	r2, #4
 8007414:	701a      	strb	r2, [r3, #0]
      break;
 8007416:	e01f      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2205      	movs	r2, #5
 800741c:	701a      	strb	r2, [r3, #0]
      break;
 800741e:	e01b      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2206      	movs	r2, #6
 8007424:	701a      	strb	r2, [r3, #0]
      break;
 8007426:	e017      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2207      	movs	r2, #7
 800742c:	701a      	strb	r2, [r3, #0]
      break;
 800742e:	e013      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2208      	movs	r2, #8
 8007434:	701a      	strb	r2, [r3, #0]
      break;
 8007436:	e00f      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2209      	movs	r2, #9
 800743c:	701a      	strb	r2, [r3, #0]
      break;
 800743e:	e00b      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	220a      	movs	r2, #10
 8007444:	701a      	strb	r2, [r3, #0]
      break;
 8007446:	e007      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	220b      	movs	r2, #11
 800744c:	701a      	strb	r2, [r3, #0]
      break;
 800744e:	e003      	b.n	8007458 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
      break;
 8007456:	bf00      	nop
  }

  return ret;
 8007458:	68fb      	ldr	r3, [r7, #12]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop

08007464 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007470:	f107 0208 	add.w	r2, r7, #8
 8007474:	2301      	movs	r3, #1
 8007476:	2111      	movs	r1, #17
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff fe03 	bl	8007084 <lsm6dso_read_reg>
 800747e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10f      	bne.n	80074a6 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	b2da      	uxtb	r2, r3
 800748e:	7a3b      	ldrb	r3, [r7, #8]
 8007490:	f362 0343 	bfi	r3, r2, #1, #3
 8007494:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007496:	f107 0208 	add.w	r2, r7, #8
 800749a:	2301      	movs	r3, #1
 800749c:	2111      	movs	r1, #17
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fe08 	bl	80070b4 <lsm6dso_write_reg>
 80074a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80074a6:	68fb      	ldr	r3, [r7, #12]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80074ba:	f107 0208 	add.w	r2, r7, #8
 80074be:	2301      	movs	r3, #1
 80074c0:	2111      	movs	r1, #17
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff fdde 	bl	8007084 <lsm6dso_read_reg>
 80074c8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80074ca:	7a3b      	ldrb	r3, [r7, #8]
 80074cc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b06      	cmp	r3, #6
 80074d4:	d824      	bhi.n	8007520 <lsm6dso_gy_full_scale_get+0x70>
 80074d6:	a201      	add	r2, pc, #4	@ (adr r2, 80074dc <lsm6dso_gy_full_scale_get+0x2c>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	080074f9 	.word	0x080074f9
 80074e0:	08007501 	.word	0x08007501
 80074e4:	08007509 	.word	0x08007509
 80074e8:	08007521 	.word	0x08007521
 80074ec:	08007511 	.word	0x08007511
 80074f0:	08007521 	.word	0x08007521
 80074f4:	08007519 	.word	0x08007519
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
      break;
 80074fe:	e013      	b.n	8007528 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2201      	movs	r2, #1
 8007504:	701a      	strb	r2, [r3, #0]
      break;
 8007506:	e00f      	b.n	8007528 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2202      	movs	r2, #2
 800750c:	701a      	strb	r2, [r3, #0]
      break;
 800750e:	e00b      	b.n	8007528 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2204      	movs	r2, #4
 8007514:	701a      	strb	r2, [r3, #0]
      break;
 8007516:	e007      	b.n	8007528 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2206      	movs	r2, #6
 800751c:	701a      	strb	r2, [r3, #0]
      break;
 800751e:	e003      	b.n	8007528 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
      break;
 8007526:	bf00      	nop
  }

  return ret;
 8007528:	68fb      	ldr	r3, [r7, #12]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop

08007534 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007544:	f107 030c 	add.w	r3, r7, #12
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fac6 	bl	8007adc <lsm6dso_fsm_enable_get>
 8007550:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <lsm6dso_gy_data_rate_set+0x28>
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	e0e0      	b.n	800771e <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800755c:	7b3b      	ldrb	r3, [r7, #12]
 800755e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007562:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007564:	7b3b      	ldrb	r3, [r7, #12]
 8007566:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800756a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800756c:	4313      	orrs	r3, r2
 800756e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007570:	7b3b      	ldrb	r3, [r7, #12]
 8007572:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007576:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007578:	4313      	orrs	r3, r2
 800757a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800757c:	7b3b      	ldrb	r3, [r7, #12]
 800757e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007582:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007584:	4313      	orrs	r3, r2
 8007586:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007588:	7b3b      	ldrb	r3, [r7, #12]
 800758a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800758e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007590:	4313      	orrs	r3, r2
 8007592:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007594:	7b3b      	ldrb	r3, [r7, #12]
 8007596:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800759a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800759c:	4313      	orrs	r3, r2
 800759e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80075a0:	7b3b      	ldrb	r3, [r7, #12]
 80075a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80075a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80075a8:	4313      	orrs	r3, r2
 80075aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80075ac:	7b3b      	ldrb	r3, [r7, #12]
 80075ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80075b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80075b8:	7b7b      	ldrb	r3, [r7, #13]
 80075ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80075c0:	4313      	orrs	r3, r2
 80075c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80075c4:	7b7b      	ldrb	r3, [r7, #13]
 80075c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80075ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80075d0:	7b7b      	ldrb	r3, [r7, #13]
 80075d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80075d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80075d8:	4313      	orrs	r3, r2
 80075da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80075dc:	7b7b      	ldrb	r3, [r7, #13]
 80075de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80075e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80075e4:	4313      	orrs	r3, r2
 80075e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80075e8:	7b7b      	ldrb	r3, [r7, #13]
 80075ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80075ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80075f0:	4313      	orrs	r3, r2
 80075f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80075f4:	7b7b      	ldrb	r3, [r7, #13]
 80075f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80075fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80075fc:	4313      	orrs	r3, r2
 80075fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007600:	7b7b      	ldrb	r3, [r7, #13]
 8007602:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007606:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007608:	4313      	orrs	r3, r2
 800760a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800760c:	7b7b      	ldrb	r3, [r7, #13]
 800760e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007612:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007614:	4313      	orrs	r3, r2
 8007616:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007618:	2b01      	cmp	r3, #1
 800761a:	d164      	bne.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800761c:	f107 030b 	add.w	r3, r7, #11
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa7c 	bl	8007b20 <lsm6dso_fsm_data_rate_get>
 8007628:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <lsm6dso_gy_data_rate_set+0x100>
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	e074      	b.n	800771e <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	2b03      	cmp	r3, #3
 8007638:	d852      	bhi.n	80076e0 <lsm6dso_gy_data_rate_set+0x1ac>
 800763a:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <lsm6dso_gy_data_rate_set+0x10c>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007651 	.word	0x08007651
 8007644:	08007663 	.word	0x08007663
 8007648:	08007681 	.word	0x08007681
 800764c:	080076ab 	.word	0x080076ab
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8007656:	2301      	movs	r3, #1
 8007658:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800765a:	e044      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	75fb      	strb	r3, [r7, #23]
        break;
 8007660:	e041      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007668:	2302      	movs	r3, #2
 800766a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800766c:	e03b      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d102      	bne.n	800767a <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007674:	2302      	movs	r3, #2
 8007676:	75fb      	strb	r3, [r7, #23]
        break;
 8007678:	e035      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	75fb      	strb	r3, [r7, #23]
        break;
 800767e:	e032      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007686:	2303      	movs	r3, #3
 8007688:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800768a:	e02c      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d102      	bne.n	8007698 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007692:	2303      	movs	r3, #3
 8007694:	75fb      	strb	r3, [r7, #23]
        break;
 8007696:	e026      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d102      	bne.n	80076a4 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800769e:	2303      	movs	r3, #3
 80076a0:	75fb      	strb	r3, [r7, #23]
        break;
 80076a2:	e020      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	75fb      	strb	r3, [r7, #23]
        break;
 80076a8:	e01d      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076b0:	2304      	movs	r3, #4
 80076b2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80076b4:	e017      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d102      	bne.n	80076c2 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076bc:	2304      	movs	r3, #4
 80076be:	75fb      	strb	r3, [r7, #23]
        break;
 80076c0:	e011      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d102      	bne.n	80076ce <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076c8:	2304      	movs	r3, #4
 80076ca:	75fb      	strb	r3, [r7, #23]
        break;
 80076cc:	e00b      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d102      	bne.n	80076da <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076d4:	2304      	movs	r3, #4
 80076d6:	75fb      	strb	r3, [r7, #23]
        break;
 80076d8:	e005      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	75fb      	strb	r3, [r7, #23]
        break;
 80076de:	e002      	b.n	80076e6 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	75fb      	strb	r3, [r7, #23]
        break;
 80076e4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80076e6:	f107 0208 	add.w	r2, r7, #8
 80076ea:	2301      	movs	r3, #1
 80076ec:	2111      	movs	r1, #17
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fcc8 	bl	8007084 <lsm6dso_read_reg>
 80076f4:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	f003 030f 	and.w	r3, r3, #15
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	7a3b      	ldrb	r3, [r7, #8]
 8007700:	f362 1307 	bfi	r3, r2, #4, #4
 8007704:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007706:	f107 0208 	add.w	r2, r7, #8
 800770a:	2301      	movs	r3, #1
 800770c:	2111      	movs	r1, #17
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff fcd0 	bl	80070b4 <lsm6dso_write_reg>
 8007714:	4602      	mov	r2, r0
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	4413      	add	r3, r2
 800771a:	613b      	str	r3, [r7, #16]

  return ret;
 800771c:	693b      	ldr	r3, [r7, #16]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop

08007728 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007732:	f107 0208 	add.w	r2, r7, #8
 8007736:	2301      	movs	r3, #1
 8007738:	2111      	movs	r1, #17
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fca2 	bl	8007084 <lsm6dso_read_reg>
 8007740:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8007742:	7a3b      	ldrb	r3, [r7, #8]
 8007744:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b0a      	cmp	r3, #10
 800774c:	d844      	bhi.n	80077d8 <lsm6dso_gy_data_rate_get+0xb0>
 800774e:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <lsm6dso_gy_data_rate_get+0x2c>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007781 	.word	0x08007781
 8007758:	08007789 	.word	0x08007789
 800775c:	08007791 	.word	0x08007791
 8007760:	08007799 	.word	0x08007799
 8007764:	080077a1 	.word	0x080077a1
 8007768:	080077a9 	.word	0x080077a9
 800776c:	080077b1 	.word	0x080077b1
 8007770:	080077b9 	.word	0x080077b9
 8007774:	080077c1 	.word	0x080077c1
 8007778:	080077c9 	.word	0x080077c9
 800777c:	080077d1 	.word	0x080077d1
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
      break;
 8007786:	e02b      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2201      	movs	r2, #1
 800778c:	701a      	strb	r2, [r3, #0]
      break;
 800778e:	e027      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2202      	movs	r2, #2
 8007794:	701a      	strb	r2, [r3, #0]
      break;
 8007796:	e023      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2203      	movs	r2, #3
 800779c:	701a      	strb	r2, [r3, #0]
      break;
 800779e:	e01f      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2204      	movs	r2, #4
 80077a4:	701a      	strb	r2, [r3, #0]
      break;
 80077a6:	e01b      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2205      	movs	r2, #5
 80077ac:	701a      	strb	r2, [r3, #0]
      break;
 80077ae:	e017      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2206      	movs	r2, #6
 80077b4:	701a      	strb	r2, [r3, #0]
      break;
 80077b6:	e013      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2207      	movs	r2, #7
 80077bc:	701a      	strb	r2, [r3, #0]
      break;
 80077be:	e00f      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2208      	movs	r2, #8
 80077c4:	701a      	strb	r2, [r3, #0]
      break;
 80077c6:	e00b      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2209      	movs	r2, #9
 80077cc:	701a      	strb	r2, [r3, #0]
      break;
 80077ce:	e007      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	220a      	movs	r2, #10
 80077d4:	701a      	strb	r2, [r3, #0]
      break;
 80077d6:	e003      	b.n	80077e0 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]
      break;
 80077de:	bf00      	nop
  }

  return ret;
 80077e0:	68fb      	ldr	r3, [r7, #12]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop

080077ec <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80077f8:	f107 0208 	add.w	r2, r7, #8
 80077fc:	2301      	movs	r3, #1
 80077fe:	2112      	movs	r1, #18
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff fc3f 	bl	8007084 <lsm6dso_read_reg>
 8007806:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10f      	bne.n	800782e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	b2da      	uxtb	r2, r3
 8007816:	7a3b      	ldrb	r3, [r7, #8]
 8007818:	f362 1386 	bfi	r3, r2, #6, #1
 800781c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800781e:	f107 0208 	add.w	r2, r7, #8
 8007822:	2301      	movs	r3, #1
 8007824:	2112      	movs	r1, #18
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fc44 	bl	80070b4 <lsm6dso_write_reg>
 800782c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800782e:	68fb      	ldr	r3, [r7, #12]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007842:	f107 020c 	add.w	r2, r7, #12
 8007846:	2306      	movs	r3, #6
 8007848:	2122      	movs	r1, #34	@ 0x22
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff fc1a 	bl	8007084 <lsm6dso_read_reg>
 8007850:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007852:	7b7b      	ldrb	r3, [r7, #13]
 8007854:	b21a      	sxth	r2, r3
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007860:	b29b      	uxth	r3, r3
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	b29b      	uxth	r3, r3
 8007866:	7b3a      	ldrb	r2, [r7, #12]
 8007868:	4413      	add	r3, r2
 800786a:	b29b      	uxth	r3, r3
 800786c:	b21a      	sxth	r2, r3
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007872:	7bfa      	ldrb	r2, [r7, #15]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	3302      	adds	r3, #2
 8007878:	b212      	sxth	r2, r2
 800787a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	3302      	adds	r3, #2
 8007880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007884:	b29b      	uxth	r3, r3
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	b29b      	uxth	r3, r3
 800788a:	7bba      	ldrb	r2, [r7, #14]
 800788c:	4413      	add	r3, r2
 800788e:	b29a      	uxth	r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	3302      	adds	r3, #2
 8007894:	b212      	sxth	r2, r2
 8007896:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007898:	7c7a      	ldrb	r2, [r7, #17]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	3304      	adds	r3, #4
 800789e:	b212      	sxth	r2, r2
 80078a0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	3304      	adds	r3, #4
 80078a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	7c3a      	ldrb	r2, [r7, #16]
 80078b2:	4413      	add	r3, r2
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	3304      	adds	r3, #4
 80078ba:	b212      	sxth	r2, r2
 80078bc:	801a      	strh	r2, [r3, #0]

  return ret;
 80078be:	697b      	ldr	r3, [r7, #20]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80078d2:	f107 020c 	add.w	r2, r7, #12
 80078d6:	2306      	movs	r3, #6
 80078d8:	2128      	movs	r1, #40	@ 0x28
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff fbd2 	bl	8007084 <lsm6dso_read_reg>
 80078e0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80078e2:	7b7b      	ldrb	r3, [r7, #13]
 80078e4:	b21a      	sxth	r2, r3
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	7b3a      	ldrb	r2, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	b21a      	sxth	r2, r3
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007902:	7bfa      	ldrb	r2, [r7, #15]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	3302      	adds	r3, #2
 8007908:	b212      	sxth	r2, r2
 800790a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	3302      	adds	r3, #2
 8007910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007914:	b29b      	uxth	r3, r3
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	b29b      	uxth	r3, r3
 800791a:	7bba      	ldrb	r2, [r7, #14]
 800791c:	4413      	add	r3, r2
 800791e:	b29a      	uxth	r2, r3
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	3302      	adds	r3, #2
 8007924:	b212      	sxth	r2, r2
 8007926:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007928:	7c7a      	ldrb	r2, [r7, #17]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	3304      	adds	r3, #4
 800792e:	b212      	sxth	r2, r2
 8007930:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	3304      	adds	r3, #4
 8007936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800793a:	b29b      	uxth	r3, r3
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	b29b      	uxth	r3, r3
 8007940:	7c3a      	ldrb	r2, [r7, #16]
 8007942:	4413      	add	r3, r2
 8007944:	b29a      	uxth	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	3304      	adds	r3, #4
 800794a:	b212      	sxth	r2, r2
 800794c:	801a      	strh	r2, [r3, #0]

  return ret;
 800794e:	697b      	ldr	r3, [r7, #20]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8007964:	2300      	movs	r3, #0
 8007966:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	b2da      	uxtb	r2, r3
 8007970:	7a3b      	ldrb	r3, [r7, #8]
 8007972:	f362 1387 	bfi	r3, r2, #6, #2
 8007976:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007978:	f107 0208 	add.w	r2, r7, #8
 800797c:	2301      	movs	r3, #1
 800797e:	2101      	movs	r1, #1
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff fb97 	bl	80070b4 <lsm6dso_write_reg>
 8007986:	60f8      	str	r0, [r7, #12]

  return ret;
 8007988:	68fb      	ldr	r3, [r7, #12]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800799c:	2301      	movs	r3, #1
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	210f      	movs	r1, #15
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff fb6e 	bl	8007084 <lsm6dso_read_reg>
 80079a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80079aa:	68fb      	ldr	r3, [r7, #12]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80079c0:	f107 0208 	add.w	r2, r7, #8
 80079c4:	2301      	movs	r3, #1
 80079c6:	2112      	movs	r1, #18
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff fb5b 	bl	8007084 <lsm6dso_read_reg>
 80079ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10f      	bne.n	80079f6 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	7a3b      	ldrb	r3, [r7, #8]
 80079e0:	f362 0382 	bfi	r3, r2, #2, #1
 80079e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80079e6:	f107 0208 	add.w	r2, r7, #8
 80079ea:	2301      	movs	r3, #1
 80079ec:	2112      	movs	r1, #18
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff fb60 	bl	80070b4 <lsm6dso_write_reg>
 80079f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079f6:	68fb      	ldr	r3, [r7, #12]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007a0c:	f107 020c 	add.w	r2, r7, #12
 8007a10:	2301      	movs	r3, #1
 8007a12:	2118      	movs	r1, #24
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff fb35 	bl	8007084 <lsm6dso_read_reg>
 8007a1a:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	09db      	lsrs	r3, r3, #7
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	7b3b      	ldrb	r3, [r7, #12]
 8007a2a:	f362 0341 	bfi	r3, r2, #1, #1
 8007a2e:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007a30:	f107 020c 	add.w	r2, r7, #12
 8007a34:	2301      	movs	r3, #1
 8007a36:	2118      	movs	r1, #24
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fb3b 	bl	80070b4 <lsm6dso_write_reg>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	4413      	add	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <lsm6dso_i3c_disable_set+0x50>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	e01b      	b.n	8007a88 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007a50:	f107 0210 	add.w	r2, r7, #16
 8007a54:	2301      	movs	r3, #1
 8007a56:	2162      	movs	r1, #98	@ 0x62
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff fb13 	bl	8007084 <lsm6dso_read_reg>
 8007a5e:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	7c3b      	ldrb	r3, [r7, #16]
 8007a6a:	f362 03c4 	bfi	r3, r2, #3, #2
 8007a6e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007a70:	f107 0210 	add.w	r2, r7, #16
 8007a74:	2301      	movs	r3, #1
 8007a76:	2162      	movs	r1, #98	@ 0x62
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff fb1b 	bl	80070b4 <lsm6dso_write_reg>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	4413      	add	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  return ret;
 8007a86:	697b      	ldr	r3, [r7, #20]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007a9c:	f107 0208 	add.w	r2, r7, #8
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	210a      	movs	r1, #10
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff faed 	bl	8007084 <lsm6dso_read_reg>
 8007aaa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10f      	bne.n	8007ad2 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	7a3b      	ldrb	r3, [r7, #8]
 8007abc:	f362 0302 	bfi	r3, r2, #0, #3
 8007ac0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007ac2:	f107 0208 	add.w	r2, r7, #8
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	210a      	movs	r1, #10
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff faf2 	bl	80070b4 <lsm6dso_write_reg>
 8007ad0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007ae6:	2102      	movs	r1, #2
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff ff35 	bl	8007958 <lsm6dso_mem_bank_set>
 8007aee:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007af0:	2302      	movs	r3, #2
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	2146      	movs	r1, #70	@ 0x46
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fac4 	bl	8007084 <lsm6dso_read_reg>
 8007afc:	4602      	mov	r2, r0
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff ff26 	bl	8007958 <lsm6dso_mem_bank_set>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4413      	add	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

  return ret;
 8007b14:	68fb      	ldr	r3, [r7, #12]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007b2a:	2102      	movs	r1, #2
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ff13 	bl	8007958 <lsm6dso_mem_bank_set>
 8007b32:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <lsm6dso_fsm_data_rate_get+0x1e>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	e03a      	b.n	8007bb4 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8007b3e:	f107 0208 	add.w	r2, r7, #8
 8007b42:	2301      	movs	r3, #1
 8007b44:	215f      	movs	r1, #95	@ 0x5f
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fa9c 	bl	8007084 <lsm6dso_read_reg>
 8007b4c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d125      	bne.n	8007ba0 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8007b54:	7a3b      	ldrb	r3, [r7, #8]
 8007b56:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	d81b      	bhi.n	8007b98 <lsm6dso_fsm_data_rate_get+0x78>
 8007b60:	a201      	add	r2, pc, #4	@ (adr r2, 8007b68 <lsm6dso_fsm_data_rate_get+0x48>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007b81 	.word	0x08007b81
 8007b70:	08007b89 	.word	0x08007b89
 8007b74:	08007b91 	.word	0x08007b91
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
      break;
 8007b7e:	e010      	b.n	8007ba2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
      break;
 8007b86:	e00c      	b.n	8007ba2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e008      	b.n	8007ba2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2203      	movs	r2, #3
 8007b94:	701a      	strb	r2, [r3, #0]
      break;
 8007b96:	e004      	b.n	8007ba2 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
      break;
 8007b9e:	e000      	b.n	8007ba2 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8007ba0:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff fed7 	bl	8007958 <lsm6dso_mem_bank_set>
 8007baa:	4602      	mov	r2, r0
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  return ret;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08e      	sub	sp, #56	@ 0x38
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d06e      	beq.n	8007cb6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	f200 809d 	bhi.w	8007d1a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <IKS01A3_MOTION_SENSOR_Init+0x32>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d032      	beq.n	8007c52 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8007bec:	e095      	b.n	8007d1a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8007bee:	6838      	ldr	r0, [r7, #0]
 8007bf0:	f000 f9ae 	bl	8007f50 <LSM6DSO_0_Probe>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfe:	e0cc      	b.n	8007d9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c00:	4a68      	ldr	r2, [pc, #416]	@ (8007da4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	4967      	ldr	r1, [pc, #412]	@ (8007da8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c12:	f107 010c 	add.w	r1, r7, #12
 8007c16:	4610      	mov	r0, r2
 8007c18:	4798      	blx	r3
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c20:	f06f 0306 	mvn.w	r3, #6
 8007c24:	e0b9      	b.n	8007d9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007c26:	7b3b      	ldrb	r3, [r7, #12]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d103      	bne.n	8007c34 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	f043 0302 	orr.w	r3, r3, #2
 8007c32:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007c34:	7b7b      	ldrb	r3, [r7, #13]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d103      	bne.n	8007c42 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8007c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3c:	f043 0301 	orr.w	r3, r3, #1
 8007c40:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d16c      	bne.n	8007d22 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	f043 0304 	orr.w	r3, r3, #4
 8007c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007c50:	e067      	b.n	8007d22 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c52:	6838      	ldr	r0, [r7, #0]
 8007c54:	f000 fa3c 	bl	80080d0 <LIS2DW12_0_Probe>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c62:	e09a      	b.n	8007d9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c64:	4a4f      	ldr	r2, [pc, #316]	@ (8007da4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	494e      	ldr	r1, [pc, #312]	@ (8007da8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c76:	f107 010c 	add.w	r1, r7, #12
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4798      	blx	r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c84:	f06f 0306 	mvn.w	r3, #6
 8007c88:	e087      	b.n	8007d9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007c8a:	7b3b      	ldrb	r3, [r7, #12]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d103      	bne.n	8007c98 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8007c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c92:	f043 0302 	orr.w	r3, r3, #2
 8007c96:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007c98:	7b7b      	ldrb	r3, [r7, #13]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d103      	bne.n	8007ca6 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8007c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d13c      	bne.n	8007d26 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	f043 0304 	orr.w	r3, r3, #4
 8007cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007cb4:	e037      	b.n	8007d26 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8007cb6:	6838      	ldr	r0, [r7, #0]
 8007cb8:	f000 fab2 	bl	8008220 <LIS2MDL_0_Probe>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc6:	e068      	b.n	8007d9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007cc8:	4a36      	ldr	r2, [pc, #216]	@ (8007da4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	4935      	ldr	r1, [pc, #212]	@ (8007da8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007cda:	f107 010c 	add.w	r1, r7, #12
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4798      	blx	r3
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007ce8:	f06f 0306 	mvn.w	r3, #6
 8007cec:	e055      	b.n	8007d9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007cee:	7b3b      	ldrb	r3, [r7, #12]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d103      	bne.n	8007cfc <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf6:	f043 0302 	orr.w	r3, r3, #2
 8007cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007cfc:	7b7b      	ldrb	r3, [r7, #13]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d103      	bne.n	8007d0a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8007d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d10c      	bne.n	8007d2a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8007d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d12:	f043 0304 	orr.w	r3, r3, #4
 8007d16:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007d18:	e007      	b.n	8007d2a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007d1a:	f06f 0301 	mvn.w	r3, #1
 8007d1e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8007d20:	e004      	b.n	8007d2c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007d22:	bf00      	nop
 8007d24:	e002      	b.n	8007d2c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007d26:	bf00      	nop
 8007d28:	e000      	b.n	8007d2c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007d2a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8007d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d34:	e031      	b.n	8007d9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007d36:	2300      	movs	r3, #0
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d3a:	e02a      	b.n	8007d92 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	4013      	ands	r3, r2
 8007d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d11e      	bne.n	8007d86 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8007d48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d118      	bne.n	8007d86 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8007d54:	4a15      	ldr	r2, [pc, #84]	@ (8007dac <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d5c:	4814      	ldr	r0, [pc, #80]	@ (8007db0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	4613      	mov	r3, r2
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	4413      	add	r3, r2
 8007d66:	440b      	add	r3, r1
 8007d68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	490e      	ldr	r1, [pc, #56]	@ (8007da8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d76:	4610      	mov	r0, r2
 8007d78:	4798      	blx	r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007d80:	f06f 0304 	mvn.w	r3, #4
 8007d84:	e009      	b.n	8007d9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8e:	3301      	adds	r3, #1
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d9d1      	bls.n	8007d3c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8007d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3738      	adds	r7, #56	@ 0x38
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	2000078c 	.word	0x2000078c
 8007da8:	2000075c 	.word	0x2000075c
 8007dac:	200000d0 	.word	0x200000d0
 8007db0:	20000768 	.word	0x20000768

08007db4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d903      	bls.n	8007dce <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007dc6:	f06f 0301 	mvn.w	r3, #1
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	e029      	b.n	8007e22 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007dce:	4a17      	ldr	r2, [pc, #92]	@ (8007e2c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d11d      	bne.n	8007e1c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8007de0:	4a13      	ldr	r2, [pc, #76]	@ (8007e30 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007de8:	4812      	ldr	r0, [pc, #72]	@ (8007e34 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4613      	mov	r3, r2
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	4413      	add	r3, r2
 8007df2:	440b      	add	r3, r1
 8007df4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	490f      	ldr	r1, [pc, #60]	@ (8007e38 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e0e:	f06f 0304 	mvn.w	r3, #4
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	e005      	b.n	8007e22 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]
 8007e1a:	e002      	b.n	8007e22 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007e1c:	f06f 0301 	mvn.w	r3, #1
 8007e20:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007e22:	697b      	ldr	r3, [r7, #20]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20000798 	.word	0x20000798
 8007e30:	200000d0 	.word	0x200000d0
 8007e34:	20000768 	.word	0x20000768
 8007e38:	2000075c 	.word	0x2000075c

08007e3c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d903      	bls.n	8007e58 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e50:	f06f 0301 	mvn.w	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	e02a      	b.n	8007eae <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007e58:	4a17      	ldr	r2, [pc, #92]	@ (8007eb8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4013      	ands	r3, r2
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d11e      	bne.n	8007ea8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8007e6a:	4a14      	ldr	r2, [pc, #80]	@ (8007ebc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e72:	4813      	ldr	r0, [pc, #76]	@ (8007ec0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4613      	mov	r3, r2
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	490f      	ldr	r1, [pc, #60]	@ (8007ec4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e8c:	ed97 0a01 	vldr	s0, [r7, #4]
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e9a:	f06f 0304 	mvn.w	r3, #4
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	e005      	b.n	8007eae <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	e002      	b.n	8007eae <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007ea8:	f06f 0301 	mvn.w	r3, #1
 8007eac:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007eae:	697b      	ldr	r3, [r7, #20]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000798 	.word	0x20000798
 8007ebc:	200000d0 	.word	0x200000d0
 8007ec0:	20000768 	.word	0x20000768
 8007ec4:	2000075c 	.word	0x2000075c

08007ec8 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d903      	bls.n	8007ee2 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007eda:	f06f 0301 	mvn.w	r3, #1
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e029      	b.n	8007f36 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007ee2:	4a17      	ldr	r2, [pc, #92]	@ (8007f40 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4013      	ands	r3, r2
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d11d      	bne.n	8007f30 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8007ef4:	4a13      	ldr	r2, [pc, #76]	@ (8007f44 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007efc:	4812      	ldr	r0, [pc, #72]	@ (8007f48 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4613      	mov	r3, r2
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	4413      	add	r3, r2
 8007f06:	440b      	add	r3, r1
 8007f08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	490f      	ldr	r1, [pc, #60]	@ (8007f4c <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4798      	blx	r3
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f22:	f06f 0304 	mvn.w	r3, #4
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	e005      	b.n	8007f36 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	e002      	b.n	8007f36 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007f30:	f06f 0301 	mvn.w	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007f36:	697b      	ldr	r3, [r7, #20]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000798 	.word	0x20000798
 8007f44:	200000d0 	.word	0x200000d0
 8007f48:	20000768 	.word	0x20000768
 8007f4c:	2000075c 	.word	0x2000075c

08007f50 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b094      	sub	sp, #80	@ 0x50
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8007f60:	23d7      	movs	r3, #215	@ 0xd7
 8007f62:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007f66:	4b4b      	ldr	r3, [pc, #300]	@ (8008094 <LSM6DSO_0_Probe+0x144>)
 8007f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007f6a:	4b4b      	ldr	r3, [pc, #300]	@ (8008098 <LSM6DSO_0_Probe+0x148>)
 8007f6c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800809c <LSM6DSO_0_Probe+0x14c>)
 8007f70:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007f72:	4b4b      	ldr	r3, [pc, #300]	@ (80080a0 <LSM6DSO_0_Probe+0x150>)
 8007f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007f76:	4b4b      	ldr	r3, [pc, #300]	@ (80080a4 <LSM6DSO_0_Probe+0x154>)
 8007f78:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8007f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80080a8 <LSM6DSO_0_Probe+0x158>)
 8007f7c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8007f7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f82:	4619      	mov	r1, r3
 8007f84:	4849      	ldr	r0, [pc, #292]	@ (80080ac <LSM6DSO_0_Probe+0x15c>)
 8007f86:	f7fd fe3f 	bl	8005c08 <LSM6DSO_RegisterBusIO>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f90:	f06f 0306 	mvn.w	r3, #6
 8007f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f96:	e077      	b.n	8008088 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8007f98:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4843      	ldr	r0, [pc, #268]	@ (80080ac <LSM6DSO_0_Probe+0x15c>)
 8007fa0:	f7fd ff3c 	bl	8005e1c <LSM6DSO_ReadID>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007faa:	f06f 0306 	mvn.w	r3, #6
 8007fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fb0:	e06a      	b.n	8008088 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8007fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fb6:	2b6c      	cmp	r3, #108	@ 0x6c
 8007fb8:	d003      	beq.n	8007fc2 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fba:	f06f 0306 	mvn.w	r3, #6
 8007fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fc0:	e062      	b.n	8008088 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8007fc2:	f107 030c 	add.w	r3, r7, #12
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4838      	ldr	r0, [pc, #224]	@ (80080ac <LSM6DSO_0_Probe+0x15c>)
 8007fca:	f7fd ff3d 	bl	8005e48 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8007fce:	7b7b      	ldrb	r3, [r7, #13]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	7b3b      	ldrb	r3, [r7, #12]
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	4a34      	ldr	r2, [pc, #208]	@ (80080b0 <LSM6DSO_0_Probe+0x160>)
 8007fe0:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8007fe2:	4b34      	ldr	r3, [pc, #208]	@ (80080b4 <LSM6DSO_0_Probe+0x164>)
 8007fe4:	4a31      	ldr	r2, [pc, #196]	@ (80080ac <LSM6DSO_0_Probe+0x15c>)
 8007fe6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8007fe8:	4b33      	ldr	r3, [pc, #204]	@ (80080b8 <LSM6DSO_0_Probe+0x168>)
 8007fea:	4a34      	ldr	r2, [pc, #208]	@ (80080bc <LSM6DSO_0_Probe+0x16c>)
 8007fec:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8007fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d11d      	bne.n	8008030 <LSM6DSO_0_Probe+0xe0>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d018      	beq.n	8008030 <LSM6DSO_0_Probe+0xe0>
 8007ffe:	7b7b      	ldrb	r3, [r7, #13]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d115      	bne.n	8008030 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008004:	4b2e      	ldr	r3, [pc, #184]	@ (80080c0 <LSM6DSO_0_Probe+0x170>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	4a2e      	ldr	r2, [pc, #184]	@ (80080c4 <LSM6DSO_0_Probe+0x174>)
 800800a:	492f      	ldr	r1, [pc, #188]	@ (80080c8 <LSM6DSO_0_Probe+0x178>)
 800800c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008010:	4b29      	ldr	r3, [pc, #164]	@ (80080b8 <LSM6DSO_0_Probe+0x168>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a27      	ldr	r2, [pc, #156]	@ (80080b4 <LSM6DSO_0_Probe+0x164>)
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	4610      	mov	r0, r2
 800801c:	4798      	blx	r3
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008024:	f06f 0304 	mvn.w	r3, #4
 8008028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800802a:	e001      	b.n	8008030 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800802c:	2300      	movs	r3, #0
 800802e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d11d      	bne.n	8008072 <LSM6DSO_0_Probe+0x122>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d018      	beq.n	8008072 <LSM6DSO_0_Probe+0x122>
 8008040:	7b3b      	ldrb	r3, [r7, #12]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d115      	bne.n	8008072 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008046:	4b1e      	ldr	r3, [pc, #120]	@ (80080c0 <LSM6DSO_0_Probe+0x170>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	4a1e      	ldr	r2, [pc, #120]	@ (80080c4 <LSM6DSO_0_Probe+0x174>)
 800804c:	491f      	ldr	r1, [pc, #124]	@ (80080cc <LSM6DSO_0_Probe+0x17c>)
 800804e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008052:	4b19      	ldr	r3, [pc, #100]	@ (80080b8 <LSM6DSO_0_Probe+0x168>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a16      	ldr	r2, [pc, #88]	@ (80080b4 <LSM6DSO_0_Probe+0x164>)
 800805a:	6812      	ldr	r2, [r2, #0]
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008066:	f06f 0304 	mvn.w	r3, #4
 800806a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800806c:	e001      	b.n	8008072 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800806e:	2300      	movs	r3, #0
 8008070:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d107      	bne.n	8008088 <LSM6DSO_0_Probe+0x138>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008082:	f06f 0304 	mvn.w	r3, #4
 8008086:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8008088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800808a:	4618      	mov	r0, r3
 800808c:	3750      	adds	r7, #80	@ 0x50
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	080031e5 	.word	0x080031e5
 8008098:	08003261 	.word	0x08003261
 800809c:	08003315 	.word	0x08003315
 80080a0:	080032b1 	.word	0x080032b1
 80080a4:	08003379 	.word	0x08003379
 80080a8:	08001bb5 	.word	0x08001bb5
 80080ac:	200007a4 	.word	0x200007a4
 80080b0:	20000798 	.word	0x20000798
 80080b4:	2000075c 	.word	0x2000075c
 80080b8:	2000078c 	.word	0x2000078c
 80080bc:	20000078 	.word	0x20000078
 80080c0:	200000d0 	.word	0x200000d0
 80080c4:	20000768 	.word	0x20000768
 80080c8:	200000ac 	.word	0x200000ac
 80080cc:	20000088 	.word	0x20000088

080080d0 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b094      	sub	sp, #80	@ 0x50
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80080d8:	2300      	movs	r3, #0
 80080da:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80080dc:	2300      	movs	r3, #0
 80080de:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 80080e0:	2333      	movs	r3, #51	@ 0x33
 80080e2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80080e6:	4b40      	ldr	r3, [pc, #256]	@ (80081e8 <LIS2DW12_0_Probe+0x118>)
 80080e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80080ea:	4b40      	ldr	r3, [pc, #256]	@ (80081ec <LIS2DW12_0_Probe+0x11c>)
 80080ec:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80080ee:	4b40      	ldr	r3, [pc, #256]	@ (80081f0 <LIS2DW12_0_Probe+0x120>)
 80080f0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80080f2:	4b40      	ldr	r3, [pc, #256]	@ (80081f4 <LIS2DW12_0_Probe+0x124>)
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80080f6:	4b40      	ldr	r3, [pc, #256]	@ (80081f8 <LIS2DW12_0_Probe+0x128>)
 80080f8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80080fa:	4b40      	ldr	r3, [pc, #256]	@ (80081fc <LIS2DW12_0_Probe+0x12c>)
 80080fc:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 80080fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008102:	4619      	mov	r1, r3
 8008104:	483e      	ldr	r0, [pc, #248]	@ (8008200 <LIS2DW12_0_Probe+0x130>)
 8008106:	f7fb faf3 	bl	80036f0 <LIS2DW12_RegisterBusIO>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008110:	f06f 0306 	mvn.w	r3, #6
 8008114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008116:	e062      	b.n	80081de <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8008118:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800811c:	4619      	mov	r1, r3
 800811e:	4838      	ldr	r0, [pc, #224]	@ (8008200 <LIS2DW12_0_Probe+0x130>)
 8008120:	f7fb fbd4 	bl	80038cc <LIS2DW12_ReadID>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800812a:	f06f 0306 	mvn.w	r3, #6
 800812e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008130:	e055      	b.n	80081de <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8008132:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008136:	2b44      	cmp	r3, #68	@ 0x44
 8008138:	d003      	beq.n	8008142 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800813a:	f06f 0306 	mvn.w	r3, #6
 800813e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008140:	e04d      	b.n	80081de <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8008142:	f107 030c 	add.w	r3, r7, #12
 8008146:	4619      	mov	r1, r3
 8008148:	482d      	ldr	r0, [pc, #180]	@ (8008200 <LIS2DW12_0_Probe+0x130>)
 800814a:	f7fb fbd5 	bl	80038f8 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800814e:	7b7b      	ldrb	r3, [r7, #13]
 8008150:	461a      	mov	r2, r3
 8008152:	7b3b      	ldrb	r3, [r7, #12]
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	431a      	orrs	r2, r3
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4313      	orrs	r3, r2
 800815e:	4a29      	ldr	r2, [pc, #164]	@ (8008204 <LIS2DW12_0_Probe+0x134>)
 8008160:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8008162:	4b29      	ldr	r3, [pc, #164]	@ (8008208 <LIS2DW12_0_Probe+0x138>)
 8008164:	4a26      	ldr	r2, [pc, #152]	@ (8008200 <LIS2DW12_0_Probe+0x130>)
 8008166:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8008168:	4b28      	ldr	r3, [pc, #160]	@ (800820c <LIS2DW12_0_Probe+0x13c>)
 800816a:	4a29      	ldr	r2, [pc, #164]	@ (8008210 <LIS2DW12_0_Probe+0x140>)
 800816c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800816e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d11e      	bne.n	80081b2 <LIS2DW12_0_Probe+0xe2>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d019      	beq.n	80081b2 <LIS2DW12_0_Probe+0xe2>
 800817e:	7b3b      	ldrb	r3, [r7, #12]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d116      	bne.n	80081b2 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008184:	4b23      	ldr	r3, [pc, #140]	@ (8008214 <LIS2DW12_0_Probe+0x144>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4a23      	ldr	r2, [pc, #140]	@ (8008218 <LIS2DW12_0_Probe+0x148>)
 800818a:	3303      	adds	r3, #3
 800818c:	4923      	ldr	r1, [pc, #140]	@ (800821c <LIS2DW12_0_Probe+0x14c>)
 800818e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8008192:	4b1e      	ldr	r3, [pc, #120]	@ (800820c <LIS2DW12_0_Probe+0x13c>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1b      	ldr	r2, [pc, #108]	@ (8008208 <LIS2DW12_0_Probe+0x138>)
 800819a:	6852      	ldr	r2, [r2, #4]
 800819c:	4610      	mov	r0, r2
 800819e:	4798      	blx	r3
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80081a6:	f06f 0304 	mvn.w	r3, #4
 80081aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081ac:	e001      	b.n	80081b2 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80081b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d107      	bne.n	80081c8 <LIS2DW12_0_Probe+0xf8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80081c2:	f06f 0304 	mvn.w	r3, #4
 80081c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80081c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d107      	bne.n	80081de <LIS2DW12_0_Probe+0x10e>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80081d8:	f06f 0304 	mvn.w	r3, #4
 80081dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 80081de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3750      	adds	r7, #80	@ 0x50
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	080031e5 	.word	0x080031e5
 80081ec:	08003261 	.word	0x08003261
 80081f0:	08003315 	.word	0x08003315
 80081f4:	080032b1 	.word	0x080032b1
 80081f8:	08003379 	.word	0x08003379
 80081fc:	08001bb5 	.word	0x08001bb5
 8008200:	200007dc 	.word	0x200007dc
 8008204:	20000798 	.word	0x20000798
 8008208:	2000075c 	.word	0x2000075c
 800820c:	2000078c 	.word	0x2000078c
 8008210:	20000010 	.word	0x20000010
 8008214:	200000d0 	.word	0x200000d0
 8008218:	20000768 	.word	0x20000768
 800821c:	20000020 	.word	0x20000020

08008220 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b094      	sub	sp, #80	@ 0x50
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008228:	2300      	movs	r3, #0
 800822a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800822c:	2300      	movs	r3, #0
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008230:	233d      	movs	r3, #61	@ 0x3d
 8008232:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008236:	4b40      	ldr	r3, [pc, #256]	@ (8008338 <LIS2MDL_0_Probe+0x118>)
 8008238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800823a:	4b40      	ldr	r3, [pc, #256]	@ (800833c <LIS2MDL_0_Probe+0x11c>)
 800823c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800823e:	4b40      	ldr	r3, [pc, #256]	@ (8008340 <LIS2MDL_0_Probe+0x120>)
 8008240:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008242:	4b40      	ldr	r3, [pc, #256]	@ (8008344 <LIS2MDL_0_Probe+0x124>)
 8008244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008246:	4b40      	ldr	r3, [pc, #256]	@ (8008348 <LIS2MDL_0_Probe+0x128>)
 8008248:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800824a:	4b40      	ldr	r3, [pc, #256]	@ (800834c <LIS2MDL_0_Probe+0x12c>)
 800824c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800824e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008252:	4619      	mov	r1, r3
 8008254:	483e      	ldr	r0, [pc, #248]	@ (8008350 <LIS2MDL_0_Probe+0x130>)
 8008256:	f7fc fcd7 	bl	8004c08 <LIS2MDL_RegisterBusIO>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008260:	f06f 0306 	mvn.w	r3, #6
 8008264:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008266:	e062      	b.n	800832e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008268:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800826c:	4619      	mov	r1, r3
 800826e:	4838      	ldr	r0, [pc, #224]	@ (8008350 <LIS2MDL_0_Probe+0x130>)
 8008270:	f7fc fde6 	bl	8004e40 <LIS2MDL_ReadID>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800827a:	f06f 0306 	mvn.w	r3, #6
 800827e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008280:	e055      	b.n	800832e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8008282:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008286:	2b40      	cmp	r3, #64	@ 0x40
 8008288:	d003      	beq.n	8008292 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800828a:	f06f 0306 	mvn.w	r3, #6
 800828e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008290:	e04d      	b.n	800832e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8008292:	f107 030c 	add.w	r3, r7, #12
 8008296:	4619      	mov	r1, r3
 8008298:	482d      	ldr	r0, [pc, #180]	@ (8008350 <LIS2MDL_0_Probe+0x130>)
 800829a:	f7fc fdf7 	bl	8004e8c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800829e:	7b7b      	ldrb	r3, [r7, #13]
 80082a0:	461a      	mov	r2, r3
 80082a2:	7b3b      	ldrb	r3, [r7, #12]
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	431a      	orrs	r2, r3
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4313      	orrs	r3, r2
 80082ae:	4a29      	ldr	r2, [pc, #164]	@ (8008354 <LIS2MDL_0_Probe+0x134>)
 80082b0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80082b2:	4b29      	ldr	r3, [pc, #164]	@ (8008358 <LIS2MDL_0_Probe+0x138>)
 80082b4:	4a26      	ldr	r2, [pc, #152]	@ (8008350 <LIS2MDL_0_Probe+0x130>)
 80082b6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80082b8:	4b28      	ldr	r3, [pc, #160]	@ (800835c <LIS2MDL_0_Probe+0x13c>)
 80082ba:	4a29      	ldr	r2, [pc, #164]	@ (8008360 <LIS2MDL_0_Probe+0x140>)
 80082bc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80082be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d11e      	bne.n	8008302 <LIS2MDL_0_Probe+0xe2>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d019      	beq.n	8008302 <LIS2MDL_0_Probe+0xe2>
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d116      	bne.n	8008302 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80082d4:	4b23      	ldr	r3, [pc, #140]	@ (8008364 <LIS2MDL_0_Probe+0x144>)
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	4a23      	ldr	r2, [pc, #140]	@ (8008368 <LIS2MDL_0_Probe+0x148>)
 80082da:	3306      	adds	r3, #6
 80082dc:	4923      	ldr	r1, [pc, #140]	@ (800836c <LIS2MDL_0_Probe+0x14c>)
 80082de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 80082e2:	4b1e      	ldr	r3, [pc, #120]	@ (800835c <LIS2MDL_0_Probe+0x13c>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008358 <LIS2MDL_0_Probe+0x138>)
 80082ea:	6892      	ldr	r2, [r2, #8]
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80082f6:	f06f 0304 	mvn.w	r3, #4
 80082fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082fc:	e001      	b.n	8008302 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80082fe:	2300      	movs	r3, #0
 8008300:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d107      	bne.n	8008318 <LIS2MDL_0_Probe+0xf8>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008312:	f06f 0304 	mvn.w	r3, #4
 8008316:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d107      	bne.n	800832e <LIS2MDL_0_Probe+0x10e>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008328:	f06f 0304 	mvn.w	r3, #4
 800832c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800832e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008330:	4618      	mov	r0, r3
 8008332:	3750      	adds	r7, #80	@ 0x50
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	080031e5 	.word	0x080031e5
 800833c:	08003261 	.word	0x08003261
 8008340:	08003315 	.word	0x08003315
 8008344:	080032b1 	.word	0x080032b1
 8008348:	08003379 	.word	0x08003379
 800834c:	08001bb5 	.word	0x08001bb5
 8008350:	20000818 	.word	0x20000818
 8008354:	20000798 	.word	0x20000798
 8008358:	2000075c 	.word	0x2000075c
 800835c:	2000078c 	.word	0x2000078c
 8008360:	20000044 	.word	0x20000044
 8008364:	200000d0 	.word	0x200000d0
 8008368:	20000768 	.word	0x20000768
 800836c:	20000054 	.word	0x20000054

08008370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800837a:	4b0c      	ldr	r3, [pc, #48]	@ (80083ac <HAL_Init+0x3c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a0b      	ldr	r2, [pc, #44]	@ (80083ac <HAL_Init+0x3c>)
 8008380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008384:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008386:	2003      	movs	r0, #3
 8008388:	f000 f9b4 	bl	80086f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800838c:	2000      	movs	r0, #0
 800838e:	f000 f80f 	bl	80083b0 <HAL_InitTick>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	71fb      	strb	r3, [r7, #7]
 800839c:	e001      	b.n	80083a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800839e:	f7fa fd56 	bl	8002e4e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80083a2:	79fb      	ldrb	r3, [r7, #7]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	58004000 	.word	0x58004000

080083b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80083bc:	4b17      	ldr	r3, [pc, #92]	@ (800841c <HAL_InitTick+0x6c>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d024      	beq.n	800840e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80083c4:	f002 fef8 	bl	800b1b8 <HAL_RCC_GetHCLKFreq>
 80083c8:	4602      	mov	r2, r0
 80083ca:	4b14      	ldr	r3, [pc, #80]	@ (800841c <HAL_InitTick+0x6c>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	4619      	mov	r1, r3
 80083d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80083d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80083d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f9ca 	bl	8008776 <HAL_SYSTICK_Config>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10f      	bne.n	8008408 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b0f      	cmp	r3, #15
 80083ec:	d809      	bhi.n	8008402 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80083ee:	2200      	movs	r2, #0
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	f04f 30ff 	mov.w	r0, #4294967295
 80083f6:	f000 f988 	bl	800870a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80083fa:	4a09      	ldr	r2, [pc, #36]	@ (8008420 <HAL_InitTick+0x70>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	e007      	b.n	8008412 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	73fb      	strb	r3, [r7, #15]
 8008406:	e004      	b.n	8008412 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	73fb      	strb	r3, [r7, #15]
 800840c:	e001      	b.n	8008412 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	200000e8 	.word	0x200000e8
 8008420:	200000e4 	.word	0x200000e4

08008424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008428:	4b06      	ldr	r3, [pc, #24]	@ (8008444 <HAL_IncTick+0x20>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <HAL_IncTick+0x24>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4413      	add	r3, r2
 8008434:	4a04      	ldr	r2, [pc, #16]	@ (8008448 <HAL_IncTick+0x24>)
 8008436:	6013      	str	r3, [r2, #0]
}
 8008438:	bf00      	nop
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	200000e8 	.word	0x200000e8
 8008448:	2000084c 	.word	0x2000084c

0800844c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
  return uwTick;
 8008450:	4b03      	ldr	r3, [pc, #12]	@ (8008460 <HAL_GetTick+0x14>)
 8008452:	681b      	ldr	r3, [r3, #0]
}
 8008454:	4618      	mov	r0, r3
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	2000084c 	.word	0x2000084c

08008464 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8008468:	4b03      	ldr	r3, [pc, #12]	@ (8008478 <HAL_GetTickPrio+0x14>)
 800846a:	681b      	ldr	r3, [r3, #0]
}
 800846c:	4618      	mov	r0, r3
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	200000e4 	.word	0x200000e4

0800847c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8008480:	4b03      	ldr	r3, [pc, #12]	@ (8008490 <HAL_GetTickFreq+0x14>)
 8008482:	781b      	ldrb	r3, [r3, #0]
}
 8008484:	4618      	mov	r0, r3
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	200000e8 	.word	0x200000e8

08008494 <__NVIC_SetPriorityGrouping>:
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084a4:	4b0c      	ldr	r3, [pc, #48]	@ (80084d8 <__NVIC_SetPriorityGrouping+0x44>)
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80084b0:	4013      	ands	r3, r2
 80084b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80084bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80084c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80084c6:	4a04      	ldr	r2, [pc, #16]	@ (80084d8 <__NVIC_SetPriorityGrouping+0x44>)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	60d3      	str	r3, [r2, #12]
}
 80084cc:	bf00      	nop
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	e000ed00 	.word	0xe000ed00

080084dc <__NVIC_GetPriorityGrouping>:
{
 80084dc:	b480      	push	{r7}
 80084de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80084e0:	4b04      	ldr	r3, [pc, #16]	@ (80084f4 <__NVIC_GetPriorityGrouping+0x18>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	0a1b      	lsrs	r3, r3, #8
 80084e6:	f003 0307 	and.w	r3, r3, #7
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	e000ed00 	.word	0xe000ed00

080084f8 <__NVIC_EnableIRQ>:
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008506:	2b00      	cmp	r3, #0
 8008508:	db0b      	blt.n	8008522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	f003 021f 	and.w	r2, r3, #31
 8008510:	4907      	ldr	r1, [pc, #28]	@ (8008530 <__NVIC_EnableIRQ+0x38>)
 8008512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	2001      	movs	r0, #1
 800851a:	fa00 f202 	lsl.w	r2, r0, r2
 800851e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	e000e100 	.word	0xe000e100

08008534 <__NVIC_DisableIRQ>:
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800853e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008542:	2b00      	cmp	r3, #0
 8008544:	db12      	blt.n	800856c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	f003 021f 	and.w	r2, r3, #31
 800854c:	490a      	ldr	r1, [pc, #40]	@ (8008578 <__NVIC_DisableIRQ+0x44>)
 800854e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	2001      	movs	r0, #1
 8008556:	fa00 f202 	lsl.w	r2, r0, r2
 800855a:	3320      	adds	r3, #32
 800855c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008560:	f3bf 8f4f 	dsb	sy
}
 8008564:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008566:	f3bf 8f6f 	isb	sy
}
 800856a:	bf00      	nop
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	e000e100 	.word	0xe000e100

0800857c <__NVIC_SetPendingIRQ>:
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800858a:	2b00      	cmp	r3, #0
 800858c:	db0c      	blt.n	80085a8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	f003 021f 	and.w	r2, r3, #31
 8008594:	4907      	ldr	r1, [pc, #28]	@ (80085b4 <__NVIC_SetPendingIRQ+0x38>)
 8008596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	2001      	movs	r0, #1
 800859e:	fa00 f202 	lsl.w	r2, r0, r2
 80085a2:	3340      	adds	r3, #64	@ 0x40
 80085a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	e000e100 	.word	0xe000e100

080085b8 <__NVIC_ClearPendingIRQ>:
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	db0c      	blt.n	80085e4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	f003 021f 	and.w	r2, r3, #31
 80085d0:	4907      	ldr	r1, [pc, #28]	@ (80085f0 <__NVIC_ClearPendingIRQ+0x38>)
 80085d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085d6:	095b      	lsrs	r3, r3, #5
 80085d8:	2001      	movs	r0, #1
 80085da:	fa00 f202 	lsl.w	r2, r0, r2
 80085de:	3360      	adds	r3, #96	@ 0x60
 80085e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	e000e100 	.word	0xe000e100

080085f4 <__NVIC_SetPriority>:
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	6039      	str	r1, [r7, #0]
 80085fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008604:	2b00      	cmp	r3, #0
 8008606:	db0a      	blt.n	800861e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	b2da      	uxtb	r2, r3
 800860c:	490c      	ldr	r1, [pc, #48]	@ (8008640 <__NVIC_SetPriority+0x4c>)
 800860e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008612:	0112      	lsls	r2, r2, #4
 8008614:	b2d2      	uxtb	r2, r2
 8008616:	440b      	add	r3, r1
 8008618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800861c:	e00a      	b.n	8008634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	b2da      	uxtb	r2, r3
 8008622:	4908      	ldr	r1, [pc, #32]	@ (8008644 <__NVIC_SetPriority+0x50>)
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	3b04      	subs	r3, #4
 800862c:	0112      	lsls	r2, r2, #4
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	440b      	add	r3, r1
 8008632:	761a      	strb	r2, [r3, #24]
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	e000e100 	.word	0xe000e100
 8008644:	e000ed00 	.word	0xe000ed00

08008648 <NVIC_EncodePriority>:
{
 8008648:	b480      	push	{r7}
 800864a:	b089      	sub	sp, #36	@ 0x24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f1c3 0307 	rsb	r3, r3, #7
 8008662:	2b04      	cmp	r3, #4
 8008664:	bf28      	it	cs
 8008666:	2304      	movcs	r3, #4
 8008668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	3304      	adds	r3, #4
 800866e:	2b06      	cmp	r3, #6
 8008670:	d902      	bls.n	8008678 <NVIC_EncodePriority+0x30>
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3b03      	subs	r3, #3
 8008676:	e000      	b.n	800867a <NVIC_EncodePriority+0x32>
 8008678:	2300      	movs	r3, #0
 800867a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800867c:	f04f 32ff 	mov.w	r2, #4294967295
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	fa02 f303 	lsl.w	r3, r2, r3
 8008686:	43da      	mvns	r2, r3
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	401a      	ands	r2, r3
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008690:	f04f 31ff 	mov.w	r1, #4294967295
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	fa01 f303 	lsl.w	r3, r1, r3
 800869a:	43d9      	mvns	r1, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086a0:	4313      	orrs	r3, r2
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3724      	adds	r7, #36	@ 0x24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <SysTick_Config>:
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086c0:	d301      	bcc.n	80086c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80086c2:	2301      	movs	r3, #1
 80086c4:	e00f      	b.n	80086e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086c6:	4a0a      	ldr	r2, [pc, #40]	@ (80086f0 <SysTick_Config+0x40>)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086ce:	210f      	movs	r1, #15
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	f7ff ff8e 	bl	80085f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086d8:	4b05      	ldr	r3, [pc, #20]	@ (80086f0 <SysTick_Config+0x40>)
 80086da:	2200      	movs	r2, #0
 80086dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086de:	4b04      	ldr	r3, [pc, #16]	@ (80086f0 <SysTick_Config+0x40>)
 80086e0:	2207      	movs	r2, #7
 80086e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	e000e010 	.word	0xe000e010

080086f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff fec9 	bl	8008494 <__NVIC_SetPriorityGrouping>
}
 8008702:	bf00      	nop
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	4603      	mov	r3, r0
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008718:	f7ff fee0 	bl	80084dc <__NVIC_GetPriorityGrouping>
 800871c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	68b9      	ldr	r1, [r7, #8]
 8008722:	6978      	ldr	r0, [r7, #20]
 8008724:	f7ff ff90 	bl	8008648 <NVIC_EncodePriority>
 8008728:	4602      	mov	r2, r0
 800872a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff ff5f 	bl	80085f4 <__NVIC_SetPriority>
}
 8008736:	bf00      	nop
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	4603      	mov	r3, r0
 8008746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff fed3 	bl	80084f8 <__NVIC_EnableIRQ>
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	4603      	mov	r3, r0
 8008762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fee3 	bl	8008534 <__NVIC_DisableIRQ>
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff ff96 	bl	80086b0 <SysTick_Config>
 8008784:	4603      	mov	r3, r0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	4603      	mov	r3, r0
 8008796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800879c:	4618      	mov	r0, r3
 800879e:	f7ff feed 	bl	800857c <__NVIC_SetPendingIRQ>
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	4603      	mov	r3, r0
 80087b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80087b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fefd 	bl	80085b8 <__NVIC_ClearPendingIRQ>
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e08e      	b.n	80088f8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	4b47      	ldr	r3, [pc, #284]	@ (8008900 <HAL_DMA_Init+0x138>)
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d80f      	bhi.n	8008806 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	4b45      	ldr	r3, [pc, #276]	@ (8008904 <HAL_DMA_Init+0x13c>)
 80087ee:	4413      	add	r3, r2
 80087f0:	4a45      	ldr	r2, [pc, #276]	@ (8008908 <HAL_DMA_Init+0x140>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	091b      	lsrs	r3, r3, #4
 80087f8:	009a      	lsls	r2, r3, #2
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a42      	ldr	r2, [pc, #264]	@ (800890c <HAL_DMA_Init+0x144>)
 8008802:	641a      	str	r2, [r3, #64]	@ 0x40
 8008804:	e00e      	b.n	8008824 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	4b40      	ldr	r3, [pc, #256]	@ (8008910 <HAL_DMA_Init+0x148>)
 800880e:	4413      	add	r3, r2
 8008810:	4a3d      	ldr	r2, [pc, #244]	@ (8008908 <HAL_DMA_Init+0x140>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	091b      	lsrs	r3, r3, #4
 8008818:	009a      	lsls	r2, r3, #2
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a3c      	ldr	r2, [pc, #240]	@ (8008914 <HAL_DMA_Init+0x14c>)
 8008822:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800883a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800883e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f8fe 	bl	8008a78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008884:	d102      	bne.n	800888c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008894:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008898:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80088a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d010      	beq.n	80088ce <HAL_DMA_Init+0x106>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d80c      	bhi.n	80088ce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f91d 	bl	8008af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088be:	2200      	movs	r2, #0
 80088c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80088ca:	605a      	str	r2, [r3, #4]
 80088cc:	e008      	b.n	80088e0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40020407 	.word	0x40020407
 8008904:	bffdfff8 	.word	0xbffdfff8
 8008908:	cccccccd 	.word	0xcccccccd
 800890c:	40020000 	.word	0x40020000
 8008910:	bffdfbf8 	.word	0xbffdfbf8
 8008914:	40020400 	.word	0x40020400

08008918 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008934:	f003 031c 	and.w	r3, r3, #28
 8008938:	2204      	movs	r2, #4
 800893a:	409a      	lsls	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4013      	ands	r3, r2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d026      	beq.n	8008992 <HAL_DMA_IRQHandler+0x7a>
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d021      	beq.n	8008992 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	d107      	bne.n	800896c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0204 	bic.w	r2, r2, #4
 800896a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008970:	f003 021c 	and.w	r2, r3, #28
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008978:	2104      	movs	r1, #4
 800897a:	fa01 f202 	lsl.w	r2, r1, r2
 800897e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008984:	2b00      	cmp	r3, #0
 8008986:	d071      	beq.n	8008a6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008990:	e06c      	b.n	8008a6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008996:	f003 031c 	and.w	r3, r3, #28
 800899a:	2202      	movs	r2, #2
 800899c:	409a      	lsls	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4013      	ands	r3, r2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d02e      	beq.n	8008a04 <HAL_DMA_IRQHandler+0xec>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d029      	beq.n	8008a04 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10b      	bne.n	80089d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 020a 	bic.w	r2, r2, #10
 80089cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089da:	f003 021c 	and.w	r2, r3, #28
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e2:	2102      	movs	r1, #2
 80089e4:	fa01 f202 	lsl.w	r2, r1, r2
 80089e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d038      	beq.n	8008a6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a02:	e033      	b.n	8008a6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a08:	f003 031c 	and.w	r3, r3, #28
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	409a      	lsls	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d02a      	beq.n	8008a6e <HAL_DMA_IRQHandler+0x156>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f003 0308 	and.w	r3, r3, #8
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d025      	beq.n	8008a6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 020e 	bic.w	r2, r2, #14
 8008a30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a36:	f003 021c 	and.w	r2, r3, #28
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3e:	2101      	movs	r1, #1
 8008a40:	fa01 f202 	lsl.w	r2, r1, r2
 8008a44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008a6c:	bf00      	nop
 8008a6e:	bf00      	nop
}
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	4b17      	ldr	r3, [pc, #92]	@ (8008ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d80a      	bhi.n	8008aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a90:	089b      	lsrs	r3, r3, #2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a98:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6493      	str	r3, [r2, #72]	@ 0x48
 8008aa0:	e007      	b.n	8008ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aa6:	089b      	lsrs	r3, r3, #2
 8008aa8:	009a      	lsls	r2, r3, #2
 8008aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8008ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008aac:	4413      	add	r3, r2
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	3b08      	subs	r3, #8
 8008aba:	4a0c      	ldr	r2, [pc, #48]	@ (8008aec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008abc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac0:	091b      	lsrs	r3, r3, #4
 8008ac2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8008af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008ac8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f003 031f 	and.w	r3, r3, #31
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	409a      	lsls	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008ad8:	bf00      	nop
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	40020407 	.word	0x40020407
 8008ae8:	4002081c 	.word	0x4002081c
 8008aec:	cccccccd 	.word	0xcccccccd
 8008af0:	40020880 	.word	0x40020880

08008af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b04:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4b0b      	ldr	r3, [pc, #44]	@ (8008b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a09      	ldr	r2, [pc, #36]	@ (8008b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008b18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	2201      	movs	r2, #1
 8008b24:	409a      	lsls	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	1000823f 	.word	0x1000823f
 8008b3c:	40020940 	.word	0x40020940

08008b40 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b4e:	e14c      	b.n	8008dea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	2101      	movs	r1, #1
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 813e 	beq.w	8008de4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d005      	beq.n	8008b80 <HAL_GPIO_Init+0x40>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f003 0303 	and.w	r3, r3, #3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d130      	bne.n	8008be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	2203      	movs	r2, #3
 8008b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b90:	43db      	mvns	r3, r3
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	4013      	ands	r3, r2
 8008b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	091b      	lsrs	r3, r3, #4
 8008bcc:	f003 0201 	and.w	r2, r3, #1
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d017      	beq.n	8008c1e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	4013      	ands	r3, r2
 8008c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d123      	bne.n	8008c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	08da      	lsrs	r2, r3, #3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3208      	adds	r2, #8
 8008c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	220f      	movs	r2, #15
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	43db      	mvns	r3, r3
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	691a      	ldr	r2, [r3, #16]
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	08da      	lsrs	r2, r3, #3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3208      	adds	r2, #8
 8008c6c:	6939      	ldr	r1, [r7, #16]
 8008c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	43db      	mvns	r3, r3
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4013      	ands	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f003 0203 	and.w	r2, r3, #3
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 8098 	beq.w	8008de4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008cb4:	4a54      	ldr	r2, [pc, #336]	@ (8008e08 <HAL_GPIO_Init+0x2c8>)
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	089b      	lsrs	r3, r3, #2
 8008cba:	3302      	adds	r3, #2
 8008cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f003 0303 	and.w	r3, r3, #3
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	220f      	movs	r2, #15
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008cde:	d019      	beq.n	8008d14 <HAL_GPIO_Init+0x1d4>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a4a      	ldr	r2, [pc, #296]	@ (8008e0c <HAL_GPIO_Init+0x2cc>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d013      	beq.n	8008d10 <HAL_GPIO_Init+0x1d0>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a49      	ldr	r2, [pc, #292]	@ (8008e10 <HAL_GPIO_Init+0x2d0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d00d      	beq.n	8008d0c <HAL_GPIO_Init+0x1cc>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a48      	ldr	r2, [pc, #288]	@ (8008e14 <HAL_GPIO_Init+0x2d4>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d007      	beq.n	8008d08 <HAL_GPIO_Init+0x1c8>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a47      	ldr	r2, [pc, #284]	@ (8008e18 <HAL_GPIO_Init+0x2d8>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d101      	bne.n	8008d04 <HAL_GPIO_Init+0x1c4>
 8008d00:	2304      	movs	r3, #4
 8008d02:	e008      	b.n	8008d16 <HAL_GPIO_Init+0x1d6>
 8008d04:	2307      	movs	r3, #7
 8008d06:	e006      	b.n	8008d16 <HAL_GPIO_Init+0x1d6>
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e004      	b.n	8008d16 <HAL_GPIO_Init+0x1d6>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e002      	b.n	8008d16 <HAL_GPIO_Init+0x1d6>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <HAL_GPIO_Init+0x1d6>
 8008d14:	2300      	movs	r3, #0
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	f002 0203 	and.w	r2, r2, #3
 8008d1c:	0092      	lsls	r2, r2, #2
 8008d1e:	4093      	lsls	r3, r2
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d26:	4938      	ldr	r1, [pc, #224]	@ (8008e08 <HAL_GPIO_Init+0x2c8>)
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	089b      	lsrs	r3, r3, #2
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d34:	4b39      	ldr	r3, [pc, #228]	@ (8008e1c <HAL_GPIO_Init+0x2dc>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	43db      	mvns	r3, r3
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	4013      	ands	r3, r2
 8008d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d58:	4a30      	ldr	r2, [pc, #192]	@ (8008e1c <HAL_GPIO_Init+0x2dc>)
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8008e1c <HAL_GPIO_Init+0x2dc>)
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	43db      	mvns	r3, r3
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008d82:	4a26      	ldr	r2, [pc, #152]	@ (8008e1c <HAL_GPIO_Init+0x2dc>)
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008d88:	4b24      	ldr	r3, [pc, #144]	@ (8008e1c <HAL_GPIO_Init+0x2dc>)
 8008d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	43db      	mvns	r3, r3
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	4013      	ands	r3, r2
 8008d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008dae:	4a1b      	ldr	r2, [pc, #108]	@ (8008e1c <HAL_GPIO_Init+0x2dc>)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8008db6:	4b19      	ldr	r3, [pc, #100]	@ (8008e1c <HAL_GPIO_Init+0x2dc>)
 8008db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	43db      	mvns	r3, r3
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8008e1c <HAL_GPIO_Init+0x2dc>)
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	3301      	adds	r3, #1
 8008de8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f47f aeab 	bne.w	8008b50 <HAL_GPIO_Init+0x10>
  }
}
 8008dfa:	bf00      	nop
 8008dfc:	bf00      	nop
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	40010000 	.word	0x40010000
 8008e0c:	48000400 	.word	0x48000400
 8008e10:	48000800 	.word	0x48000800
 8008e14:	48000c00 	.word	0x48000c00
 8008e18:	48001000 	.word	0x48001000
 8008e1c:	58000800 	.word	0x58000800

08008e20 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008e2e:	e0bb      	b.n	8008fa8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008e30:	2201      	movs	r2, #1
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	fa02 f303 	lsl.w	r3, r2, r3
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 80ae 	beq.w	8008fa2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008e46:	4a5f      	ldr	r2, [pc, #380]	@ (8008fc4 <HAL_GPIO_DeInit+0x1a4>)
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	089b      	lsrs	r3, r3, #2
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e52:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	220f      	movs	r2, #15
 8008e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4013      	ands	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008e6e:	d019      	beq.n	8008ea4 <HAL_GPIO_DeInit+0x84>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a55      	ldr	r2, [pc, #340]	@ (8008fc8 <HAL_GPIO_DeInit+0x1a8>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d013      	beq.n	8008ea0 <HAL_GPIO_DeInit+0x80>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a54      	ldr	r2, [pc, #336]	@ (8008fcc <HAL_GPIO_DeInit+0x1ac>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00d      	beq.n	8008e9c <HAL_GPIO_DeInit+0x7c>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a53      	ldr	r2, [pc, #332]	@ (8008fd0 <HAL_GPIO_DeInit+0x1b0>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d007      	beq.n	8008e98 <HAL_GPIO_DeInit+0x78>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a52      	ldr	r2, [pc, #328]	@ (8008fd4 <HAL_GPIO_DeInit+0x1b4>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d101      	bne.n	8008e94 <HAL_GPIO_DeInit+0x74>
 8008e90:	2304      	movs	r3, #4
 8008e92:	e008      	b.n	8008ea6 <HAL_GPIO_DeInit+0x86>
 8008e94:	2307      	movs	r3, #7
 8008e96:	e006      	b.n	8008ea6 <HAL_GPIO_DeInit+0x86>
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e004      	b.n	8008ea6 <HAL_GPIO_DeInit+0x86>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	e002      	b.n	8008ea6 <HAL_GPIO_DeInit+0x86>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e000      	b.n	8008ea6 <HAL_GPIO_DeInit+0x86>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	f002 0203 	and.w	r2, r2, #3
 8008eac:	0092      	lsls	r2, r2, #2
 8008eae:	4093      	lsls	r3, r2
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d136      	bne.n	8008f24 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008eb6:	4b48      	ldr	r3, [pc, #288]	@ (8008fd8 <HAL_GPIO_DeInit+0x1b8>)
 8008eb8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	43db      	mvns	r3, r3
 8008ec0:	4945      	ldr	r1, [pc, #276]	@ (8008fd8 <HAL_GPIO_DeInit+0x1b8>)
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8008ec8:	4b43      	ldr	r3, [pc, #268]	@ (8008fd8 <HAL_GPIO_DeInit+0x1b8>)
 8008eca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	4941      	ldr	r1, [pc, #260]	@ (8008fd8 <HAL_GPIO_DeInit+0x1b8>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8008eda:	4b3f      	ldr	r3, [pc, #252]	@ (8008fd8 <HAL_GPIO_DeInit+0x1b8>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	43db      	mvns	r3, r3
 8008ee2:	493d      	ldr	r1, [pc, #244]	@ (8008fd8 <HAL_GPIO_DeInit+0x1b8>)
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8008ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8008fd8 <HAL_GPIO_DeInit+0x1b8>)
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	43db      	mvns	r3, r3
 8008ef0:	4939      	ldr	r1, [pc, #228]	@ (8008fd8 <HAL_GPIO_DeInit+0x1b8>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	220f      	movs	r2, #15
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008f06:	4a2f      	ldr	r2, [pc, #188]	@ (8008fc4 <HAL_GPIO_DeInit+0x1a4>)
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	089b      	lsrs	r3, r3, #2
 8008f0c:	3302      	adds	r3, #2
 8008f0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	43da      	mvns	r2, r3
 8008f16:	482b      	ldr	r0, [pc, #172]	@ (8008fc4 <HAL_GPIO_DeInit+0x1a4>)
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	089b      	lsrs	r3, r3, #2
 8008f1c:	400a      	ands	r2, r1
 8008f1e:	3302      	adds	r3, #2
 8008f20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	2103      	movs	r1, #3
 8008f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	08da      	lsrs	r2, r3, #3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3208      	adds	r2, #8
 8008f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	220f      	movs	r2, #15
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	43db      	mvns	r3, r3
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	08d2      	lsrs	r2, r2, #3
 8008f58:	4019      	ands	r1, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3208      	adds	r2, #8
 8008f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	2103      	movs	r1, #3
 8008f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f70:	43db      	mvns	r3, r3
 8008f72:	401a      	ands	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	fa01 f303 	lsl.w	r3, r1, r3
 8008f84:	43db      	mvns	r3, r3
 8008f86:	401a      	ands	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	2103      	movs	r1, #3
 8008f96:	fa01 f303 	lsl.w	r3, r1, r3
 8008f9a:	43db      	mvns	r3, r3
 8008f9c:	401a      	ands	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f47f af3d 	bne.w	8008e30 <HAL_GPIO_DeInit+0x10>
  }
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	371c      	adds	r7, #28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	40010000 	.word	0x40010000
 8008fc8:	48000400 	.word	0x48000400
 8008fcc:	48000800 	.word	0x48000800
 8008fd0:	48000c00 	.word	0x48000c00
 8008fd4:	48001000 	.word	0x48001000
 8008fd8:	58000800 	.word	0x58000800

08008fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	807b      	strh	r3, [r7, #2]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fec:	787b      	ldrb	r3, [r7, #1]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ff2:	887a      	ldrh	r2, [r7, #2]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ff8:	e002      	b.n	8009000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008ffa:	887a      	ldrh	r2, [r7, #2]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8009012:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <HAL_HSEM_IRQHandler+0x30>)
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009018:	4b08      	ldr	r3, [pc, #32]	@ (800903c <HAL_HSEM_IRQHandler+0x30>)
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	43db      	mvns	r3, r3
 8009020:	4906      	ldr	r1, [pc, #24]	@ (800903c <HAL_HSEM_IRQHandler+0x30>)
 8009022:	4013      	ands	r3, r2
 8009024:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8009026:	4a05      	ldr	r2, [pc, #20]	@ (800903c <HAL_HSEM_IRQHandler+0x30>)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f807 	bl	8009040 <HAL_HSEM_FreeCallback>
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	58001500 	.word	0x58001500

08009040 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e08d      	b.n	8009182 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d106      	bne.n	8009080 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f8b4 	bl	80091e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2224      	movs	r2, #36	@ 0x24
 8009084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0201 	bic.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80090a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d107      	bne.n	80090ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	e006      	b.n	80090dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80090da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d108      	bne.n	80090f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090f2:	605a      	str	r2, [r3, #4]
 80090f4:	e007      	b.n	8009106 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009104:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6812      	ldr	r2, [r2, #0]
 8009110:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68da      	ldr	r2, [r3, #12]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	691a      	ldr	r2, [r3, #16]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	69d9      	ldr	r1, [r3, #28]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a1a      	ldr	r2, [r3, #32]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0201 	orr.w	r2, r2, #1
 8009162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e021      	b.n	80091e0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2224      	movs	r2, #36	@ 0x24
 80091a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0201 	bic.w	r2, r2, #1
 80091b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f821 	bl	80091fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af02      	add	r7, sp, #8
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	4608      	mov	r0, r1
 800921a:	4611      	mov	r1, r2
 800921c:	461a      	mov	r2, r3
 800921e:	4603      	mov	r3, r0
 8009220:	817b      	strh	r3, [r7, #10]
 8009222:	460b      	mov	r3, r1
 8009224:	813b      	strh	r3, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b20      	cmp	r3, #32
 8009234:	f040 80f9 	bne.w	800942a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <HAL_I2C_Mem_Write+0x34>
 800923e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800924a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e0ed      	b.n	800942c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009256:	2b01      	cmp	r3, #1
 8009258:	d101      	bne.n	800925e <HAL_I2C_Mem_Write+0x4e>
 800925a:	2302      	movs	r3, #2
 800925c:	e0e6      	b.n	800942c <HAL_I2C_Mem_Write+0x21c>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009266:	f7ff f8f1 	bl	800844c <HAL_GetTick>
 800926a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	2319      	movs	r3, #25
 8009272:	2201      	movs	r2, #1
 8009274:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 fadd 	bl	8009838 <I2C_WaitOnFlagUntilTimeout>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e0d1      	b.n	800942c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2221      	movs	r2, #33	@ 0x21
 800928c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2240      	movs	r2, #64	@ 0x40
 8009294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6a3a      	ldr	r2, [r7, #32]
 80092a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80092a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092b0:	88f8      	ldrh	r0, [r7, #6]
 80092b2:	893a      	ldrh	r2, [r7, #8]
 80092b4:	8979      	ldrh	r1, [r7, #10]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	9301      	str	r3, [sp, #4]
 80092ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	4603      	mov	r3, r0
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 f9ed 	bl	80096a0 <I2C_RequestMemoryWrite>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d005      	beq.n	80092d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e0a9      	b.n	800942c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2bff      	cmp	r3, #255	@ 0xff
 80092e0:	d90e      	bls.n	8009300 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	22ff      	movs	r2, #255	@ 0xff
 80092e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	8979      	ldrh	r1, [r7, #10]
 80092f0:	2300      	movs	r3, #0
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 fc61 	bl	8009bc0 <I2C_TransferConfig>
 80092fe:	e00f      	b.n	8009320 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800930e:	b2da      	uxtb	r2, r3
 8009310:	8979      	ldrh	r1, [r7, #10]
 8009312:	2300      	movs	r3, #0
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fc50 	bl	8009bc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fae0 	bl	80098ea <I2C_WaitOnTXISFlagUntilTimeout>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e07b      	b.n	800942c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009338:	781a      	ldrb	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800935c:	3b01      	subs	r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d034      	beq.n	80093d8 <HAL_I2C_Mem_Write+0x1c8>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	d130      	bne.n	80093d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	2200      	movs	r2, #0
 800937e:	2180      	movs	r1, #128	@ 0x80
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fa59 	bl	8009838 <I2C_WaitOnFlagUntilTimeout>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e04d      	b.n	800942c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009394:	b29b      	uxth	r3, r3
 8009396:	2bff      	cmp	r3, #255	@ 0xff
 8009398:	d90e      	bls.n	80093b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	22ff      	movs	r2, #255	@ 0xff
 800939e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	8979      	ldrh	r1, [r7, #10]
 80093a8:	2300      	movs	r3, #0
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 fc05 	bl	8009bc0 <I2C_TransferConfig>
 80093b6:	e00f      	b.n	80093d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	8979      	ldrh	r1, [r7, #10]
 80093ca:	2300      	movs	r3, #0
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fbf4 	bl	8009bc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093dc:	b29b      	uxth	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d19e      	bne.n	8009320 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 fac6 	bl	8009978 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e01a      	b.n	800942c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2220      	movs	r2, #32
 80093fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6859      	ldr	r1, [r3, #4]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	4b0a      	ldr	r3, [pc, #40]	@ (8009434 <HAL_I2C_Mem_Write+0x224>)
 800940a:	400b      	ands	r3, r1
 800940c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2220      	movs	r2, #32
 8009412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	e000      	b.n	800942c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800942a:	2302      	movs	r3, #2
  }
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	fe00e800 	.word	0xfe00e800

08009438 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	4608      	mov	r0, r1
 8009442:	4611      	mov	r1, r2
 8009444:	461a      	mov	r2, r3
 8009446:	4603      	mov	r3, r0
 8009448:	817b      	strh	r3, [r7, #10]
 800944a:	460b      	mov	r3, r1
 800944c:	813b      	strh	r3, [r7, #8]
 800944e:	4613      	mov	r3, r2
 8009450:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b20      	cmp	r3, #32
 800945c:	f040 80fd 	bne.w	800965a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <HAL_I2C_Mem_Read+0x34>
 8009466:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009468:	2b00      	cmp	r3, #0
 800946a:	d105      	bne.n	8009478 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009472:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e0f1      	b.n	800965c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800947e:	2b01      	cmp	r3, #1
 8009480:	d101      	bne.n	8009486 <HAL_I2C_Mem_Read+0x4e>
 8009482:	2302      	movs	r3, #2
 8009484:	e0ea      	b.n	800965c <HAL_I2C_Mem_Read+0x224>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800948e:	f7fe ffdd 	bl	800844c <HAL_GetTick>
 8009492:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	2319      	movs	r3, #25
 800949a:	2201      	movs	r2, #1
 800949c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 f9c9 	bl	8009838 <I2C_WaitOnFlagUntilTimeout>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e0d5      	b.n	800965c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2222      	movs	r2, #34	@ 0x22
 80094b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2240      	movs	r2, #64	@ 0x40
 80094bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6a3a      	ldr	r2, [r7, #32]
 80094ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80094d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094d8:	88f8      	ldrh	r0, [r7, #6]
 80094da:	893a      	ldrh	r2, [r7, #8]
 80094dc:	8979      	ldrh	r1, [r7, #10]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	4603      	mov	r3, r0
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 f92d 	bl	8009748 <I2C_RequestMemoryRead>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d005      	beq.n	8009500 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e0ad      	b.n	800965c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009504:	b29b      	uxth	r3, r3
 8009506:	2bff      	cmp	r3, #255	@ 0xff
 8009508:	d90e      	bls.n	8009528 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	22ff      	movs	r2, #255	@ 0xff
 800950e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009514:	b2da      	uxtb	r2, r3
 8009516:	8979      	ldrh	r1, [r7, #10]
 8009518:	4b52      	ldr	r3, [pc, #328]	@ (8009664 <HAL_I2C_Mem_Read+0x22c>)
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 fb4d 	bl	8009bc0 <I2C_TransferConfig>
 8009526:	e00f      	b.n	8009548 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800952c:	b29a      	uxth	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009536:	b2da      	uxtb	r2, r3
 8009538:	8979      	ldrh	r1, [r7, #10]
 800953a:	4b4a      	ldr	r3, [pc, #296]	@ (8009664 <HAL_I2C_Mem_Read+0x22c>)
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 fb3c 	bl	8009bc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	2200      	movs	r2, #0
 8009550:	2104      	movs	r1, #4
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f970 	bl	8009838 <I2C_WaitOnFlagUntilTimeout>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e07c      	b.n	800965c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956c:	b2d2      	uxtb	r2, r2
 800956e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800957e:	3b01      	subs	r3, #1
 8009580:	b29a      	uxth	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800958a:	b29b      	uxth	r3, r3
 800958c:	3b01      	subs	r3, #1
 800958e:	b29a      	uxth	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009598:	b29b      	uxth	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d034      	beq.n	8009608 <HAL_I2C_Mem_Read+0x1d0>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d130      	bne.n	8009608 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ac:	2200      	movs	r2, #0
 80095ae:	2180      	movs	r1, #128	@ 0x80
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f941 	bl	8009838 <I2C_WaitOnFlagUntilTimeout>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e04d      	b.n	800965c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2bff      	cmp	r3, #255	@ 0xff
 80095c8:	d90e      	bls.n	80095e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	22ff      	movs	r2, #255	@ 0xff
 80095ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	8979      	ldrh	r1, [r7, #10]
 80095d8:	2300      	movs	r3, #0
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 faed 	bl	8009bc0 <I2C_TransferConfig>
 80095e6:	e00f      	b.n	8009608 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	8979      	ldrh	r1, [r7, #10]
 80095fa:	2300      	movs	r3, #0
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 fadc 	bl	8009bc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d19a      	bne.n	8009548 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 f9ae 	bl	8009978 <I2C_WaitOnSTOPFlagUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e01a      	b.n	800965c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2220      	movs	r2, #32
 800962c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6859      	ldr	r1, [r3, #4]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	4b0b      	ldr	r3, [pc, #44]	@ (8009668 <HAL_I2C_Mem_Read+0x230>)
 800963a:	400b      	ands	r3, r1
 800963c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2220      	movs	r2, #32
 8009642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	e000      	b.n	800965c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800965a:	2302      	movs	r3, #2
  }
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	80002400 	.word	0x80002400
 8009668:	fe00e800 	.word	0xfe00e800

0800966c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800967a:	b2db      	uxtb	r3, r3
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	4608      	mov	r0, r1
 80096aa:	4611      	mov	r1, r2
 80096ac:	461a      	mov	r2, r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	817b      	strh	r3, [r7, #10]
 80096b2:	460b      	mov	r3, r1
 80096b4:	813b      	strh	r3, [r7, #8]
 80096b6:	4613      	mov	r3, r2
 80096b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80096ba:	88fb      	ldrh	r3, [r7, #6]
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	8979      	ldrh	r1, [r7, #10]
 80096c0:	4b20      	ldr	r3, [pc, #128]	@ (8009744 <I2C_RequestMemoryWrite+0xa4>)
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 fa79 	bl	8009bc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ce:	69fa      	ldr	r2, [r7, #28]
 80096d0:	69b9      	ldr	r1, [r7, #24]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 f909 	bl	80098ea <I2C_WaitOnTXISFlagUntilTimeout>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e02c      	b.n	800973c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d105      	bne.n	80096f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096e8:	893b      	ldrh	r3, [r7, #8]
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80096f2:	e015      	b.n	8009720 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80096f4:	893b      	ldrh	r3, [r7, #8]
 80096f6:	0a1b      	lsrs	r3, r3, #8
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009702:	69fa      	ldr	r2, [r7, #28]
 8009704:	69b9      	ldr	r1, [r7, #24]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 f8ef 	bl	80098ea <I2C_WaitOnTXISFlagUntilTimeout>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e012      	b.n	800973c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009716:	893b      	ldrh	r3, [r7, #8]
 8009718:	b2da      	uxtb	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	2200      	movs	r2, #0
 8009728:	2180      	movs	r1, #128	@ 0x80
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 f884 	bl	8009838 <I2C_WaitOnFlagUntilTimeout>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e000      	b.n	800973c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	80002000 	.word	0x80002000

08009748 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	4608      	mov	r0, r1
 8009752:	4611      	mov	r1, r2
 8009754:	461a      	mov	r2, r3
 8009756:	4603      	mov	r3, r0
 8009758:	817b      	strh	r3, [r7, #10]
 800975a:	460b      	mov	r3, r1
 800975c:	813b      	strh	r3, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	b2da      	uxtb	r2, r3
 8009766:	8979      	ldrh	r1, [r7, #10]
 8009768:	4b20      	ldr	r3, [pc, #128]	@ (80097ec <I2C_RequestMemoryRead+0xa4>)
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	2300      	movs	r3, #0
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fa26 	bl	8009bc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009774:	69fa      	ldr	r2, [r7, #28]
 8009776:	69b9      	ldr	r1, [r7, #24]
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f000 f8b6 	bl	80098ea <I2C_WaitOnTXISFlagUntilTimeout>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e02c      	b.n	80097e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d105      	bne.n	800979a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800978e:	893b      	ldrh	r3, [r7, #8]
 8009790:	b2da      	uxtb	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	629a      	str	r2, [r3, #40]	@ 0x28
 8009798:	e015      	b.n	80097c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800979a:	893b      	ldrh	r3, [r7, #8]
 800979c:	0a1b      	lsrs	r3, r3, #8
 800979e:	b29b      	uxth	r3, r3
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	69b9      	ldr	r1, [r7, #24]
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f89c 	bl	80098ea <I2C_WaitOnTXISFlagUntilTimeout>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e012      	b.n	80097e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097bc:	893b      	ldrh	r3, [r7, #8]
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	2200      	movs	r2, #0
 80097ce:	2140      	movs	r1, #64	@ 0x40
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 f831 	bl	8009838 <I2C_WaitOnFlagUntilTimeout>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	80002000 	.word	0x80002000

080097f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b02      	cmp	r3, #2
 8009804:	d103      	bne.n	800980e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2200      	movs	r2, #0
 800980c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	2b01      	cmp	r3, #1
 800981a:	d007      	beq.n	800982c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699a      	ldr	r2, [r3, #24]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0201 	orr.w	r2, r2, #1
 800982a:	619a      	str	r2, [r3, #24]
  }
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	4613      	mov	r3, r2
 8009846:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009848:	e03b      	b.n	80098c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 f8d6 	bl	8009a00 <I2C_IsErrorOccurred>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e041      	b.n	80098e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009864:	d02d      	beq.n	80098c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009866:	f7fe fdf1 	bl	800844c <HAL_GetTick>
 800986a:	4602      	mov	r2, r0
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d302      	bcc.n	800987c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d122      	bne.n	80098c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699a      	ldr	r2, [r3, #24]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	4013      	ands	r3, r2
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	429a      	cmp	r2, r3
 800988a:	bf0c      	ite	eq
 800988c:	2301      	moveq	r3, #1
 800988e:	2300      	movne	r3, #0
 8009890:	b2db      	uxtb	r3, r3
 8009892:	461a      	mov	r2, r3
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	429a      	cmp	r2, r3
 8009898:	d113      	bne.n	80098c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800989e:	f043 0220 	orr.w	r2, r3, #32
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2220      	movs	r2, #32
 80098aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e00f      	b.n	80098e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699a      	ldr	r2, [r3, #24]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	4013      	ands	r3, r2
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	bf0c      	ite	eq
 80098d2:	2301      	moveq	r3, #1
 80098d4:	2300      	movne	r3, #0
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	461a      	mov	r2, r3
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d0b4      	beq.n	800984a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	60f8      	str	r0, [r7, #12]
 80098f2:	60b9      	str	r1, [r7, #8]
 80098f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098f6:	e033      	b.n	8009960 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f87f 	bl	8009a00 <I2C_IsErrorOccurred>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e031      	b.n	8009970 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d025      	beq.n	8009960 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009914:	f7fe fd9a 	bl	800844c <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	429a      	cmp	r2, r3
 8009922:	d302      	bcc.n	800992a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d11a      	bne.n	8009960 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b02      	cmp	r3, #2
 8009936:	d013      	beq.n	8009960 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800993c:	f043 0220 	orr.w	r2, r3, #32
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2220      	movs	r2, #32
 8009948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e007      	b.n	8009970 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b02      	cmp	r3, #2
 800996c:	d1c4      	bne.n	80098f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009984:	e02f      	b.n	80099e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 f838 	bl	8009a00 <I2C_IsErrorOccurred>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e02d      	b.n	80099f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800999a:	f7fe fd57 	bl	800844c <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d302      	bcc.n	80099b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11a      	bne.n	80099e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	f003 0320 	and.w	r3, r3, #32
 80099ba:	2b20      	cmp	r3, #32
 80099bc:	d013      	beq.n	80099e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c2:	f043 0220 	orr.w	r2, r3, #32
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e007      	b.n	80099f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d1c8      	bne.n	8009986 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08a      	sub	sp, #40	@ 0x28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d068      	beq.n	8009afe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2210      	movs	r2, #16
 8009a32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a34:	e049      	b.n	8009aca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3c:	d045      	beq.n	8009aca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a3e:	f7fe fd05 	bl	800844c <HAL_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d302      	bcc.n	8009a54 <I2C_IsErrorOccurred+0x54>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d13a      	bne.n	8009aca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a76:	d121      	bne.n	8009abc <I2C_IsErrorOccurred+0xbc>
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a7e:	d01d      	beq.n	8009abc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009a80:	7cfb      	ldrb	r3, [r7, #19]
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	d01a      	beq.n	8009abc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a96:	f7fe fcd9 	bl	800844c <HAL_GetTick>
 8009a9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a9c:	e00e      	b.n	8009abc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a9e:	f7fe fcd5 	bl	800844c <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	2b19      	cmp	r3, #25
 8009aaa:	d907      	bls.n	8009abc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	f043 0320 	orr.w	r3, r3, #32
 8009ab2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009aba:	e006      	b.n	8009aca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	f003 0320 	and.w	r3, r3, #32
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	d1e9      	bne.n	8009a9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	f003 0320 	and.w	r3, r3, #32
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d003      	beq.n	8009ae0 <I2C_IsErrorOccurred+0xe0>
 8009ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0aa      	beq.n	8009a36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d103      	bne.n	8009af0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2220      	movs	r2, #32
 8009aee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	f043 0304 	orr.w	r3, r3, #4
 8009af6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	f043 0301 	orr.w	r3, r3, #1
 8009b16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00b      	beq.n	8009b4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	f043 0308 	orr.w	r3, r3, #8
 8009b38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	f043 0302 	orr.w	r3, r3, #2
 8009b5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d01c      	beq.n	8009bae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff fe3b 	bl	80097f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6859      	ldr	r1, [r3, #4]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	4b0d      	ldr	r3, [pc, #52]	@ (8009bbc <I2C_IsErrorOccurred+0x1bc>)
 8009b86:	400b      	ands	r3, r1
 8009b88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	431a      	orrs	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009bae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3728      	adds	r7, #40	@ 0x28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	fe00e800 	.word	0xfe00e800

08009bc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	607b      	str	r3, [r7, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	817b      	strh	r3, [r7, #10]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bd2:	897b      	ldrh	r3, [r7, #10]
 8009bd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bd8:	7a7b      	ldrb	r3, [r7, #9]
 8009bda:	041b      	lsls	r3, r3, #16
 8009bdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009be0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	0d5b      	lsrs	r3, r3, #21
 8009bfa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009bfe:	4b08      	ldr	r3, [pc, #32]	@ (8009c20 <I2C_TransferConfig+0x60>)
 8009c00:	430b      	orrs	r3, r1
 8009c02:	43db      	mvns	r3, r3
 8009c04:	ea02 0103 	and.w	r1, r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c12:	bf00      	nop
 8009c14:	371c      	adds	r7, #28
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	03ff63ff 	.word	0x03ff63ff

08009c24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d138      	bne.n	8009cac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d101      	bne.n	8009c48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c44:	2302      	movs	r3, #2
 8009c46:	e032      	b.n	8009cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2224      	movs	r2, #36	@ 0x24
 8009c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f022 0201 	bic.w	r2, r2, #1
 8009c66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6819      	ldr	r1, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0201 	orr.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e000      	b.n	8009cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cac:	2302      	movs	r3, #2
  }
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d139      	bne.n	8009d44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d101      	bne.n	8009cde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cda:	2302      	movs	r3, #2
 8009cdc:	e033      	b.n	8009d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2224      	movs	r2, #36	@ 0x24
 8009cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0201 	bic.w	r2, r2, #1
 8009cfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009d0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f042 0201 	orr.w	r2, r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2220      	movs	r2, #32
 8009d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e000      	b.n	8009d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d44:	2302      	movs	r3, #2
  }
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
	...

08009d54 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d01e      	beq.n	8009da4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009d66:	4b13      	ldr	r3, [pc, #76]	@ (8009db4 <HAL_IPCC_Init+0x60>)
 8009d68:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d102      	bne.n	8009d7c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f9 f87a 	bl	8002e70 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009d7c:	68b8      	ldr	r0, [r7, #8]
 8009d7e:	f000 f85b 	bl	8009e38 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f82c 	bl	8009dec <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8009da2:	e001      	b.n	8009da8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	58000c00 	.word	0x58000c00

08009db8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	60f8      	str	r0, [r7, #12]
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009de0:	bf00      	nop
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	e00f      	b.n	8009e1a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	4a0b      	ldr	r2, [pc, #44]	@ (8009e30 <IPCC_SetDefaultCallbacks+0x44>)
 8009e04:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	3306      	adds	r3, #6
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	4a08      	ldr	r2, [pc, #32]	@ (8009e34 <IPCC_SetDefaultCallbacks+0x48>)
 8009e12:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3301      	adds	r3, #1
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b05      	cmp	r3, #5
 8009e1e:	d9ec      	bls.n	8009dfa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009e20:	bf00      	nop
 8009e22:	bf00      	nop
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	08009db9 	.word	0x08009db9
 8009e34:	08009dd3 	.word	0x08009dd3

08009e38 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009e4c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	223f      	movs	r2, #63	@ 0x3f
 8009e52:	609a      	str	r2, [r3, #8]
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e0c0      	b.n	8009ff4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7f9 f8be 	bl	8003008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2203      	movs	r2, #3
 8009e90:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f002 fe31 	bl	800cb00 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73fb      	strb	r3, [r7, #15]
 8009ea2:	e03e      	b.n	8009f22 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009ea4:	7bfa      	ldrb	r2, [r7, #15]
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	440b      	add	r3, r1
 8009eb2:	3311      	adds	r3, #17
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009eb8:	7bfa      	ldrb	r2, [r7, #15]
 8009eba:	6879      	ldr	r1, [r7, #4]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	440b      	add	r3, r1
 8009ec6:	3310      	adds	r3, #16
 8009ec8:	7bfa      	ldrb	r2, [r7, #15]
 8009eca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ecc:	7bfa      	ldrb	r2, [r7, #15]
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	440b      	add	r3, r1
 8009eda:	3313      	adds	r3, #19
 8009edc:	2200      	movs	r2, #0
 8009ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009ee0:	7bfa      	ldrb	r2, [r7, #15]
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4413      	add	r3, r2
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	440b      	add	r3, r1
 8009eee:	3320      	adds	r3, #32
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009ef4:	7bfa      	ldrb	r2, [r7, #15]
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	440b      	add	r3, r1
 8009f02:	3324      	adds	r3, #36	@ 0x24
 8009f04:	2200      	movs	r2, #0
 8009f06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	6879      	ldr	r1, [r7, #4]
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	4613      	mov	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	440b      	add	r3, r1
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	73fb      	strb	r3, [r7, #15]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	791b      	ldrb	r3, [r3, #4]
 8009f26:	7bfa      	ldrb	r2, [r7, #15]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d3bb      	bcc.n	8009ea4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]
 8009f30:	e044      	b.n	8009fbc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f32:	7bfa      	ldrb	r2, [r7, #15]
 8009f34:	6879      	ldr	r1, [r7, #4]
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	00db      	lsls	r3, r3, #3
 8009f3e:	440b      	add	r3, r1
 8009f40:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009f44:	2200      	movs	r2, #0
 8009f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f48:	7bfa      	ldrb	r2, [r7, #15]
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	440b      	add	r3, r1
 8009f56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f5a:	7bfa      	ldrb	r2, [r7, #15]
 8009f5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f5e:	7bfa      	ldrb	r2, [r7, #15]
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	440b      	add	r3, r1
 8009f6c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009f70:	2200      	movs	r2, #0
 8009f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f74:	7bfa      	ldrb	r2, [r7, #15]
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	440b      	add	r3, r1
 8009f82:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f8a:	7bfa      	ldrb	r2, [r7, #15]
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	440b      	add	r3, r1
 8009f98:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009fa0:	7bfa      	ldrb	r2, [r7, #15]
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	440b      	add	r3, r1
 8009fae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	73fb      	strb	r3, [r7, #15]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	791b      	ldrb	r3, [r3, #4]
 8009fc0:	7bfa      	ldrb	r2, [r7, #15]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d3b5      	bcc.n	8009f32 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3304      	adds	r3, #4
 8009fce:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009fd2:	f002 fdb0 	bl	800cb36 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	7a9b      	ldrb	r3, [r3, #10]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d102      	bne.n	8009ff2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f805 	bl	8009ffc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a020:	b29b      	uxth	r3, r3
 800a022:	f043 0301 	orr.w	r3, r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a034:	b29b      	uxth	r3, r3
 800a036:	f043 0302 	orr.w	r3, r3, #2
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a054:	4b05      	ldr	r3, [pc, #20]	@ (800a06c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a04      	ldr	r2, [pc, #16]	@ (800a06c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a05a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a05e:	6013      	str	r3, [r2, #0]
}
 800a060:	bf00      	nop
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	58000400 	.word	0x58000400

0800a070 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a070:	b480      	push	{r7}
 800a072:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a074:	4b04      	ldr	r3, [pc, #16]	@ (800a088 <HAL_PWREx_GetVoltageRange+0x18>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	58000400 	.word	0x58000400

0800a08c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a08c:	b480      	push	{r7}
 800a08e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a09a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a09e:	d101      	bne.n	800a0a4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e000      	b.n	800a0a6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <LL_RCC_HSE_Enable>:
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a0b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a0be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0c2:	6013      	str	r3, [r2, #0]
}
 800a0c4:	bf00      	nop
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <LL_RCC_HSE_Disable>:
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a0d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a0dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0e0:	6013      	str	r3, [r2, #0]
}
 800a0e2:	bf00      	nop
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <LL_RCC_HSE_IsReady>:
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a0f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0fe:	d101      	bne.n	800a104 <LL_RCC_HSE_IsReady+0x18>
 800a100:	2301      	movs	r3, #1
 800a102:	e000      	b.n	800a106 <LL_RCC_HSE_IsReady+0x1a>
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <LL_RCC_HSI_Enable>:
{
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a11e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a122:	6013      	str	r3, [r2, #0]
}
 800a124:	bf00      	nop
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <LL_RCC_HSI_Disable>:
{
 800a12e:	b480      	push	{r7}
 800a130:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a13c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a140:	6013      	str	r3, [r2, #0]
}
 800a142:	bf00      	nop
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <LL_RCC_HSI_IsReady>:
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a15a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a15e:	d101      	bne.n	800a164 <LL_RCC_HSI_IsReady+0x18>
 800a160:	2301      	movs	r3, #1
 800a162:	e000      	b.n	800a166 <LL_RCC_HSI_IsReady+0x1a>
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <LL_RCC_HSI_SetCalibTrimming>:
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	061b      	lsls	r3, r3, #24
 800a186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a18a:	4313      	orrs	r3, r2
 800a18c:	604b      	str	r3, [r1, #4]
}
 800a18e:	bf00      	nop
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <LL_RCC_HSI48_Enable>:
{
 800a19a:	b480      	push	{r7}
 800a19c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a19e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1aa:	f043 0301 	orr.w	r3, r3, #1
 800a1ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a1b2:	bf00      	nop
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <LL_RCC_HSI48_Disable>:
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a1c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1cc:	f023 0301 	bic.w	r3, r3, #1
 800a1d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a1d4:	bf00      	nop
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <LL_RCC_HSI48_IsReady>:
{
 800a1de:	b480      	push	{r7}
 800a1e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a1e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1ea:	f003 0302 	and.w	r3, r3, #2
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d101      	bne.n	800a1f6 <LL_RCC_HSI48_IsReady+0x18>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e000      	b.n	800a1f8 <LL_RCC_HSI48_IsReady+0x1a>
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <LL_RCC_LSE_Enable>:
{
 800a202:	b480      	push	{r7}
 800a204:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a20e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a212:	f043 0301 	orr.w	r3, r3, #1
 800a216:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a21a:	bf00      	nop
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <LL_RCC_LSE_Disable>:
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a230:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a234:	f023 0301 	bic.w	r3, r3, #1
 800a238:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a23c:	bf00      	nop
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <LL_RCC_LSE_EnableBypass>:
{
 800a246:	b480      	push	{r7}
 800a248:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a24a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a252:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a256:	f043 0304 	orr.w	r3, r3, #4
 800a25a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a25e:	bf00      	nop
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <LL_RCC_LSE_DisableBypass>:
{
 800a268:	b480      	push	{r7}
 800a26a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a26c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a274:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a278:	f023 0304 	bic.w	r3, r3, #4
 800a27c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a280:	bf00      	nop
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <LL_RCC_LSE_IsReady>:
{
 800a28a:	b480      	push	{r7}
 800a28c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a28e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a296:	f003 0302 	and.w	r3, r3, #2
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d101      	bne.n	800a2a2 <LL_RCC_LSE_IsReady+0x18>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e000      	b.n	800a2a4 <LL_RCC_LSE_IsReady+0x1a>
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <LL_RCC_LSI1_Enable>:
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a2b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2be:	f043 0301 	orr.w	r3, r3, #1
 800a2c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a2c6:	bf00      	nop
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <LL_RCC_LSI1_Disable>:
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a2d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2e0:	f023 0301 	bic.w	r3, r3, #1
 800a2e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a2e8:	bf00      	nop
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <LL_RCC_LSI1_IsReady>:
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a2f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b02      	cmp	r3, #2
 800a304:	d101      	bne.n	800a30a <LL_RCC_LSI1_IsReady+0x18>
 800a306:	2301      	movs	r3, #1
 800a308:	e000      	b.n	800a30c <LL_RCC_LSI1_IsReady+0x1a>
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <LL_RCC_LSI2_Enable>:
{
 800a316:	b480      	push	{r7}
 800a318:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a31a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a31e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a322:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a326:	f043 0304 	orr.w	r3, r3, #4
 800a32a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a32e:	bf00      	nop
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <LL_RCC_LSI2_Disable>:
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a33c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a344:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a348:	f023 0304 	bic.w	r3, r3, #4
 800a34c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a350:	bf00      	nop
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <LL_RCC_LSI2_IsReady>:
{
 800a35a:	b480      	push	{r7}
 800a35c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a35e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	2b08      	cmp	r3, #8
 800a36c:	d101      	bne.n	800a372 <LL_RCC_LSI2_IsReady+0x18>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <LL_RCC_LSI2_IsReady+0x1a>
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <LL_RCC_LSI2_SetTrimming>:
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a38a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a38e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	021b      	lsls	r3, r3, #8
 800a396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a39a:	4313      	orrs	r3, r2
 800a39c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <LL_RCC_MSI_Enable>:
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a3b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3ba:	f043 0301 	orr.w	r3, r3, #1
 800a3be:	6013      	str	r3, [r2, #0]
}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <LL_RCC_MSI_Disable>:
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a3ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3d8:	f023 0301 	bic.w	r3, r3, #1
 800a3dc:	6013      	str	r3, [r2, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <LL_RCC_MSI_IsReady>:
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a3ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d101      	bne.n	800a3fe <LL_RCC_MSI_IsReady+0x16>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e000      	b.n	800a400 <LL_RCC_MSI_IsReady+0x18>
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <LL_RCC_MSI_SetRange>:
{
 800a40a:	b480      	push	{r7}
 800a40c:	b083      	sub	sp, #12
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a41c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4313      	orrs	r3, r2
 800a424:	600b      	str	r3, [r1, #0]
}
 800a426:	bf00      	nop
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <LL_RCC_MSI_GetRange>:
{
 800a432:	b480      	push	{r7}
 800a434:	b083      	sub	sp, #12
 800a436:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a442:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2bb0      	cmp	r3, #176	@ 0xb0
 800a448:	d901      	bls.n	800a44e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800a44a:	23b0      	movs	r3, #176	@ 0xb0
 800a44c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800a44e:	687b      	ldr	r3, [r7, #4]
}
 800a450:	4618      	mov	r0, r3
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <LL_RCC_MSI_SetCalibTrimming>:
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a476:	4313      	orrs	r3, r2
 800a478:	604b      	str	r3, [r1, #4]
}
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <LL_RCC_SetSysClkSource>:
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a48e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f023 0203 	bic.w	r2, r3, #3
 800a498:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	608b      	str	r3, [r1, #8]
}
 800a4a2:	bf00      	nop
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <LL_RCC_GetSysClkSource>:
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a4b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f003 030c 	and.w	r3, r3, #12
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <LL_RCC_SetAHBPrescaler>:
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a4ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	608b      	str	r3, [r1, #8]
}
 800a4e2:	bf00      	nop
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <LL_C2_RCC_SetAHBPrescaler>:
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b083      	sub	sp, #12
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a4f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a4fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a502:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4313      	orrs	r3, r2
 800a50a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <LL_RCC_SetAHB4Prescaler>:
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a526:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a52a:	f023 020f 	bic.w	r2, r3, #15
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	091b      	lsrs	r3, r3, #4
 800a532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a536:	4313      	orrs	r3, r2
 800a538:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <LL_RCC_SetAPB1Prescaler>:
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a55a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4313      	orrs	r3, r2
 800a562:	608b      	str	r3, [r1, #8]
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <LL_RCC_SetAPB2Prescaler>:
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4313      	orrs	r3, r2
 800a58a:	608b      	str	r3, [r1, #8]
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <LL_RCC_GetAHBPrescaler>:
{
 800a598:	b480      	push	{r7}
 800a59a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a59c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <LL_RCC_GetAHB4Prescaler>:
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a5b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5bc:	011b      	lsls	r3, r3, #4
 800a5be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <LL_RCC_GetAPB1Prescaler>:
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a5d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <LL_RCC_GetAPB2Prescaler>:
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a5e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <LL_RCC_PLL_Enable>:
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a60a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a60e:	6013      	str	r3, [r2, #0]
}
 800a610:	bf00      	nop
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <LL_RCC_PLL_Disable>:
{
 800a61a:	b480      	push	{r7}
 800a61c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a61e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a628:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a62c:	6013      	str	r3, [r2, #0]
}
 800a62e:	bf00      	nop
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <LL_RCC_PLL_IsReady>:
{
 800a638:	b480      	push	{r7}
 800a63a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a63c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a64a:	d101      	bne.n	800a650 <LL_RCC_PLL_IsReady+0x18>
 800a64c:	2301      	movs	r3, #1
 800a64e:	e000      	b.n	800a652 <LL_RCC_PLL_IsReady+0x1a>
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <LL_RCC_PLL_GetN>:
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <LL_RCC_PLL_GetR>:
{
 800a676:	b480      	push	{r7}
 800a678:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a67a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800a684:	4618      	mov	r0, r3
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <LL_RCC_PLL_GetDivider>:
{
 800a68e:	b480      	push	{r7}
 800a690:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <LL_RCC_PLL_GetMainSource>:
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a6aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	f003 0303 	and.w	r3, r3, #3
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <LL_RCC_IsActiveFlag_HPRE>:
{
 800a6be:	b480      	push	{r7}
 800a6c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a6c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6d0:	d101      	bne.n	800a6d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e000      	b.n	800a6d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a6e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a6ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6f6:	d101      	bne.n	800a6fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e000      	b.n	800a6fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800a708:	b480      	push	{r7}
 800a70a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a70c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a710:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a71c:	d101      	bne.n	800a722 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800a72e:	b480      	push	{r7}
 800a730:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a73c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a740:	d101      	bne.n	800a746 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a742:	2301      	movs	r3, #1
 800a744:	e000      	b.n	800a748 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800a752:	b480      	push	{r7}
 800a754:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a760:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a764:	d101      	bne.n	800a76a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a766:	2301      	movs	r3, #1
 800a768:	e000      	b.n	800a76c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b08d      	sub	sp, #52	@ 0x34
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e363      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0320 	and.w	r3, r3, #32
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 808d 	beq.w	800a8b2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a798:	f7ff fe89 	bl	800a4ae <LL_RCC_GetSysClkSource>
 800a79c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a79e:	f7ff ff82 	bl	800a6a6 <LL_RCC_PLL_GetMainSource>
 800a7a2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d005      	beq.n	800a7b6 <HAL_RCC_OscConfig+0x3e>
 800a7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ac:	2b0c      	cmp	r3, #12
 800a7ae:	d147      	bne.n	800a840 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d144      	bne.n	800a840 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e347      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a7c6:	f7ff fe34 	bl	800a432 <LL_RCC_MSI_GetRange>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	429c      	cmp	r4, r3
 800a7ce:	d914      	bls.n	800a7fa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 fd2f 	bl	800b238 <RCC_SetFlashLatencyFromMSIRange>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e336      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff fe0e 	bl	800a40a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fe32 	bl	800a45c <LL_RCC_MSI_SetCalibTrimming>
 800a7f8:	e013      	b.n	800a822 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7ff fe03 	bl	800a40a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	4618      	mov	r0, r3
 800a80a:	f7ff fe27 	bl	800a45c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fd10 	bl	800b238 <RCC_SetFlashLatencyFromMSIRange>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d001      	beq.n	800a822 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e317      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a822:	f000 fcc9 	bl	800b1b8 <HAL_RCC_GetHCLKFreq>
 800a826:	4603      	mov	r3, r0
 800a828:	4aa4      	ldr	r2, [pc, #656]	@ (800aabc <HAL_RCC_OscConfig+0x344>)
 800a82a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a82c:	4ba4      	ldr	r3, [pc, #656]	@ (800aac0 <HAL_RCC_OscConfig+0x348>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f7fd fdbd 	bl	80083b0 <HAL_InitTick>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d039      	beq.n	800a8b0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e308      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d01e      	beq.n	800a886 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a848:	f7ff fdb0 	bl	800a3ac <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a84c:	f7fd fdfe 	bl	800844c <HAL_GetTick>
 800a850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a852:	e008      	b.n	800a866 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a854:	f7fd fdfa 	bl	800844c <HAL_GetTick>
 800a858:	4602      	mov	r2, r0
 800a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d901      	bls.n	800a866 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a862:	2303      	movs	r3, #3
 800a864:	e2f5      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a866:	f7ff fdbf 	bl	800a3e8 <LL_RCC_MSI_IsReady>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d0f1      	beq.n	800a854 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff fdc8 	bl	800a40a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fdec 	bl	800a45c <LL_RCC_MSI_SetCalibTrimming>
 800a884:	e015      	b.n	800a8b2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a886:	f7ff fda0 	bl	800a3ca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a88a:	f7fd fddf 	bl	800844c <HAL_GetTick>
 800a88e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a890:	e008      	b.n	800a8a4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a892:	f7fd fddb 	bl	800844c <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d901      	bls.n	800a8a4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e2d6      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a8a4:	f7ff fda0 	bl	800a3e8 <LL_RCC_MSI_IsReady>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1f1      	bne.n	800a892 <HAL_RCC_OscConfig+0x11a>
 800a8ae:	e000      	b.n	800a8b2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a8b0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d047      	beq.n	800a94e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8be:	f7ff fdf6 	bl	800a4ae <LL_RCC_GetSysClkSource>
 800a8c2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a8c4:	f7ff feef 	bl	800a6a6 <LL_RCC_PLL_GetMainSource>
 800a8c8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d005      	beq.n	800a8dc <HAL_RCC_OscConfig+0x164>
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	2b0c      	cmp	r3, #12
 800a8d4:	d108      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	d105      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d134      	bne.n	800a94e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e2b4      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8f0:	d102      	bne.n	800a8f8 <HAL_RCC_OscConfig+0x180>
 800a8f2:	f7ff fbdd 	bl	800a0b0 <LL_RCC_HSE_Enable>
 800a8f6:	e001      	b.n	800a8fc <HAL_RCC_OscConfig+0x184>
 800a8f8:	f7ff fbe9 	bl	800a0ce <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d012      	beq.n	800a92a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a904:	f7fd fda2 	bl	800844c <HAL_GetTick>
 800a908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a90c:	f7fd fd9e 	bl	800844c <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b64      	cmp	r3, #100	@ 0x64
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e299      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a91e:	f7ff fbe5 	bl	800a0ec <LL_RCC_HSE_IsReady>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d0f1      	beq.n	800a90c <HAL_RCC_OscConfig+0x194>
 800a928:	e011      	b.n	800a94e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a92a:	f7fd fd8f 	bl	800844c <HAL_GetTick>
 800a92e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a930:	e008      	b.n	800a944 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a932:	f7fd fd8b 	bl	800844c <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b64      	cmp	r3, #100	@ 0x64
 800a93e:	d901      	bls.n	800a944 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e286      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a944:	f7ff fbd2 	bl	800a0ec <LL_RCC_HSE_IsReady>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1f1      	bne.n	800a932 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	2b00      	cmp	r3, #0
 800a958:	d04c      	beq.n	800a9f4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a95a:	f7ff fda8 	bl	800a4ae <LL_RCC_GetSysClkSource>
 800a95e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a960:	f7ff fea1 	bl	800a6a6 <LL_RCC_PLL_GetMainSource>
 800a964:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b04      	cmp	r3, #4
 800a96a:	d005      	beq.n	800a978 <HAL_RCC_OscConfig+0x200>
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	2b0c      	cmp	r3, #12
 800a970:	d10e      	bne.n	800a990 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2b02      	cmp	r3, #2
 800a976:	d10b      	bne.n	800a990 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e266      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fbf1 	bl	800a170 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a98e:	e031      	b.n	800a9f4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d019      	beq.n	800a9cc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a998:	f7ff fbba 	bl	800a110 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a99c:	f7fd fd56 	bl	800844c <HAL_GetTick>
 800a9a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800a9a2:	e008      	b.n	800a9b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9a4:	f7fd fd52 	bl	800844c <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d901      	bls.n	800a9b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e24d      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800a9b6:	f7ff fbc9 	bl	800a14c <LL_RCC_HSI_IsReady>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d0f1      	beq.n	800a9a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff fbd3 	bl	800a170 <LL_RCC_HSI_SetCalibTrimming>
 800a9ca:	e013      	b.n	800a9f4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9cc:	f7ff fbaf 	bl	800a12e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d0:	f7fd fd3c 	bl	800844c <HAL_GetTick>
 800a9d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800a9d6:	e008      	b.n	800a9ea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9d8:	f7fd fd38 	bl	800844c <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d901      	bls.n	800a9ea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e233      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800a9ea:	f7ff fbaf 	bl	800a14c <LL_RCC_HSI_IsReady>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d1f1      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0308 	and.w	r3, r3, #8
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 80a3 	beq.w	800ab54 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d076      	beq.n	800ab04 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 0310 	and.w	r3, r3, #16
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d046      	beq.n	800aab0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800aa22:	f7ff fc66 	bl	800a2f2 <LL_RCC_LSI1_IsReady>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d113      	bne.n	800aa54 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800aa2c:	f7ff fc3f 	bl	800a2ae <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa30:	f7fd fd0c 	bl	800844c <HAL_GetTick>
 800aa34:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aa36:	e008      	b.n	800aa4a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aa38:	f7fd fd08 	bl	800844c <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d901      	bls.n	800aa4a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	e203      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aa4a:	f7ff fc52 	bl	800a2f2 <LL_RCC_LSI1_IsReady>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d0f1      	beq.n	800aa38 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800aa54:	f7ff fc5f 	bl	800a316 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa58:	f7fd fcf8 	bl	800844c <HAL_GetTick>
 800aa5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800aa5e:	e008      	b.n	800aa72 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800aa60:	f7fd fcf4 	bl	800844c <HAL_GetTick>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d901      	bls.n	800aa72 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e1ef      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800aa72:	f7ff fc72 	bl	800a35a <LL_RCC_LSI2_IsReady>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0f1      	beq.n	800aa60 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7ff fc7c 	bl	800a37e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800aa86:	f7ff fc23 	bl	800a2d0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa8a:	f7fd fcdf 	bl	800844c <HAL_GetTick>
 800aa8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800aa90:	e008      	b.n	800aaa4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aa92:	f7fd fcdb 	bl	800844c <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d901      	bls.n	800aaa4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e1d6      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800aaa4:	f7ff fc25 	bl	800a2f2 <LL_RCC_LSI1_IsReady>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1f1      	bne.n	800aa92 <HAL_RCC_OscConfig+0x31a>
 800aaae:	e051      	b.n	800ab54 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800aab0:	f7ff fbfd 	bl	800a2ae <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aab4:	f7fd fcca 	bl	800844c <HAL_GetTick>
 800aab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800aaba:	e00c      	b.n	800aad6 <HAL_RCC_OscConfig+0x35e>
 800aabc:	2000000c 	.word	0x2000000c
 800aac0:	200000e4 	.word	0x200000e4
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aac4:	f7fd fcc2 	bl	800844c <HAL_GetTick>
 800aac8:	4602      	mov	r2, r0
 800aaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d901      	bls.n	800aad6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e1bd      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800aad6:	f7ff fc0c 	bl	800a2f2 <LL_RCC_LSI1_IsReady>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0f1      	beq.n	800aac4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800aae0:	f7ff fc2a 	bl	800a338 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800aae4:	e008      	b.n	800aaf8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800aae6:	f7fd fcb1 	bl	800844c <HAL_GetTick>
 800aaea:	4602      	mov	r2, r0
 800aaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d901      	bls.n	800aaf8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e1ac      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800aaf8:	f7ff fc2f 	bl	800a35a <LL_RCC_LSI2_IsReady>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1f1      	bne.n	800aae6 <HAL_RCC_OscConfig+0x36e>
 800ab02:	e027      	b.n	800ab54 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ab04:	f7ff fc18 	bl	800a338 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab08:	f7fd fca0 	bl	800844c <HAL_GetTick>
 800ab0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ab0e:	e008      	b.n	800ab22 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab10:	f7fd fc9c 	bl	800844c <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d901      	bls.n	800ab22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e197      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ab22:	f7ff fc1a 	bl	800a35a <LL_RCC_LSI2_IsReady>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1f1      	bne.n	800ab10 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800ab2c:	f7ff fbd0 	bl	800a2d0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab30:	f7fd fc8c 	bl	800844c <HAL_GetTick>
 800ab34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ab36:	e008      	b.n	800ab4a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab38:	f7fd fc88 	bl	800844c <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d901      	bls.n	800ab4a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e183      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ab4a:	f7ff fbd2 	bl	800a2f2 <LL_RCC_LSI1_IsReady>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1f1      	bne.n	800ab38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 0304 	and.w	r3, r3, #4
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d05b      	beq.n	800ac18 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab60:	4ba7      	ldr	r3, [pc, #668]	@ (800ae00 <HAL_RCC_OscConfig+0x688>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d114      	bne.n	800ab96 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ab6c:	f7ff fa70 	bl	800a050 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab70:	f7fd fc6c 	bl	800844c <HAL_GetTick>
 800ab74:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab76:	e008      	b.n	800ab8a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab78:	f7fd fc68 	bl	800844c <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d901      	bls.n	800ab8a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e163      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab8a:	4b9d      	ldr	r3, [pc, #628]	@ (800ae00 <HAL_RCC_OscConfig+0x688>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0f0      	beq.n	800ab78 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d102      	bne.n	800aba4 <HAL_RCC_OscConfig+0x42c>
 800ab9e:	f7ff fb30 	bl	800a202 <LL_RCC_LSE_Enable>
 800aba2:	e00c      	b.n	800abbe <HAL_RCC_OscConfig+0x446>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	2b05      	cmp	r3, #5
 800abaa:	d104      	bne.n	800abb6 <HAL_RCC_OscConfig+0x43e>
 800abac:	f7ff fb4b 	bl	800a246 <LL_RCC_LSE_EnableBypass>
 800abb0:	f7ff fb27 	bl	800a202 <LL_RCC_LSE_Enable>
 800abb4:	e003      	b.n	800abbe <HAL_RCC_OscConfig+0x446>
 800abb6:	f7ff fb35 	bl	800a224 <LL_RCC_LSE_Disable>
 800abba:	f7ff fb55 	bl	800a268 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d014      	beq.n	800abf0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abc6:	f7fd fc41 	bl	800844c <HAL_GetTick>
 800abca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800abcc:	e00a      	b.n	800abe4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abce:	f7fd fc3d 	bl	800844c <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abdc:	4293      	cmp	r3, r2
 800abde:	d901      	bls.n	800abe4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e136      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800abe4:	f7ff fb51 	bl	800a28a <LL_RCC_LSE_IsReady>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0ef      	beq.n	800abce <HAL_RCC_OscConfig+0x456>
 800abee:	e013      	b.n	800ac18 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abf0:	f7fd fc2c 	bl	800844c <HAL_GetTick>
 800abf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800abf6:	e00a      	b.n	800ac0e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abf8:	f7fd fc28 	bl	800844c <HAL_GetTick>
 800abfc:	4602      	mov	r2, r0
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d901      	bls.n	800ac0e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e121      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ac0e:	f7ff fb3c 	bl	800a28a <LL_RCC_LSE_IsReady>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1ef      	bne.n	800abf8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d02c      	beq.n	800ac7e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d014      	beq.n	800ac56 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac2c:	f7ff fab5 	bl	800a19a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac30:	f7fd fc0c 	bl	800844c <HAL_GetTick>
 800ac34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ac36:	e008      	b.n	800ac4a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac38:	f7fd fc08 	bl	800844c <HAL_GetTick>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d901      	bls.n	800ac4a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e103      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ac4a:	f7ff fac8 	bl	800a1de <LL_RCC_HSI48_IsReady>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d0f1      	beq.n	800ac38 <HAL_RCC_OscConfig+0x4c0>
 800ac54:	e013      	b.n	800ac7e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac56:	f7ff fab1 	bl	800a1bc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac5a:	f7fd fbf7 	bl	800844c <HAL_GetTick>
 800ac5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ac60:	e008      	b.n	800ac74 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac62:	f7fd fbf3 	bl	800844c <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d901      	bls.n	800ac74 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e0ee      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ac74:	f7ff fab3 	bl	800a1de <LL_RCC_HSI48_IsReady>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1f1      	bne.n	800ac62 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f000 80e4 	beq.w	800ae50 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac88:	f7ff fc11 	bl	800a4ae <LL_RCC_GetSysClkSource>
 800ac8c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ac8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	f040 80b4 	bne.w	800ae08 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f003 0203 	and.w	r2, r3, #3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acaa:	429a      	cmp	r2, r3
 800acac:	d123      	bne.n	800acf6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acb8:	429a      	cmp	r2, r3
 800acba:	d11c      	bne.n	800acf6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	0a1b      	lsrs	r3, r3, #8
 800acc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acc8:	429a      	cmp	r2, r3
 800acca:	d114      	bne.n	800acf6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d10d      	bne.n	800acf6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d106      	bne.n	800acf6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d05d      	beq.n	800adb2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2b0c      	cmp	r3, #12
 800acfa:	d058      	beq.n	800adae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800acfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e0a1      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ad0e:	f7ff fc84 	bl	800a61a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ad12:	f7fd fb9b 	bl	800844c <HAL_GetTick>
 800ad16:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad18:	e008      	b.n	800ad2c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad1a:	f7fd fb97 	bl	800844c <HAL_GetTick>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d901      	bls.n	800ad2c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e092      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1ef      	bne.n	800ad1a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad3e:	68da      	ldr	r2, [r3, #12]
 800ad40:	4b30      	ldr	r3, [pc, #192]	@ (800ae04 <HAL_RCC_OscConfig+0x68c>)
 800ad42:	4013      	ands	r3, r2
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ad4c:	4311      	orrs	r1, r2
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ad52:	0212      	lsls	r2, r2, #8
 800ad54:	4311      	orrs	r1, r2
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ad5a:	4311      	orrs	r1, r2
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ad60:	4311      	orrs	r1, r2
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ad66:	430a      	orrs	r2, r1
 800ad68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ad70:	f7ff fc44 	bl	800a5fc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ad74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ad84:	f7fd fb62 	bl	800844c <HAL_GetTick>
 800ad88:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad8a:	e008      	b.n	800ad9e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad8c:	f7fd fb5e 	bl	800844c <HAL_GetTick>
 800ad90:	4602      	mov	r2, r0
 800ad92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d901      	bls.n	800ad9e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e059      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d0ef      	beq.n	800ad8c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800adac:	e050      	b.n	800ae50 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e04f      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d147      	bne.n	800ae50 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800adc0:	f7ff fc1c 	bl	800a5fc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800adc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800adce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800add2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800add4:	f7fd fb3a 	bl	800844c <HAL_GetTick>
 800add8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adda:	e008      	b.n	800adee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800addc:	f7fd fb36 	bl	800844c <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d901      	bls.n	800adee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e031      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d0ef      	beq.n	800addc <HAL_RCC_OscConfig+0x664>
 800adfc:	e028      	b.n	800ae50 <HAL_RCC_OscConfig+0x6d8>
 800adfe:	bf00      	nop
 800ae00:	58000400 	.word	0x58000400
 800ae04:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	2b0c      	cmp	r3, #12
 800ae0c:	d01e      	beq.n	800ae4c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae0e:	f7ff fc04 	bl	800a61a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae12:	f7fd fb1b 	bl	800844c <HAL_GetTick>
 800ae16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae18:	e008      	b.n	800ae2c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae1a:	f7fd fb17 	bl	800844c <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d901      	bls.n	800ae2c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e012      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1ef      	bne.n	800ae1a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800ae3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae3e:	68da      	ldr	r2, [r3, #12]
 800ae40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae44:	4b05      	ldr	r3, [pc, #20]	@ (800ae5c <HAL_RCC_OscConfig+0x6e4>)
 800ae46:	4013      	ands	r3, r2
 800ae48:	60cb      	str	r3, [r1, #12]
 800ae4a:	e001      	b.n	800ae50 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e000      	b.n	800ae52 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3734      	adds	r7, #52	@ 0x34
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd90      	pop	{r4, r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	eefefffc 	.word	0xeefefffc

0800ae60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e12d      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae74:	4b98      	ldr	r3, [pc, #608]	@ (800b0d8 <HAL_RCC_ClockConfig+0x278>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0307 	and.w	r3, r3, #7
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d91b      	bls.n	800aeba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae82:	4b95      	ldr	r3, [pc, #596]	@ (800b0d8 <HAL_RCC_ClockConfig+0x278>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f023 0207 	bic.w	r2, r3, #7
 800ae8a:	4993      	ldr	r1, [pc, #588]	@ (800b0d8 <HAL_RCC_ClockConfig+0x278>)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae92:	f7fd fadb 	bl	800844c <HAL_GetTick>
 800ae96:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae98:	e008      	b.n	800aeac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ae9a:	f7fd fad7 	bl	800844c <HAL_GetTick>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d901      	bls.n	800aeac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e111      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeac:	4b8a      	ldr	r3, [pc, #552]	@ (800b0d8 <HAL_RCC_ClockConfig+0x278>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d1ef      	bne.n	800ae9a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0302 	and.w	r3, r3, #2
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d016      	beq.n	800aef4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7ff fafb 	bl	800a4c6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800aed0:	f7fd fabc 	bl	800844c <HAL_GetTick>
 800aed4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800aed6:	e008      	b.n	800aeea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800aed8:	f7fd fab8 	bl	800844c <HAL_GetTick>
 800aedc:	4602      	mov	r2, r0
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d901      	bls.n	800aeea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e0f2      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800aeea:	f7ff fbe8 	bl	800a6be <LL_RCC_IsActiveFlag_HPRE>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d0f1      	beq.n	800aed8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 0320 	and.w	r3, r3, #32
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d016      	beq.n	800af2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	4618      	mov	r0, r3
 800af06:	f7ff faf2 	bl	800a4ee <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af0a:	f7fd fa9f 	bl	800844c <HAL_GetTick>
 800af0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800af10:	e008      	b.n	800af24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af12:	f7fd fa9b 	bl	800844c <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d901      	bls.n	800af24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e0d5      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800af24:	f7ff fbdd 	bl	800a6e2 <LL_RCC_IsActiveFlag_C2HPRE>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0f1      	beq.n	800af12 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af36:	2b00      	cmp	r3, #0
 800af38:	d016      	beq.n	800af68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff faeb 	bl	800a51a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af44:	f7fd fa82 	bl	800844c <HAL_GetTick>
 800af48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800af4a:	e008      	b.n	800af5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af4c:	f7fd fa7e 	bl	800844c <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	2b02      	cmp	r3, #2
 800af58:	d901      	bls.n	800af5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e0b8      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800af5e:	f7ff fbd3 	bl	800a708 <LL_RCC_IsActiveFlag_SHDHPRE>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0f1      	beq.n	800af4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d016      	beq.n	800afa2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	4618      	mov	r0, r3
 800af7a:	f7ff fae5 	bl	800a548 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af7e:	f7fd fa65 	bl	800844c <HAL_GetTick>
 800af82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800af84:	e008      	b.n	800af98 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af86:	f7fd fa61 	bl	800844c <HAL_GetTick>
 800af8a:	4602      	mov	r2, r0
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	2b02      	cmp	r3, #2
 800af92:	d901      	bls.n	800af98 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e09b      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800af98:	f7ff fbc9 	bl	800a72e <LL_RCC_IsActiveFlag_PPRE1>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0f1      	beq.n	800af86 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 0308 	and.w	r3, r3, #8
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d017      	beq.n	800afde <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff fadb 	bl	800a570 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800afba:	f7fd fa47 	bl	800844c <HAL_GetTick>
 800afbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800afc0:	e008      	b.n	800afd4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afc2:	f7fd fa43 	bl	800844c <HAL_GetTick>
 800afc6:	4602      	mov	r2, r0
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d901      	bls.n	800afd4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e07d      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800afd4:	f7ff fbbd 	bl	800a752 <LL_RCC_IsActiveFlag_PPRE2>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0f1      	beq.n	800afc2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 0301 	and.w	r3, r3, #1
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d043      	beq.n	800b072 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d106      	bne.n	800b000 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800aff2:	f7ff f87b 	bl	800a0ec <LL_RCC_HSE_IsReady>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d11e      	bne.n	800b03a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e067      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	2b03      	cmp	r3, #3
 800b006:	d106      	bne.n	800b016 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b008:	f7ff fb16 	bl	800a638 <LL_RCC_PLL_IsReady>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d113      	bne.n	800b03a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e05c      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b01e:	f7ff f9e3 	bl	800a3e8 <LL_RCC_MSI_IsReady>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d108      	bne.n	800b03a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e051      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b02c:	f7ff f88e 	bl	800a14c <LL_RCC_HSI_IsReady>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e04a      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff fa21 	bl	800a486 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b044:	f7fd fa02 	bl	800844c <HAL_GetTick>
 800b048:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b04a:	e00a      	b.n	800b062 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b04c:	f7fd f9fe 	bl	800844c <HAL_GetTick>
 800b050:	4602      	mov	r2, r0
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d901      	bls.n	800b062 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e036      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b062:	f7ff fa24 	bl	800a4ae <LL_RCC_GetSysClkSource>
 800b066:	4602      	mov	r2, r0
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	429a      	cmp	r2, r3
 800b070:	d1ec      	bne.n	800b04c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b072:	4b19      	ldr	r3, [pc, #100]	@ (800b0d8 <HAL_RCC_ClockConfig+0x278>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d21b      	bcs.n	800b0b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b080:	4b15      	ldr	r3, [pc, #84]	@ (800b0d8 <HAL_RCC_ClockConfig+0x278>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f023 0207 	bic.w	r2, r3, #7
 800b088:	4913      	ldr	r1, [pc, #76]	@ (800b0d8 <HAL_RCC_ClockConfig+0x278>)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b090:	f7fd f9dc 	bl	800844c <HAL_GetTick>
 800b094:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b096:	e008      	b.n	800b0aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b098:	f7fd f9d8 	bl	800844c <HAL_GetTick>
 800b09c:	4602      	mov	r2, r0
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d901      	bls.n	800b0aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e012      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b0d8 <HAL_RCC_ClockConfig+0x278>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0307 	and.w	r3, r3, #7
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d1ef      	bne.n	800b098 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b0b8:	f000 f87e 	bl	800b1b8 <HAL_RCC_GetHCLKFreq>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	4a07      	ldr	r2, [pc, #28]	@ (800b0dc <HAL_RCC_ClockConfig+0x27c>)
 800b0c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b0c2:	f7fd f9cf 	bl	8008464 <HAL_GetTickPrio>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fd f971 	bl	80083b0 <HAL_InitTick>
 800b0ce:	4603      	mov	r3, r0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	58004000 	.word	0x58004000
 800b0dc:	2000000c 	.word	0x2000000c

0800b0e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0e0:	b590      	push	{r4, r7, lr}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0e6:	f7ff f9e2 	bl	800a4ae <LL_RCC_GetSysClkSource>
 800b0ea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10a      	bne.n	800b108 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b0f2:	f7ff f99e 	bl	800a432 <LL_RCC_MSI_GetRange>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	091b      	lsrs	r3, r3, #4
 800b0fa:	f003 030f 	and.w	r3, r3, #15
 800b0fe:	4a2b      	ldr	r2, [pc, #172]	@ (800b1ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800b100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b104:	60fb      	str	r3, [r7, #12]
 800b106:	e04b      	b.n	800b1a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d102      	bne.n	800b114 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b10e:	4b28      	ldr	r3, [pc, #160]	@ (800b1b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	e045      	b.n	800b1a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b08      	cmp	r3, #8
 800b118:	d10a      	bne.n	800b130 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b11a:	f7fe ffb7 	bl	800a08c <LL_RCC_HSE_IsEnabledDiv2>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b01      	cmp	r3, #1
 800b122:	d102      	bne.n	800b12a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b124:	4b22      	ldr	r3, [pc, #136]	@ (800b1b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b126:	60fb      	str	r3, [r7, #12]
 800b128:	e03a      	b.n	800b1a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b12a:	4b22      	ldr	r3, [pc, #136]	@ (800b1b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	e037      	b.n	800b1a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b130:	f7ff fab9 	bl	800a6a6 <LL_RCC_PLL_GetMainSource>
 800b134:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d003      	beq.n	800b144 <HAL_RCC_GetSysClockFreq+0x64>
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d003      	beq.n	800b14a <HAL_RCC_GetSysClockFreq+0x6a>
 800b142:	e00d      	b.n	800b160 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b144:	4b1a      	ldr	r3, [pc, #104]	@ (800b1b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b146:	60bb      	str	r3, [r7, #8]
        break;
 800b148:	e015      	b.n	800b176 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b14a:	f7fe ff9f 	bl	800a08c <LL_RCC_HSE_IsEnabledDiv2>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b01      	cmp	r3, #1
 800b152:	d102      	bne.n	800b15a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b154:	4b16      	ldr	r3, [pc, #88]	@ (800b1b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b156:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b158:	e00d      	b.n	800b176 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b15a:	4b16      	ldr	r3, [pc, #88]	@ (800b1b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b15c:	60bb      	str	r3, [r7, #8]
        break;
 800b15e:	e00a      	b.n	800b176 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b160:	f7ff f967 	bl	800a432 <LL_RCC_MSI_GetRange>
 800b164:	4603      	mov	r3, r0
 800b166:	091b      	lsrs	r3, r3, #4
 800b168:	f003 030f 	and.w	r3, r3, #15
 800b16c:	4a0f      	ldr	r2, [pc, #60]	@ (800b1ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800b16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b172:	60bb      	str	r3, [r7, #8]
        break;
 800b174:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b176:	f7ff fa71 	bl	800a65c <LL_RCC_PLL_GetN>
 800b17a:	4602      	mov	r2, r0
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	fb03 f402 	mul.w	r4, r3, r2
 800b182:	f7ff fa84 	bl	800a68e <LL_RCC_PLL_GetDivider>
 800b186:	4603      	mov	r3, r0
 800b188:	091b      	lsrs	r3, r3, #4
 800b18a:	3301      	adds	r3, #1
 800b18c:	fbb4 f4f3 	udiv	r4, r4, r3
 800b190:	f7ff fa71 	bl	800a676 <LL_RCC_PLL_GetR>
 800b194:	4603      	mov	r3, r0
 800b196:	0f5b      	lsrs	r3, r3, #29
 800b198:	3301      	adds	r3, #1
 800b19a:	fbb4 f3f3 	udiv	r3, r4, r3
 800b19e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd90      	pop	{r4, r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	080134a4 	.word	0x080134a4
 800b1b0:	00f42400 	.word	0x00f42400
 800b1b4:	01e84800 	.word	0x01e84800

0800b1b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1b8:	b598      	push	{r3, r4, r7, lr}
 800b1ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b1bc:	f7ff ff90 	bl	800b0e0 <HAL_RCC_GetSysClockFreq>
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	f7ff f9e9 	bl	800a598 <LL_RCC_GetAHBPrescaler>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	091b      	lsrs	r3, r3, #4
 800b1ca:	f003 030f 	and.w	r3, r3, #15
 800b1ce:	4a03      	ldr	r2, [pc, #12]	@ (800b1dc <HAL_RCC_GetHCLKFreq+0x24>)
 800b1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	bd98      	pop	{r3, r4, r7, pc}
 800b1dc:	08013444 	.word	0x08013444

0800b1e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1e0:	b598      	push	{r3, r4, r7, lr}
 800b1e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b1e4:	f7ff ffe8 	bl	800b1b8 <HAL_RCC_GetHCLKFreq>
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	f7ff f9ef 	bl	800a5cc <LL_RCC_GetAPB1Prescaler>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	0a1b      	lsrs	r3, r3, #8
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	4a04      	ldr	r2, [pc, #16]	@ (800b208 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1fc:	f003 031f 	and.w	r3, r3, #31
 800b200:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b204:	4618      	mov	r0, r3
 800b206:	bd98      	pop	{r3, r4, r7, pc}
 800b208:	08013484 	.word	0x08013484

0800b20c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b20c:	b598      	push	{r3, r4, r7, lr}
 800b20e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b210:	f7ff ffd2 	bl	800b1b8 <HAL_RCC_GetHCLKFreq>
 800b214:	4604      	mov	r4, r0
 800b216:	f7ff f9e5 	bl	800a5e4 <LL_RCC_GetAPB2Prescaler>
 800b21a:	4603      	mov	r3, r0
 800b21c:	0adb      	lsrs	r3, r3, #11
 800b21e:	f003 0307 	and.w	r3, r3, #7
 800b222:	4a04      	ldr	r2, [pc, #16]	@ (800b234 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b228:	f003 031f 	and.w	r3, r3, #31
 800b22c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b230:	4618      	mov	r0, r3
 800b232:	bd98      	pop	{r3, r4, r7, pc}
 800b234:	08013484 	.word	0x08013484

0800b238 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b238:	b590      	push	{r4, r7, lr}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2bb0      	cmp	r3, #176	@ 0xb0
 800b244:	d903      	bls.n	800b24e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b246:	4b15      	ldr	r3, [pc, #84]	@ (800b29c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	e007      	b.n	800b25e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	091b      	lsrs	r3, r3, #4
 800b252:	f003 030f 	and.w	r3, r3, #15
 800b256:	4a11      	ldr	r2, [pc, #68]	@ (800b29c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b25c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b25e:	f7ff f9a7 	bl	800a5b0 <LL_RCC_GetAHB4Prescaler>
 800b262:	4603      	mov	r3, r0
 800b264:	091b      	lsrs	r3, r3, #4
 800b266:	f003 030f 	and.w	r3, r3, #15
 800b26a:	4a0d      	ldr	r2, [pc, #52]	@ (800b2a0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	fbb2 f3f3 	udiv	r3, r2, r3
 800b276:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	4a0a      	ldr	r2, [pc, #40]	@ (800b2a4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b27c:	fba2 2303 	umull	r2, r3, r2, r3
 800b280:	0c9c      	lsrs	r4, r3, #18
 800b282:	f7fe fef5 	bl	800a070 <HAL_PWREx_GetVoltageRange>
 800b286:	4603      	mov	r3, r0
 800b288:	4619      	mov	r1, r3
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f80c 	bl	800b2a8 <RCC_SetFlashLatency>
 800b290:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b292:	4618      	mov	r0, r3
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	bd90      	pop	{r4, r7, pc}
 800b29a:	bf00      	nop
 800b29c:	080134a4 	.word	0x080134a4
 800b2a0:	08013444 	.word	0x08013444
 800b2a4:	431bde83 	.word	0x431bde83

0800b2a8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b2a8:	b590      	push	{r4, r7, lr}
 800b2aa:	b093      	sub	sp, #76	@ 0x4c
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b2b2:	4b37      	ldr	r3, [pc, #220]	@ (800b390 <RCC_SetFlashLatency+0xe8>)
 800b2b4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b2b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b2ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b2be:	4a35      	ldr	r2, [pc, #212]	@ (800b394 <RCC_SetFlashLatency+0xec>)
 800b2c0:	f107 031c 	add.w	r3, r7, #28
 800b2c4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b2c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b2ca:	4b33      	ldr	r3, [pc, #204]	@ (800b398 <RCC_SetFlashLatency+0xf0>)
 800b2cc:	f107 040c 	add.w	r4, r7, #12
 800b2d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b2d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2e0:	d11a      	bne.n	800b318 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2e6:	e013      	b.n	800b310 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b2e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	3348      	adds	r3, #72	@ 0x48
 800b2ee:	443b      	add	r3, r7
 800b2f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d807      	bhi.n	800b30a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b2fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	3348      	adds	r3, #72	@ 0x48
 800b300:	443b      	add	r3, r7
 800b302:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b306:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b308:	e020      	b.n	800b34c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b30a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b30c:	3301      	adds	r3, #1
 800b30e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b312:	2b03      	cmp	r3, #3
 800b314:	d9e8      	bls.n	800b2e8 <RCC_SetFlashLatency+0x40>
 800b316:	e019      	b.n	800b34c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b318:	2300      	movs	r3, #0
 800b31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b31c:	e013      	b.n	800b346 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b31e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	3348      	adds	r3, #72	@ 0x48
 800b324:	443b      	add	r3, r7
 800b326:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d807      	bhi.n	800b340 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	3348      	adds	r3, #72	@ 0x48
 800b336:	443b      	add	r3, r7
 800b338:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b33c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b33e:	e005      	b.n	800b34c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b342:	3301      	adds	r3, #1
 800b344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d9e8      	bls.n	800b31e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b34c:	4b13      	ldr	r3, [pc, #76]	@ (800b39c <RCC_SetFlashLatency+0xf4>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f023 0207 	bic.w	r2, r3, #7
 800b354:	4911      	ldr	r1, [pc, #68]	@ (800b39c <RCC_SetFlashLatency+0xf4>)
 800b356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b358:	4313      	orrs	r3, r2
 800b35a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b35c:	f7fd f876 	bl	800844c <HAL_GetTick>
 800b360:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b362:	e008      	b.n	800b376 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b364:	f7fd f872 	bl	800844c <HAL_GetTick>
 800b368:	4602      	mov	r2, r0
 800b36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d901      	bls.n	800b376 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b372:	2303      	movs	r3, #3
 800b374:	e007      	b.n	800b386 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b376:	4b09      	ldr	r3, [pc, #36]	@ (800b39c <RCC_SetFlashLatency+0xf4>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 0307 	and.w	r3, r3, #7
 800b37e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b380:	429a      	cmp	r2, r3
 800b382:	d1ef      	bne.n	800b364 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	374c      	adds	r7, #76	@ 0x4c
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd90      	pop	{r4, r7, pc}
 800b38e:	bf00      	nop
 800b390:	080123f0 	.word	0x080123f0
 800b394:	08012400 	.word	0x08012400
 800b398:	0801240c 	.word	0x0801240c
 800b39c:	58004000 	.word	0x58004000

0800b3a0 <LL_RCC_LSE_IsEnabled>:
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b3a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d101      	bne.n	800b3b8 <LL_RCC_LSE_IsEnabled+0x18>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e000      	b.n	800b3ba <LL_RCC_LSE_IsEnabled+0x1a>
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <LL_RCC_LSE_IsReady>:
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b3c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3d0:	f003 0302 	and.w	r3, r3, #2
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d101      	bne.n	800b3dc <LL_RCC_LSE_IsReady+0x18>
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e000      	b.n	800b3de <LL_RCC_LSE_IsReady+0x1a>
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <LL_RCC_MSI_EnablePLLMode>:
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800b3ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3f6:	f043 0304 	orr.w	r3, r3, #4
 800b3fa:	6013      	str	r3, [r2, #0]
}
 800b3fc:	bf00      	nop
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <LL_RCC_SetRFWKPClockSource>:
{
 800b406:	b480      	push	{r7}
 800b408:	b083      	sub	sp, #12
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b40e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b416:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b41a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4313      	orrs	r3, r2
 800b422:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <LL_RCC_SetSMPSClockSource>:
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b43a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b440:	f023 0203 	bic.w	r2, r3, #3
 800b444:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b44e:	bf00      	nop
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <LL_RCC_SetSMPSPrescaler>:
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b468:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b46c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4313      	orrs	r3, r2
 800b474:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b476:	bf00      	nop
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <LL_RCC_SetUSARTClockSource>:
{
 800b482:	b480      	push	{r7}
 800b484:	b083      	sub	sp, #12
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b48a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b492:	f023 0203 	bic.w	r2, r3, #3
 800b496:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b4a2:	bf00      	nop
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <LL_RCC_SetLPUARTClockSource>:
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b4b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b4c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b4ce:	bf00      	nop
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <LL_RCC_SetI2CClockSource>:
{
 800b4da:	b480      	push	{r7}
 800b4dc:	b083      	sub	sp, #12
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b4e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	091b      	lsrs	r3, r3, #4
 800b4ee:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b4f2:	43db      	mvns	r3, r3
 800b4f4:	401a      	ands	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	011b      	lsls	r3, r3, #4
 800b4fa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b4fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b502:	4313      	orrs	r3, r2
 800b504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <LL_RCC_SetLPTIMClockSource>:
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b51c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b520:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	0c1b      	lsrs	r3, r3, #16
 800b528:	041b      	lsls	r3, r3, #16
 800b52a:	43db      	mvns	r3, r3
 800b52c:	401a      	ands	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	041b      	lsls	r3, r3, #16
 800b532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b536:	4313      	orrs	r3, r2
 800b538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <LL_RCC_SetSAIClockSource>:
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b558:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b55c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4313      	orrs	r3, r2
 800b564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <LL_RCC_SetRNGClockSource>:
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b57c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b584:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b588:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4313      	orrs	r3, r2
 800b590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <LL_RCC_SetCLK48ClockSource>:
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b5a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b5b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <LL_RCC_SetUSBClockSource>:
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7ff ffe3 	bl	800b5a0 <LL_RCC_SetCLK48ClockSource>
}
 800b5da:	bf00      	nop
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <LL_RCC_SetADCClockSource>:
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b083      	sub	sp, #12
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b5ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b5f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b602:	bf00      	nop
 800b604:	370c      	adds	r7, #12
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <LL_RCC_SetRTCClockSource>:
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b61e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4313      	orrs	r3, r2
 800b62a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800b62e:	bf00      	nop
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <LL_RCC_GetRTCClockSource>:
{
 800b63a:	b480      	push	{r7}
 800b63c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b63e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <LL_RCC_ForceBackupDomainReset>:
{
 800b654:	b480      	push	{r7}
 800b656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b660:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b66c:	bf00      	nop
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b676:	b480      	push	{r7}
 800b678:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b67a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b682:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b68a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b68e:	bf00      	nop
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <LL_RCC_PLLSAI1_Enable>:
{
 800b698:	b480      	push	{r7}
 800b69a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b69c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b6aa:	6013      	str	r3, [r2, #0]
}
 800b6ac:	bf00      	nop
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <LL_RCC_PLLSAI1_Disable>:
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b6ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b6c8:	6013      	str	r3, [r2, #0]
}
 800b6ca:	bf00      	nop
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <LL_RCC_PLLSAI1_IsReady>:
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b6d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6e6:	d101      	bne.n	800b6ec <LL_RCC_PLLSAI1_IsReady+0x18>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e000      	b.n	800b6ee <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b700:	2300      	movs	r3, #0
 800b702:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b704:	2300      	movs	r3, #0
 800b706:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b710:	2b00      	cmp	r3, #0
 800b712:	d034      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b718:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b71c:	d021      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b71e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b722:	d81b      	bhi.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b724:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b728:	d01d      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800b72a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b72e:	d815      	bhi.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00b      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800b734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b738:	d110      	bne.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b73a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b748:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b74a:	e00d      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3304      	adds	r3, #4
 800b750:	4618      	mov	r0, r3
 800b752:	f000 f94d 	bl	800b9f0 <RCCEx_PLLSAI1_ConfigNP>
 800b756:	4603      	mov	r3, r0
 800b758:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b75a:	e005      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	77fb      	strb	r3, [r7, #31]
        break;
 800b760:	e002      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b762:	bf00      	nop
 800b764:	e000      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b766:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b768:	7ffb      	ldrb	r3, [r7, #31]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d105      	bne.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff fee8 	bl	800b548 <LL_RCC_SetSAIClockSource>
 800b778:	e001      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b77a:	7ffb      	ldrb	r3, [r7, #31]
 800b77c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b786:	2b00      	cmp	r3, #0
 800b788:	d046      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b78a:	f7ff ff56 	bl	800b63a <LL_RCC_GetRTCClockSource>
 800b78e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	429a      	cmp	r2, r3
 800b798:	d03c      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b79a:	f7fe fc59 	bl	800a050 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d105      	bne.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff ff30 	bl	800b60e <LL_RCC_SetRTCClockSource>
 800b7ae:	e02e      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b7b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7b8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b7ba:	f7ff ff4b 	bl	800b654 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b7be:	f7ff ff5a 	bl	800b676 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b7d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b7da:	f7ff fde1 	bl	800b3a0 <LL_RCC_LSE_IsEnabled>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d114      	bne.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b7e4:	f7fc fe32 	bl	800844c <HAL_GetTick>
 800b7e8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b7ea:	e00b      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7ec:	f7fc fe2e 	bl	800844c <HAL_GetTick>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	1ad3      	subs	r3, r2, r3
 800b7f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d902      	bls.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800b7fe:	2303      	movs	r3, #3
 800b800:	77fb      	strb	r3, [r7, #31]
              break;
 800b802:	e004      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b804:	f7ff fdde 	bl	800b3c4 <LL_RCC_LSE_IsReady>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d1ee      	bne.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b80e:	7ffb      	ldrb	r3, [r7, #31]
 800b810:	77bb      	strb	r3, [r7, #30]
 800b812:	e001      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b814:	7ffb      	ldrb	r3, [r7, #31]
 800b816:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b00      	cmp	r3, #0
 800b822:	d004      	beq.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	4618      	mov	r0, r3
 800b82a:	f7ff fe2a 	bl	800b482 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f003 0302 	and.w	r3, r3, #2
 800b836:	2b00      	cmp	r3, #0
 800b838:	d004      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	69db      	ldr	r3, [r3, #28]
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff fe35 	bl	800b4ae <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 0310 	and.w	r3, r3, #16
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d004      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b854:	4618      	mov	r0, r3
 800b856:	f7ff fe5d 	bl	800b514 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 0320 	and.w	r3, r3, #32
 800b862:	2b00      	cmp	r3, #0
 800b864:	d004      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff fe52 	bl	800b514 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a1b      	ldr	r3, [r3, #32]
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff fe2a 	bl	800b4da <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 0308 	and.w	r3, r3, #8
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d004      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff fe1f 	bl	800b4da <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d022      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff fe8d 	bl	800b5cc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8ba:	d107      	bne.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b8bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8ca:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b8d4:	d10b      	bne.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	3304      	adds	r3, #4
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 f8e3 	bl	800baa6 <RCCEx_PLLSAI1_ConfigNQ>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b8e4:	7ffb      	ldrb	r3, [r7, #31]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800b8ea:	7ffb      	ldrb	r3, [r7, #31]
 800b8ec:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d02b      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b902:	d008      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b90c:	d003      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b912:	2b00      	cmp	r3, #0
 800b914:	d105      	bne.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff fe2a 	bl	800b574 <LL_RCC_SetRNGClockSource>
 800b920:	e00a      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	2000      	movs	r0, #0
 800b92e:	f7ff fe21 	bl	800b574 <LL_RCC_SetRNGClockSource>
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f7ff fe34 	bl	800b5a0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b93c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800b940:	d107      	bne.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b94c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b950:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d022      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff fe3d 	bl	800b5e2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b96c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b970:	d107      	bne.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b97c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b980:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b986:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b98a:	d10b      	bne.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	3304      	adds	r3, #4
 800b990:	4618      	mov	r0, r3
 800b992:	f000 f8e3 	bl	800bb5c <RCCEx_PLLSAI1_ConfigNR>
 800b996:	4603      	mov	r3, r0
 800b998:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b99a:	7ffb      	ldrb	r3, [r7, #31]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800b9a0:	7ffb      	ldrb	r3, [r7, #31]
 800b9a2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d004      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff fd26 	bl	800b406 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d009      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7ff fd45 	bl	800b45a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff fd2c 	bl	800b432 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800b9da:	7fbb      	ldrb	r3, [r7, #30]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3720      	adds	r7, #32
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800b9e8:	f7ff fcfe 	bl	800b3e8 <LL_RCC_MSI_EnablePLLMode>
}
 800b9ec:	bf00      	nop
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b9fc:	f7ff fe5b 	bl	800b6b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba00:	f7fc fd24 	bl	800844c <HAL_GetTick>
 800ba04:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba06:	e009      	b.n	800ba1c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba08:	f7fc fd20 	bl	800844c <HAL_GetTick>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	d902      	bls.n	800ba1c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ba16:	2303      	movs	r3, #3
 800ba18:	73fb      	strb	r3, [r7, #15]
      break;
 800ba1a:	e004      	b.n	800ba26 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba1c:	f7ff fe5a 	bl	800b6d4 <LL_RCC_PLLSAI1_IsReady>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1f0      	bne.n	800ba08 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d137      	bne.n	800ba9c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ba2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	021b      	lsls	r3, r3, #8
 800ba3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba40:	4313      	orrs	r3, r2
 800ba42:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ba44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba56:	4313      	orrs	r3, r2
 800ba58:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ba5a:	f7ff fe1d 	bl	800b698 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba5e:	f7fc fcf5 	bl	800844c <HAL_GetTick>
 800ba62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ba64:	e009      	b.n	800ba7a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba66:	f7fc fcf1 	bl	800844c <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d902      	bls.n	800ba7a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800ba74:	2303      	movs	r3, #3
 800ba76:	73fb      	strb	r3, [r7, #15]
        break;
 800ba78:	e004      	b.n	800ba84 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ba7a:	f7ff fe2b 	bl	800b6d4 <LL_RCC_PLLSAI1_IsReady>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d1f0      	bne.n	800ba66 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d108      	bne.n	800ba9c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ba8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba8e:	691a      	ldr	r2, [r3, #16]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b084      	sub	sp, #16
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bab2:	f7ff fe00 	bl	800b6b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bab6:	f7fc fcc9 	bl	800844c <HAL_GetTick>
 800baba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800babc:	e009      	b.n	800bad2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800babe:	f7fc fcc5 	bl	800844c <HAL_GetTick>
 800bac2:	4602      	mov	r2, r0
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d902      	bls.n	800bad2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	73fb      	strb	r3, [r7, #15]
      break;
 800bad0:	e004      	b.n	800badc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bad2:	f7ff fdff 	bl	800b6d4 <LL_RCC_PLLSAI1_IsReady>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1f0      	bne.n	800babe <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d137      	bne.n	800bb52 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	021b      	lsls	r3, r3, #8
 800baf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800baf6:	4313      	orrs	r3, r2
 800baf8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bafa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bb10:	f7ff fdc2 	bl	800b698 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb14:	f7fc fc9a 	bl	800844c <HAL_GetTick>
 800bb18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb1a:	e009      	b.n	800bb30 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb1c:	f7fc fc96 	bl	800844c <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d902      	bls.n	800bb30 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	73fb      	strb	r3, [r7, #15]
        break;
 800bb2e:	e004      	b.n	800bb3a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb30:	f7ff fdd0 	bl	800b6d4 <LL_RCC_PLLSAI1_IsReady>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d1f0      	bne.n	800bb1c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800bb3a:	7bfb      	ldrb	r3, [r7, #15]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d108      	bne.n	800bb52 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bb40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb44:	691a      	ldr	r2, [r3, #16]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bb68:	f7ff fda5 	bl	800b6b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb6c:	f7fc fc6e 	bl	800844c <HAL_GetTick>
 800bb70:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb72:	e009      	b.n	800bb88 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb74:	f7fc fc6a 	bl	800844c <HAL_GetTick>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d902      	bls.n	800bb88 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	73fb      	strb	r3, [r7, #15]
      break;
 800bb86:	e004      	b.n	800bb92 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb88:	f7ff fda4 	bl	800b6d4 <LL_RCC_PLLSAI1_IsReady>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1f0      	bne.n	800bb74 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d137      	bne.n	800bc08 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bb98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	021b      	lsls	r3, r3, #8
 800bba8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbac:	4313      	orrs	r3, r2
 800bbae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800bbb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bbc6:	f7ff fd67 	bl	800b698 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbca:	f7fc fc3f 	bl	800844c <HAL_GetTick>
 800bbce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbd0:	e009      	b.n	800bbe6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbd2:	f7fc fc3b 	bl	800844c <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d902      	bls.n	800bbe6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	73fb      	strb	r3, [r7, #15]
        break;
 800bbe4:	e004      	b.n	800bbf0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbe6:	f7ff fd75 	bl	800b6d4 <LL_RCC_PLLSAI1_IsReady>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d1f0      	bne.n	800bbd2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d108      	bne.n	800bc08 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bbf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbfa:	691a      	ldr	r2, [r3, #16]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc04:	4313      	orrs	r3, r2
 800bc06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d101      	bne.n	800bc26 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e09f      	b.n	800bd66 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7f7 f93c 	bl	8002eb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2202      	movs	r2, #2
 800bc44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bc48:	4b49      	ldr	r3, [pc, #292]	@ (800bd70 <HAL_RTC_Init+0x15c>)
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	f003 0310 	and.w	r3, r3, #16
 800bc50:	2b10      	cmp	r3, #16
 800bc52:	d07e      	beq.n	800bd52 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	22ca      	movs	r2, #202	@ 0xca
 800bc5a:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2253      	movs	r2, #83	@ 0x53
 800bc62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 f8ab 	bl	800bdc0 <RTC_EnterInitMode>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00a      	beq.n	800bc86 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	22ff      	movs	r2, #255	@ 0xff
 800bc76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2204      	movs	r2, #4
 800bc7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	73fb      	strb	r3, [r7, #15]
 800bc84:	e067      	b.n	800bd56 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	6812      	ldr	r2, [r2, #0]
 800bc90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bc94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc98:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6899      	ldr	r1, [r3, #8]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	431a      	orrs	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	68d2      	ldr	r2, [r2, #12]
 800bcc0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	6919      	ldr	r1, [r3, #16]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	041a      	lsls	r2, r3, #16
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68da      	ldr	r2, [r3, #12]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bce4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f022 0203 	bic.w	r2, r2, #3
 800bcf4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	69da      	ldr	r2, [r3, #28]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	431a      	orrs	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	f003 0320 	and.w	r3, r3, #32
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d113      	bne.n	800bd44 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f829 	bl	800bd74 <HAL_RTC_WaitForSynchro>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00d      	beq.n	800bd44 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	22ff      	movs	r2, #255	@ 0xff
 800bd2e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2204      	movs	r2, #4
 800bd34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	e010      	b.n	800bd66 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	22ff      	movs	r2, #255	@ 0xff
 800bd4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73fb      	strb	r3, [r7, #15]
 800bd50:	e001      	b.n	800bd56 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d103      	bne.n	800bd64 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	40002800 	.word	0x40002800

0800bd74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68da      	ldr	r2, [r3, #12]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800bd8a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800bd8c:	f7fc fb5e 	bl	800844c <HAL_GetTick>
 800bd90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bd92:	e009      	b.n	800bda8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd94:	f7fc fb5a 	bl	800844c <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bda2:	d901      	bls.n	800bda8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bda4:	2303      	movs	r3, #3
 800bda6:	e007      	b.n	800bdb8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	f003 0320 	and.w	r3, r3, #32
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d0ee      	beq.n	800bd94 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d119      	bne.n	800be0a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f04f 32ff 	mov.w	r2, #4294967295
 800bdde:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bde0:	f7fc fb34 	bl	800844c <HAL_GetTick>
 800bde4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bde6:	e009      	b.n	800bdfc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bde8:	f7fc fb30 	bl	800844c <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bdf6:	d901      	bls.n	800bdfc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800bdf8:	2303      	movs	r3, #3
 800bdfa:	e007      	b.n	800be0c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be06:	2b00      	cmp	r3, #0
 800be08:	d0ee      	beq.n	800bde8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d101      	bne.n	800be2e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800be2a:	2302      	movs	r3, #2
 800be2c:	e0a8      	b.n	800bf80 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2202      	movs	r2, #2
 800be3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	22ca      	movs	r2, #202	@ 0xca
 800be44:	625a      	str	r2, [r3, #36]	@ 0x24
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2253      	movs	r2, #83	@ 0x53
 800be4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d020      	beq.n	800be9e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800be5c:	f7fc faf6 	bl	800844c <HAL_GetTick>
 800be60:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800be62:	e015      	b.n	800be90 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800be64:	f7fc faf2 	bl	800844c <HAL_GetTick>
 800be68:	4602      	mov	r2, r0
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be72:	d90d      	bls.n	800be90 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	22ff      	movs	r2, #255	@ 0xff
 800be7a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2203      	movs	r2, #3
 800be80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e077      	b.n	800bf80 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	f003 0304 	and.w	r3, r3, #4
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1e2      	bne.n	800be64 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	689a      	ldr	r2, [r3, #8]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800beac:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800bebe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800bec0:	f7fc fac4 	bl	800844c <HAL_GetTick>
 800bec4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800bec6:	e015      	b.n	800bef4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bec8:	f7fc fac0 	bl	800844c <HAL_GetTick>
 800becc:	4602      	mov	r2, r0
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bed6:	d90d      	bls.n	800bef4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	22ff      	movs	r2, #255	@ 0xff
 800bede:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2203      	movs	r2, #3
 800bee4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800bef0:	2303      	movs	r3, #3
 800bef2:	e045      	b.n	800bf80 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	f003 0304 	and.w	r3, r3, #4
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0e2      	beq.n	800bec8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68ba      	ldr	r2, [r7, #8]
 800bf08:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f022 0207 	bic.w	r2, r2, #7
 800bf18:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6899      	ldr	r1, [r3, #8]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800bf2a:	4b17      	ldr	r3, [pc, #92]	@ (800bf88 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bf2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf30:	4a15      	ldr	r2, [pc, #84]	@ (800bf88 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bf32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf36:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800bf3a:	4b13      	ldr	r3, [pc, #76]	@ (800bf88 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a12      	ldr	r2, [pc, #72]	@ (800bf88 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bf40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf44:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	689a      	ldr	r2, [r3, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf54:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	689a      	ldr	r2, [r3, #8]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf64:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	22ff      	movs	r2, #255	@ 0xff
 800bf6c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3718      	adds	r7, #24
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	58000800 	.word	0x58000800

0800bf8c <LL_RCC_GetUSARTClockSource>:
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800bf94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4013      	ands	r3, r2
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <LL_RCC_GetLPUARTClockSource>:
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800bfb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4013      	ands	r3, r2
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d101      	bne.n	800bfde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e042      	b.n	800c064 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d106      	bne.n	800bff6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7f6 ff97 	bl	8002f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2224      	movs	r2, #36	@ 0x24
 800bffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f022 0201 	bic.w	r2, r2, #1
 800c00c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c012:	2b00      	cmp	r3, #0
 800c014:	d002      	beq.n	800c01c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fa50 	bl	800c4bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 f825 	bl	800c06c <UART_SetConfig>
 800c022:	4603      	mov	r3, r0
 800c024:	2b01      	cmp	r3, #1
 800c026:	d101      	bne.n	800c02c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	e01b      	b.n	800c064 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c03a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	689a      	ldr	r2, [r3, #8]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c04a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f042 0201 	orr.w	r2, r2, #1
 800c05a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 facf 	bl	800c600 <UART_CheckIdleState>
 800c062:	4603      	mov	r3, r0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c06c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c070:	b08c      	sub	sp, #48	@ 0x30
 800c072:	af00      	add	r7, sp, #0
 800c074:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	431a      	orrs	r2, r3
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	431a      	orrs	r2, r3
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	69db      	ldr	r3, [r3, #28]
 800c090:	4313      	orrs	r3, r2
 800c092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	4baf      	ldr	r3, [pc, #700]	@ (800c358 <UART_SetConfig+0x2ec>)
 800c09c:	4013      	ands	r3, r2
 800c09e:	697a      	ldr	r2, [r7, #20]
 800c0a0:	6812      	ldr	r2, [r2, #0]
 800c0a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0a4:	430b      	orrs	r3, r1
 800c0a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	68da      	ldr	r2, [r3, #12]
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	699b      	ldr	r3, [r3, #24]
 800c0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4aa4      	ldr	r2, [pc, #656]	@ (800c35c <UART_SetConfig+0x2f0>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d004      	beq.n	800c0d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c0e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	6812      	ldr	r2, [r2, #0]
 800c0ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0ec:	430b      	orrs	r3, r1
 800c0ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f6:	f023 010f 	bic.w	r1, r3, #15
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	430a      	orrs	r2, r1
 800c104:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a95      	ldr	r2, [pc, #596]	@ (800c360 <UART_SetConfig+0x2f4>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d125      	bne.n	800c15c <UART_SetConfig+0xf0>
 800c110:	2003      	movs	r0, #3
 800c112:	f7ff ff3b 	bl	800bf8c <LL_RCC_GetUSARTClockSource>
 800c116:	4603      	mov	r3, r0
 800c118:	2b03      	cmp	r3, #3
 800c11a:	d81b      	bhi.n	800c154 <UART_SetConfig+0xe8>
 800c11c:	a201      	add	r2, pc, #4	@ (adr r2, 800c124 <UART_SetConfig+0xb8>)
 800c11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c122:	bf00      	nop
 800c124:	0800c135 	.word	0x0800c135
 800c128:	0800c145 	.word	0x0800c145
 800c12c:	0800c13d 	.word	0x0800c13d
 800c130:	0800c14d 	.word	0x0800c14d
 800c134:	2301      	movs	r3, #1
 800c136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c13a:	e042      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c13c:	2302      	movs	r3, #2
 800c13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c142:	e03e      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c144:	2304      	movs	r3, #4
 800c146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c14a:	e03a      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c14c:	2308      	movs	r3, #8
 800c14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c152:	e036      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c154:	2310      	movs	r3, #16
 800c156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c15a:	e032      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a7e      	ldr	r2, [pc, #504]	@ (800c35c <UART_SetConfig+0x2f0>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d12a      	bne.n	800c1bc <UART_SetConfig+0x150>
 800c166:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800c16a:	f7ff ff1f 	bl	800bfac <LL_RCC_GetLPUARTClockSource>
 800c16e:	4603      	mov	r3, r0
 800c170:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c174:	d01a      	beq.n	800c1ac <UART_SetConfig+0x140>
 800c176:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c17a:	d81b      	bhi.n	800c1b4 <UART_SetConfig+0x148>
 800c17c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c180:	d00c      	beq.n	800c19c <UART_SetConfig+0x130>
 800c182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c186:	d815      	bhi.n	800c1b4 <UART_SetConfig+0x148>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <UART_SetConfig+0x128>
 800c18c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c190:	d008      	beq.n	800c1a4 <UART_SetConfig+0x138>
 800c192:	e00f      	b.n	800c1b4 <UART_SetConfig+0x148>
 800c194:	2300      	movs	r3, #0
 800c196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c19a:	e012      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c19c:	2302      	movs	r3, #2
 800c19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1a2:	e00e      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c1a4:	2304      	movs	r3, #4
 800c1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1aa:	e00a      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c1ac:	2308      	movs	r3, #8
 800c1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1b2:	e006      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c1b4:	2310      	movs	r3, #16
 800c1b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1ba:	e002      	b.n	800c1c2 <UART_SetConfig+0x156>
 800c1bc:	2310      	movs	r3, #16
 800c1be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a65      	ldr	r2, [pc, #404]	@ (800c35c <UART_SetConfig+0x2f0>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	f040 8097 	bne.w	800c2fc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c1ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c1d2:	2b08      	cmp	r3, #8
 800c1d4:	d823      	bhi.n	800c21e <UART_SetConfig+0x1b2>
 800c1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1dc <UART_SetConfig+0x170>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c201 	.word	0x0800c201
 800c1e0:	0800c21f 	.word	0x0800c21f
 800c1e4:	0800c209 	.word	0x0800c209
 800c1e8:	0800c21f 	.word	0x0800c21f
 800c1ec:	0800c20f 	.word	0x0800c20f
 800c1f0:	0800c21f 	.word	0x0800c21f
 800c1f4:	0800c21f 	.word	0x0800c21f
 800c1f8:	0800c21f 	.word	0x0800c21f
 800c1fc:	0800c217 	.word	0x0800c217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c200:	f7fe ffee 	bl	800b1e0 <HAL_RCC_GetPCLK1Freq>
 800c204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c206:	e010      	b.n	800c22a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c208:	4b56      	ldr	r3, [pc, #344]	@ (800c364 <UART_SetConfig+0x2f8>)
 800c20a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c20c:	e00d      	b.n	800c22a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c20e:	f7fe ff67 	bl	800b0e0 <HAL_RCC_GetSysClockFreq>
 800c212:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c214:	e009      	b.n	800c22a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c21a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c21c:	e005      	b.n	800c22a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800c21e:	2300      	movs	r3, #0
 800c220:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c228:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 812b 	beq.w	800c488 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c236:	4a4c      	ldr	r2, [pc, #304]	@ (800c368 <UART_SetConfig+0x2fc>)
 800c238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c23c:	461a      	mov	r2, r3
 800c23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c240:	fbb3 f3f2 	udiv	r3, r3, r2
 800c244:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	4613      	mov	r3, r2
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	4413      	add	r3, r2
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	429a      	cmp	r2, r3
 800c254:	d305      	bcc.n	800c262 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c25c:	69ba      	ldr	r2, [r7, #24]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d903      	bls.n	800c26a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c268:	e10e      	b.n	800c488 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26c:	2200      	movs	r2, #0
 800c26e:	60bb      	str	r3, [r7, #8]
 800c270:	60fa      	str	r2, [r7, #12]
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c276:	4a3c      	ldr	r2, [pc, #240]	@ (800c368 <UART_SetConfig+0x2fc>)
 800c278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	2200      	movs	r2, #0
 800c280:	603b      	str	r3, [r7, #0]
 800c282:	607a      	str	r2, [r7, #4]
 800c284:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c288:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c28c:	f7f4 fb66 	bl	800095c <__aeabi_uldivmod>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4610      	mov	r0, r2
 800c296:	4619      	mov	r1, r3
 800c298:	f04f 0200 	mov.w	r2, #0
 800c29c:	f04f 0300 	mov.w	r3, #0
 800c2a0:	020b      	lsls	r3, r1, #8
 800c2a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2a6:	0202      	lsls	r2, r0, #8
 800c2a8:	6979      	ldr	r1, [r7, #20]
 800c2aa:	6849      	ldr	r1, [r1, #4]
 800c2ac:	0849      	lsrs	r1, r1, #1
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	eb12 0804 	adds.w	r8, r2, r4
 800c2b8:	eb43 0905 	adc.w	r9, r3, r5
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	469a      	mov	sl, r3
 800c2c4:	4693      	mov	fp, r2
 800c2c6:	4652      	mov	r2, sl
 800c2c8:	465b      	mov	r3, fp
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	4649      	mov	r1, r9
 800c2ce:	f7f4 fb45 	bl	800095c <__aeabi_uldivmod>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2e0:	d308      	bcc.n	800c2f4 <UART_SetConfig+0x288>
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2e8:	d204      	bcs.n	800c2f4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6a3a      	ldr	r2, [r7, #32]
 800c2f0:	60da      	str	r2, [r3, #12]
 800c2f2:	e0c9      	b.n	800c488 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c2fa:	e0c5      	b.n	800c488 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	69db      	ldr	r3, [r3, #28]
 800c300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c304:	d16d      	bne.n	800c3e2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800c306:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c30a:	3b01      	subs	r3, #1
 800c30c:	2b07      	cmp	r3, #7
 800c30e:	d82d      	bhi.n	800c36c <UART_SetConfig+0x300>
 800c310:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <UART_SetConfig+0x2ac>)
 800c312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c316:	bf00      	nop
 800c318:	0800c339 	.word	0x0800c339
 800c31c:	0800c341 	.word	0x0800c341
 800c320:	0800c36d 	.word	0x0800c36d
 800c324:	0800c347 	.word	0x0800c347
 800c328:	0800c36d 	.word	0x0800c36d
 800c32c:	0800c36d 	.word	0x0800c36d
 800c330:	0800c36d 	.word	0x0800c36d
 800c334:	0800c34f 	.word	0x0800c34f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c338:	f7fe ff68 	bl	800b20c <HAL_RCC_GetPCLK2Freq>
 800c33c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c33e:	e01b      	b.n	800c378 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c340:	4b08      	ldr	r3, [pc, #32]	@ (800c364 <UART_SetConfig+0x2f8>)
 800c342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c344:	e018      	b.n	800c378 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c346:	f7fe fecb 	bl	800b0e0 <HAL_RCC_GetSysClockFreq>
 800c34a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c34c:	e014      	b.n	800c378 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c34e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c352:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c354:	e010      	b.n	800c378 <UART_SetConfig+0x30c>
 800c356:	bf00      	nop
 800c358:	cfff69f3 	.word	0xcfff69f3
 800c35c:	40008000 	.word	0x40008000
 800c360:	40013800 	.word	0x40013800
 800c364:	00f42400 	.word	0x00f42400
 800c368:	080134e4 	.word	0x080134e4
      default:
        pclk = 0U;
 800c36c:	2300      	movs	r3, #0
 800c36e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c376:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 8084 	beq.w	800c488 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c384:	4a4b      	ldr	r2, [pc, #300]	@ (800c4b4 <UART_SetConfig+0x448>)
 800c386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c38a:	461a      	mov	r2, r3
 800c38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c392:	005a      	lsls	r2, r3, #1
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	085b      	lsrs	r3, r3, #1
 800c39a:	441a      	add	r2, r3
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3a4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	2b0f      	cmp	r3, #15
 800c3aa:	d916      	bls.n	800c3da <UART_SetConfig+0x36e>
 800c3ac:	6a3b      	ldr	r3, [r7, #32]
 800c3ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3b2:	d212      	bcs.n	800c3da <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	f023 030f 	bic.w	r3, r3, #15
 800c3bc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	085b      	lsrs	r3, r3, #1
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	f003 0307 	and.w	r3, r3, #7
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	8bfb      	ldrh	r3, [r7, #30]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	8bfa      	ldrh	r2, [r7, #30]
 800c3d6:	60da      	str	r2, [r3, #12]
 800c3d8:	e056      	b.n	800c488 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c3e0:	e052      	b.n	800c488 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c3e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	2b07      	cmp	r3, #7
 800c3ea:	d822      	bhi.n	800c432 <UART_SetConfig+0x3c6>
 800c3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f4 <UART_SetConfig+0x388>)
 800c3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f2:	bf00      	nop
 800c3f4:	0800c415 	.word	0x0800c415
 800c3f8:	0800c41d 	.word	0x0800c41d
 800c3fc:	0800c433 	.word	0x0800c433
 800c400:	0800c423 	.word	0x0800c423
 800c404:	0800c433 	.word	0x0800c433
 800c408:	0800c433 	.word	0x0800c433
 800c40c:	0800c433 	.word	0x0800c433
 800c410:	0800c42b 	.word	0x0800c42b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c414:	f7fe fefa 	bl	800b20c <HAL_RCC_GetPCLK2Freq>
 800c418:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c41a:	e010      	b.n	800c43e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c41c:	4b26      	ldr	r3, [pc, #152]	@ (800c4b8 <UART_SetConfig+0x44c>)
 800c41e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c420:	e00d      	b.n	800c43e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c422:	f7fe fe5d 	bl	800b0e0 <HAL_RCC_GetSysClockFreq>
 800c426:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c428:	e009      	b.n	800c43e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c42a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c42e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c430:	e005      	b.n	800c43e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800c432:	2300      	movs	r3, #0
 800c434:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c43c:	bf00      	nop
    }

    if (pclk != 0U)
 800c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	d021      	beq.n	800c488 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c448:	4a1a      	ldr	r2, [pc, #104]	@ (800c4b4 <UART_SetConfig+0x448>)
 800c44a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c44e:	461a      	mov	r2, r3
 800c450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c452:	fbb3 f2f2 	udiv	r2, r3, r2
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	085b      	lsrs	r3, r3, #1
 800c45c:	441a      	add	r2, r3
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	fbb2 f3f3 	udiv	r3, r2, r3
 800c466:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	2b0f      	cmp	r3, #15
 800c46c:	d909      	bls.n	800c482 <UART_SetConfig+0x416>
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c474:	d205      	bcs.n	800c482 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c476:	6a3b      	ldr	r3, [r7, #32]
 800c478:	b29a      	uxth	r2, r3
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	60da      	str	r2, [r3, #12]
 800c480:	e002      	b.n	800c488 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	2201      	movs	r2, #1
 800c494:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	2200      	movs	r2, #0
 800c49c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c4a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3730      	adds	r7, #48	@ 0x30
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4b2:	bf00      	nop
 800c4b4:	080134e4 	.word	0x080134e4
 800c4b8:	00f42400 	.word	0x00f42400

0800c4bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4c8:	f003 0308 	and.w	r3, r3, #8
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00a      	beq.n	800c4e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	430a      	orrs	r2, r1
 800c4e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ea:	f003 0301 	and.w	r3, r3, #1
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00a      	beq.n	800c508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	430a      	orrs	r2, r1
 800c506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c50c:	f003 0302 	and.w	r3, r3, #2
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00a      	beq.n	800c52a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	430a      	orrs	r2, r1
 800c528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c52e:	f003 0304 	and.w	r3, r3, #4
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00a      	beq.n	800c54c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	430a      	orrs	r2, r1
 800c54a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c550:	f003 0310 	and.w	r3, r3, #16
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00a      	beq.n	800c56e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	430a      	orrs	r2, r1
 800c56c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c572:	f003 0320 	and.w	r3, r3, #32
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00a      	beq.n	800c590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	430a      	orrs	r2, r1
 800c58e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d01a      	beq.n	800c5d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5ba:	d10a      	bne.n	800c5d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00a      	beq.n	800c5f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	430a      	orrs	r2, r1
 800c5f2:	605a      	str	r2, [r3, #4]
  }
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b098      	sub	sp, #96	@ 0x60
 800c604:	af02      	add	r7, sp, #8
 800c606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c610:	f7fb ff1c 	bl	800844c <HAL_GetTick>
 800c614:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f003 0308 	and.w	r3, r3, #8
 800c620:	2b08      	cmp	r3, #8
 800c622:	d12f      	bne.n	800c684 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c624:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c62c:	2200      	movs	r2, #0
 800c62e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 f88e 	bl	800c754 <UART_WaitOnFlagUntilTimeout>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d022      	beq.n	800c684 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c646:	e853 3f00 	ldrex	r3, [r3]
 800c64a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c64e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c652:	653b      	str	r3, [r7, #80]	@ 0x50
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c65c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c65e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c660:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c664:	e841 2300 	strex	r3, r2, [r1]
 800c668:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e6      	bne.n	800c63e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2220      	movs	r2, #32
 800c674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c680:	2303      	movs	r3, #3
 800c682:	e063      	b.n	800c74c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0304 	and.w	r3, r3, #4
 800c68e:	2b04      	cmp	r3, #4
 800c690:	d149      	bne.n	800c726 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c692:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c69a:	2200      	movs	r2, #0
 800c69c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 f857 	bl	800c754 <UART_WaitOnFlagUntilTimeout>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d03c      	beq.n	800c726 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b4:	e853 3f00 	ldrex	r3, [r3]
 800c6b8:	623b      	str	r3, [r7, #32]
   return(result);
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d2:	e841 2300 	strex	r3, r2, [r1]
 800c6d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1e6      	bne.n	800c6ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	3308      	adds	r3, #8
 800c6e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	e853 3f00 	ldrex	r3, [r3]
 800c6ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f023 0301 	bic.w	r3, r3, #1
 800c6f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3308      	adds	r3, #8
 800c6fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6fe:	61fa      	str	r2, [r7, #28]
 800c700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c702:	69b9      	ldr	r1, [r7, #24]
 800c704:	69fa      	ldr	r2, [r7, #28]
 800c706:	e841 2300 	strex	r3, r2, [r1]
 800c70a:	617b      	str	r3, [r7, #20]
   return(result);
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1e5      	bne.n	800c6de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2220      	movs	r2, #32
 800c716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c722:	2303      	movs	r3, #3
 800c724:	e012      	b.n	800c74c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2220      	movs	r2, #32
 800c72a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2220      	movs	r2, #32
 800c732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3758      	adds	r7, #88	@ 0x58
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	603b      	str	r3, [r7, #0]
 800c760:	4613      	mov	r3, r2
 800c762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c764:	e04f      	b.n	800c806 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76c:	d04b      	beq.n	800c806 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c76e:	f7fb fe6d 	bl	800844c <HAL_GetTick>
 800c772:	4602      	mov	r2, r0
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	69ba      	ldr	r2, [r7, #24]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d302      	bcc.n	800c784 <UART_WaitOnFlagUntilTimeout+0x30>
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c784:	2303      	movs	r3, #3
 800c786:	e04e      	b.n	800c826 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 0304 	and.w	r3, r3, #4
 800c792:	2b00      	cmp	r3, #0
 800c794:	d037      	beq.n	800c806 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2b80      	cmp	r3, #128	@ 0x80
 800c79a:	d034      	beq.n	800c806 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2b40      	cmp	r3, #64	@ 0x40
 800c7a0:	d031      	beq.n	800c806 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	f003 0308 	and.w	r3, r3, #8
 800c7ac:	2b08      	cmp	r3, #8
 800c7ae:	d110      	bne.n	800c7d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2208      	movs	r2, #8
 800c7b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f000 f838 	bl	800c82e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2208      	movs	r2, #8
 800c7c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e029      	b.n	800c826 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	69db      	ldr	r3, [r3, #28]
 800c7d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7e0:	d111      	bne.n	800c806 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c7ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f000 f81e 	bl	800c82e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2220      	movs	r2, #32
 800c7f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c802:	2303      	movs	r3, #3
 800c804:	e00f      	b.n	800c826 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	69da      	ldr	r2, [r3, #28]
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	4013      	ands	r3, r2
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	429a      	cmp	r2, r3
 800c814:	bf0c      	ite	eq
 800c816:	2301      	moveq	r3, #1
 800c818:	2300      	movne	r3, #0
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	461a      	mov	r2, r3
 800c81e:	79fb      	ldrb	r3, [r7, #7]
 800c820:	429a      	cmp	r2, r3
 800c822:	d0a0      	beq.n	800c766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c82e:	b480      	push	{r7}
 800c830:	b095      	sub	sp, #84	@ 0x54
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c83e:	e853 3f00 	ldrex	r3, [r3]
 800c842:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c846:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c84a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	461a      	mov	r2, r3
 800c852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c854:	643b      	str	r3, [r7, #64]	@ 0x40
 800c856:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c858:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c85a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c85c:	e841 2300 	strex	r3, r2, [r1]
 800c860:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1e6      	bne.n	800c836 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3308      	adds	r3, #8
 800c86e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c870:	6a3b      	ldr	r3, [r7, #32]
 800c872:	e853 3f00 	ldrex	r3, [r3]
 800c876:	61fb      	str	r3, [r7, #28]
   return(result);
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c87e:	f023 0301 	bic.w	r3, r3, #1
 800c882:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3308      	adds	r3, #8
 800c88a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c88c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c88e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c894:	e841 2300 	strex	r3, r2, [r1]
 800c898:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1e3      	bne.n	800c868 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d118      	bne.n	800c8da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	e853 3f00 	ldrex	r3, [r3]
 800c8b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	f023 0310 	bic.w	r3, r3, #16
 800c8bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8c6:	61bb      	str	r3, [r7, #24]
 800c8c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ca:	6979      	ldr	r1, [r7, #20]
 800c8cc:	69ba      	ldr	r2, [r7, #24]
 800c8ce:	e841 2300 	strex	r3, r2, [r1]
 800c8d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1e6      	bne.n	800c8a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c8ee:	bf00      	nop
 800c8f0:	3754      	adds	r7, #84	@ 0x54
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d101      	bne.n	800c910 <HAL_UARTEx_DisableFifoMode+0x16>
 800c90c:	2302      	movs	r3, #2
 800c90e:	e027      	b.n	800c960 <HAL_UARTEx_DisableFifoMode+0x66>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2224      	movs	r2, #36	@ 0x24
 800c91c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f022 0201 	bic.w	r2, r2, #1
 800c936:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c93e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2220      	movs	r2, #32
 800c952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d101      	bne.n	800c984 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c980:	2302      	movs	r3, #2
 800c982:	e02d      	b.n	800c9e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2224      	movs	r2, #36	@ 0x24
 800c990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f022 0201 	bic.w	r2, r2, #1
 800c9aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	683a      	ldr	r2, [r7, #0]
 800c9bc:	430a      	orrs	r2, r1
 800c9be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f84f 	bl	800ca64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2220      	movs	r2, #32
 800c9d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d101      	bne.n	800ca00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9fc:	2302      	movs	r3, #2
 800c9fe:	e02d      	b.n	800ca5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2224      	movs	r2, #36	@ 0x24
 800ca0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f022 0201 	bic.w	r2, r2, #1
 800ca26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f811 	bl	800ca64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2220      	movs	r2, #32
 800ca4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d108      	bne.n	800ca86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca84:	e031      	b.n	800caea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca86:	2308      	movs	r3, #8
 800ca88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca8a:	2308      	movs	r3, #8
 800ca8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	0e5b      	lsrs	r3, r3, #25
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	f003 0307 	and.w	r3, r3, #7
 800ca9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	0f5b      	lsrs	r3, r3, #29
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	f003 0307 	and.w	r3, r3, #7
 800caac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	7b3a      	ldrb	r2, [r7, #12]
 800cab2:	4911      	ldr	r1, [pc, #68]	@ (800caf8 <UARTEx_SetNbDataToProcess+0x94>)
 800cab4:	5c8a      	ldrb	r2, [r1, r2]
 800cab6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800caba:	7b3a      	ldrb	r2, [r7, #12]
 800cabc:	490f      	ldr	r1, [pc, #60]	@ (800cafc <UARTEx_SetNbDataToProcess+0x98>)
 800cabe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cac0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
 800cace:	7b7a      	ldrb	r2, [r7, #13]
 800cad0:	4909      	ldr	r1, [pc, #36]	@ (800caf8 <UARTEx_SetNbDataToProcess+0x94>)
 800cad2:	5c8a      	ldrb	r2, [r1, r2]
 800cad4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cad8:	7b7a      	ldrb	r2, [r7, #13]
 800cada:	4908      	ldr	r1, [pc, #32]	@ (800cafc <UARTEx_SetNbDataToProcess+0x98>)
 800cadc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cade:	fb93 f3f2 	sdiv	r3, r3, r2
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800caea:	bf00      	nop
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	080134fc 	.word	0x080134fc
 800cafc:	08013504 	.word	0x08013504

0800cb00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cb08:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cb0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	43db      	mvns	r3, r3
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	4013      	ands	r3, r2
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3714      	adds	r7, #20
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cb36:	b480      	push	{r7}
 800cb38:	b085      	sub	sp, #20
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	1d3b      	adds	r3, r7, #4
 800cb40:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b088      	sub	sp, #32
 800cb76:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb7c:	f107 0308 	add.w	r3, r7, #8
 800cb80:	2218      	movs	r2, #24
 800cb82:	2100      	movs	r1, #0
 800cb84:	4618      	mov	r0, r3
 800cb86:	f001 f92d 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb8a:	233f      	movs	r3, #63	@ 0x3f
 800cb8c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800cb8e:	2381      	movs	r3, #129	@ 0x81
 800cb90:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cb92:	1dfb      	adds	r3, r7, #7
 800cb94:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cb96:	2301      	movs	r3, #1
 800cb98:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb9a:	f107 0308 	add.w	r3, r7, #8
 800cb9e:	2100      	movs	r1, #0
 800cba0:	4618      	mov	r0, r3
 800cba2:	f001 fba9 	bl	800e2f8 <hci_send_req>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	da01      	bge.n	800cbb0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cbac:	23ff      	movs	r3, #255	@ 0xff
 800cbae:	e000      	b.n	800cbb2 <aci_gap_set_non_discoverable+0x40>
  return status;
 800cbb0:	79fb      	ldrb	r3, [r7, #7]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3720      	adds	r7, #32
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800cbba:	b5b0      	push	{r4, r5, r7, lr}
 800cbbc:	b0ce      	sub	sp, #312	@ 0x138
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbcc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cbd0:	462a      	mov	r2, r5
 800cbd2:	701a      	strb	r2, [r3, #0]
 800cbd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbd8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cbdc:	4622      	mov	r2, r4
 800cbde:	801a      	strh	r2, [r3, #0]
 800cbe0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbe4:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800cbe8:	4602      	mov	r2, r0
 800cbea:	801a      	strh	r2, [r3, #0]
 800cbec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbf0:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cbf4:	460a      	mov	r2, r1
 800cbf6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800cbf8:	f107 0310 	add.w	r3, r7, #16
 800cbfc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800cc00:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cc04:	3308      	adds	r3, #8
 800cc06:	f107 0210 	add.w	r2, r7, #16
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800cc10:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cc14:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cc18:	4413      	add	r3, r2
 800cc1a:	3309      	adds	r3, #9
 800cc1c:	f107 0210 	add.w	r2, r7, #16
 800cc20:	4413      	add	r3, r2
 800cc22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cc26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc2a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cc2e:	2200      	movs	r2, #0
 800cc30:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cc32:	2300      	movs	r3, #0
 800cc34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800cc38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc3c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc40:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800cc44:	7812      	ldrb	r2, [r2, #0]
 800cc46:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cc48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800cc52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc56:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc5a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800cc5e:	8812      	ldrh	r2, [r2, #0]
 800cc60:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800cc64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc68:	3302      	adds	r3, #2
 800cc6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800cc6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc72:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc76:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800cc7a:	8812      	ldrh	r2, [r2, #0]
 800cc7c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800cc80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc84:	3302      	adds	r3, #2
 800cc86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800cc8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc8e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc92:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800cc96:	7812      	ldrb	r2, [r2, #0]
 800cc98:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cc9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc9e:	3301      	adds	r3, #1
 800cca0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800cca4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cca8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800ccac:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ccae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800ccb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccbc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ccc0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800ccc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800cccc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccd0:	3308      	adds	r3, #8
 800ccd2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ccd6:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f001 f872 	bl	800ddc4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800cce0:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cce4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cce8:	4413      	add	r3, r2
 800ccea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800ccee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ccf2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800ccf6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ccf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800cd02:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cd06:	3301      	adds	r3, #1
 800cd08:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cd0c:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800cd10:	4618      	mov	r0, r3
 800cd12:	f001 f857 	bl	800ddc4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800cd16:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cd1a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cd1e:	4413      	add	r3, r2
 800cd20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800cd24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cd28:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800cd2c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cd2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd32:	3302      	adds	r3, #2
 800cd34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800cd38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cd3c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800cd40:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800cd42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd46:	3302      	adds	r3, #2
 800cd48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd50:	2218      	movs	r2, #24
 800cd52:	2100      	movs	r1, #0
 800cd54:	4618      	mov	r0, r3
 800cd56:	f001 f845 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd5a:	233f      	movs	r3, #63	@ 0x3f
 800cd5c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800cd60:	2383      	movs	r3, #131	@ 0x83
 800cd62:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cd66:	f107 0310 	add.w	r3, r7, #16
 800cd6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cd6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cd76:	f107 030f 	add.w	r3, r7, #15
 800cd7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd88:	2100      	movs	r1, #0
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f001 fab4 	bl	800e2f8 <hci_send_req>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	da01      	bge.n	800cd9a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800cd96:	23ff      	movs	r3, #255	@ 0xff
 800cd98:	e004      	b.n	800cda4 <aci_gap_set_discoverable+0x1ea>
  return status;
 800cd9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cd9e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cda2:	781b      	ldrb	r3, [r3, #0]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bdb0      	pop	{r4, r5, r7, pc}

0800cdae <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b0cc      	sub	sp, #304	@ 0x130
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cdba:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cdbe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800cdc0:	f107 0310 	add.w	r3, r7, #16
 800cdc4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cdc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cdcc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800cdda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cdde:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cde2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800cde6:	7812      	ldrb	r2, [r2, #0]
 800cde8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cdea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cdee:	3301      	adds	r3, #1
 800cdf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cdf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cdf8:	2218      	movs	r2, #24
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 fff1 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce02:	233f      	movs	r3, #63	@ 0x3f
 800ce04:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800ce08:	2385      	movs	r3, #133	@ 0x85
 800ce0a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ce0e:	f107 0310 	add.w	r3, r7, #16
 800ce12:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ce16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ce1e:	f107 030f 	add.w	r3, r7, #15
 800ce22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ce26:	2301      	movs	r3, #1
 800ce28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce30:	2100      	movs	r1, #0
 800ce32:	4618      	mov	r0, r3
 800ce34:	f001 fa60 	bl	800e2f8 <hci_send_req>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	da01      	bge.n	800ce42 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ce3e:	23ff      	movs	r3, #255	@ 0xff
 800ce40:	e004      	b.n	800ce4c <aci_gap_set_io_capability+0x9e>
  return status;
 800ce42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ce4a:	781b      	ldrb	r3, [r3, #0]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ce56:	b5b0      	push	{r4, r5, r7, lr}
 800ce58:	b0cc      	sub	sp, #304	@ 0x130
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	4610      	mov	r0, r2
 800ce62:	4619      	mov	r1, r3
 800ce64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce68:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce6c:	462a      	mov	r2, r5
 800ce6e:	701a      	strb	r2, [r3, #0]
 800ce70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce74:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ce78:	4622      	mov	r2, r4
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce80:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ce84:	4602      	mov	r2, r0
 800ce86:	701a      	strb	r2, [r3, #0]
 800ce88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ce90:	460a      	mov	r2, r1
 800ce92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ce94:	f107 0310 	add.w	r3, r7, #16
 800ce98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ce9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cea0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cea4:	2200      	movs	r2, #0
 800cea6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800ceae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ceb2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ceb6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ceba:	7812      	ldrb	r2, [r2, #0]
 800cebc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cec2:	3301      	adds	r3, #1
 800cec4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800cec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cecc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ced0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ced4:	7812      	ldrb	r2, [r2, #0]
 800ced6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ced8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cedc:	3301      	adds	r3, #1
 800cede:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800cee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cee6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ceea:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ceee:	7812      	ldrb	r2, [r2, #0]
 800cef0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cef2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cef6:	3301      	adds	r3, #1
 800cef8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800cefc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf00:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf04:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800cf08:	7812      	ldrb	r2, [r2, #0]
 800cf0a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800cf0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf10:	3301      	adds	r3, #1
 800cf12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800cf16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf1a:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800cf1e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cf20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf24:	3301      	adds	r3, #1
 800cf26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800cf2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf2e:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800cf32:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cf34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf38:	3301      	adds	r3, #1
 800cf3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cf3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf42:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800cf46:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cf48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800cf52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf56:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800cf5a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cf5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf62:	3304      	adds	r3, #4
 800cf64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cf68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf6c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800cf70:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cf72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf76:	3301      	adds	r3, #1
 800cf78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf80:	2218      	movs	r2, #24
 800cf82:	2100      	movs	r1, #0
 800cf84:	4618      	mov	r0, r3
 800cf86:	f000 ff2d 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf8a:	233f      	movs	r3, #63	@ 0x3f
 800cf8c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800cf90:	2386      	movs	r3, #134	@ 0x86
 800cf92:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cf96:	f107 0310 	add.w	r3, r7, #16
 800cf9a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cf9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cfa6:	f107 030f 	add.w	r3, r7, #15
 800cfaa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cfb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfb8:	2100      	movs	r1, #0
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f001 f99c 	bl	800e2f8 <hci_send_req>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	da01      	bge.n	800cfca <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800cfc6:	23ff      	movs	r3, #255	@ 0xff
 800cfc8:	e004      	b.n	800cfd4 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800cfca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cfd2:	781b      	ldrb	r3, [r3, #0]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bdb0      	pop	{r4, r5, r7, pc}

0800cfde <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b0cc      	sub	sp, #304	@ 0x130
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cfee:	6019      	str	r1, [r3, #0]
 800cff0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cff4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cff8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800cffa:	f107 0310 	add.w	r3, r7, #16
 800cffe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d002:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d006:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d00a:	2200      	movs	r2, #0
 800d00c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d014:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d018:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d01c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d020:	8812      	ldrh	r2, [r2, #0]
 800d022:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d024:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d028:	3302      	adds	r3, #2
 800d02a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800d02e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d032:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d036:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d03a:	6812      	ldr	r2, [r2, #0]
 800d03c:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800d040:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d044:	3304      	adds	r3, #4
 800d046:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d04a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d04e:	2218      	movs	r2, #24
 800d050:	2100      	movs	r1, #0
 800d052:	4618      	mov	r0, r3
 800d054:	f000 fec6 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d058:	233f      	movs	r3, #63	@ 0x3f
 800d05a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800d05e:	2388      	movs	r3, #136	@ 0x88
 800d060:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d064:	f107 0310 	add.w	r3, r7, #16
 800d068:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d06c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d070:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d074:	f107 030f 	add.w	r3, r7, #15
 800d078:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d07c:	2301      	movs	r3, #1
 800d07e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d082:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d086:	2100      	movs	r1, #0
 800d088:	4618      	mov	r0, r3
 800d08a:	f001 f935 	bl	800e2f8 <hci_send_req>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	da01      	bge.n	800d098 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800d094:	23ff      	movs	r3, #255	@ 0xff
 800d096:	e004      	b.n	800d0a2 <aci_gap_pass_key_resp+0xc4>
  return status;
 800d098:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d09c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d0a0:	781b      	ldrb	r3, [r3, #0]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d0ac:	b590      	push	{r4, r7, lr}
 800d0ae:	b0cd      	sub	sp, #308	@ 0x134
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	4608      	mov	r0, r1
 800d0b6:	4611      	mov	r1, r2
 800d0b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d0bc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d0c0:	6013      	str	r3, [r2, #0]
 800d0c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0c6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d0ca:	4622      	mov	r2, r4
 800d0cc:	701a      	strb	r2, [r3, #0]
 800d0ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0d2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0de:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d0e2:	460a      	mov	r2, r1
 800d0e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d0e6:	f107 0310 	add.w	r3, r7, #16
 800d0ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d0ee:	f107 0308 	add.w	r3, r7, #8
 800d0f2:	2207      	movs	r2, #7
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 fe74 	bl	800dde4 <Osal_MemSet>
  int index_input = 0;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800d102:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d106:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d10a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d10e:	7812      	ldrb	r2, [r2, #0]
 800d110:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d112:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d116:	3301      	adds	r3, #1
 800d118:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d11c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d120:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d124:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d128:	7812      	ldrb	r2, [r2, #0]
 800d12a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d12c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d130:	3301      	adds	r3, #1
 800d132:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d136:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d13a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d13e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d142:	7812      	ldrb	r2, [r2, #0]
 800d144:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d146:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d14a:	3301      	adds	r3, #1
 800d14c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d150:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d154:	2218      	movs	r2, #24
 800d156:	2100      	movs	r1, #0
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 fe43 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d15e:	233f      	movs	r3, #63	@ 0x3f
 800d160:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800d164:	238a      	movs	r3, #138	@ 0x8a
 800d166:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d16a:	f107 0310 	add.w	r3, r7, #16
 800d16e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d172:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d176:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d17a:	f107 0308 	add.w	r3, r7, #8
 800d17e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d182:	2307      	movs	r3, #7
 800d184:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d188:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d18c:	2100      	movs	r1, #0
 800d18e:	4618      	mov	r0, r3
 800d190:	f001 f8b2 	bl	800e2f8 <hci_send_req>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	da01      	bge.n	800d19e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d19a:	23ff      	movs	r3, #255	@ 0xff
 800d19c:	e02e      	b.n	800d1fc <aci_gap_init+0x150>
  if ( resp.Status )
 800d19e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d005      	beq.n	800d1b8 <aci_gap_init+0x10c>
    return resp.Status;
 800d1ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1b0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	e021      	b.n	800d1fc <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d1b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d1d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1da:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d1e4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d1e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1ee:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d1f8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d202:	46bd      	mov	sp, r7
 800d204:	bd90      	pop	{r4, r7, pc}

0800d206 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b0cc      	sub	sp, #304	@ 0x130
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	4602      	mov	r2, r0
 800d20e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d212:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d216:	6019      	str	r1, [r3, #0]
 800d218:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d21c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d220:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d222:	f107 0310 	add.w	r3, r7, #16
 800d226:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d22a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d22e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d232:	2200      	movs	r2, #0
 800d234:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d23c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d240:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d244:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d248:	7812      	ldrb	r2, [r2, #0]
 800d24a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d24c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d250:	3301      	adds	r3, #1
 800d252:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d256:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d25a:	1c58      	adds	r0, r3, #1
 800d25c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d260:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d264:	781a      	ldrb	r2, [r3, #0]
 800d266:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d26a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d26e:	6819      	ldr	r1, [r3, #0]
 800d270:	f000 fda8 	bl	800ddc4 <Osal_MemCpy>
  index_input += AdvDataLen;
 800d274:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d278:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d282:	4413      	add	r3, r2
 800d284:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d288:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d28c:	2218      	movs	r2, #24
 800d28e:	2100      	movs	r1, #0
 800d290:	4618      	mov	r0, r3
 800d292:	f000 fda7 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d296:	233f      	movs	r3, #63	@ 0x3f
 800d298:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800d29c:	238e      	movs	r3, #142	@ 0x8e
 800d29e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d2a2:	f107 0310 	add.w	r3, r7, #16
 800d2a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d2aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d2b2:	f107 030f 	add.w	r3, r7, #15
 800d2b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2c4:	2100      	movs	r1, #0
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f001 f816 	bl	800e2f8 <hci_send_req>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	da01      	bge.n	800d2d6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d2d2:	23ff      	movs	r3, #255	@ 0xff
 800d2d4:	e004      	b.n	800d2e0 <aci_gap_update_adv_data+0xda>
  return status;
 800d2d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2da:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d2de:	781b      	ldrb	r3, [r3, #0]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b088      	sub	sp, #32
 800d2ee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d2f4:	f107 0308 	add.w	r3, r7, #8
 800d2f8:	2218      	movs	r2, #24
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f000 fd71 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d302:	233f      	movs	r3, #63	@ 0x3f
 800d304:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d306:	2392      	movs	r3, #146	@ 0x92
 800d308:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d30a:	1dfb      	adds	r3, r7, #7
 800d30c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d30e:	2301      	movs	r3, #1
 800d310:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d312:	f107 0308 	add.w	r3, r7, #8
 800d316:	2100      	movs	r1, #0
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 ffed 	bl	800e2f8 <hci_send_req>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	da01      	bge.n	800d328 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d324:	23ff      	movs	r3, #255	@ 0xff
 800d326:	e000      	b.n	800d32a <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d328:	79fb      	ldrb	r3, [r7, #7]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3720      	adds	r7, #32
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b0cc      	sub	sp, #304	@ 0x130
 800d336:	af00      	add	r7, sp, #0
 800d338:	4602      	mov	r2, r0
 800d33a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d33e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d342:	801a      	strh	r2, [r3, #0]
 800d344:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d348:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d34c:	460a      	mov	r2, r1
 800d34e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d350:	f107 0310 	add.w	r3, r7, #16
 800d354:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d358:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d35c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d360:	2200      	movs	r2, #0
 800d362:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d364:	2300      	movs	r3, #0
 800d366:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d36a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d36e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d372:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d376:	8812      	ldrh	r2, [r2, #0]
 800d378:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d37a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d37e:	3302      	adds	r3, #2
 800d380:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d384:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d388:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d38c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d390:	7812      	ldrb	r2, [r2, #0]
 800d392:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d394:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d398:	3301      	adds	r3, #1
 800d39a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d39e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3a2:	2218      	movs	r2, #24
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f000 fd1c 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3ac:	233f      	movs	r3, #63	@ 0x3f
 800d3ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800d3b2:	23a5      	movs	r3, #165	@ 0xa5
 800d3b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d3b8:	f107 0310 	add.w	r3, r7, #16
 800d3bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d3c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d3c8:	f107 030f 	add.w	r3, r7, #15
 800d3cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3da:	2100      	movs	r1, #0
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 ff8b 	bl	800e2f8 <hci_send_req>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	da01      	bge.n	800d3ec <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800d3e8:	23ff      	movs	r3, #255	@ 0xff
 800d3ea:	e004      	b.n	800d3f6 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800d3ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d3f4:	781b      	ldrb	r3, [r3, #0]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b088      	sub	sp, #32
 800d404:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d40a:	f107 0308 	add.w	r3, r7, #8
 800d40e:	2218      	movs	r2, #24
 800d410:	2100      	movs	r1, #0
 800d412:	4618      	mov	r0, r3
 800d414:	f000 fce6 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d418:	233f      	movs	r3, #63	@ 0x3f
 800d41a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d41c:	f240 1301 	movw	r3, #257	@ 0x101
 800d420:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d422:	1dfb      	adds	r3, r7, #7
 800d424:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d426:	2301      	movs	r3, #1
 800d428:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d42a:	f107 0308 	add.w	r3, r7, #8
 800d42e:	2100      	movs	r1, #0
 800d430:	4618      	mov	r0, r3
 800d432:	f000 ff61 	bl	800e2f8 <hci_send_req>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	da01      	bge.n	800d440 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d43c:	23ff      	movs	r3, #255	@ 0xff
 800d43e:	e000      	b.n	800d442 <aci_gatt_init+0x42>
  return status;
 800d440:	79fb      	ldrb	r3, [r7, #7]
}
 800d442:	4618      	mov	r0, r3
 800d444:	3720      	adds	r7, #32
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d44a:	b590      	push	{r4, r7, lr}
 800d44c:	b0cf      	sub	sp, #316	@ 0x13c
 800d44e:	af00      	add	r7, sp, #0
 800d450:	4604      	mov	r4, r0
 800d452:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800d456:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d45a:	6001      	str	r1, [r0, #0]
 800d45c:	4610      	mov	r0, r2
 800d45e:	4619      	mov	r1, r3
 800d460:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d464:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d468:	4622      	mov	r2, r4
 800d46a:	701a      	strb	r2, [r3, #0]
 800d46c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d470:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d474:	4602      	mov	r2, r0
 800d476:	701a      	strb	r2, [r3, #0]
 800d478:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d47c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d480:	460a      	mov	r2, r1
 800d482:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d484:	f107 0310 	add.w	r3, r7, #16
 800d488:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d48c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d490:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	2b01      	cmp	r3, #1
 800d498:	d00a      	beq.n	800d4b0 <aci_gatt_add_service+0x66>
 800d49a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d49e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d101      	bne.n	800d4ac <aci_gatt_add_service+0x62>
 800d4a8:	2311      	movs	r3, #17
 800d4aa:	e002      	b.n	800d4b2 <aci_gatt_add_service+0x68>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e000      	b.n	800d4b2 <aci_gatt_add_service+0x68>
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	f107 0210 	add.w	r2, r7, #16
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d4bc:	f107 030c 	add.w	r3, r7, #12
 800d4c0:	2203      	movs	r2, #3
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 fc8d 	bl	800dde4 <Osal_MemSet>
  int index_input = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d4d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d4d4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d4d8:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d4dc:	7812      	ldrb	r2, [r2, #0]
 800d4de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d4e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d4ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d4ee:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d002      	beq.n	800d4fe <aci_gatt_add_service+0xb4>
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d004      	beq.n	800d506 <aci_gatt_add_service+0xbc>
 800d4fc:	e007      	b.n	800d50e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d4fe:	2302      	movs	r3, #2
 800d500:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d504:	e005      	b.n	800d512 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d506:	2310      	movs	r3, #16
 800d508:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d50c:	e001      	b.n	800d512 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d50e:	2397      	movs	r3, #151	@ 0x97
 800d510:	e06c      	b.n	800d5ec <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d512:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d516:	1c58      	adds	r0, r3, #1
 800d518:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800d51c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d520:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d524:	6819      	ldr	r1, [r3, #0]
 800d526:	f000 fc4d 	bl	800ddc4 <Osal_MemCpy>
    index_input += size;
 800d52a:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800d52e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d532:	4413      	add	r3, r2
 800d534:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800d538:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d53c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d540:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d544:	7812      	ldrb	r2, [r2, #0]
 800d546:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d548:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d54c:	3301      	adds	r3, #1
 800d54e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d552:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d556:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d55a:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d55e:	7812      	ldrb	r2, [r2, #0]
 800d560:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d562:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d566:	3301      	adds	r3, #1
 800d568:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d56c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d570:	2218      	movs	r2, #24
 800d572:	2100      	movs	r1, #0
 800d574:	4618      	mov	r0, r3
 800d576:	f000 fc35 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d57a:	233f      	movs	r3, #63	@ 0x3f
 800d57c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800d580:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800d584:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d588:	f107 0310 	add.w	r3, r7, #16
 800d58c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d590:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d594:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d598:	f107 030c 	add.w	r3, r7, #12
 800d59c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d5a0:	2303      	movs	r3, #3
 800d5a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d5a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f000 fea3 	bl	800e2f8 <hci_send_req>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	da01      	bge.n	800d5bc <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d5b8:	23ff      	movs	r3, #255	@ 0xff
 800d5ba:	e017      	b.n	800d5ec <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d5bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d005      	beq.n	800d5d6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d5ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	e00a      	b.n	800d5ec <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d5d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d5e8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d5ea:	2300      	movs	r3, #0
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd90      	pop	{r4, r7, pc}

0800d5f6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d5f6:	b590      	push	{r4, r7, lr}
 800d5f8:	b0d1      	sub	sp, #324	@ 0x144
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	4604      	mov	r4, r0
 800d5fe:	4608      	mov	r0, r1
 800d600:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d604:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d608:	600a      	str	r2, [r1, #0]
 800d60a:	4619      	mov	r1, r3
 800d60c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d610:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d614:	4622      	mov	r2, r4
 800d616:	801a      	strh	r2, [r3, #0]
 800d618:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d61c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d620:	4602      	mov	r2, r0
 800d622:	701a      	strb	r2, [r3, #0]
 800d624:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d628:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800d62c:	460a      	mov	r2, r1
 800d62e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d630:	f107 0318 	add.w	r3, r7, #24
 800d634:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d638:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d63c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d00a      	beq.n	800d65c <aci_gatt_add_char+0x66>
 800d646:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d64a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b02      	cmp	r3, #2
 800d652:	d101      	bne.n	800d658 <aci_gatt_add_char+0x62>
 800d654:	2313      	movs	r3, #19
 800d656:	e002      	b.n	800d65e <aci_gatt_add_char+0x68>
 800d658:	2303      	movs	r3, #3
 800d65a:	e000      	b.n	800d65e <aci_gatt_add_char+0x68>
 800d65c:	2305      	movs	r3, #5
 800d65e:	f107 0218 	add.w	r2, r7, #24
 800d662:	4413      	add	r3, r2
 800d664:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d668:	f107 0314 	add.w	r3, r7, #20
 800d66c:	2203      	movs	r2, #3
 800d66e:	2100      	movs	r1, #0
 800d670:	4618      	mov	r0, r3
 800d672:	f000 fbb7 	bl	800dde4 <Osal_MemSet>
  int index_input = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800d67c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d680:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d684:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d688:	8812      	ldrh	r2, [r2, #0]
 800d68a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d68c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d690:	3302      	adds	r3, #2
 800d692:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d696:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d69a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d69e:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d6a2:	7812      	ldrb	r2, [r2, #0]
 800d6a4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d6a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d6b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6b4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d002      	beq.n	800d6c4 <aci_gatt_add_char+0xce>
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d004      	beq.n	800d6cc <aci_gatt_add_char+0xd6>
 800d6c2:	e007      	b.n	800d6d4 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d6ca:	e005      	b.n	800d6d8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d6cc:	2310      	movs	r3, #16
 800d6ce:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d6d2:	e001      	b.n	800d6d8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d6d4:	2397      	movs	r3, #151	@ 0x97
 800d6d6:	e091      	b.n	800d7fc <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d6d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d6dc:	1cd8      	adds	r0, r3, #3
 800d6de:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800d6e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d6ea:	6819      	ldr	r1, [r3, #0]
 800d6ec:	f000 fb6a 	bl	800ddc4 <Osal_MemCpy>
    index_input += size;
 800d6f0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d6f4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d6f8:	4413      	add	r3, r2
 800d6fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d6fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d702:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d706:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800d70a:	8812      	ldrh	r2, [r2, #0]
 800d70c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d70e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d712:	3302      	adds	r3, #2
 800d714:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d718:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d71c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d720:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d722:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d726:	3301      	adds	r3, #1
 800d728:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d72c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d730:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d734:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d736:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d73a:	3301      	adds	r3, #1
 800d73c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d740:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d744:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d748:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d74a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d74e:	3301      	adds	r3, #1
 800d750:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d754:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d758:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d75c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d75e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d762:	3301      	adds	r3, #1
 800d764:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d768:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d76c:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d770:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d772:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d776:	3301      	adds	r3, #1
 800d778:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d77c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d780:	2218      	movs	r2, #24
 800d782:	2100      	movs	r1, #0
 800d784:	4618      	mov	r0, r3
 800d786:	f000 fb2d 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d78a:	233f      	movs	r3, #63	@ 0x3f
 800d78c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d790:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d794:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800d798:	f107 0318 	add.w	r3, r7, #24
 800d79c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800d7a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800d7a8:	f107 0314 	add.w	r3, r7, #20
 800d7ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800d7b0:	2303      	movs	r3, #3
 800d7b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f000 fd9b 	bl	800e2f8 <hci_send_req>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	da01      	bge.n	800d7cc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d7c8:	23ff      	movs	r3, #255	@ 0xff
 800d7ca:	e017      	b.n	800d7fc <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d7cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d005      	beq.n	800d7e6 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d7da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	e00a      	b.n	800d7fc <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d7e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800d7f8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d7fa:	2300      	movs	r3, #0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d802:	46bd      	mov	sp, r7
 800d804:	bd90      	pop	{r4, r7, pc}

0800d806 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d806:	b5b0      	push	{r4, r5, r7, lr}
 800d808:	b0cc      	sub	sp, #304	@ 0x130
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	4605      	mov	r5, r0
 800d80e:	460c      	mov	r4, r1
 800d810:	4610      	mov	r0, r2
 800d812:	4619      	mov	r1, r3
 800d814:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d818:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d81c:	462a      	mov	r2, r5
 800d81e:	801a      	strh	r2, [r3, #0]
 800d820:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d824:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d828:	4622      	mov	r2, r4
 800d82a:	801a      	strh	r2, [r3, #0]
 800d82c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d830:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800d834:	4602      	mov	r2, r0
 800d836:	701a      	strb	r2, [r3, #0]
 800d838:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d83c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d840:	460a      	mov	r2, r1
 800d842:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d844:	f107 0310 	add.w	r3, r7, #16
 800d848:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d84c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d850:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d854:	2200      	movs	r2, #0
 800d856:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d858:	2300      	movs	r3, #0
 800d85a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800d85e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d862:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d866:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d86a:	8812      	ldrh	r2, [r2, #0]
 800d86c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d86e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d872:	3302      	adds	r3, #2
 800d874:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800d878:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d87c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d880:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d884:	8812      	ldrh	r2, [r2, #0]
 800d886:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d888:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d88c:	3302      	adds	r3, #2
 800d88e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800d892:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d896:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d89a:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800d89e:	7812      	ldrb	r2, [r2, #0]
 800d8a0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d8a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d8ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8b4:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800d8b8:	7812      	ldrb	r2, [r2, #0]
 800d8ba:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d8bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d8c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8ca:	1d98      	adds	r0, r3, #6
 800d8cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8d0:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d8dc:	f000 fa72 	bl	800ddc4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d8e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8e4:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d8ee:	4413      	add	r3, r2
 800d8f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d8f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d8f8:	2218      	movs	r2, #24
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f000 fa71 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d902:	233f      	movs	r3, #63	@ 0x3f
 800d904:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800d908:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800d90c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d910:	f107 0310 	add.w	r3, r7, #16
 800d914:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d918:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d91c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d920:	f107 030f 	add.w	r3, r7, #15
 800d924:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d928:	2301      	movs	r3, #1
 800d92a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d92e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d932:	2100      	movs	r1, #0
 800d934:	4618      	mov	r0, r3
 800d936:	f000 fcdf 	bl	800e2f8 <hci_send_req>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	da01      	bge.n	800d944 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d940:	23ff      	movs	r3, #255	@ 0xff
 800d942:	e004      	b.n	800d94e <aci_gatt_update_char_value+0x148>
  return status;
 800d944:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d948:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d94c:	781b      	ldrb	r3, [r3, #0]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d954:	46bd      	mov	sp, r7
 800d956:	bdb0      	pop	{r4, r5, r7, pc}

0800d958 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b0cc      	sub	sp, #304	@ 0x130
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4602      	mov	r2, r0
 800d960:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d964:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d968:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800d96a:	f107 0310 	add.w	r3, r7, #16
 800d96e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d972:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d976:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d97a:	2200      	movs	r2, #0
 800d97c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d97e:	2300      	movs	r3, #0
 800d980:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d984:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d988:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d98c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d990:	8812      	ldrh	r2, [r2, #0]
 800d992:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d994:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d998:	3302      	adds	r3, #2
 800d99a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d99e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9a2:	2218      	movs	r2, #24
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 fa1c 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d9ac:	233f      	movs	r3, #63	@ 0x3f
 800d9ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 800d9b2:	f240 1327 	movw	r3, #295	@ 0x127
 800d9b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d9ba:	f107 0310 	add.w	r3, r7, #16
 800d9be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d9c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d9c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d9ca:	f107 030f 	add.w	r3, r7, #15
 800d9ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d9d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9dc:	2100      	movs	r1, #0
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f000 fc8a 	bl	800e2f8 <hci_send_req>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	da01      	bge.n	800d9ee <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800d9ea:	23ff      	movs	r3, #255	@ 0xff
 800d9ec:	e004      	b.n	800d9f8 <aci_gatt_allow_read+0xa0>
  return status;
 800d9ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d9f6:	781b      	ldrb	r3, [r3, #0]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b0cc      	sub	sp, #304	@ 0x130
 800da06:	af00      	add	r7, sp, #0
 800da08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da0c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800da10:	601a      	str	r2, [r3, #0]
 800da12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da16:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800da1a:	4602      	mov	r2, r0
 800da1c:	701a      	strb	r2, [r3, #0]
 800da1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da22:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800da26:	460a      	mov	r2, r1
 800da28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800da2a:	f107 0310 	add.w	r3, r7, #16
 800da2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800da32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da3a:	2200      	movs	r2, #0
 800da3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800da3e:	2300      	movs	r3, #0
 800da40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800da44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da4c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800da50:	7812      	ldrb	r2, [r2, #0]
 800da52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800da54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da58:	3301      	adds	r3, #1
 800da5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800da5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da66:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800da6a:	7812      	ldrb	r2, [r2, #0]
 800da6c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800da6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da72:	3301      	adds	r3, #1
 800da74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800da78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da7c:	1c98      	adds	r0, r3, #2
 800da7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da82:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800da86:	781a      	ldrb	r2, [r3, #0]
 800da88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da8c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800da90:	6819      	ldr	r1, [r3, #0]
 800da92:	f000 f997 	bl	800ddc4 <Osal_MemCpy>
  index_input += Length;
 800da96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da9a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800daa4:	4413      	add	r3, r2
 800daa6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800daaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800daae:	2218      	movs	r2, #24
 800dab0:	2100      	movs	r1, #0
 800dab2:	4618      	mov	r0, r3
 800dab4:	f000 f996 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dab8:	233f      	movs	r3, #63	@ 0x3f
 800daba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800dabe:	230c      	movs	r3, #12
 800dac0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dac4:	f107 0310 	add.w	r3, r7, #16
 800dac8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dacc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dad0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dad4:	f107 030f 	add.w	r3, r7, #15
 800dad8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dadc:	2301      	movs	r3, #1
 800dade:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dae2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dae6:	2100      	movs	r1, #0
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 fc05 	bl	800e2f8 <hci_send_req>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	da01      	bge.n	800daf8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800daf4:	23ff      	movs	r3, #255	@ 0xff
 800daf6:	e004      	b.n	800db02 <aci_hal_write_config_data+0x100>
  return status;
 800daf8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dafc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800db00:	781b      	ldrb	r3, [r3, #0]
}
 800db02:	4618      	mov	r0, r3
 800db04:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b0cc      	sub	sp, #304	@ 0x130
 800db10:	af00      	add	r7, sp, #0
 800db12:	4602      	mov	r2, r0
 800db14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db18:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800db1c:	701a      	strb	r2, [r3, #0]
 800db1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db22:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800db26:	460a      	mov	r2, r1
 800db28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800db2a:	f107 0310 	add.w	r3, r7, #16
 800db2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800db32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800db3a:	2200      	movs	r2, #0
 800db3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800db44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db4c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800db50:	7812      	ldrb	r2, [r2, #0]
 800db52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800db54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db58:	3301      	adds	r3, #1
 800db5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800db5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db66:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800db6a:	7812      	ldrb	r2, [r2, #0]
 800db6c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800db6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db72:	3301      	adds	r3, #1
 800db74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db7c:	2218      	movs	r2, #24
 800db7e:	2100      	movs	r1, #0
 800db80:	4618      	mov	r0, r3
 800db82:	f000 f92f 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800db86:	233f      	movs	r3, #63	@ 0x3f
 800db88:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800db8c:	230f      	movs	r3, #15
 800db8e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800db92:	f107 0310 	add.w	r3, r7, #16
 800db96:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800db9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dba2:	f107 030f 	add.w	r3, r7, #15
 800dba6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dbb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbb4:	2100      	movs	r1, #0
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f000 fb9e 	bl	800e2f8 <hci_send_req>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	da01      	bge.n	800dbc6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800dbc2:	23ff      	movs	r3, #255	@ 0xff
 800dbc4:	e004      	b.n	800dbd0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800dbc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dbce:	781b      	ldrb	r3, [r3, #0]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b0cc      	sub	sp, #304	@ 0x130
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbe6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dbea:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800dbec:	f107 0310 	add.w	r3, r7, #16
 800dbf0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dbf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbf8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800dc06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dc0e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dc12:	8812      	ldrh	r2, [r2, #0]
 800dc14:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dc16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc1a:	3302      	adds	r3, #2
 800dc1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc24:	2218      	movs	r2, #24
 800dc26:	2100      	movs	r1, #0
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 f8db 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc2e:	233f      	movs	r3, #63	@ 0x3f
 800dc30:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800dc34:	2318      	movs	r3, #24
 800dc36:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dc3a:	f107 0310 	add.w	r3, r7, #16
 800dc3e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dc42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dc4a:	f107 030f 	add.w	r3, r7, #15
 800dc4e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dc52:	2301      	movs	r3, #1
 800dc54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f000 fb4a 	bl	800e2f8 <hci_send_req>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	da01      	bge.n	800dc6e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800dc6a:	23ff      	movs	r3, #255	@ 0xff
 800dc6c:	e004      	b.n	800dc78 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800dc6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc76:	781b      	ldrb	r3, [r3, #0]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b088      	sub	sp, #32
 800dc86:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc8c:	f107 0308 	add.w	r3, r7, #8
 800dc90:	2218      	movs	r2, #24
 800dc92:	2100      	movs	r1, #0
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 f8a5 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x03;
 800dc9a:	2303      	movs	r3, #3
 800dc9c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dca2:	1dfb      	adds	r3, r7, #7
 800dca4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dca6:	2301      	movs	r3, #1
 800dca8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dcaa:	f107 0308 	add.w	r3, r7, #8
 800dcae:	2100      	movs	r1, #0
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f000 fb21 	bl	800e2f8 <hci_send_req>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	da01      	bge.n	800dcc0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800dcbc:	23ff      	movs	r3, #255	@ 0xff
 800dcbe:	e000      	b.n	800dcc2 <hci_reset+0x40>
  return status;
 800dcc0:	79fb      	ldrb	r3, [r7, #7]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3720      	adds	r7, #32
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800dcca:	b590      	push	{r4, r7, lr}
 800dccc:	b0cd      	sub	sp, #308	@ 0x134
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	4604      	mov	r4, r0
 800dcd2:	4608      	mov	r0, r1
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcda:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dcde:	4622      	mov	r2, r4
 800dce0:	701a      	strb	r2, [r3, #0]
 800dce2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dce6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dcea:	4602      	mov	r2, r0
 800dcec:	701a      	strb	r2, [r3, #0]
 800dcee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcf2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800dcf6:	460a      	mov	r2, r1
 800dcf8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800dcfa:	f107 0310 	add.w	r3, r7, #16
 800dcfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dd02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800dd14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd1c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dd20:	7812      	ldrb	r2, [r2, #0]
 800dd22:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dd24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd28:	3301      	adds	r3, #1
 800dd2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800dd2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd36:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dd3a:	7812      	ldrb	r2, [r2, #0]
 800dd3c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dd3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd42:	3301      	adds	r3, #1
 800dd44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800dd48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd50:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800dd54:	7812      	ldrb	r2, [r2, #0]
 800dd56:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dd58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd66:	2218      	movs	r2, #24
 800dd68:	2100      	movs	r1, #0
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 f83a 	bl	800dde4 <Osal_MemSet>
  rq.ogf = 0x08;
 800dd70:	2308      	movs	r3, #8
 800dd72:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800dd76:	2331      	movs	r3, #49	@ 0x31
 800dd78:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dd7c:	f107 0310 	add.w	r3, r7, #16
 800dd80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dd84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dd8c:	f107 030f 	add.w	r3, r7, #15
 800dd90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dd94:	2301      	movs	r3, #1
 800dd96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd9e:	2100      	movs	r1, #0
 800dda0:	4618      	mov	r0, r3
 800dda2:	f000 faa9 	bl	800e2f8 <hci_send_req>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	da01      	bge.n	800ddb0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800ddac:	23ff      	movs	r3, #255	@ 0xff
 800ddae:	e004      	b.n	800ddba <hci_le_set_default_phy+0xf0>
  return status;
 800ddb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ddb4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ddb8:	781b      	ldrb	r3, [r3, #0]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd90      	pop	{r4, r7, pc}

0800ddc4 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	68b9      	ldr	r1, [r7, #8]
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f003 f9aa 	bl	801112e <memcpy>
 800ddda:	4603      	mov	r3, r0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	68b9      	ldr	r1, [r7, #8]
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f003 f909 	bl	801100c <memset>
 800ddfa:	4603      	mov	r3, r0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800de04:	b480      	push	{r7}
 800de06:	af00      	add	r7, sp, #0
  return;
 800de08:	bf00      	nop
}
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800de12:	b480      	push	{r7}
 800de14:	af00      	add	r7, sp, #0
  return;
 800de16:	bf00      	nop
}
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800de20:	b480      	push	{r7}
 800de22:	af00      	add	r7, sp, #0
  return;
 800de24:	bf00      	nop
}
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr

0800de2e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800de2e:	b480      	push	{r7}
 800de30:	af00      	add	r7, sp, #0
  return;
 800de32:	bf00      	nop
}
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800de3c:	b480      	push	{r7}
 800de3e:	af00      	add	r7, sp, #0
  return;
 800de40:	bf00      	nop
}
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800de4a:	b480      	push	{r7}
 800de4c:	af00      	add	r7, sp, #0
  return;
 800de4e:	bf00      	nop
}
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800de58:	b480      	push	{r7}
 800de5a:	af00      	add	r7, sp, #0
  return;
 800de5c:	bf00      	nop
}
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr

0800de66 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800de66:	b480      	push	{r7}
 800de68:	af00      	add	r7, sp, #0
  return;
 800de6a:	bf00      	nop
}
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800de74:	b480      	push	{r7}
 800de76:	af00      	add	r7, sp, #0
  return;
 800de78:	bf00      	nop
}
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800de82:	b480      	push	{r7}
 800de84:	af00      	add	r7, sp, #0
  return;
 800de86:	bf00      	nop
}
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800de90:	b480      	push	{r7}
 800de92:	af00      	add	r7, sp, #0
  return;
 800de94:	bf00      	nop
}
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800de9e:	b480      	push	{r7}
 800dea0:	af00      	add	r7, sp, #0
  return;
 800dea2:	bf00      	nop
}
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800deac:	b480      	push	{r7}
 800deae:	af00      	add	r7, sp, #0
  return;
 800deb0:	bf00      	nop
}
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr

0800deba <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800deba:	b480      	push	{r7}
 800debc:	af00      	add	r7, sp, #0
  return;
 800debe:	bf00      	nop
}
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800dec8:	b480      	push	{r7}
 800deca:	af00      	add	r7, sp, #0
  return;
 800decc:	bf00      	nop
}
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr

0800ded6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ded6:	b480      	push	{r7}
 800ded8:	af00      	add	r7, sp, #0
  return;
 800deda:	bf00      	nop
}
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800dee4:	b480      	push	{r7}
 800dee6:	af00      	add	r7, sp, #0
  return;
 800dee8:	bf00      	nop
}
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr
	...

0800def4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800def8:	4b04      	ldr	r3, [pc, #16]	@ (800df0c <SVCCTL_Init+0x18>)
 800defa:	2200      	movs	r2, #0
 800defc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800defe:	4b04      	ldr	r3, [pc, #16]	@ (800df10 <SVCCTL_Init+0x1c>)
 800df00:	2200      	movs	r2, #0
 800df02:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800df04:	f000 f806 	bl	800df14 <SVCCTL_SvcInit>

  return;
 800df08:	bf00      	nop
}
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	2000016c 	.word	0x2000016c
 800df10:	2000018c 	.word	0x2000018c

0800df14 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	af00      	add	r7, sp, #0
  BAS_Init();
 800df18:	f7ff ff74 	bl	800de04 <BAS_Init>

  BLS_Init();
 800df1c:	f7ff ff79 	bl	800de12 <BLS_Init>

  CRS_STM_Init();
 800df20:	f7ff ff7e 	bl	800de20 <CRS_STM_Init>

  DIS_Init();
 800df24:	f7ff ff83 	bl	800de2e <DIS_Init>

  EDS_STM_Init();
 800df28:	f7ff ff88 	bl	800de3c <EDS_STM_Init>

  HIDS_Init();
 800df2c:	f7ff ff8d 	bl	800de4a <HIDS_Init>

  HRS_Init();
 800df30:	f7ff ff92 	bl	800de58 <HRS_Init>

  HTS_Init();
 800df34:	f7ff ff97 	bl	800de66 <HTS_Init>

  IAS_Init();
 800df38:	f7ff ff9c 	bl	800de74 <IAS_Init>

  LLS_Init();
 800df3c:	f7ff ffa1 	bl	800de82 <LLS_Init>

  TPS_Init();
 800df40:	f7ff ffa6 	bl	800de90 <TPS_Init>

  MOTENV_STM_Init();
 800df44:	f7ff ffab 	bl	800de9e <MOTENV_STM_Init>

  P2PS_STM_Init();
 800df48:	f7ff ffb0 	bl	800deac <P2PS_STM_Init>

  ZDD_STM_Init();
 800df4c:	f7ff ffb5 	bl	800deba <ZDD_STM_Init>

  OTAS_STM_Init();
 800df50:	f7ff ffba 	bl	800dec8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800df54:	f7ff ffc6 	bl	800dee4 <BVOPUS_STM_Init>

  MESH_Init();
 800df58:	f7ff ffbd 	bl	800ded6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800df5c:	f002 f86c 	bl	8010038 <SVCCTL_InitCustomSvc>
  
  return;
 800df60:	bf00      	nop
}
 800df62:	bd80      	pop	{r7, pc}

0800df64 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800df6c:	4b09      	ldr	r3, [pc, #36]	@ (800df94 <SVCCTL_RegisterSvcHandler+0x30>)
 800df6e:	7f1b      	ldrb	r3, [r3, #28]
 800df70:	4619      	mov	r1, r3
 800df72:	4a08      	ldr	r2, [pc, #32]	@ (800df94 <SVCCTL_RegisterSvcHandler+0x30>)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800df7a:	4b06      	ldr	r3, [pc, #24]	@ (800df94 <SVCCTL_RegisterSvcHandler+0x30>)
 800df7c:	7f1b      	ldrb	r3, [r3, #28]
 800df7e:	3301      	adds	r3, #1
 800df80:	b2da      	uxtb	r2, r3
 800df82:	4b04      	ldr	r3, [pc, #16]	@ (800df94 <SVCCTL_RegisterSvcHandler+0x30>)
 800df84:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800df86:	bf00      	nop
}
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	2000016c 	.word	0x2000016c

0800df98 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b086      	sub	sp, #24
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2bff      	cmp	r3, #255	@ 0xff
 800dfb0:	d125      	bne.n	800dffe <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	3302      	adds	r3, #2
 800dfb6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	881b      	ldrh	r3, [r3, #0]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dfc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dfc6:	d118      	bne.n	800dffa <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800dfc8:	2300      	movs	r3, #0
 800dfca:	757b      	strb	r3, [r7, #21]
 800dfcc:	e00d      	b.n	800dfea <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800dfce:	7d7b      	ldrb	r3, [r7, #21]
 800dfd0:	4a1a      	ldr	r2, [pc, #104]	@ (800e03c <SVCCTL_UserEvtRx+0xa4>)
 800dfd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	4798      	blx	r3
 800dfda:	4603      	mov	r3, r0
 800dfdc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800dfde:	7dfb      	ldrb	r3, [r7, #23]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d108      	bne.n	800dff6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800dfe4:	7d7b      	ldrb	r3, [r7, #21]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	757b      	strb	r3, [r7, #21]
 800dfea:	4b14      	ldr	r3, [pc, #80]	@ (800e03c <SVCCTL_UserEvtRx+0xa4>)
 800dfec:	7f1b      	ldrb	r3, [r3, #28]
 800dfee:	7d7a      	ldrb	r2, [r7, #21]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d3ec      	bcc.n	800dfce <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800dff4:	e002      	b.n	800dffc <SVCCTL_UserEvtRx+0x64>
              break;
 800dff6:	bf00      	nop
          break;
 800dff8:	e000      	b.n	800dffc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800dffa:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800dffc:	e000      	b.n	800e000 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800dffe:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800e000:	7dfb      	ldrb	r3, [r7, #23]
 800e002:	2b02      	cmp	r3, #2
 800e004:	d00f      	beq.n	800e026 <SVCCTL_UserEvtRx+0x8e>
 800e006:	2b02      	cmp	r3, #2
 800e008:	dc10      	bgt.n	800e02c <SVCCTL_UserEvtRx+0x94>
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <SVCCTL_UserEvtRx+0x7c>
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d006      	beq.n	800e020 <SVCCTL_UserEvtRx+0x88>
 800e012:	e00b      	b.n	800e02c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 fffb 	bl	800f010 <SVCCTL_App_Notification>
 800e01a:	4603      	mov	r3, r0
 800e01c:	75bb      	strb	r3, [r7, #22]
      break;
 800e01e:	e008      	b.n	800e032 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e020:	2301      	movs	r3, #1
 800e022:	75bb      	strb	r3, [r7, #22]
      break;
 800e024:	e005      	b.n	800e032 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800e026:	2300      	movs	r3, #0
 800e028:	75bb      	strb	r3, [r7, #22]
      break;
 800e02a:	e002      	b.n	800e032 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e02c:	2301      	movs	r3, #1
 800e02e:	75bb      	strb	r3, [r7, #22]
      break;
 800e030:	bf00      	nop
  }

  return (return_status);
 800e032:	7dbb      	ldrb	r3, [r7, #22]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3718      	adds	r7, #24
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	2000016c 	.word	0x2000016c

0800e040 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b088      	sub	sp, #32
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e048:	f107 030c 	add.w	r3, r7, #12
 800e04c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	212e      	movs	r1, #46	@ 0x2e
 800e058:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800e05c:	f000 fae8 	bl	800e630 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	330b      	adds	r3, #11
 800e064:	78db      	ldrb	r3, [r3, #3]
}
 800e066:	4618      	mov	r0, r3
 800e068:	3720      	adds	r7, #32
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b088      	sub	sp, #32
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e076:	f107 030c 	add.w	r3, r7, #12
 800e07a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	210f      	movs	r1, #15
 800e086:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800e08a:	f000 fad1 	bl	800e630 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	330b      	adds	r3, #11
 800e092:	78db      	ldrb	r3, [r3, #3]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3720      	adds	r7, #32
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b088      	sub	sp, #32
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e0a4:	f107 030c 	add.w	r3, r7, #12
 800e0a8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	2110      	movs	r1, #16
 800e0b0:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800e0b4:	f000 fabc 	bl	800e630 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	330b      	adds	r3, #11
 800e0bc:	78db      	ldrb	r3, [r3, #3]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3720      	adds	r7, #32
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
	...

0800e0c8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b08b      	sub	sp, #44	@ 0x2c
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e0f0:	4b4a      	ldr	r3, [pc, #296]	@ (800e21c <SHCI_GetWirelessFwInfo+0x154>)
 800e0f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0f8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e102:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a44      	ldr	r2, [pc, #272]	@ (800e220 <SHCI_GetWirelessFwInfo+0x158>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d10f      	bne.n	800e134 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	617b      	str	r3, [r7, #20]
 800e132:	e01a      	b.n	800e16a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e13c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e140:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	699b      	ldr	r3, [r3, #24]
 800e158:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16c:	0e1b      	lsrs	r3, r3, #24
 800e16e:	b2da      	uxtb	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e176:	0c1b      	lsrs	r3, r3, #16
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e180:	0a1b      	lsrs	r3, r3, #8
 800e182:	b2da      	uxtb	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18a:	091b      	lsrs	r3, r3, #4
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	f003 030f 	and.w	r3, r3, #15
 800e192:	b2da      	uxtb	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	f003 030f 	and.w	r3, r3, #15
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	0e1b      	lsrs	r3, r3, #24
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	0c1b      	lsrs	r3, r3, #16
 800e1b4:	b2da      	uxtb	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e1ba:	6a3b      	ldr	r3, [r7, #32]
 800e1bc:	0a1b      	lsrs	r3, r3, #8
 800e1be:	b2da      	uxtb	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e1c4:	6a3b      	ldr	r3, [r7, #32]
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	b2da      	uxtb	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	0e1b      	lsrs	r3, r3, #24
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	0c1b      	lsrs	r3, r3, #16
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	0a1b      	lsrs	r3, r3, #8
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	0e1b      	lsrs	r3, r3, #24
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	0c1b      	lsrs	r3, r3, #16
 800e200:	b2da      	uxtb	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	b2da      	uxtb	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e20e:	2300      	movs	r3, #0
}
 800e210:	4618      	mov	r0, r3
 800e212:	372c      	adds	r7, #44	@ 0x2c
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	58004000 	.word	0x58004000
 800e220:	a94656b9 	.word	0xa94656b9

0800e224 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	4a08      	ldr	r2, [pc, #32]	@ (800e254 <hci_init+0x30>)
 800e234:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e236:	4a08      	ldr	r2, [pc, #32]	@ (800e258 <hci_init+0x34>)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e23c:	4806      	ldr	r0, [pc, #24]	@ (800e258 <hci_init+0x34>)
 800e23e:	f000 f979 	bl	800e534 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4618      	mov	r0, r3
 800e248:	f000 f8da 	bl	800e400 <TlInit>

  return;
 800e24c:	bf00      	nop
}
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	20000878 	.word	0x20000878
 800e258:	20000850 	.word	0x20000850

0800e25c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e262:	4822      	ldr	r0, [pc, #136]	@ (800e2ec <hci_user_evt_proc+0x90>)
 800e264:	f000 fd5a 	bl	800ed1c <LST_is_empty>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d12b      	bne.n	800e2c6 <hci_user_evt_proc+0x6a>
 800e26e:	4b20      	ldr	r3, [pc, #128]	@ (800e2f0 <hci_user_evt_proc+0x94>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d027      	beq.n	800e2c6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e276:	f107 030c 	add.w	r3, r7, #12
 800e27a:	4619      	mov	r1, r3
 800e27c:	481b      	ldr	r0, [pc, #108]	@ (800e2ec <hci_user_evt_proc+0x90>)
 800e27e:	f000 fddc 	bl	800ee3a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e282:	4b1c      	ldr	r3, [pc, #112]	@ (800e2f4 <hci_user_evt_proc+0x98>)
 800e284:	69db      	ldr	r3, [r3, #28]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00c      	beq.n	800e2a4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e28e:	2301      	movs	r3, #1
 800e290:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e292:	4b18      	ldr	r3, [pc, #96]	@ (800e2f4 <hci_user_evt_proc+0x98>)
 800e294:	69db      	ldr	r3, [r3, #28]
 800e296:	1d3a      	adds	r2, r7, #4
 800e298:	4610      	mov	r0, r2
 800e29a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e29c:	793a      	ldrb	r2, [r7, #4]
 800e29e:	4b14      	ldr	r3, [pc, #80]	@ (800e2f0 <hci_user_evt_proc+0x94>)
 800e2a0:	701a      	strb	r2, [r3, #0]
 800e2a2:	e002      	b.n	800e2aa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e2a4:	4b12      	ldr	r3, [pc, #72]	@ (800e2f0 <hci_user_evt_proc+0x94>)
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e2aa:	4b11      	ldr	r3, [pc, #68]	@ (800e2f0 <hci_user_evt_proc+0x94>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d004      	beq.n	800e2bc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f000 fc0d 	bl	800ead4 <TL_MM_EvtDone>
 800e2ba:	e004      	b.n	800e2c6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	4619      	mov	r1, r3
 800e2c0:	480a      	ldr	r0, [pc, #40]	@ (800e2ec <hci_user_evt_proc+0x90>)
 800e2c2:	f000 fd4d 	bl	800ed60 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e2c6:	4809      	ldr	r0, [pc, #36]	@ (800e2ec <hci_user_evt_proc+0x90>)
 800e2c8:	f000 fd28 	bl	800ed1c <LST_is_empty>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d107      	bne.n	800e2e2 <hci_user_evt_proc+0x86>
 800e2d2:	4b07      	ldr	r3, [pc, #28]	@ (800e2f0 <hci_user_evt_proc+0x94>)
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d003      	beq.n	800e2e2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e2da:	4804      	ldr	r0, [pc, #16]	@ (800e2ec <hci_user_evt_proc+0x90>)
 800e2dc:	f001 fcf8 	bl	800fcd0 <hci_notify_asynch_evt>
  }


  return;
 800e2e0:	bf00      	nop
 800e2e2:	bf00      	nop
}
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	20000194 	.word	0x20000194
 800e2f0:	200001a0 	.word	0x200001a0
 800e2f4:	20000850 	.word	0x20000850

0800e2f8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b088      	sub	sp, #32
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	460b      	mov	r3, r1
 800e302:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e304:	2000      	movs	r0, #0
 800e306:	f000 f8d1 	bl	800e4ac <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e30a:	2300      	movs	r3, #0
 800e30c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	885b      	ldrh	r3, [r3, #2]
 800e312:	b21b      	sxth	r3, r3
 800e314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e318:	b21a      	sxth	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	881b      	ldrh	r3, [r3, #0]
 800e31e:	029b      	lsls	r3, r3, #10
 800e320:	b21b      	sxth	r3, r3
 800e322:	4313      	orrs	r3, r2
 800e324:	b21b      	sxth	r3, r3
 800e326:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e328:	4b33      	ldr	r3, [pc, #204]	@ (800e3f8 <hci_send_req+0x100>)
 800e32a:	2201      	movs	r2, #1
 800e32c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	b2d9      	uxtb	r1, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	689a      	ldr	r2, [r3, #8]
 800e338:	8bbb      	ldrh	r3, [r7, #28]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f000 f890 	bl	800e460 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e340:	e04e      	b.n	800e3e0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e342:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e346:	f001 fcda 	bl	800fcfe <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e34a:	e043      	b.n	800e3d4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e34c:	f107 030c 	add.w	r3, r7, #12
 800e350:	4619      	mov	r1, r3
 800e352:	482a      	ldr	r0, [pc, #168]	@ (800e3fc <hci_send_req+0x104>)
 800e354:	f000 fd71 	bl	800ee3a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	7a5b      	ldrb	r3, [r3, #9]
 800e35c:	2b0f      	cmp	r3, #15
 800e35e:	d114      	bne.n	800e38a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	330b      	adds	r3, #11
 800e364:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	885b      	ldrh	r3, [r3, #2]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	8bba      	ldrh	r2, [r7, #28]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d104      	bne.n	800e37c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	691b      	ldr	r3, [r3, #16]
 800e376:	693a      	ldr	r2, [r7, #16]
 800e378:	7812      	ldrb	r2, [r2, #0]
 800e37a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	785b      	ldrb	r3, [r3, #1]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d027      	beq.n	800e3d4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e384:	2301      	movs	r3, #1
 800e386:	77fb      	strb	r3, [r7, #31]
 800e388:	e024      	b.n	800e3d4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	330b      	adds	r3, #11
 800e38e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e396:	b29b      	uxth	r3, r3
 800e398:	8bba      	ldrh	r2, [r7, #28]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d114      	bne.n	800e3c8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	7a9b      	ldrb	r3, [r3, #10]
 800e3a2:	3b03      	subs	r3, #3
 800e3a4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	695a      	ldr	r2, [r3, #20]
 800e3aa:	7dfb      	ldrb	r3, [r7, #23]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	bfa8      	it	ge
 800e3b0:	461a      	movge	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6918      	ldr	r0, [r3, #16]
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	1cd9      	adds	r1, r3, #3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	f002 feb3 	bl	801112e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e3d4:	4809      	ldr	r0, [pc, #36]	@ (800e3fc <hci_send_req+0x104>)
 800e3d6:	f000 fca1 	bl	800ed1c <LST_is_empty>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d0b5      	beq.n	800e34c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e3e0:	7ffb      	ldrb	r3, [r7, #31]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d0ad      	beq.n	800e342 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e3e6:	2001      	movs	r0, #1
 800e3e8:	f000 f860 	bl	800e4ac <NotifyCmdStatus>

  return 0;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3720      	adds	r7, #32
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	2000087c 	.word	0x2000087c
 800e3fc:	20000870 	.word	0x20000870

0800e400 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e408:	480f      	ldr	r0, [pc, #60]	@ (800e448 <TlInit+0x48>)
 800e40a:	f000 fc77 	bl	800ecfc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e40e:	4a0f      	ldr	r2, [pc, #60]	@ (800e44c <TlInit+0x4c>)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e414:	480e      	ldr	r0, [pc, #56]	@ (800e450 <TlInit+0x50>)
 800e416:	f000 fc71 	bl	800ecfc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e41a:	4b0e      	ldr	r3, [pc, #56]	@ (800e454 <TlInit+0x54>)
 800e41c:	2201      	movs	r2, #1
 800e41e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e420:	4b0d      	ldr	r3, [pc, #52]	@ (800e458 <TlInit+0x58>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00a      	beq.n	800e43e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e42c:	4b0b      	ldr	r3, [pc, #44]	@ (800e45c <TlInit+0x5c>)
 800e42e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e430:	4b09      	ldr	r3, [pc, #36]	@ (800e458 <TlInit+0x58>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f107 0208 	add.w	r2, r7, #8
 800e438:	4610      	mov	r0, r2
 800e43a:	4798      	blx	r3
  }

  return;
 800e43c:	bf00      	nop
 800e43e:	bf00      	nop
}
 800e440:	3718      	adds	r7, #24
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20000870 	.word	0x20000870
 800e44c:	2000019c 	.word	0x2000019c
 800e450:	20000194 	.word	0x20000194
 800e454:	200001a0 	.word	0x200001a0
 800e458:	20000850 	.word	0x20000850
 800e45c:	0800e4ed 	.word	0x0800e4ed

0800e460 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	4603      	mov	r3, r0
 800e468:	603a      	str	r2, [r7, #0]
 800e46a:	80fb      	strh	r3, [r7, #6]
 800e46c:	460b      	mov	r3, r1
 800e46e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e470:	4b0c      	ldr	r3, [pc, #48]	@ (800e4a4 <SendCmd+0x44>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	88fa      	ldrh	r2, [r7, #6]
 800e476:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e47a:	4b0a      	ldr	r3, [pc, #40]	@ (800e4a4 <SendCmd+0x44>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	797a      	ldrb	r2, [r7, #5]
 800e480:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e482:	4b08      	ldr	r3, [pc, #32]	@ (800e4a4 <SendCmd+0x44>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	330c      	adds	r3, #12
 800e488:	797a      	ldrb	r2, [r7, #5]
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f002 fe4e 	bl	801112e <memcpy>

  hciContext.io.Send(0,0);
 800e492:	4b05      	ldr	r3, [pc, #20]	@ (800e4a8 <SendCmd+0x48>)
 800e494:	691b      	ldr	r3, [r3, #16]
 800e496:	2100      	movs	r1, #0
 800e498:	2000      	movs	r0, #0
 800e49a:	4798      	blx	r3

  return;
 800e49c:	bf00      	nop
}
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	2000019c 	.word	0x2000019c
 800e4a8:	20000850 	.word	0x20000850

0800e4ac <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d108      	bne.n	800e4ce <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e8 <NotifyCmdStatus+0x3c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00d      	beq.n	800e4e0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e4c4:	4b08      	ldr	r3, [pc, #32]	@ (800e4e8 <NotifyCmdStatus+0x3c>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e4cc:	e008      	b.n	800e4e0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e4ce:	4b06      	ldr	r3, [pc, #24]	@ (800e4e8 <NotifyCmdStatus+0x3c>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d004      	beq.n	800e4e0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e4d6:	4b04      	ldr	r3, [pc, #16]	@ (800e4e8 <NotifyCmdStatus+0x3c>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2001      	movs	r0, #1
 800e4dc:	4798      	blx	r3
  return;
 800e4de:	bf00      	nop
 800e4e0:	bf00      	nop
}
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	20000878 	.word	0x20000878

0800e4ec <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	7a5b      	ldrb	r3, [r3, #9]
 800e4f8:	2b0f      	cmp	r3, #15
 800e4fa:	d003      	beq.n	800e504 <TlEvtReceived+0x18>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	7a5b      	ldrb	r3, [r3, #9]
 800e500:	2b0e      	cmp	r3, #14
 800e502:	d107      	bne.n	800e514 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e504:	6879      	ldr	r1, [r7, #4]
 800e506:	4809      	ldr	r0, [pc, #36]	@ (800e52c <TlEvtReceived+0x40>)
 800e508:	f000 fc50 	bl	800edac <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e50c:	2000      	movs	r0, #0
 800e50e:	f001 fbeb 	bl	800fce8 <hci_cmd_resp_release>
 800e512:	e006      	b.n	800e522 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e514:	6879      	ldr	r1, [r7, #4]
 800e516:	4806      	ldr	r0, [pc, #24]	@ (800e530 <TlEvtReceived+0x44>)
 800e518:	f000 fc48 	bl	800edac <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e51c:	4804      	ldr	r0, [pc, #16]	@ (800e530 <TlEvtReceived+0x44>)
 800e51e:	f001 fbd7 	bl	800fcd0 <hci_notify_asynch_evt>
  }

  return;
 800e522:	bf00      	nop
}
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	20000870 	.word	0x20000870
 800e530:	20000194 	.word	0x20000194

0800e534 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a05      	ldr	r2, [pc, #20]	@ (800e554 <hci_register_io_bus+0x20>)
 800e540:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4a04      	ldr	r2, [pc, #16]	@ (800e558 <hci_register_io_bus+0x24>)
 800e546:	611a      	str	r2, [r3, #16]

  return;
 800e548:	bf00      	nop
}
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	0800e84d 	.word	0x0800e84d
 800e558:	0800e8b5 	.word	0x0800e8b5

0800e55c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	4a08      	ldr	r2, [pc, #32]	@ (800e58c <shci_init+0x30>)
 800e56c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e56e:	4a08      	ldr	r2, [pc, #32]	@ (800e590 <shci_init+0x34>)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e574:	4806      	ldr	r0, [pc, #24]	@ (800e590 <shci_init+0x34>)
 800e576:	f000 f915 	bl	800e7a4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 f898 	bl	800e6b4 <TlInit>

  return;
 800e584:	bf00      	nop
}
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	200008a0 	.word	0x200008a0
 800e590:	20000880 	.word	0x20000880

0800e594 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e59a:	4822      	ldr	r0, [pc, #136]	@ (800e624 <shci_user_evt_proc+0x90>)
 800e59c:	f000 fbbe 	bl	800ed1c <LST_is_empty>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d12b      	bne.n	800e5fe <shci_user_evt_proc+0x6a>
 800e5a6:	4b20      	ldr	r3, [pc, #128]	@ (800e628 <shci_user_evt_proc+0x94>)
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d027      	beq.n	800e5fe <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e5ae:	f107 030c 	add.w	r3, r7, #12
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	481b      	ldr	r0, [pc, #108]	@ (800e624 <shci_user_evt_proc+0x90>)
 800e5b6:	f000 fc40 	bl	800ee3a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e5ba:	4b1c      	ldr	r3, [pc, #112]	@ (800e62c <shci_user_evt_proc+0x98>)
 800e5bc:	69db      	ldr	r3, [r3, #28]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00c      	beq.n	800e5dc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e5ca:	4b18      	ldr	r3, [pc, #96]	@ (800e62c <shci_user_evt_proc+0x98>)
 800e5cc:	69db      	ldr	r3, [r3, #28]
 800e5ce:	1d3a      	adds	r2, r7, #4
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e5d4:	793a      	ldrb	r2, [r7, #4]
 800e5d6:	4b14      	ldr	r3, [pc, #80]	@ (800e628 <shci_user_evt_proc+0x94>)
 800e5d8:	701a      	strb	r2, [r3, #0]
 800e5da:	e002      	b.n	800e5e2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e5dc:	4b12      	ldr	r3, [pc, #72]	@ (800e628 <shci_user_evt_proc+0x94>)
 800e5de:	2201      	movs	r2, #1
 800e5e0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e5e2:	4b11      	ldr	r3, [pc, #68]	@ (800e628 <shci_user_evt_proc+0x94>)
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d004      	beq.n	800e5f4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f000 fa71 	bl	800ead4 <TL_MM_EvtDone>
 800e5f2:	e004      	b.n	800e5fe <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	480a      	ldr	r0, [pc, #40]	@ (800e624 <shci_user_evt_proc+0x90>)
 800e5fa:	f000 fbb1 	bl	800ed60 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e5fe:	4809      	ldr	r0, [pc, #36]	@ (800e624 <shci_user_evt_proc+0x90>)
 800e600:	f000 fb8c 	bl	800ed1c <LST_is_empty>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d107      	bne.n	800e61a <shci_user_evt_proc+0x86>
 800e60a:	4b07      	ldr	r3, [pc, #28]	@ (800e628 <shci_user_evt_proc+0x94>)
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d003      	beq.n	800e61a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e612:	4804      	ldr	r0, [pc, #16]	@ (800e624 <shci_user_evt_proc+0x90>)
 800e614:	f7f3 fb0f 	bl	8001c36 <shci_notify_asynch_evt>
  }


  return;
 800e618:	bf00      	nop
 800e61a:	bf00      	nop
}
 800e61c:	3710      	adds	r7, #16
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	200001a4 	.word	0x200001a4
 800e628:	200001b4 	.word	0x200001b4
 800e62c:	20000880 	.word	0x20000880

0800e630 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	60ba      	str	r2, [r7, #8]
 800e638:	607b      	str	r3, [r7, #4]
 800e63a:	4603      	mov	r3, r0
 800e63c:	81fb      	strh	r3, [r7, #14]
 800e63e:	460b      	mov	r3, r1
 800e640:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e642:	2000      	movs	r0, #0
 800e644:	f000 f868 	bl	800e718 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e648:	4b17      	ldr	r3, [pc, #92]	@ (800e6a8 <shci_send+0x78>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	89fa      	ldrh	r2, [r7, #14]
 800e64e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e652:	4b15      	ldr	r3, [pc, #84]	@ (800e6a8 <shci_send+0x78>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	7b7a      	ldrb	r2, [r7, #13]
 800e658:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e65a:	4b13      	ldr	r3, [pc, #76]	@ (800e6a8 <shci_send+0x78>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	330c      	adds	r3, #12
 800e660:	7b7a      	ldrb	r2, [r7, #13]
 800e662:	68b9      	ldr	r1, [r7, #8]
 800e664:	4618      	mov	r0, r3
 800e666:	f002 fd62 	bl	801112e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e66a:	4b10      	ldr	r3, [pc, #64]	@ (800e6ac <shci_send+0x7c>)
 800e66c:	2201      	movs	r2, #1
 800e66e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e670:	4b0f      	ldr	r3, [pc, #60]	@ (800e6b0 <shci_send+0x80>)
 800e672:	691b      	ldr	r3, [r3, #16]
 800e674:	2100      	movs	r1, #0
 800e676:	2000      	movs	r0, #0
 800e678:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e67a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e67e:	f7f3 faf1 	bl	8001c64 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f103 0008 	add.w	r0, r3, #8
 800e688:	4b07      	ldr	r3, [pc, #28]	@ (800e6a8 <shci_send+0x78>)
 800e68a:	6819      	ldr	r1, [r3, #0]
 800e68c:	4b06      	ldr	r3, [pc, #24]	@ (800e6a8 <shci_send+0x78>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	789b      	ldrb	r3, [r3, #2]
 800e692:	3303      	adds	r3, #3
 800e694:	461a      	mov	r2, r3
 800e696:	f002 fd4a 	bl	801112e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e69a:	2001      	movs	r0, #1
 800e69c:	f000 f83c 	bl	800e718 <Cmd_SetStatus>

  return;
 800e6a0:	bf00      	nop
}
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	200001b0 	.word	0x200001b0
 800e6ac:	200008a4 	.word	0x200008a4
 800e6b0:	20000880 	.word	0x20000880

0800e6b4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e6bc:	4a10      	ldr	r2, [pc, #64]	@ (800e700 <TlInit+0x4c>)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e6c2:	4810      	ldr	r0, [pc, #64]	@ (800e704 <TlInit+0x50>)
 800e6c4:	f000 fb1a 	bl	800ecfc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	f000 f825 	bl	800e718 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e6ce:	4b0e      	ldr	r3, [pc, #56]	@ (800e708 <TlInit+0x54>)
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e6d4:	4b0d      	ldr	r3, [pc, #52]	@ (800e70c <TlInit+0x58>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00c      	beq.n	800e6f6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e6e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e710 <TlInit+0x5c>)
 800e6e2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e6e4:	4b0b      	ldr	r3, [pc, #44]	@ (800e714 <TlInit+0x60>)
 800e6e6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e6e8:	4b08      	ldr	r3, [pc, #32]	@ (800e70c <TlInit+0x58>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f107 020c 	add.w	r2, r7, #12
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	4798      	blx	r3
  }

  return;
 800e6f4:	bf00      	nop
 800e6f6:	bf00      	nop
}
 800e6f8:	3718      	adds	r7, #24
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	200001b0 	.word	0x200001b0
 800e704:	200001a4 	.word	0x200001a4
 800e708:	200001b4 	.word	0x200001b4
 800e70c:	20000880 	.word	0x20000880
 800e710:	0800e769 	.word	0x0800e769
 800e714:	0800e781 	.word	0x0800e781

0800e718 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	4603      	mov	r3, r0
 800e720:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e722:	79fb      	ldrb	r3, [r7, #7]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10b      	bne.n	800e740 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e728:	4b0d      	ldr	r3, [pc, #52]	@ (800e760 <Cmd_SetStatus+0x48>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d003      	beq.n	800e738 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e730:	4b0b      	ldr	r3, [pc, #44]	@ (800e760 <Cmd_SetStatus+0x48>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2000      	movs	r0, #0
 800e736:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e738:	4b0a      	ldr	r3, [pc, #40]	@ (800e764 <Cmd_SetStatus+0x4c>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e73e:	e00b      	b.n	800e758 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e740:	4b08      	ldr	r3, [pc, #32]	@ (800e764 <Cmd_SetStatus+0x4c>)
 800e742:	2201      	movs	r2, #1
 800e744:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e746:	4b06      	ldr	r3, [pc, #24]	@ (800e760 <Cmd_SetStatus+0x48>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d004      	beq.n	800e758 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e74e:	4b04      	ldr	r3, [pc, #16]	@ (800e760 <Cmd_SetStatus+0x48>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2001      	movs	r0, #1
 800e754:	4798      	blx	r3
  return;
 800e756:	bf00      	nop
 800e758:	bf00      	nop
}
 800e75a:	3708      	adds	r7, #8
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	200008a0 	.word	0x200008a0
 800e764:	200001ac 	.word	0x200001ac

0800e768 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e770:	2000      	movs	r0, #0
 800e772:	f7f3 fa6c 	bl	8001c4e <shci_cmd_resp_release>

  return;
 800e776:	bf00      	nop
}
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
	...

0800e780 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e788:	6879      	ldr	r1, [r7, #4]
 800e78a:	4805      	ldr	r0, [pc, #20]	@ (800e7a0 <TlUserEvtReceived+0x20>)
 800e78c:	f000 fb0e 	bl	800edac <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e790:	4803      	ldr	r0, [pc, #12]	@ (800e7a0 <TlUserEvtReceived+0x20>)
 800e792:	f7f3 fa50 	bl	8001c36 <shci_notify_asynch_evt>

  return;
 800e796:	bf00      	nop
}
 800e798:	3708      	adds	r7, #8
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	200001a4 	.word	0x200001a4

0800e7a4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4a05      	ldr	r2, [pc, #20]	@ (800e7c4 <shci_register_io_bus+0x20>)
 800e7b0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4a04      	ldr	r2, [pc, #16]	@ (800e7c8 <shci_register_io_bus+0x24>)
 800e7b6:	611a      	str	r2, [r3, #16]

  return;
 800e7b8:	bf00      	nop
}
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr
 800e7c4:	0800e961 	.word	0x0800e961
 800e7c8:	0800e9b5 	.word	0x0800e9b5

0800e7cc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e7d0:	f001 febc 	bl	801054c <HW_IPCC_Enable>

  return;
 800e7d4:	bf00      	nop
}
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <TL_Init>:


void TL_Init( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e7dc:	4b10      	ldr	r3, [pc, #64]	@ (800e820 <TL_Init+0x48>)
 800e7de:	4a11      	ldr	r2, [pc, #68]	@ (800e824 <TL_Init+0x4c>)
 800e7e0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e7e2:	4b0f      	ldr	r3, [pc, #60]	@ (800e820 <TL_Init+0x48>)
 800e7e4:	4a10      	ldr	r2, [pc, #64]	@ (800e828 <TL_Init+0x50>)
 800e7e6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e7e8:	4b0d      	ldr	r3, [pc, #52]	@ (800e820 <TL_Init+0x48>)
 800e7ea:	4a10      	ldr	r2, [pc, #64]	@ (800e82c <TL_Init+0x54>)
 800e7ec:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e820 <TL_Init+0x48>)
 800e7f0:	4a0f      	ldr	r2, [pc, #60]	@ (800e830 <TL_Init+0x58>)
 800e7f2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e7f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e820 <TL_Init+0x48>)
 800e7f6:	4a0f      	ldr	r2, [pc, #60]	@ (800e834 <TL_Init+0x5c>)
 800e7f8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e7fa:	4b09      	ldr	r3, [pc, #36]	@ (800e820 <TL_Init+0x48>)
 800e7fc:	4a0e      	ldr	r2, [pc, #56]	@ (800e838 <TL_Init+0x60>)
 800e7fe:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e800:	4b07      	ldr	r3, [pc, #28]	@ (800e820 <TL_Init+0x48>)
 800e802:	4a0e      	ldr	r2, [pc, #56]	@ (800e83c <TL_Init+0x64>)
 800e804:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e806:	4b06      	ldr	r3, [pc, #24]	@ (800e820 <TL_Init+0x48>)
 800e808:	4a0d      	ldr	r2, [pc, #52]	@ (800e840 <TL_Init+0x68>)
 800e80a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e80c:	4b04      	ldr	r3, [pc, #16]	@ (800e820 <TL_Init+0x48>)
 800e80e:	4a0d      	ldr	r2, [pc, #52]	@ (800e844 <TL_Init+0x6c>)
 800e810:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e812:	4b03      	ldr	r3, [pc, #12]	@ (800e820 <TL_Init+0x48>)
 800e814:	4a0c      	ldr	r2, [pc, #48]	@ (800e848 <TL_Init+0x70>)
 800e816:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e818:	f001 feac 	bl	8010574 <HW_IPCC_Init>

  return;
 800e81c:	bf00      	nop
}
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	20030000 	.word	0x20030000
 800e824:	20030028 	.word	0x20030028
 800e828:	20030048 	.word	0x20030048
 800e82c:	20030058 	.word	0x20030058
 800e830:	20030068 	.word	0x20030068
 800e834:	20030070 	.word	0x20030070
 800e838:	20030078 	.word	0x20030078
 800e83c:	20030080 	.word	0x20030080
 800e840:	2003009c 	.word	0x2003009c
 800e844:	200300a0 	.word	0x200300a0
 800e848:	200300ac 	.word	0x200300ac

0800e84c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e858:	4811      	ldr	r0, [pc, #68]	@ (800e8a0 <TL_BLE_Init+0x54>)
 800e85a:	f000 fa4f 	bl	800ecfc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e85e:	4b11      	ldr	r3, [pc, #68]	@ (800e8a4 <TL_BLE_Init+0x58>)
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	689a      	ldr	r2, [r3, #8]
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	68da      	ldr	r2, [r3, #12]
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	4a0c      	ldr	r2, [pc, #48]	@ (800e8a8 <TL_BLE_Init+0x5c>)
 800e878:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	4a08      	ldr	r2, [pc, #32]	@ (800e8a0 <TL_BLE_Init+0x54>)
 800e87e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e880:	f001 fe8e 	bl	80105a0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a08      	ldr	r2, [pc, #32]	@ (800e8ac <TL_BLE_Init+0x60>)
 800e88a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	4a07      	ldr	r2, [pc, #28]	@ (800e8b0 <TL_BLE_Init+0x64>)
 800e892:	6013      	str	r3, [r2, #0]

  return 0;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	200300c8 	.word	0x200300c8
 800e8a4:	20030000 	.word	0x20030000
 800e8a8:	20030a58 	.word	0x20030a58
 800e8ac:	200008b0 	.word	0x200008b0
 800e8b0:	200008b4 	.word	0x200008b4

0800e8b4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e8c0:	4b09      	ldr	r3, [pc, #36]	@ (800e8e8 <TL_BLE_SendCmd+0x34>)
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e8ca:	4b07      	ldr	r3, [pc, #28]	@ (800e8e8 <TL_BLE_SendCmd+0x34>)
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	2001      	movs	r0, #1
 800e8d4:	f000 f96c 	bl	800ebb0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e8d8:	f001 fe6c 	bl	80105b4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20030000 	.word	0x20030000

0800e8ec <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e8f2:	e01c      	b.n	800e92e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e8f4:	1d3b      	adds	r3, r7, #4
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	4812      	ldr	r0, [pc, #72]	@ (800e944 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e8fa:	f000 fa9e 	bl	800ee3a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	7a5b      	ldrb	r3, [r3, #9]
 800e902:	2b0f      	cmp	r3, #15
 800e904:	d003      	beq.n	800e90e <HW_IPCC_BLE_RxEvtNot+0x22>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	7a5b      	ldrb	r3, [r3, #9]
 800e90a:	2b0e      	cmp	r3, #14
 800e90c:	d105      	bne.n	800e91a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4619      	mov	r1, r3
 800e912:	2002      	movs	r0, #2
 800e914:	f000 f94c 	bl	800ebb0 <OutputDbgTrace>
 800e918:	e004      	b.n	800e924 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4619      	mov	r1, r3
 800e91e:	2003      	movs	r0, #3
 800e920:	f000 f946 	bl	800ebb0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e924:	4b08      	ldr	r3, [pc, #32]	@ (800e948 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4610      	mov	r0, r2
 800e92c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e92e:	4805      	ldr	r0, [pc, #20]	@ (800e944 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e930:	f000 f9f4 	bl	800ed1c <LST_is_empty>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d0dc      	beq.n	800e8f4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e93a:	bf00      	nop
}
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	200300c8 	.word	0x200300c8
 800e948:	200008b0 	.word	0x200008b0

0800e94c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e950:	4b02      	ldr	r3, [pc, #8]	@ (800e95c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4798      	blx	r3

  return;
 800e956:	bf00      	nop
}
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	200008b4 	.word	0x200008b4

0800e960 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e96c:	480d      	ldr	r0, [pc, #52]	@ (800e9a4 <TL_SYS_Init+0x44>)
 800e96e:	f000 f9c5 	bl	800ecfc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e972:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a8 <TL_SYS_Init+0x48>)
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	689a      	ldr	r2, [r3, #8]
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	4a08      	ldr	r2, [pc, #32]	@ (800e9a4 <TL_SYS_Init+0x44>)
 800e984:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e986:	f001 fe37 	bl	80105f8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a07      	ldr	r2, [pc, #28]	@ (800e9ac <TL_SYS_Init+0x4c>)
 800e990:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	4a06      	ldr	r2, [pc, #24]	@ (800e9b0 <TL_SYS_Init+0x50>)
 800e998:	6013      	str	r3, [r2, #0]

  return 0;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	200300d0 	.word	0x200300d0
 800e9a8:	20030000 	.word	0x20030000
 800e9ac:	200008b8 	.word	0x200008b8
 800e9b0:	200008bc 	.word	0x200008bc

0800e9b4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e9c0:	4b09      	ldr	r3, [pc, #36]	@ (800e9e8 <TL_SYS_SendCmd+0x34>)
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2210      	movs	r2, #16
 800e9c8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e9ca:	4b07      	ldr	r3, [pc, #28]	@ (800e9e8 <TL_SYS_SendCmd+0x34>)
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	2004      	movs	r0, #4
 800e9d4:	f000 f8ec 	bl	800ebb0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e9d8:	f001 fe18 	bl	801060c <HW_IPCC_SYS_SendCmd>

  return 0;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	20030000 	.word	0x20030000

0800e9ec <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e9f0:	4b07      	ldr	r3, [pc, #28]	@ (800ea10 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	2005      	movs	r0, #5
 800e9fa:	f000 f8d9 	bl	800ebb0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e9fe:	4b05      	ldr	r3, [pc, #20]	@ (800ea14 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a03      	ldr	r2, [pc, #12]	@ (800ea10 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ea04:	68d2      	ldr	r2, [r2, #12]
 800ea06:	6812      	ldr	r2, [r2, #0]
 800ea08:	4610      	mov	r0, r2
 800ea0a:	4798      	blx	r3

  return;
 800ea0c:	bf00      	nop
}
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	20030000 	.word	0x20030000
 800ea14:	200008b8 	.word	0x200008b8

0800ea18 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ea1e:	e00e      	b.n	800ea3e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ea20:	1d3b      	adds	r3, r7, #4
 800ea22:	4619      	mov	r1, r3
 800ea24:	480b      	ldr	r0, [pc, #44]	@ (800ea54 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ea26:	f000 fa08 	bl	800ee3a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	2006      	movs	r0, #6
 800ea30:	f000 f8be 	bl	800ebb0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ea34:	4b08      	ldr	r3, [pc, #32]	@ (800ea58 <HW_IPCC_SYS_EvtNot+0x40>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	4610      	mov	r0, r2
 800ea3c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ea3e:	4805      	ldr	r0, [pc, #20]	@ (800ea54 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ea40:	f000 f96c 	bl	800ed1c <LST_is_empty>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d0ea      	beq.n	800ea20 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ea4a:	bf00      	nop
}
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	200300d0 	.word	0x200300d0
 800ea58:	200008bc 	.word	0x200008bc

0800ea5c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ea64:	4817      	ldr	r0, [pc, #92]	@ (800eac4 <TL_MM_Init+0x68>)
 800ea66:	f000 f949 	bl	800ecfc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ea6a:	4817      	ldr	r0, [pc, #92]	@ (800eac8 <TL_MM_Init+0x6c>)
 800ea6c:	f000 f946 	bl	800ecfc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ea70:	4b16      	ldr	r3, [pc, #88]	@ (800eacc <TL_MM_Init+0x70>)
 800ea72:	691b      	ldr	r3, [r3, #16]
 800ea74:	4a16      	ldr	r2, [pc, #88]	@ (800ead0 <TL_MM_Init+0x74>)
 800ea76:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ea78:	4b15      	ldr	r3, [pc, #84]	@ (800ead0 <TL_MM_Init+0x74>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	6892      	ldr	r2, [r2, #8]
 800ea80:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ea82:	4b13      	ldr	r3, [pc, #76]	@ (800ead0 <TL_MM_Init+0x74>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	68d2      	ldr	r2, [r2, #12]
 800ea8a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ea8c:	4b10      	ldr	r3, [pc, #64]	@ (800ead0 <TL_MM_Init+0x74>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a0c      	ldr	r2, [pc, #48]	@ (800eac4 <TL_MM_Init+0x68>)
 800ea92:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ea94:	4b0e      	ldr	r3, [pc, #56]	@ (800ead0 <TL_MM_Init+0x74>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	6812      	ldr	r2, [r2, #0]
 800ea9c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ea9e:	4b0c      	ldr	r3, [pc, #48]	@ (800ead0 <TL_MM_Init+0x74>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	6852      	ldr	r2, [r2, #4]
 800eaa6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800eaa8:	4b09      	ldr	r3, [pc, #36]	@ (800ead0 <TL_MM_Init+0x74>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	6912      	ldr	r2, [r2, #16]
 800eab0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800eab2:	4b07      	ldr	r3, [pc, #28]	@ (800ead0 <TL_MM_Init+0x74>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	6952      	ldr	r2, [r2, #20]
 800eaba:	619a      	str	r2, [r3, #24]

  return;
 800eabc:	bf00      	nop
}
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	200300b8 	.word	0x200300b8
 800eac8:	200008a8 	.word	0x200008a8
 800eacc:	20030000 	.word	0x20030000
 800ead0:	200008c0 	.word	0x200008c0

0800ead4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800eadc:	6879      	ldr	r1, [r7, #4]
 800eade:	4807      	ldr	r0, [pc, #28]	@ (800eafc <TL_MM_EvtDone+0x28>)
 800eae0:	f000 f964 	bl	800edac <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800eae4:	6879      	ldr	r1, [r7, #4]
 800eae6:	2000      	movs	r0, #0
 800eae8:	f000 f862 	bl	800ebb0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800eaec:	4804      	ldr	r0, [pc, #16]	@ (800eb00 <TL_MM_EvtDone+0x2c>)
 800eaee:	f001 fdb3 	bl	8010658 <HW_IPCC_MM_SendFreeBuf>

  return;
 800eaf2:	bf00      	nop
}
 800eaf4:	3708      	adds	r7, #8
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	200008a8 	.word	0x200008a8
 800eb00:	0800eb05 	.word	0x0800eb05

0800eb04 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eb0a:	e00c      	b.n	800eb26 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800eb0c:	1d3b      	adds	r3, r7, #4
 800eb0e:	4619      	mov	r1, r3
 800eb10:	480a      	ldr	r0, [pc, #40]	@ (800eb3c <SendFreeBuf+0x38>)
 800eb12:	f000 f992 	bl	800ee3a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800eb16:	4b0a      	ldr	r3, [pc, #40]	@ (800eb40 <SendFreeBuf+0x3c>)
 800eb18:	691b      	ldr	r3, [r3, #16]
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	4611      	mov	r1, r2
 800eb20:	4618      	mov	r0, r3
 800eb22:	f000 f943 	bl	800edac <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eb26:	4805      	ldr	r0, [pc, #20]	@ (800eb3c <SendFreeBuf+0x38>)
 800eb28:	f000 f8f8 	bl	800ed1c <LST_is_empty>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d0ec      	beq.n	800eb0c <SendFreeBuf+0x8>
  }

  return;
 800eb32:	bf00      	nop
}
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	200008a8 	.word	0x200008a8
 800eb40:	20030000 	.word	0x20030000

0800eb44 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800eb48:	4805      	ldr	r0, [pc, #20]	@ (800eb60 <TL_TRACES_Init+0x1c>)
 800eb4a:	f000 f8d7 	bl	800ecfc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800eb4e:	4b05      	ldr	r3, [pc, #20]	@ (800eb64 <TL_TRACES_Init+0x20>)
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	4a03      	ldr	r2, [pc, #12]	@ (800eb60 <TL_TRACES_Init+0x1c>)
 800eb54:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800eb56:	f001 fdb5 	bl	80106c4 <HW_IPCC_TRACES_Init>

  return;
 800eb5a:	bf00      	nop
}
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	200300c0 	.word	0x200300c0
 800eb64:	20030000 	.word	0x20030000

0800eb68 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eb6e:	e008      	b.n	800eb82 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800eb70:	1d3b      	adds	r3, r7, #4
 800eb72:	4619      	mov	r1, r3
 800eb74:	4808      	ldr	r0, [pc, #32]	@ (800eb98 <HW_IPCC_TRACES_EvtNot+0x30>)
 800eb76:	f000 f960 	bl	800ee3a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f000 f80d 	bl	800eb9c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eb82:	4805      	ldr	r0, [pc, #20]	@ (800eb98 <HW_IPCC_TRACES_EvtNot+0x30>)
 800eb84:	f000 f8ca 	bl	800ed1c <LST_is_empty>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d0f0      	beq.n	800eb70 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800eb8e:	bf00      	nop
}
 800eb90:	3708      	adds	r7, #8
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	200300c0 	.word	0x200300c0

0800eb9c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	6039      	str	r1, [r7, #0]
 800ebba:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ebbc:	79fb      	ldrb	r3, [r7, #7]
 800ebbe:	2b06      	cmp	r3, #6
 800ebc0:	d845      	bhi.n	800ec4e <OutputDbgTrace+0x9e>
 800ebc2:	a201      	add	r2, pc, #4	@ (adr r2, 800ebc8 <OutputDbgTrace+0x18>)
 800ebc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc8:	0800ebe5 	.word	0x0800ebe5
 800ebcc:	0800ec09 	.word	0x0800ec09
 800ebd0:	0800ec0f 	.word	0x0800ec0f
 800ebd4:	0800ec23 	.word	0x0800ec23
 800ebd8:	0800ec2f 	.word	0x0800ec2f
 800ebdc:	0800ec35 	.word	0x0800ec35
 800ebe0:	0800ec43 	.word	0x0800ec43
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	7a5b      	ldrb	r3, [r3, #9]
 800ebec:	2bff      	cmp	r3, #255	@ 0xff
 800ebee:	d005      	beq.n	800ebfc <OutputDbgTrace+0x4c>
 800ebf0:	2bff      	cmp	r3, #255	@ 0xff
 800ebf2:	dc05      	bgt.n	800ec00 <OutputDbgTrace+0x50>
 800ebf4:	2b0e      	cmp	r3, #14
 800ebf6:	d005      	beq.n	800ec04 <OutputDbgTrace+0x54>
 800ebf8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ebfa:	e001      	b.n	800ec00 <OutputDbgTrace+0x50>
          break;
 800ebfc:	bf00      	nop
 800ebfe:	e027      	b.n	800ec50 <OutputDbgTrace+0xa0>
          break;
 800ec00:	bf00      	nop
 800ec02:	e025      	b.n	800ec50 <OutputDbgTrace+0xa0>
          break;
 800ec04:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ec06:	e023      	b.n	800ec50 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ec0c:	e020      	b.n	800ec50 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	7a5b      	ldrb	r3, [r3, #9]
 800ec16:	2b0e      	cmp	r3, #14
 800ec18:	d001      	beq.n	800ec1e <OutputDbgTrace+0x6e>
 800ec1a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ec1c:	e000      	b.n	800ec20 <OutputDbgTrace+0x70>
          break;
 800ec1e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec20:	e016      	b.n	800ec50 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	7a5b      	ldrb	r3, [r3, #9]
 800ec2a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec2c:	e010      	b.n	800ec50 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ec32:	e00d      	b.n	800ec50 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	7a5b      	ldrb	r3, [r3, #9]
 800ec3c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ec3e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec40:	e006      	b.n	800ec50 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	7a5b      	ldrb	r3, [r3, #9]
 800ec4a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec4c:	e000      	b.n	800ec50 <OutputDbgTrace+0xa0>

    default:
      break;
 800ec4e:	bf00      	nop
  }

  return;
 800ec50:	bf00      	nop
}
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800ec68:	215c      	movs	r1, #92	@ 0x5c
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f002 f9d6 	bl	801101c <strrchr>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d007      	beq.n	800ec86 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800ec76:	215c      	movs	r1, #92	@ 0x5c
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f002 f9cf 	bl	801101c <strrchr>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	3301      	adds	r3, #1
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	e00d      	b.n	800eca2 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800ec86:	212f      	movs	r1, #47	@ 0x2f
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f002 f9c7 	bl	801101c <strrchr>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d006      	beq.n	800eca2 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800ec94:	212f      	movs	r1, #47	@ 0x2f
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f002 f9c0 	bl	801101c <strrchr>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	3301      	adds	r3, #1
 800eca0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800eca2:	68fb      	ldr	r3, [r7, #12]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ecac:	b480      	push	{r7}
 800ecae:	b085      	sub	sp, #20
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ecb6:	4b0f      	ldr	r3, [pc, #60]	@ (800ecf4 <OTP_Read+0x48>)
 800ecb8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ecba:	e002      	b.n	800ecc2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3b08      	subs	r3, #8
 800ecc0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	3307      	adds	r3, #7
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	79fa      	ldrb	r2, [r7, #7]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d003      	beq.n	800ecd6 <OTP_Read+0x2a>
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	4a09      	ldr	r2, [pc, #36]	@ (800ecf8 <OTP_Read+0x4c>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d1f2      	bne.n	800ecbc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	3307      	adds	r3, #7
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	79fa      	ldrb	r2, [r7, #7]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d001      	beq.n	800ece6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ece2:	2300      	movs	r3, #0
 800ece4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ece6:	68fb      	ldr	r3, [r7, #12]
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3714      	adds	r7, #20
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr
 800ecf4:	1fff73f8 	.word	0x1fff73f8
 800ecf8:	1fff7000 	.word	0x1fff7000

0800ecfc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	605a      	str	r2, [r3, #4]
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b087      	sub	sp, #28
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed24:	f3ef 8310 	mrs	r3, PRIMASK
 800ed28:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ed2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed2e:	b672      	cpsid	i
}
 800ed30:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d102      	bne.n	800ed42 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	75fb      	strb	r3, [r7, #23]
 800ed40:	e001      	b.n	800ed46 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ed42:	2300      	movs	r3, #0
 800ed44:	75fb      	strb	r3, [r7, #23]
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	f383 8810 	msr	PRIMASK, r3
}
 800ed50:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ed52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	371c      	adds	r7, #28
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b087      	sub	sp, #28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ed6e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed70:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ed72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed74:	b672      	cpsid	i
}
 800ed76:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	683a      	ldr	r2, [r7, #0]
 800ed8a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	605a      	str	r2, [r3, #4]
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	f383 8810 	msr	PRIMASK, r3
}
 800ed9e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800eda0:	bf00      	nop
 800eda2:	371c      	adds	r7, #28
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800edac:	b480      	push	{r7}
 800edae:	b087      	sub	sp, #28
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edb6:	f3ef 8310 	mrs	r3, PRIMASK
 800edba:	60fb      	str	r3, [r7, #12]
  return(result);
 800edbc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800edbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800edc0:	b672      	cpsid	i
}
 800edc2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	683a      	ldr	r2, [r7, #0]
 800edd6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	683a      	ldr	r2, [r7, #0]
 800edde:	601a      	str	r2, [r3, #0]
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	f383 8810 	msr	PRIMASK, r3
}
 800edea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800edec:	bf00      	nop
 800edee:	371c      	adds	r7, #28
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b087      	sub	sp, #28
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee00:	f3ef 8310 	mrs	r3, PRIMASK
 800ee04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee06:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee0a:	b672      	cpsid	i
}
 800ee0c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	6812      	ldr	r2, [r2, #0]
 800ee16:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	6852      	ldr	r2, [r2, #4]
 800ee20:	605a      	str	r2, [r3, #4]
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	f383 8810 	msr	PRIMASK, r3
}
 800ee2c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee2e:	bf00      	nop
 800ee30:	371c      	adds	r7, #28
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr

0800ee3a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b086      	sub	sp, #24
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
 800ee42:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee44:	f3ef 8310 	mrs	r3, PRIMASK
 800ee48:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee4e:	b672      	cpsid	i
}
 800ee50:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7ff ffca 	bl	800edf8 <LST_remove_node>
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	f383 8810 	msr	PRIMASK, r3
}
 800ee6e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee70:	bf00      	nop
 800ee72:	3718      	adds	r7, #24
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800ee7c:	4b03      	ldr	r3, [pc, #12]	@ (800ee8c <LL_FLASH_GetUDN+0x14>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	1fff7580 	.word	0x1fff7580

0800ee90 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800ee90:	b480      	push	{r7}
 800ee92:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800ee94:	4b03      	ldr	r3, [pc, #12]	@ (800eea4 <LL_FLASH_GetDeviceID+0x14>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	b2db      	uxtb	r3, r3
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr
 800eea4:	1fff7584 	.word	0x1fff7584

0800eea8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800eeac:	4b03      	ldr	r3, [pc, #12]	@ (800eebc <LL_FLASH_GetSTCompanyID+0x14>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	0a1b      	lsrs	r3, r3, #8
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	1fff7584 	.word	0x1fff7584

0800eec0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800eec0:	b5b0      	push	{r4, r5, r7, lr}
 800eec2:	b090      	sub	sp, #64	@ 0x40
 800eec4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800eec6:	2392      	movs	r3, #146	@ 0x92
 800eec8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800eecc:	4b45      	ldr	r3, [pc, #276]	@ (800efe4 <APP_BLE_Init+0x124>)
 800eece:	1d3c      	adds	r4, r7, #4
 800eed0:	461d      	mov	r5, r3
 800eed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eeda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eedc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eede:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eee2:	c403      	stmia	r4!, {r0, r1}
 800eee4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800eee6:	f000 fb37 	bl	800f558 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800eeea:	2101      	movs	r1, #1
 800eeec:	2002      	movs	r0, #2
 800eeee:	f001 fc11 	bl	8010714 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800eef2:	4a3d      	ldr	r2, [pc, #244]	@ (800efe8 <APP_BLE_Init+0x128>)
 800eef4:	2100      	movs	r1, #0
 800eef6:	2002      	movs	r0, #2
 800eef8:	f001 fd38 	bl	801096c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800eefc:	1d3b      	adds	r3, r7, #4
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7ff f89e 	bl	800e040 <SHCI_C2_BLE_Init>
 800ef04:	4603      	mov	r3, r0
 800ef06:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800ef0a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d012      	beq.n	800ef38 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800ef12:	4836      	ldr	r0, [pc, #216]	@ (800efec <APP_BLE_Init+0x12c>)
 800ef14:	f7ff fea2 	bl	800ec5c <DbgTraceGetFileName>
 800ef18:	4601      	mov	r1, r0
 800ef1a:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800ef1e:	4a34      	ldr	r2, [pc, #208]	@ (800eff0 <APP_BLE_Init+0x130>)
 800ef20:	4834      	ldr	r0, [pc, #208]	@ (800eff4 <APP_BLE_Init+0x134>)
 800ef22:	f001 ff23 	bl	8010d6c <iprintf>
 800ef26:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	4832      	ldr	r0, [pc, #200]	@ (800eff8 <APP_BLE_Init+0x138>)
 800ef2e:	f001 ff1d 	bl	8010d6c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ef32:	f7f3 ff11 	bl	8002d58 <Error_Handler>
 800ef36:	e00c      	b.n	800ef52 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800ef38:	482c      	ldr	r0, [pc, #176]	@ (800efec <APP_BLE_Init+0x12c>)
 800ef3a:	f7ff fe8f 	bl	800ec5c <DbgTraceGetFileName>
 800ef3e:	4601      	mov	r1, r0
 800ef40:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800ef44:	4a2a      	ldr	r2, [pc, #168]	@ (800eff0 <APP_BLE_Init+0x130>)
 800ef46:	482b      	ldr	r0, [pc, #172]	@ (800eff4 <APP_BLE_Init+0x134>)
 800ef48:	f001 ff10 	bl	8010d6c <iprintf>
 800ef4c:	482b      	ldr	r0, [pc, #172]	@ (800effc <APP_BLE_Init+0x13c>)
 800ef4e:	f001 ff0d 	bl	8010d6c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ef52:	f000 fb17 	bl	800f584 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ef56:	f7fe ffcd 	bl	800def4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ef5a:	4b29      	ldr	r3, [pc, #164]	@ (800f000 <APP_BLE_Init+0x140>)
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ef62:	4b27      	ldr	r3, [pc, #156]	@ (800f000 <APP_BLE_Init+0x140>)
 800ef64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef68:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ef6a:	4a26      	ldr	r2, [pc, #152]	@ (800f004 <APP_BLE_Init+0x144>)
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	2001      	movs	r0, #1
 800ef70:	f001 fcfc 	bl	801096c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ef74:	2006      	movs	r0, #6
 800ef76:	f7fe fe30 	bl	800dbda <aci_hal_set_radio_activity_mask>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800ef80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d010      	beq.n	800efaa <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800ef88:	4818      	ldr	r0, [pc, #96]	@ (800efec <APP_BLE_Init+0x12c>)
 800ef8a:	f7ff fe67 	bl	800ec5c <DbgTraceGetFileName>
 800ef8e:	4601      	mov	r1, r0
 800ef90:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 800ef94:	4a16      	ldr	r2, [pc, #88]	@ (800eff0 <APP_BLE_Init+0x130>)
 800ef96:	4817      	ldr	r0, [pc, #92]	@ (800eff4 <APP_BLE_Init+0x134>)
 800ef98:	f001 fee8 	bl	8010d6c <iprintf>
 800ef9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800efa0:	4619      	mov	r1, r3
 800efa2:	4819      	ldr	r0, [pc, #100]	@ (800f008 <APP_BLE_Init+0x148>)
 800efa4:	f001 fee2 	bl	8010d6c <iprintf>
 800efa8:	e00c      	b.n	800efc4 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800efaa:	4810      	ldr	r0, [pc, #64]	@ (800efec <APP_BLE_Init+0x12c>)
 800efac:	f7ff fe56 	bl	800ec5c <DbgTraceGetFileName>
 800efb0:	4601      	mov	r1, r0
 800efb2:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800efb6:	4a0e      	ldr	r2, [pc, #56]	@ (800eff0 <APP_BLE_Init+0x130>)
 800efb8:	480e      	ldr	r0, [pc, #56]	@ (800eff4 <APP_BLE_Init+0x134>)
 800efba:	f001 fed7 	bl	8010d6c <iprintf>
 800efbe:	4813      	ldr	r0, [pc, #76]	@ (800f00c <APP_BLE_Init+0x14c>)
 800efc0:	f001 fed4 	bl	8010d6c <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800efc4:	f000 ff22 	bl	800fe0c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800efc8:	4b0d      	ldr	r3, [pc, #52]	@ (800f000 <APP_BLE_Init+0x140>)
 800efca:	2200      	movs	r2, #0
 800efcc:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800efce:	4b0c      	ldr	r3, [pc, #48]	@ (800f000 <APP_BLE_Init+0x140>)
 800efd0:	2200      	movs	r2, #0
 800efd2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800efd4:	2001      	movs	r0, #1
 800efd6:	f000 fd69 	bl	800faac <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800efda:	bf00      	nop
}
 800efdc:	3740      	adds	r7, #64	@ 0x40
 800efde:	46bd      	mov	sp, r7
 800efe0:	bdb0      	pop	{r4, r5, r7, pc}
 800efe2:	bf00      	nop
 800efe4:	08012528 	.word	0x08012528
 800efe8:	0800e25d 	.word	0x0800e25d
 800efec:	0801241c 	.word	0x0801241c
 800eff0:	08013534 	.word	0x08013534
 800eff4:	08012438 	.word	0x08012438
 800eff8:	0801244c 	.word	0x0801244c
 800effc:	08012484 	.word	0x08012484
 800f000:	200008cc 	.word	0x200008cc
 800f004:	0800fc31 	.word	0x0800fc31
 800f008:	080124ac 	.word	0x080124ac
 800f00c:	080124f0 	.word	0x080124f0

0800f010 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800f010:	b5b0      	push	{r4, r5, r7, lr}
 800f012:	b08e      	sub	sp, #56	@ 0x38
 800f014:	af04      	add	r7, sp, #16
 800f016:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800f018:	2392      	movs	r3, #146	@ 0x92
 800f01a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	3301      	adds	r3, #1
 800f022:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2bff      	cmp	r3, #255	@ 0xff
 800f02a:	f000 811d 	beq.w	800f268 <SVCCTL_App_Notification+0x258>
 800f02e:	2bff      	cmp	r3, #255	@ 0xff
 800f030:	f300 8269 	bgt.w	800f506 <SVCCTL_App_Notification+0x4f6>
 800f034:	2b05      	cmp	r3, #5
 800f036:	d002      	beq.n	800f03e <SVCCTL_App_Notification+0x2e>
 800f038:	2b3e      	cmp	r3, #62	@ 0x3e
 800f03a:	d042      	beq.n	800f0c2 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800f03c:	e263      	b.n	800f506 <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800f03e:	6a3b      	ldr	r3, [r7, #32]
 800f040:	3302      	adds	r3, #2
 800f042:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	4bb1      	ldr	r3, [pc, #708]	@ (800f314 <SVCCTL_App_Notification+0x304>)
 800f04e:	8adb      	ldrh	r3, [r3, #22]
 800f050:	429a      	cmp	r2, r3
 800f052:	d128      	bne.n	800f0a6 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f054:	4baf      	ldr	r3, [pc, #700]	@ (800f314 <SVCCTL_App_Notification+0x304>)
 800f056:	2200      	movs	r2, #0
 800f058:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f05a:	4bae      	ldr	r3, [pc, #696]	@ (800f314 <SVCCTL_App_Notification+0x304>)
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800f062:	48ad      	ldr	r0, [pc, #692]	@ (800f318 <SVCCTL_App_Notification+0x308>)
 800f064:	f7ff fdfa 	bl	800ec5c <DbgTraceGetFileName>
 800f068:	4601      	mov	r1, r0
 800f06a:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800f06e:	4aab      	ldr	r2, [pc, #684]	@ (800f31c <SVCCTL_App_Notification+0x30c>)
 800f070:	48ab      	ldr	r0, [pc, #684]	@ (800f320 <SVCCTL_App_Notification+0x310>)
 800f072:	f001 fe7b 	bl	8010d6c <iprintf>
 800f076:	48ab      	ldr	r0, [pc, #684]	@ (800f324 <SVCCTL_App_Notification+0x314>)
 800f078:	f001 fee8 	bl	8010e4c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800f07c:	48a6      	ldr	r0, [pc, #664]	@ (800f318 <SVCCTL_App_Notification+0x308>)
 800f07e:	f7ff fded 	bl	800ec5c <DbgTraceGetFileName>
 800f082:	4601      	mov	r1, r0
 800f084:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800f088:	4aa4      	ldr	r2, [pc, #656]	@ (800f31c <SVCCTL_App_Notification+0x30c>)
 800f08a:	48a5      	ldr	r0, [pc, #660]	@ (800f320 <SVCCTL_App_Notification+0x310>)
 800f08c:	f001 fe6e 	bl	8010d6c <iprintf>
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f096:	b29b      	uxth	r3, r3
 800f098:	4619      	mov	r1, r3
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	78db      	ldrb	r3, [r3, #3]
 800f09e:	461a      	mov	r2, r3
 800f0a0:	48a1      	ldr	r0, [pc, #644]	@ (800f328 <SVCCTL_App_Notification+0x318>)
 800f0a2:	f001 fe63 	bl	8010d6c <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800f0a6:	2001      	movs	r0, #1
 800f0a8:	f000 fd00 	bl	800faac <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800f0ac:	4b9f      	ldr	r3, [pc, #636]	@ (800f32c <SVCCTL_App_Notification+0x31c>)
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f0b2:	4b98      	ldr	r3, [pc, #608]	@ (800f314 <SVCCTL_App_Notification+0x304>)
 800f0b4:	8ada      	ldrh	r2, [r3, #22]
 800f0b6:	4b9d      	ldr	r3, [pc, #628]	@ (800f32c <SVCCTL_App_Notification+0x31c>)
 800f0b8:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800f0ba:	489c      	ldr	r0, [pc, #624]	@ (800f32c <SVCCTL_App_Notification+0x31c>)
 800f0bc:	f000 fe92 	bl	800fde4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800f0c0:	e224      	b.n	800f50c <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800f0c2:	6a3b      	ldr	r3, [r7, #32]
 800f0c4:	3302      	adds	r3, #2
 800f0c6:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d042      	beq.n	800f156 <SVCCTL_App_Notification+0x146>
 800f0d0:	2b03      	cmp	r3, #3
 800f0d2:	f040 80c7 	bne.w	800f264 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800f0dc:	488e      	ldr	r0, [pc, #568]	@ (800f318 <SVCCTL_App_Notification+0x308>)
 800f0de:	f7ff fdbd 	bl	800ec5c <DbgTraceGetFileName>
 800f0e2:	4601      	mov	r1, r0
 800f0e4:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 800f0e8:	4a8c      	ldr	r2, [pc, #560]	@ (800f31c <SVCCTL_App_Notification+0x30c>)
 800f0ea:	488d      	ldr	r0, [pc, #564]	@ (800f320 <SVCCTL_App_Notification+0x310>)
 800f0ec:	f001 fe3e 	bl	8010d6c <iprintf>
 800f0f0:	488f      	ldr	r0, [pc, #572]	@ (800f330 <SVCCTL_App_Notification+0x320>)
 800f0f2:	f001 feab 	bl	8010e4c <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800f0f6:	4888      	ldr	r0, [pc, #544]	@ (800f318 <SVCCTL_App_Notification+0x308>)
 800f0f8:	f7ff fdb0 	bl	800ec5c <DbgTraceGetFileName>
 800f0fc:	4601      	mov	r1, r0
 800f0fe:	f240 13e3 	movw	r3, #483	@ 0x1e3
 800f102:	4a86      	ldr	r2, [pc, #536]	@ (800f31c <SVCCTL_App_Notification+0x30c>)
 800f104:	4886      	ldr	r0, [pc, #536]	@ (800f320 <SVCCTL_App_Notification+0x310>)
 800f106:	f001 fe31 	bl	8010d6c <iprintf>
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f110:	b29b      	uxth	r3, r3
 800f112:	4618      	mov	r0, r3
 800f114:	f7f1 fb08 	bl	8000728 <__aeabi_i2d>
 800f118:	f04f 0200 	mov.w	r2, #0
 800f11c:	4b85      	ldr	r3, [pc, #532]	@ (800f334 <SVCCTL_App_Notification+0x324>)
 800f11e:	f7f1 f887 	bl	8000230 <__aeabi_dmul>
 800f122:	4602      	mov	r2, r0
 800f124:	460b      	mov	r3, r1
 800f126:	4610      	mov	r0, r2
 800f128:	4619      	mov	r1, r3
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f130:	b29b      	uxth	r3, r3
 800f132:	461c      	mov	r4, r3
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	461a      	mov	r2, r3
 800f13e:	4613      	mov	r3, r2
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	4413      	add	r3, r2
 800f144:	005b      	lsls	r3, r3, #1
 800f146:	9301      	str	r3, [sp, #4]
 800f148:	9400      	str	r4, [sp, #0]
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	487a      	ldr	r0, [pc, #488]	@ (800f338 <SVCCTL_App_Notification+0x328>)
 800f150:	f001 fe0c 	bl	8010d6c <iprintf>
          break;
 800f154:	e087      	b.n	800f266 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	3301      	adds	r3, #1
 800f15a:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800f15c:	486e      	ldr	r0, [pc, #440]	@ (800f318 <SVCCTL_App_Notification+0x308>)
 800f15e:	f7ff fd7d 	bl	800ec5c <DbgTraceGetFileName>
 800f162:	4601      	mov	r1, r0
 800f164:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f168:	4a6c      	ldr	r2, [pc, #432]	@ (800f31c <SVCCTL_App_Notification+0x30c>)
 800f16a:	486d      	ldr	r0, [pc, #436]	@ (800f320 <SVCCTL_App_Notification+0x310>)
 800f16c:	f001 fdfe 	bl	8010d6c <iprintf>
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f176:	b29b      	uxth	r3, r3
 800f178:	4619      	mov	r1, r3
 800f17a:	4870      	ldr	r0, [pc, #448]	@ (800f33c <SVCCTL_App_Notification+0x32c>)
 800f17c:	f001 fdf6 	bl	8010d6c <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800f180:	4865      	ldr	r0, [pc, #404]	@ (800f318 <SVCCTL_App_Notification+0x308>)
 800f182:	f7ff fd6b 	bl	800ec5c <DbgTraceGetFileName>
 800f186:	4601      	mov	r1, r0
 800f188:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 800f18c:	4a63      	ldr	r2, [pc, #396]	@ (800f31c <SVCCTL_App_Notification+0x30c>)
 800f18e:	4864      	ldr	r0, [pc, #400]	@ (800f320 <SVCCTL_App_Notification+0x310>)
 800f190:	f001 fdec 	bl	8010d6c <iprintf>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	7a9b      	ldrb	r3, [r3, #10]
 800f198:	4618      	mov	r0, r3
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	7a5b      	ldrb	r3, [r3, #9]
 800f19e:	461c      	mov	r4, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	7a1b      	ldrb	r3, [r3, #8]
 800f1a4:	461d      	mov	r5, r3
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	79db      	ldrb	r3, [r3, #7]
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	799b      	ldrb	r3, [r3, #6]
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	795b      	ldrb	r3, [r3, #5]
 800f1b6:	9302      	str	r3, [sp, #8]
 800f1b8:	9101      	str	r1, [sp, #4]
 800f1ba:	9200      	str	r2, [sp, #0]
 800f1bc:	462b      	mov	r3, r5
 800f1be:	4622      	mov	r2, r4
 800f1c0:	4601      	mov	r1, r0
 800f1c2:	485f      	ldr	r0, [pc, #380]	@ (800f340 <SVCCTL_App_Notification+0x330>)
 800f1c4:	f001 fdd2 	bl	8010d6c <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800f1c8:	4853      	ldr	r0, [pc, #332]	@ (800f318 <SVCCTL_App_Notification+0x308>)
 800f1ca:	f7ff fd47 	bl	800ec5c <DbgTraceGetFileName>
 800f1ce:	4601      	mov	r1, r0
 800f1d0:	f240 13fd 	movw	r3, #509	@ 0x1fd
 800f1d4:	4a51      	ldr	r2, [pc, #324]	@ (800f31c <SVCCTL_App_Notification+0x30c>)
 800f1d6:	4852      	ldr	r0, [pc, #328]	@ (800f320 <SVCCTL_App_Notification+0x310>)
 800f1d8:	f001 fdc8 	bl	8010d6c <iprintf>
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7f1 fa9f 	bl	8000728 <__aeabi_i2d>
 800f1ea:	f04f 0200 	mov.w	r2, #0
 800f1ee:	4b51      	ldr	r3, [pc, #324]	@ (800f334 <SVCCTL_App_Notification+0x324>)
 800f1f0:	f7f1 f81e 	bl	8000230 <__aeabi_dmul>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800f202:	b29b      	uxth	r3, r3
 800f204:	461c      	mov	r4, r3
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	461a      	mov	r2, r3
 800f210:	4613      	mov	r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	4413      	add	r3, r2
 800f216:	005b      	lsls	r3, r3, #1
 800f218:	9301      	str	r3, [sp, #4]
 800f21a:	9400      	str	r4, [sp, #0]
 800f21c:	4602      	mov	r2, r0
 800f21e:	460b      	mov	r3, r1
 800f220:	4845      	ldr	r0, [pc, #276]	@ (800f338 <SVCCTL_App_Notification+0x328>)
 800f222:	f001 fda3 	bl	8010d6c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800f226:	4b3b      	ldr	r3, [pc, #236]	@ (800f314 <SVCCTL_App_Notification+0x304>)
 800f228:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f22c:	2b04      	cmp	r3, #4
 800f22e:	d104      	bne.n	800f23a <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800f230:	4b38      	ldr	r3, [pc, #224]	@ (800f314 <SVCCTL_App_Notification+0x304>)
 800f232:	2206      	movs	r2, #6
 800f234:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800f238:	e003      	b.n	800f242 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800f23a:	4b36      	ldr	r3, [pc, #216]	@ (800f314 <SVCCTL_App_Notification+0x304>)
 800f23c:	2205      	movs	r2, #5
 800f23e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f248:	b29a      	uxth	r2, r3
 800f24a:	4b32      	ldr	r3, [pc, #200]	@ (800f314 <SVCCTL_App_Notification+0x304>)
 800f24c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800f24e:	4b37      	ldr	r3, [pc, #220]	@ (800f32c <SVCCTL_App_Notification+0x31c>)
 800f250:	2200      	movs	r2, #0
 800f252:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f254:	4b2f      	ldr	r3, [pc, #188]	@ (800f314 <SVCCTL_App_Notification+0x304>)
 800f256:	8ada      	ldrh	r2, [r3, #22]
 800f258:	4b34      	ldr	r3, [pc, #208]	@ (800f32c <SVCCTL_App_Notification+0x31c>)
 800f25a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800f25c:	4833      	ldr	r0, [pc, #204]	@ (800f32c <SVCCTL_App_Notification+0x31c>)
 800f25e:	f000 fdc1 	bl	800fde4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800f262:	e000      	b.n	800f266 <SVCCTL_App_Notification+0x256>
          break;
 800f264:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800f266:	e151      	b.n	800f50c <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	3302      	adds	r3, #2
 800f26c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	881b      	ldrh	r3, [r3, #0]
 800f272:	b29b      	uxth	r3, r3
 800f274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f278:	f000 8141 	beq.w	800f4fe <SVCCTL_App_Notification+0x4ee>
 800f27c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f280:	f300 8143 	bgt.w	800f50a <SVCCTL_App_Notification+0x4fa>
 800f284:	2b04      	cmp	r3, #4
 800f286:	f000 813c 	beq.w	800f502 <SVCCTL_App_Notification+0x4f2>
 800f28a:	2b04      	cmp	r3, #4
 800f28c:	f2c0 813d 	blt.w	800f50a <SVCCTL_App_Notification+0x4fa>
 800f290:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f294:	4293      	cmp	r3, r2
 800f296:	f300 8138 	bgt.w	800f50a <SVCCTL_App_Notification+0x4fa>
 800f29a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f29e:	f340 8134 	ble.w	800f50a <SVCCTL_App_Notification+0x4fa>
 800f2a2:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800f2a6:	2b09      	cmp	r3, #9
 800f2a8:	f200 812f 	bhi.w	800f50a <SVCCTL_App_Notification+0x4fa>
 800f2ac:	a201      	add	r2, pc, #4	@ (adr r2, 800f2b4 <SVCCTL_App_Notification+0x2a4>)
 800f2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b2:	bf00      	nop
 800f2b4:	0800f479 	.word	0x0800f479
 800f2b8:	0800f34d 	.word	0x0800f34d
 800f2bc:	0800f50b 	.word	0x0800f50b
 800f2c0:	0800f50b 	.word	0x0800f50b
 800f2c4:	0800f50b 	.word	0x0800f50b
 800f2c8:	0800f50b 	.word	0x0800f50b
 800f2cc:	0800f2dd 	.word	0x0800f2dd
 800f2d0:	0800f50b 	.word	0x0800f50b
 800f2d4:	0800f3bf 	.word	0x0800f3bf
 800f2d8:	0800f2f9 	.word	0x0800f2f9
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800f2dc:	480e      	ldr	r0, [pc, #56]	@ (800f318 <SVCCTL_App_Notification+0x308>)
 800f2de:	f7ff fcbd 	bl	800ec5c <DbgTraceGetFileName>
 800f2e2:	4601      	mov	r1, r0
 800f2e4:	f240 233f 	movw	r3, #575	@ 0x23f
 800f2e8:	4a0c      	ldr	r2, [pc, #48]	@ (800f31c <SVCCTL_App_Notification+0x30c>)
 800f2ea:	480d      	ldr	r0, [pc, #52]	@ (800f320 <SVCCTL_App_Notification+0x310>)
 800f2ec:	f001 fd3e 	bl	8010d6c <iprintf>
 800f2f0:	4814      	ldr	r0, [pc, #80]	@ (800f344 <SVCCTL_App_Notification+0x334>)
 800f2f2:	f001 fd3b 	bl	8010d6c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800f2f6:	e105      	b.n	800f504 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800f2f8:	4807      	ldr	r0, [pc, #28]	@ (800f318 <SVCCTL_App_Notification+0x308>)
 800f2fa:	f7ff fcaf 	bl	800ec5c <DbgTraceGetFileName>
 800f2fe:	4601      	mov	r1, r0
 800f300:	f240 234f 	movw	r3, #591	@ 0x24f
 800f304:	4a05      	ldr	r2, [pc, #20]	@ (800f31c <SVCCTL_App_Notification+0x30c>)
 800f306:	4806      	ldr	r0, [pc, #24]	@ (800f320 <SVCCTL_App_Notification+0x310>)
 800f308:	f001 fd30 	bl	8010d6c <iprintf>
 800f30c:	480e      	ldr	r0, [pc, #56]	@ (800f348 <SVCCTL_App_Notification+0x338>)
 800f30e:	f001 fd9d 	bl	8010e4c <puts>
          break;
 800f312:	e0f7      	b.n	800f504 <SVCCTL_App_Notification+0x4f4>
 800f314:	200008cc 	.word	0x200008cc
 800f318:	0801241c 	.word	0x0801241c
 800f31c:	08013544 	.word	0x08013544
 800f320:	08012438 	.word	0x08012438
 800f324:	08012564 	.word	0x08012564
 800f328:	08012590 	.word	0x08012590
 800f32c:	20000950 	.word	0x20000950
 800f330:	080125cc 	.word	0x080125cc
 800f334:	3ff40000 	.word	0x3ff40000
 800f338:	08012600 	.word	0x08012600
 800f33c:	0801266c 	.word	0x0801266c
 800f340:	080126b4 	.word	0x080126b4
 800f344:	08012704 	.word	0x08012704
 800f348:	0801272c 	.word	0x0801272c
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800f34c:	4872      	ldr	r0, [pc, #456]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f34e:	f7ff fc85 	bl	800ec5c <DbgTraceGetFileName>
 800f352:	4601      	mov	r1, r0
 800f354:	f240 2356 	movw	r3, #598	@ 0x256
 800f358:	4a70      	ldr	r2, [pc, #448]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f35a:	4871      	ldr	r0, [pc, #452]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f35c:	f001 fd06 	bl	8010d6c <iprintf>
 800f360:	4870      	ldr	r0, [pc, #448]	@ (800f524 <SVCCTL_App_Notification+0x514>)
 800f362:	f001 fd73 	bl	8010e4c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800f366:	4b70      	ldr	r3, [pc, #448]	@ (800f528 <SVCCTL_App_Notification+0x518>)
 800f368:	8adb      	ldrh	r3, [r3, #22]
 800f36a:	4970      	ldr	r1, [pc, #448]	@ (800f52c <SVCCTL_App_Notification+0x51c>)
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fd fe36 	bl	800cfde <aci_gap_pass_key_resp>
 800f372:	4603      	mov	r3, r0
 800f374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800f378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d010      	beq.n	800f3a2 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800f380:	4865      	ldr	r0, [pc, #404]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f382:	f7ff fc6b 	bl	800ec5c <DbgTraceGetFileName>
 800f386:	4601      	mov	r1, r0
 800f388:	f240 235b 	movw	r3, #603	@ 0x25b
 800f38c:	4a63      	ldr	r2, [pc, #396]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f38e:	4864      	ldr	r0, [pc, #400]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f390:	f001 fcec 	bl	8010d6c <iprintf>
 800f394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f398:	4619      	mov	r1, r3
 800f39a:	4865      	ldr	r0, [pc, #404]	@ (800f530 <SVCCTL_App_Notification+0x520>)
 800f39c:	f001 fce6 	bl	8010d6c <iprintf>
          break;
 800f3a0:	e0b0      	b.n	800f504 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800f3a2:	485d      	ldr	r0, [pc, #372]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f3a4:	f7ff fc5a 	bl	800ec5c <DbgTraceGetFileName>
 800f3a8:	4601      	mov	r1, r0
 800f3aa:	f240 235f 	movw	r3, #607	@ 0x25f
 800f3ae:	4a5b      	ldr	r2, [pc, #364]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f3b0:	485b      	ldr	r0, [pc, #364]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f3b2:	f001 fcdb 	bl	8010d6c <iprintf>
 800f3b6:	485f      	ldr	r0, [pc, #380]	@ (800f534 <SVCCTL_App_Notification+0x524>)
 800f3b8:	f001 fd48 	bl	8010e4c <puts>
          break;
 800f3bc:	e0a2      	b.n	800f504 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800f3be:	4856      	ldr	r0, [pc, #344]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f3c0:	f7ff fc4c 	bl	800ec5c <DbgTraceGetFileName>
 800f3c4:	4601      	mov	r1, r0
 800f3c6:	f240 2367 	movw	r3, #615	@ 0x267
 800f3ca:	4a54      	ldr	r2, [pc, #336]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f3cc:	4854      	ldr	r0, [pc, #336]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f3ce:	f001 fccd 	bl	8010d6c <iprintf>
 800f3d2:	4859      	ldr	r0, [pc, #356]	@ (800f538 <SVCCTL_App_Notification+0x528>)
 800f3d4:	f001 fd3a 	bl	8010e4c <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800f3d8:	484f      	ldr	r0, [pc, #316]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f3da:	f7ff fc3f 	bl	800ec5c <DbgTraceGetFileName>
 800f3de:	4601      	mov	r1, r0
 800f3e0:	f44f 731a 	mov.w	r3, #616	@ 0x268
 800f3e4:	4a4d      	ldr	r2, [pc, #308]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f3e6:	484e      	ldr	r0, [pc, #312]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f3e8:	f001 fcc0 	bl	8010d6c <iprintf>
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	3302      	adds	r3, #2
 800f3f0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4851      	ldr	r0, [pc, #324]	@ (800f53c <SVCCTL_App_Notification+0x52c>)
 800f3f8:	f001 fcb8 	bl	8010d6c <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800f3fc:	4846      	ldr	r0, [pc, #280]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f3fe:	f7ff fc2d 	bl	800ec5c <DbgTraceGetFileName>
 800f402:	4601      	mov	r1, r0
 800f404:	f240 236a 	movw	r3, #618	@ 0x26a
 800f408:	4a44      	ldr	r2, [pc, #272]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f40a:	4845      	ldr	r0, [pc, #276]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f40c:	f001 fcae 	bl	8010d6c <iprintf>
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	3302      	adds	r3, #2
 800f414:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f418:	4619      	mov	r1, r3
 800f41a:	4849      	ldr	r0, [pc, #292]	@ (800f540 <SVCCTL_App_Notification+0x530>)
 800f41c:	f001 fca6 	bl	8010d6c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800f420:	4b41      	ldr	r3, [pc, #260]	@ (800f528 <SVCCTL_App_Notification+0x518>)
 800f422:	8adb      	ldrh	r3, [r3, #22]
 800f424:	2101      	movs	r1, #1
 800f426:	4618      	mov	r0, r3
 800f428:	f7fd ff83 	bl	800d332 <aci_gap_numeric_comparison_value_confirm_yesno>
 800f42c:	4603      	mov	r3, r0
 800f42e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800f432:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f436:	2b00      	cmp	r3, #0
 800f438:	d010      	beq.n	800f45c <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800f43a:	4837      	ldr	r0, [pc, #220]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f43c:	f7ff fc0e 	bl	800ec5c <DbgTraceGetFileName>
 800f440:	4601      	mov	r1, r0
 800f442:	f240 236f 	movw	r3, #623	@ 0x26f
 800f446:	4a35      	ldr	r2, [pc, #212]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f448:	4835      	ldr	r0, [pc, #212]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f44a:	f001 fc8f 	bl	8010d6c <iprintf>
 800f44e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f452:	4619      	mov	r1, r3
 800f454:	483b      	ldr	r0, [pc, #236]	@ (800f544 <SVCCTL_App_Notification+0x534>)
 800f456:	f001 fc89 	bl	8010d6c <iprintf>
          break;
 800f45a:	e053      	b.n	800f504 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800f45c:	482e      	ldr	r0, [pc, #184]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f45e:	f7ff fbfd 	bl	800ec5c <DbgTraceGetFileName>
 800f462:	4601      	mov	r1, r0
 800f464:	f240 2373 	movw	r3, #627	@ 0x273
 800f468:	4a2c      	ldr	r2, [pc, #176]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f46a:	482d      	ldr	r0, [pc, #180]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f46c:	f001 fc7e 	bl	8010d6c <iprintf>
 800f470:	4835      	ldr	r0, [pc, #212]	@ (800f548 <SVCCTL_App_Notification+0x538>)
 800f472:	f001 fceb 	bl	8010e4c <puts>
          break;
 800f476:	e045      	b.n	800f504 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	3302      	adds	r3, #2
 800f47c:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800f47e:	4826      	ldr	r0, [pc, #152]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f480:	f7ff fbec 	bl	800ec5c <DbgTraceGetFileName>
 800f484:	4601      	mov	r1, r0
 800f486:	f240 237d 	movw	r3, #637	@ 0x27d
 800f48a:	4a24      	ldr	r2, [pc, #144]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f48c:	4824      	ldr	r0, [pc, #144]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f48e:	f001 fc6d 	bl	8010d6c <iprintf>
 800f492:	482e      	ldr	r0, [pc, #184]	@ (800f54c <SVCCTL_App_Notification+0x53c>)
 800f494:	f001 fcda 	bl	8010e4c <puts>
          if (p_pairing_complete->Status != 0)
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	789b      	ldrb	r3, [r3, #2]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d013      	beq.n	800f4c8 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800f4a0:	481d      	ldr	r0, [pc, #116]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f4a2:	f7ff fbdb 	bl	800ec5c <DbgTraceGetFileName>
 800f4a6:	4601      	mov	r1, r0
 800f4a8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800f4ac:	4a1b      	ldr	r2, [pc, #108]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f4ae:	481c      	ldr	r0, [pc, #112]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f4b0:	f001 fc5c 	bl	8010d6c <iprintf>
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	789b      	ldrb	r3, [r3, #2]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	78db      	ldrb	r3, [r3, #3]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	4823      	ldr	r0, [pc, #140]	@ (800f550 <SVCCTL_App_Notification+0x540>)
 800f4c2:	f001 fc53 	bl	8010d6c <iprintf>
 800f4c6:	e00c      	b.n	800f4e2 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800f4c8:	4813      	ldr	r0, [pc, #76]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f4ca:	f7ff fbc7 	bl	800ec5c <DbgTraceGetFileName>
 800f4ce:	4601      	mov	r1, r0
 800f4d0:	f44f 7321 	mov.w	r3, #644	@ 0x284
 800f4d4:	4a11      	ldr	r2, [pc, #68]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f4d6:	4812      	ldr	r0, [pc, #72]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f4d8:	f001 fc48 	bl	8010d6c <iprintf>
 800f4dc:	481d      	ldr	r0, [pc, #116]	@ (800f554 <SVCCTL_App_Notification+0x544>)
 800f4de:	f001 fcb5 	bl	8010e4c <puts>
          APP_DBG_MSG("\n");
 800f4e2:	480d      	ldr	r0, [pc, #52]	@ (800f518 <SVCCTL_App_Notification+0x508>)
 800f4e4:	f7ff fbba 	bl	800ec5c <DbgTraceGetFileName>
 800f4e8:	4601      	mov	r1, r0
 800f4ea:	f240 2386 	movw	r3, #646	@ 0x286
 800f4ee:	4a0b      	ldr	r2, [pc, #44]	@ (800f51c <SVCCTL_App_Notification+0x50c>)
 800f4f0:	480b      	ldr	r0, [pc, #44]	@ (800f520 <SVCCTL_App_Notification+0x510>)
 800f4f2:	f001 fc3b 	bl	8010d6c <iprintf>
 800f4f6:	200a      	movs	r0, #10
 800f4f8:	f001 fc4a 	bl	8010d90 <putchar>
          break;
 800f4fc:	e002      	b.n	800f504 <SVCCTL_App_Notification+0x4f4>
          break;
 800f4fe:	bf00      	nop
 800f500:	e003      	b.n	800f50a <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800f502:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f504:	e001      	b.n	800f50a <SVCCTL_App_Notification+0x4fa>
      break;
 800f506:	bf00      	nop
 800f508:	e000      	b.n	800f50c <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f50a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f50c:	2301      	movs	r3, #1
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3728      	adds	r7, #40	@ 0x28
 800f512:	46bd      	mov	sp, r7
 800f514:	bdb0      	pop	{r4, r5, r7, pc}
 800f516:	bf00      	nop
 800f518:	0801241c 	.word	0x0801241c
 800f51c:	08013544 	.word	0x08013544
 800f520:	08012438 	.word	0x08012438
 800f524:	0801275c 	.word	0x0801275c
 800f528:	200008cc 	.word	0x200008cc
 800f52c:	0001b207 	.word	0x0001b207
 800f530:	08012784 	.word	0x08012784
 800f534:	080127b8 	.word	0x080127b8
 800f538:	080127e0 	.word	0x080127e0
 800f53c:	08012814 	.word	0x08012814
 800f540:	08012830 	.word	0x08012830
 800f544:	08012848 	.word	0x08012848
 800f548:	08012898 	.word	0x08012898
 800f54c:	080128e0 	.word	0x080128e0
 800f550:	0801290c 	.word	0x0801290c
 800f554:	08012948 	.word	0x08012948

0800f558 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f55e:	4b06      	ldr	r3, [pc, #24]	@ (800f578 <Ble_Tl_Init+0x20>)
 800f560:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f562:	4b06      	ldr	r3, [pc, #24]	@ (800f57c <Ble_Tl_Init+0x24>)
 800f564:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f566:	463b      	mov	r3, r7
 800f568:	4619      	mov	r1, r3
 800f56a:	4805      	ldr	r0, [pc, #20]	@ (800f580 <Ble_Tl_Init+0x28>)
 800f56c:	f7fe fe5a 	bl	800e224 <hci_init>

  return;
 800f570:	bf00      	nop
}
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	200300d8 	.word	0x200300d8
 800f57c:	0800fd4d 	.word	0x0800fd4d
 800f580:	0800fd15 	.word	0x0800fd15

0800f584 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800f584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f586:	b08d      	sub	sp, #52	@ 0x34
 800f588:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800f58a:	2300      	movs	r3, #0
 800f58c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f58e:	2392      	movs	r3, #146	@ 0x92
 800f590:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800f592:	48a3      	ldr	r0, [pc, #652]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f594:	f7ff fb62 	bl	800ec5c <DbgTraceGetFileName>
 800f598:	4601      	mov	r1, r0
 800f59a:	f240 23c6 	movw	r3, #710	@ 0x2c6
 800f59e:	4aa1      	ldr	r2, [pc, #644]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f5a0:	48a1      	ldr	r0, [pc, #644]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f5a2:	f001 fbe3 	bl	8010d6c <iprintf>
 800f5a6:	48a1      	ldr	r0, [pc, #644]	@ (800f82c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800f5a8:	f001 fc50 	bl	8010e4c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800f5ac:	f7fe fb69 	bl	800dc82 <hci_reset>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f5b4:	7dfb      	ldrb	r3, [r7, #23]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00f      	beq.n	800f5da <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800f5ba:	4899      	ldr	r0, [pc, #612]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f5bc:	f7ff fb4e 	bl	800ec5c <DbgTraceGetFileName>
 800f5c0:	4601      	mov	r1, r0
 800f5c2:	f240 23cf 	movw	r3, #719	@ 0x2cf
 800f5c6:	4a97      	ldr	r2, [pc, #604]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f5c8:	4897      	ldr	r0, [pc, #604]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f5ca:	f001 fbcf 	bl	8010d6c <iprintf>
 800f5ce:	7dfb      	ldrb	r3, [r7, #23]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	4897      	ldr	r0, [pc, #604]	@ (800f830 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800f5d4:	f001 fbca 	bl	8010d6c <iprintf>
 800f5d8:	e00c      	b.n	800f5f4 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800f5da:	4891      	ldr	r0, [pc, #580]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f5dc:	f7ff fb3e 	bl	800ec5c <DbgTraceGetFileName>
 800f5e0:	4601      	mov	r1, r0
 800f5e2:	f240 23d3 	movw	r3, #723	@ 0x2d3
 800f5e6:	4a8f      	ldr	r2, [pc, #572]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f5e8:	488f      	ldr	r0, [pc, #572]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f5ea:	f001 fbbf 	bl	8010d6c <iprintf>
 800f5ee:	4891      	ldr	r0, [pc, #580]	@ (800f834 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800f5f0:	f001 fc2c 	bl	8010e4c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800f5f4:	f000 fad8 	bl	800fba8 <BleGetBdAddress>
 800f5f8:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800f5fa:	693a      	ldr	r2, [r7, #16]
 800f5fc:	2106      	movs	r1, #6
 800f5fe:	2000      	movs	r0, #0
 800f600:	f7fe f9ff 	bl	800da02 <aci_hal_write_config_data>
 800f604:	4603      	mov	r3, r0
 800f606:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f608:	7dfb      	ldrb	r3, [r7, #23]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00f      	beq.n	800f62e <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800f60e:	4884      	ldr	r0, [pc, #528]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f610:	f7ff fb24 	bl	800ec5c <DbgTraceGetFileName>
 800f614:	4601      	mov	r1, r0
 800f616:	f240 23dd 	movw	r3, #733	@ 0x2dd
 800f61a:	4a82      	ldr	r2, [pc, #520]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f61c:	4882      	ldr	r0, [pc, #520]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f61e:	f001 fba5 	bl	8010d6c <iprintf>
 800f622:	7dfb      	ldrb	r3, [r7, #23]
 800f624:	4619      	mov	r1, r3
 800f626:	4884      	ldr	r0, [pc, #528]	@ (800f838 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800f628:	f001 fba0 	bl	8010d6c <iprintf>
 800f62c:	e035      	b.n	800f69a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800f62e:	487c      	ldr	r0, [pc, #496]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f630:	f7ff fb14 	bl	800ec5c <DbgTraceGetFileName>
 800f634:	4601      	mov	r1, r0
 800f636:	f240 23e1 	movw	r3, #737	@ 0x2e1
 800f63a:	4a7a      	ldr	r2, [pc, #488]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f63c:	487a      	ldr	r0, [pc, #488]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f63e:	f001 fb95 	bl	8010d6c <iprintf>
 800f642:	487e      	ldr	r0, [pc, #504]	@ (800f83c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800f644:	f001 fc02 	bl	8010e4c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800f648:	4875      	ldr	r0, [pc, #468]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f64a:	f7ff fb07 	bl	800ec5c <DbgTraceGetFileName>
 800f64e:	4601      	mov	r1, r0
 800f650:	f240 23e2 	movw	r3, #738	@ 0x2e2
 800f654:	4a73      	ldr	r2, [pc, #460]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f656:	4874      	ldr	r0, [pc, #464]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f658:	f001 fb88 	bl	8010d6c <iprintf>
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	3305      	adds	r3, #5
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	4618      	mov	r0, r3
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	3304      	adds	r3, #4
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	461c      	mov	r4, r3
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	3303      	adds	r3, #3
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	461d      	mov	r5, r3
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	3302      	adds	r3, #2
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	461a      	mov	r2, r3
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	3301      	adds	r3, #1
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	4619      	mov	r1, r3
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	9302      	str	r3, [sp, #8]
 800f68a:	9101      	str	r1, [sp, #4]
 800f68c:	9200      	str	r2, [sp, #0]
 800f68e:	462b      	mov	r3, r5
 800f690:	4622      	mov	r2, r4
 800f692:	4601      	mov	r1, r0
 800f694:	486a      	ldr	r0, [pc, #424]	@ (800f840 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800f696:	f001 fb69 	bl	8010d6c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800f69a:	4a6a      	ldr	r2, [pc, #424]	@ (800f844 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800f69c:	2110      	movs	r1, #16
 800f69e:	2018      	movs	r0, #24
 800f6a0:	f7fe f9af 	bl	800da02 <aci_hal_write_config_data>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f6a8:	7dfb      	ldrb	r3, [r7, #23]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00f      	beq.n	800f6ce <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800f6ae:	485c      	ldr	r0, [pc, #368]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f6b0:	f7ff fad4 	bl	800ec5c <DbgTraceGetFileName>
 800f6b4:	4601      	mov	r1, r0
 800f6b6:	f44f 734b 	mov.w	r3, #812	@ 0x32c
 800f6ba:	4a5a      	ldr	r2, [pc, #360]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f6bc:	485a      	ldr	r0, [pc, #360]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f6be:	f001 fb55 	bl	8010d6c <iprintf>
 800f6c2:	7dfb      	ldrb	r3, [r7, #23]
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	4860      	ldr	r0, [pc, #384]	@ (800f848 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800f6c8:	f001 fb50 	bl	8010d6c <iprintf>
 800f6cc:	e00c      	b.n	800f6e8 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800f6ce:	4854      	ldr	r0, [pc, #336]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f6d0:	f7ff fac4 	bl	800ec5c <DbgTraceGetFileName>
 800f6d4:	4601      	mov	r1, r0
 800f6d6:	f44f 734c 	mov.w	r3, #816	@ 0x330
 800f6da:	4a52      	ldr	r2, [pc, #328]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f6dc:	4852      	ldr	r0, [pc, #328]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f6de:	f001 fb45 	bl	8010d6c <iprintf>
 800f6e2:	485a      	ldr	r0, [pc, #360]	@ (800f84c <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800f6e4:	f001 fbb2 	bl	8010e4c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800f6e8:	4a59      	ldr	r2, [pc, #356]	@ (800f850 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800f6ea:	2110      	movs	r1, #16
 800f6ec:	2008      	movs	r0, #8
 800f6ee:	f7fe f988 	bl	800da02 <aci_hal_write_config_data>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00f      	beq.n	800f71c <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800f6fc:	4848      	ldr	r0, [pc, #288]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f6fe:	f7ff faad 	bl	800ec5c <DbgTraceGetFileName>
 800f702:	4601      	mov	r1, r0
 800f704:	f240 3339 	movw	r3, #825	@ 0x339
 800f708:	4a46      	ldr	r2, [pc, #280]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f70a:	4847      	ldr	r0, [pc, #284]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f70c:	f001 fb2e 	bl	8010d6c <iprintf>
 800f710:	7dfb      	ldrb	r3, [r7, #23]
 800f712:	4619      	mov	r1, r3
 800f714:	484f      	ldr	r0, [pc, #316]	@ (800f854 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800f716:	f001 fb29 	bl	8010d6c <iprintf>
 800f71a:	e00c      	b.n	800f736 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800f71c:	4840      	ldr	r0, [pc, #256]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f71e:	f7ff fa9d 	bl	800ec5c <DbgTraceGetFileName>
 800f722:	4601      	mov	r1, r0
 800f724:	f240 333d 	movw	r3, #829	@ 0x33d
 800f728:	4a3e      	ldr	r2, [pc, #248]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f72a:	483f      	ldr	r0, [pc, #252]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f72c:	f001 fb1e 	bl	8010d6c <iprintf>
 800f730:	4849      	ldr	r0, [pc, #292]	@ (800f858 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800f732:	f001 fb8b 	bl	8010e4c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800f736:	2118      	movs	r1, #24
 800f738:	2001      	movs	r0, #1
 800f73a:	f7fe f9e7 	bl	800db0c <aci_hal_set_tx_power_level>
 800f73e:	4603      	mov	r3, r0
 800f740:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f742:	7dfb      	ldrb	r3, [r7, #23]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d00f      	beq.n	800f768 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800f748:	4835      	ldr	r0, [pc, #212]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f74a:	f7ff fa87 	bl	800ec5c <DbgTraceGetFileName>
 800f74e:	4601      	mov	r1, r0
 800f750:	f240 3346 	movw	r3, #838	@ 0x346
 800f754:	4a33      	ldr	r2, [pc, #204]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f756:	4834      	ldr	r0, [pc, #208]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f758:	f001 fb08 	bl	8010d6c <iprintf>
 800f75c:	7dfb      	ldrb	r3, [r7, #23]
 800f75e:	4619      	mov	r1, r3
 800f760:	483e      	ldr	r0, [pc, #248]	@ (800f85c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800f762:	f001 fb03 	bl	8010d6c <iprintf>
 800f766:	e00c      	b.n	800f782 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800f768:	482d      	ldr	r0, [pc, #180]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f76a:	f7ff fa77 	bl	800ec5c <DbgTraceGetFileName>
 800f76e:	4601      	mov	r1, r0
 800f770:	f240 334a 	movw	r3, #842	@ 0x34a
 800f774:	4a2b      	ldr	r2, [pc, #172]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f776:	482c      	ldr	r0, [pc, #176]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f778:	f001 faf8 	bl	8010d6c <iprintf>
 800f77c:	4838      	ldr	r0, [pc, #224]	@ (800f860 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800f77e:	f001 fb65 	bl	8010e4c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800f782:	f7fd fe3d 	bl	800d400 <aci_gatt_init>
 800f786:	4603      	mov	r3, r0
 800f788:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f78a:	7dfb      	ldrb	r3, [r7, #23]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00f      	beq.n	800f7b0 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800f790:	4823      	ldr	r0, [pc, #140]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f792:	f7ff fa63 	bl	800ec5c <DbgTraceGetFileName>
 800f796:	4601      	mov	r1, r0
 800f798:	f240 3353 	movw	r3, #851	@ 0x353
 800f79c:	4a21      	ldr	r2, [pc, #132]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f79e:	4822      	ldr	r0, [pc, #136]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f7a0:	f001 fae4 	bl	8010d6c <iprintf>
 800f7a4:	7dfb      	ldrb	r3, [r7, #23]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	482e      	ldr	r0, [pc, #184]	@ (800f864 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800f7aa:	f001 fadf 	bl	8010d6c <iprintf>
 800f7ae:	e00c      	b.n	800f7ca <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800f7b0:	481b      	ldr	r0, [pc, #108]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f7b2:	f7ff fa53 	bl	800ec5c <DbgTraceGetFileName>
 800f7b6:	4601      	mov	r1, r0
 800f7b8:	f240 3357 	movw	r3, #855	@ 0x357
 800f7bc:	4a19      	ldr	r2, [pc, #100]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f7be:	481a      	ldr	r0, [pc, #104]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f7c0:	f001 fad4 	bl	8010d6c <iprintf>
 800f7c4:	4828      	ldr	r0, [pc, #160]	@ (800f868 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800f7c6:	f001 fb41 	bl	8010e4c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800f7ce:	7bfb      	ldrb	r3, [r7, #15]
 800f7d0:	f043 0301 	orr.w	r3, r3, #1
 800f7d4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800f7d6:	7bfb      	ldrb	r3, [r7, #15]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d069      	beq.n	800f8b0 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800f7dc:	4b23      	ldr	r3, [pc, #140]	@ (800f86c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800f7de:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800f7e0:	1dba      	adds	r2, r7, #6
 800f7e2:	7bf8      	ldrb	r0, [r7, #15]
 800f7e4:	1cbb      	adds	r3, r7, #2
 800f7e6:	9301      	str	r3, [sp, #4]
 800f7e8:	1d3b      	adds	r3, r7, #4
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	2203      	movs	r2, #3
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	f7fd fc5b 	bl	800d0ac <aci_gap_init>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800f7fa:	7dfb      	ldrb	r3, [r7, #23]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d039      	beq.n	800f874 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800f800:	4807      	ldr	r0, [pc, #28]	@ (800f820 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f802:	f7ff fa2b 	bl	800ec5c <DbgTraceGetFileName>
 800f806:	4601      	mov	r1, r0
 800f808:	f240 3377 	movw	r3, #887	@ 0x377
 800f80c:	4a05      	ldr	r2, [pc, #20]	@ (800f824 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f80e:	4806      	ldr	r0, [pc, #24]	@ (800f828 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f810:	f001 faac 	bl	8010d6c <iprintf>
 800f814:	7dfb      	ldrb	r3, [r7, #23]
 800f816:	4619      	mov	r1, r3
 800f818:	4815      	ldr	r0, [pc, #84]	@ (800f870 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800f81a:	f001 faa7 	bl	8010d6c <iprintf>
 800f81e:	e036      	b.n	800f88e <Ble_Hci_Gap_Gatt_Init+0x30a>
 800f820:	0801241c 	.word	0x0801241c
 800f824:	0801355c 	.word	0x0801355c
 800f828:	08012438 	.word	0x08012438
 800f82c:	08012960 	.word	0x08012960
 800f830:	0801298c 	.word	0x0801298c
 800f834:	080129bc 	.word	0x080129bc
 800f838:	080129dc 	.word	0x080129dc
 800f83c:	08012a38 	.word	0x08012a38
 800f840:	08012a84 	.word	0x08012a84
 800f844:	08013514 	.word	0x08013514
 800f848:	08012ac0 	.word	0x08012ac0
 800f84c:	08012b18 	.word	0x08012b18
 800f850:	08013524 	.word	0x08013524
 800f854:	08012b60 	.word	0x08012b60
 800f858:	08012bb8 	.word	0x08012bb8
 800f85c:	08012c00 	.word	0x08012c00
 800f860:	08012c40 	.word	0x08012c40
 800f864:	08012c70 	.word	0x08012c70
 800f868:	08012ca4 	.word	0x08012ca4
 800f86c:	08012cc8 	.word	0x08012cc8
 800f870:	08012ccc 	.word	0x08012ccc
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800f874:	487e      	ldr	r0, [pc, #504]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f876:	f7ff f9f1 	bl	800ec5c <DbgTraceGetFileName>
 800f87a:	4601      	mov	r1, r0
 800f87c:	f240 337b 	movw	r3, #891	@ 0x37b
 800f880:	4a7c      	ldr	r2, [pc, #496]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f882:	487d      	ldr	r0, [pc, #500]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f884:	f001 fa72 	bl	8010d6c <iprintf>
 800f888:	487c      	ldr	r0, [pc, #496]	@ (800fa7c <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800f88a:	f001 fadf 	bl	8010e4c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800f88e:	88fc      	ldrh	r4, [r7, #6]
 800f890:	88bd      	ldrh	r5, [r7, #4]
 800f892:	68b8      	ldr	r0, [r7, #8]
 800f894:	f7f0 fc74 	bl	8000180 <strlen>
 800f898:	4603      	mov	r3, r0
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	4613      	mov	r3, r2
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	4629      	mov	r1, r5
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f7fd ffad 	bl	800d806 <aci_gatt_update_char_value>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800f8b0:	88f8      	ldrh	r0, [r7, #6]
 800f8b2:	8879      	ldrh	r1, [r7, #2]
 800f8b4:	463b      	mov	r3, r7
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	f7fd ffa3 	bl	800d806 <aci_gatt_update_char_value>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800f8c4:	2202      	movs	r2, #2
 800f8c6:	2102      	movs	r1, #2
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	f7fe f9fe 	bl	800dcca <hci_le_set_default_phy>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f8d2:	7dfb      	ldrb	r3, [r7, #23]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d00f      	beq.n	800f8f8 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800f8d8:	4865      	ldr	r0, [pc, #404]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f8da:	f7ff f9bf 	bl	800ec5c <DbgTraceGetFileName>
 800f8de:	4601      	mov	r1, r0
 800f8e0:	f240 339d 	movw	r3, #925	@ 0x39d
 800f8e4:	4a63      	ldr	r2, [pc, #396]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f8e6:	4864      	ldr	r0, [pc, #400]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f8e8:	f001 fa40 	bl	8010d6c <iprintf>
 800f8ec:	7dfb      	ldrb	r3, [r7, #23]
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	4863      	ldr	r0, [pc, #396]	@ (800fa80 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800f8f2:	f001 fa3b 	bl	8010d6c <iprintf>
 800f8f6:	e00c      	b.n	800f912 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800f8f8:	485d      	ldr	r0, [pc, #372]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f8fa:	f7ff f9af 	bl	800ec5c <DbgTraceGetFileName>
 800f8fe:	4601      	mov	r1, r0
 800f900:	f240 33a1 	movw	r3, #929	@ 0x3a1
 800f904:	4a5b      	ldr	r2, [pc, #364]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f906:	485c      	ldr	r0, [pc, #368]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f908:	f001 fa30 	bl	8010d6c <iprintf>
 800f90c:	485d      	ldr	r0, [pc, #372]	@ (800fa84 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800f90e:	f001 fa9d 	bl	8010e4c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800f912:	4b5d      	ldr	r3, [pc, #372]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f914:	2201      	movs	r2, #1
 800f916:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800f918:	4b5b      	ldr	r3, [pc, #364]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fd fa46 	bl	800cdae <aci_gap_set_io_capability>
 800f922:	4603      	mov	r3, r0
 800f924:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f926:	7dfb      	ldrb	r3, [r7, #23]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00f      	beq.n	800f94c <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800f92c:	4850      	ldr	r0, [pc, #320]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f92e:	f7ff f995 	bl	800ec5c <DbgTraceGetFileName>
 800f932:	4601      	mov	r1, r0
 800f934:	f240 33ab 	movw	r3, #939	@ 0x3ab
 800f938:	4a4e      	ldr	r2, [pc, #312]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f93a:	484f      	ldr	r0, [pc, #316]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f93c:	f001 fa16 	bl	8010d6c <iprintf>
 800f940:	7dfb      	ldrb	r3, [r7, #23]
 800f942:	4619      	mov	r1, r3
 800f944:	4851      	ldr	r0, [pc, #324]	@ (800fa8c <Ble_Hci_Gap_Gatt_Init+0x508>)
 800f946:	f001 fa11 	bl	8010d6c <iprintf>
 800f94a:	e00c      	b.n	800f966 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800f94c:	4848      	ldr	r0, [pc, #288]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f94e:	f7ff f985 	bl	800ec5c <DbgTraceGetFileName>
 800f952:	4601      	mov	r1, r0
 800f954:	f240 33af 	movw	r3, #943	@ 0x3af
 800f958:	4a46      	ldr	r2, [pc, #280]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f95a:	4847      	ldr	r0, [pc, #284]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f95c:	f001 fa06 	bl	8010d6c <iprintf>
 800f960:	484b      	ldr	r0, [pc, #300]	@ (800fa90 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800f962:	f001 fa73 	bl	8010e4c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800f966:	4b48      	ldr	r3, [pc, #288]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f968:	2201      	movs	r2, #1
 800f96a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800f96c:	4b46      	ldr	r3, [pc, #280]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f96e:	2208      	movs	r2, #8
 800f970:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800f972:	4b45      	ldr	r3, [pc, #276]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f974:	2210      	movs	r2, #16
 800f976:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800f978:	4b43      	ldr	r3, [pc, #268]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f97a:	2200      	movs	r2, #0
 800f97c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800f97e:	4b42      	ldr	r3, [pc, #264]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f980:	4a44      	ldr	r2, [pc, #272]	@ (800fa94 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800f982:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800f984:	4b40      	ldr	r3, [pc, #256]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f986:	2200      	movs	r2, #0
 800f988:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800f98a:	4b3f      	ldr	r3, [pc, #252]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f98c:	789c      	ldrb	r4, [r3, #2]
 800f98e:	4b3e      	ldr	r3, [pc, #248]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f990:	785d      	ldrb	r5, [r3, #1]
 800f992:	4b3d      	ldr	r3, [pc, #244]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f994:	791b      	ldrb	r3, [r3, #4]
 800f996:	4a3c      	ldr	r2, [pc, #240]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f998:	7952      	ldrb	r2, [r2, #5]
 800f99a:	493b      	ldr	r1, [pc, #236]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f99c:	78c9      	ldrb	r1, [r1, #3]
 800f99e:	483a      	ldr	r0, [pc, #232]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f9a0:	6880      	ldr	r0, [r0, #8]
 800f9a2:	2600      	movs	r6, #0
 800f9a4:	9604      	str	r6, [sp, #16]
 800f9a6:	9003      	str	r0, [sp, #12]
 800f9a8:	9102      	str	r1, [sp, #8]
 800f9aa:	9201      	str	r2, [sp, #4]
 800f9ac:	9300      	str	r3, [sp, #0]
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	4629      	mov	r1, r5
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f7fd fa4e 	bl	800ce56 <aci_gap_set_authentication_requirement>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800f9be:	7dfb      	ldrb	r3, [r7, #23]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d00f      	beq.n	800f9e4 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800f9c4:	482a      	ldr	r0, [pc, #168]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f9c6:	f7ff f949 	bl	800ec5c <DbgTraceGetFileName>
 800f9ca:	4601      	mov	r1, r0
 800f9cc:	f240 33ca 	movw	r3, #970	@ 0x3ca
 800f9d0:	4a28      	ldr	r2, [pc, #160]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f9d2:	4829      	ldr	r0, [pc, #164]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f9d4:	f001 f9ca 	bl	8010d6c <iprintf>
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
 800f9da:	4619      	mov	r1, r3
 800f9dc:	482e      	ldr	r0, [pc, #184]	@ (800fa98 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800f9de:	f001 f9c5 	bl	8010d6c <iprintf>
 800f9e2:	e00c      	b.n	800f9fe <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800f9e4:	4822      	ldr	r0, [pc, #136]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f9e6:	f7ff f939 	bl	800ec5c <DbgTraceGetFileName>
 800f9ea:	4601      	mov	r1, r0
 800f9ec:	f240 33ce 	movw	r3, #974	@ 0x3ce
 800f9f0:	4a20      	ldr	r2, [pc, #128]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f9f2:	4821      	ldr	r0, [pc, #132]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f9f4:	f001 f9ba 	bl	8010d6c <iprintf>
 800f9f8:	4828      	ldr	r0, [pc, #160]	@ (800fa9c <Ble_Hci_Gap_Gatt_Init+0x518>)
 800f9fa:	f001 fa27 	bl	8010e4c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800f9fe:	4b22      	ldr	r3, [pc, #136]	@ (800fa88 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa00:	789b      	ldrb	r3, [r3, #2]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d023      	beq.n	800fa4e <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800fa06:	f7fd fc70 	bl	800d2ea <aci_gap_configure_filter_accept_list>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800fa0e:	7dfb      	ldrb	r3, [r7, #23]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00f      	beq.n	800fa34 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800fa14:	4816      	ldr	r0, [pc, #88]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fa16:	f7ff f921 	bl	800ec5c <DbgTraceGetFileName>
 800fa1a:	4601      	mov	r1, r0
 800fa1c:	f240 33d9 	movw	r3, #985	@ 0x3d9
 800fa20:	4a14      	ldr	r2, [pc, #80]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fa22:	4815      	ldr	r0, [pc, #84]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fa24:	f001 f9a2 	bl	8010d6c <iprintf>
 800fa28:	7dfb      	ldrb	r3, [r7, #23]
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	481c      	ldr	r0, [pc, #112]	@ (800faa0 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800fa2e:	f001 f99d 	bl	8010d6c <iprintf>
 800fa32:	e00c      	b.n	800fa4e <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800fa34:	480e      	ldr	r0, [pc, #56]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fa36:	f7ff f911 	bl	800ec5c <DbgTraceGetFileName>
 800fa3a:	4601      	mov	r1, r0
 800fa3c:	f240 33dd 	movw	r3, #989	@ 0x3dd
 800fa40:	4a0c      	ldr	r2, [pc, #48]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fa42:	480d      	ldr	r0, [pc, #52]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fa44:	f001 f992 	bl	8010d6c <iprintf>
 800fa48:	4816      	ldr	r0, [pc, #88]	@ (800faa4 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800fa4a:	f001 f9ff 	bl	8010e4c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800fa4e:	4808      	ldr	r0, [pc, #32]	@ (800fa70 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fa50:	f7ff f904 	bl	800ec5c <DbgTraceGetFileName>
 800fa54:	4601      	mov	r1, r0
 800fa56:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800fa5a:	4a06      	ldr	r2, [pc, #24]	@ (800fa74 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fa5c:	4806      	ldr	r0, [pc, #24]	@ (800fa78 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fa5e:	f001 f985 	bl	8010d6c <iprintf>
 800fa62:	4811      	ldr	r0, [pc, #68]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800fa64:	f001 f982 	bl	8010d6c <iprintf>
}
 800fa68:	bf00      	nop
 800fa6a:	371c      	adds	r7, #28
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa70:	0801241c 	.word	0x0801241c
 800fa74:	0801355c 	.word	0x0801355c
 800fa78:	08012438 	.word	0x08012438
 800fa7c:	08012cfc 	.word	0x08012cfc
 800fa80:	08012d1c 	.word	0x08012d1c
 800fa84:	08012d58 	.word	0x08012d58
 800fa88:	200008cc 	.word	0x200008cc
 800fa8c:	08012d84 	.word	0x08012d84
 800fa90:	08012dc4 	.word	0x08012dc4
 800fa94:	0001b207 	.word	0x0001b207
 800fa98:	08012df4 	.word	0x08012df4
 800fa9c:	08012e40 	.word	0x08012e40
 800faa0:	08012e7c 	.word	0x08012e7c
 800faa4:	08012ebc 	.word	0x08012ebc
 800faa8:	08012eec 	.word	0x08012eec

0800faac <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b08c      	sub	sp, #48	@ 0x30
 800fab0:	af08      	add	r7, sp, #32
 800fab2:	4603      	mov	r3, r0
 800fab4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fab6:	2392      	movs	r3, #146	@ 0x92
 800fab8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800faba:	4a32      	ldr	r2, [pc, #200]	@ (800fb84 <Adv_Request+0xd8>)
 800fabc:	79fb      	ldrb	r3, [r7, #7]
 800fabe:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800fac2:	2300      	movs	r3, #0
 800fac4:	9306      	str	r3, [sp, #24]
 800fac6:	2300      	movs	r3, #0
 800fac8:	9305      	str	r3, [sp, #20]
 800faca:	2300      	movs	r3, #0
 800facc:	9304      	str	r3, [sp, #16]
 800face:	2300      	movs	r3, #0
 800fad0:	9303      	str	r3, [sp, #12]
 800fad2:	2300      	movs	r3, #0
 800fad4:	9302      	str	r3, [sp, #8]
 800fad6:	2300      	movs	r3, #0
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	2300      	movs	r3, #0
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	2300      	movs	r3, #0
 800fae0:	22a0      	movs	r2, #160	@ 0xa0
 800fae2:	2180      	movs	r1, #128	@ 0x80
 800fae4:	2000      	movs	r0, #0
 800fae6:	f7fd f868 	bl	800cbba <aci_gap_set_discoverable>
 800faea:	4603      	mov	r3, r0
 800faec:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800faee:	7bfb      	ldrb	r3, [r7, #15]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00f      	beq.n	800fb14 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800faf4:	4824      	ldr	r0, [pc, #144]	@ (800fb88 <Adv_Request+0xdc>)
 800faf6:	f7ff f8b1 	bl	800ec5c <DbgTraceGetFileName>
 800fafa:	4601      	mov	r1, r0
 800fafc:	f240 33f6 	movw	r3, #1014	@ 0x3f6
 800fb00:	4a22      	ldr	r2, [pc, #136]	@ (800fb8c <Adv_Request+0xe0>)
 800fb02:	4823      	ldr	r0, [pc, #140]	@ (800fb90 <Adv_Request+0xe4>)
 800fb04:	f001 f932 	bl	8010d6c <iprintf>
 800fb08:	7bfb      	ldrb	r3, [r7, #15]
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	4821      	ldr	r0, [pc, #132]	@ (800fb94 <Adv_Request+0xe8>)
 800fb0e:	f001 f92d 	bl	8010d6c <iprintf>
 800fb12:	e00c      	b.n	800fb2e <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800fb14:	481c      	ldr	r0, [pc, #112]	@ (800fb88 <Adv_Request+0xdc>)
 800fb16:	f7ff f8a1 	bl	800ec5c <DbgTraceGetFileName>
 800fb1a:	4601      	mov	r1, r0
 800fb1c:	f240 33fa 	movw	r3, #1018	@ 0x3fa
 800fb20:	4a1a      	ldr	r2, [pc, #104]	@ (800fb8c <Adv_Request+0xe0>)
 800fb22:	481b      	ldr	r0, [pc, #108]	@ (800fb90 <Adv_Request+0xe4>)
 800fb24:	f001 f922 	bl	8010d6c <iprintf>
 800fb28:	481b      	ldr	r0, [pc, #108]	@ (800fb98 <Adv_Request+0xec>)
 800fb2a:	f001 f98f 	bl	8010e4c <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800fb2e:	491b      	ldr	r1, [pc, #108]	@ (800fb9c <Adv_Request+0xf0>)
 800fb30:	201b      	movs	r0, #27
 800fb32:	f7fd fb68 	bl	800d206 <aci_gap_update_adv_data>
 800fb36:	4603      	mov	r3, r0
 800fb38:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00f      	beq.n	800fb60 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800fb40:	4811      	ldr	r0, [pc, #68]	@ (800fb88 <Adv_Request+0xdc>)
 800fb42:	f7ff f88b 	bl	800ec5c <DbgTraceGetFileName>
 800fb46:	4601      	mov	r1, r0
 800fb48:	f240 4305 	movw	r3, #1029	@ 0x405
 800fb4c:	4a0f      	ldr	r2, [pc, #60]	@ (800fb8c <Adv_Request+0xe0>)
 800fb4e:	4810      	ldr	r0, [pc, #64]	@ (800fb90 <Adv_Request+0xe4>)
 800fb50:	f001 f90c 	bl	8010d6c <iprintf>
 800fb54:	7bfb      	ldrb	r3, [r7, #15]
 800fb56:	4619      	mov	r1, r3
 800fb58:	4811      	ldr	r0, [pc, #68]	@ (800fba0 <Adv_Request+0xf4>)
 800fb5a:	f001 f907 	bl	8010d6c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800fb5e:	e00d      	b.n	800fb7c <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800fb60:	4809      	ldr	r0, [pc, #36]	@ (800fb88 <Adv_Request+0xdc>)
 800fb62:	f7ff f87b 	bl	800ec5c <DbgTraceGetFileName>
 800fb66:	4601      	mov	r1, r0
 800fb68:	f240 4309 	movw	r3, #1033	@ 0x409
 800fb6c:	4a07      	ldr	r2, [pc, #28]	@ (800fb8c <Adv_Request+0xe0>)
 800fb6e:	4808      	ldr	r0, [pc, #32]	@ (800fb90 <Adv_Request+0xe4>)
 800fb70:	f001 f8fc 	bl	8010d6c <iprintf>
 800fb74:	480b      	ldr	r0, [pc, #44]	@ (800fba4 <Adv_Request+0xf8>)
 800fb76:	f001 f8f9 	bl	8010d6c <iprintf>
  return;
 800fb7a:	bf00      	nop
}
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	200008cc 	.word	0x200008cc
 800fb88:	0801241c 	.word	0x0801241c
 800fb8c:	08013574 	.word	0x08013574
 800fb90:	08012438 	.word	0x08012438
 800fb94:	08012f18 	.word	0x08012f18
 800fb98:	08012f50 	.word	0x08012f50
 800fb9c:	200000ec 	.word	0x200000ec
 800fba0:	08012f78 	.word	0x08012f78
 800fba4:	08012fac 	.word	0x08012fac

0800fba8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b086      	sub	sp, #24
 800fbac:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800fbae:	f7ff f963 	bl	800ee78 <LL_FLASH_GetUDN>
 800fbb2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbba:	d023      	beq.n	800fc04 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800fbbc:	f7ff f974 	bl	800eea8 <LL_FLASH_GetSTCompanyID>
 800fbc0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800fbc2:	f7ff f965 	bl	800ee90 <LL_FLASH_GetDeviceID>
 800fbc6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	4b16      	ldr	r3, [pc, #88]	@ (800fc28 <BleGetBdAddress+0x80>)
 800fbce:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	0a1b      	lsrs	r3, r3, #8
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	4b14      	ldr	r3, [pc, #80]	@ (800fc28 <BleGetBdAddress+0x80>)
 800fbd8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	4b12      	ldr	r3, [pc, #72]	@ (800fc28 <BleGetBdAddress+0x80>)
 800fbe0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	4b10      	ldr	r3, [pc, #64]	@ (800fc28 <BleGetBdAddress+0x80>)
 800fbe8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	0a1b      	lsrs	r3, r3, #8
 800fbee:	b2da      	uxtb	r2, r3
 800fbf0:	4b0d      	ldr	r3, [pc, #52]	@ (800fc28 <BleGetBdAddress+0x80>)
 800fbf2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	0c1b      	lsrs	r3, r3, #16
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	4b0b      	ldr	r3, [pc, #44]	@ (800fc28 <BleGetBdAddress+0x80>)
 800fbfc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800fbfe:	4b0a      	ldr	r3, [pc, #40]	@ (800fc28 <BleGetBdAddress+0x80>)
 800fc00:	617b      	str	r3, [r7, #20]
 800fc02:	e00b      	b.n	800fc1c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800fc04:	2000      	movs	r0, #0
 800fc06:	f7ff f851 	bl	800ecac <OTP_Read>
 800fc0a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d002      	beq.n	800fc18 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	617b      	str	r3, [r7, #20]
 800fc16:	e001      	b.n	800fc1c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800fc18:	4b04      	ldr	r3, [pc, #16]	@ (800fc2c <BleGetBdAddress+0x84>)
 800fc1a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800fc1c:	697b      	ldr	r3, [r7, #20]
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3718      	adds	r7, #24
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	200008c4 	.word	0x200008c4
 800fc2c:	0801350c 	.word	0x0801350c

0800fc30 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800fc36:	4b1f      	ldr	r3, [pc, #124]	@ (800fcb4 <Adv_Cancel+0x84>)
 800fc38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fc3c:	2b05      	cmp	r3, #5
 800fc3e:	d035      	beq.n	800fcac <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fc40:	2392      	movs	r3, #146	@ 0x92
 800fc42:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800fc44:	f7fc ff95 	bl	800cb72 <aci_gap_set_non_discoverable>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800fc4c:	4b19      	ldr	r3, [pc, #100]	@ (800fcb4 <Adv_Cancel+0x84>)
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800fc54:	79fb      	ldrb	r3, [r7, #7]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00d      	beq.n	800fc76 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800fc5a:	4817      	ldr	r0, [pc, #92]	@ (800fcb8 <Adv_Cancel+0x88>)
 800fc5c:	f7fe fffe 	bl	800ec5c <DbgTraceGetFileName>
 800fc60:	4601      	mov	r1, r0
 800fc62:	f240 4357 	movw	r3, #1111	@ 0x457
 800fc66:	4a15      	ldr	r2, [pc, #84]	@ (800fcbc <Adv_Cancel+0x8c>)
 800fc68:	4815      	ldr	r0, [pc, #84]	@ (800fcc0 <Adv_Cancel+0x90>)
 800fc6a:	f001 f87f 	bl	8010d6c <iprintf>
 800fc6e:	4815      	ldr	r0, [pc, #84]	@ (800fcc4 <Adv_Cancel+0x94>)
 800fc70:	f001 f87c 	bl	8010d6c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800fc74:	e01a      	b.n	800fcac <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800fc76:	4810      	ldr	r0, [pc, #64]	@ (800fcb8 <Adv_Cancel+0x88>)
 800fc78:	f7fe fff0 	bl	800ec5c <DbgTraceGetFileName>
 800fc7c:	4601      	mov	r1, r0
 800fc7e:	f240 435b 	movw	r3, #1115	@ 0x45b
 800fc82:	4a0e      	ldr	r2, [pc, #56]	@ (800fcbc <Adv_Cancel+0x8c>)
 800fc84:	480e      	ldr	r0, [pc, #56]	@ (800fcc0 <Adv_Cancel+0x90>)
 800fc86:	f001 f871 	bl	8010d6c <iprintf>
 800fc8a:	480f      	ldr	r0, [pc, #60]	@ (800fcc8 <Adv_Cancel+0x98>)
 800fc8c:	f001 f86e 	bl	8010d6c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800fc90:	4809      	ldr	r0, [pc, #36]	@ (800fcb8 <Adv_Cancel+0x88>)
 800fc92:	f7fe ffe3 	bl	800ec5c <DbgTraceGetFileName>
 800fc96:	4601      	mov	r1, r0
 800fc98:	f240 435c 	movw	r3, #1116	@ 0x45c
 800fc9c:	4a07      	ldr	r2, [pc, #28]	@ (800fcbc <Adv_Cancel+0x8c>)
 800fc9e:	4808      	ldr	r0, [pc, #32]	@ (800fcc0 <Adv_Cancel+0x90>)
 800fca0:	f001 f864 	bl	8010d6c <iprintf>
 800fca4:	4809      	ldr	r0, [pc, #36]	@ (800fccc <Adv_Cancel+0x9c>)
 800fca6:	f001 f861 	bl	8010d6c <iprintf>
  return;
 800fcaa:	bf00      	nop
 800fcac:	bf00      	nop
}
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	200008cc 	.word	0x200008cc
 800fcb8:	0801241c 	.word	0x0801241c
 800fcbc:	08013580 	.word	0x08013580
 800fcc0:	08012438 	.word	0x08012438
 800fcc4:	08012fd4 	.word	0x08012fd4
 800fcc8:	08012ff8 	.word	0x08012ff8
 800fccc:	08013000 	.word	0x08013000

0800fcd0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800fcd8:	2100      	movs	r1, #0
 800fcda:	2002      	movs	r0, #2
 800fcdc:	f000 fe68 	bl	80109b0 <UTIL_SEQ_SetTask>

  return;
 800fce0:	bf00      	nop
}
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800fcf0:	2001      	movs	r0, #1
 800fcf2:	f000 fec9 	bl	8010a88 <UTIL_SEQ_SetEvt>

  return;
 800fcf6:	bf00      	nop
}
 800fcf8:	3708      	adds	r7, #8
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800fcfe:	b580      	push	{r7, lr}
 800fd00:	b082      	sub	sp, #8
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800fd06:	2001      	movs	r0, #1
 800fd08:	f000 fede 	bl	8010ac8 <UTIL_SEQ_WaitEvt>

  return;
 800fd0c:	bf00      	nop
}
 800fd0e:	3708      	adds	r7, #8
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	3308      	adds	r3, #8
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fe f936 	bl	800df98 <SVCCTL_UserEvtRx>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800fd30:	7afb      	ldrb	r3, [r7, #11]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d003      	beq.n	800fd3e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2201      	movs	r2, #1
 800fd3a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800fd3c:	e003      	b.n	800fd46 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2200      	movs	r2, #0
 800fd42:	701a      	strb	r2, [r3, #0]
  return;
 800fd44:	bf00      	nop
}
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	4603      	mov	r3, r0
 800fd54:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800fd56:	79fb      	ldrb	r3, [r7, #7]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d002      	beq.n	800fd62 <BLE_StatusNot+0x16>
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d006      	beq.n	800fd6e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800fd60:	e00b      	b.n	800fd7a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800fd62:	2307      	movs	r3, #7
 800fd64:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f000 fe4e 	bl	8010a08 <UTIL_SEQ_PauseTask>
      break;
 800fd6c:	e005      	b.n	800fd7a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800fd6e:	2307      	movs	r3, #7
 800fd70:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f000 fe68 	bl	8010a48 <UTIL_SEQ_ResumeTask>
      break;
 800fd78:	bf00      	nop
  }

  return;
 800fd7a:	bf00      	nop
}
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
	...

0800fd84 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	// copy data update buffer +BCH
	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6859      	ldr	r1, [r3, #4]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	7a1b      	ldrb	r3, [r3, #8]
 800fd94:	461a      	mov	r2, r3
 800fd96:	4811      	ldr	r0, [pc, #68]	@ (800fddc <Custom_STM_App_Notification+0x58>)
 800fd98:	f001 f9c9 	bl	801112e <memcpy>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	2b03      	cmp	r3, #3
 800fda2:	d815      	bhi.n	800fdd0 <Custom_STM_App_Notification+0x4c>
 800fda4:	a201      	add	r2, pc, #4	@ (adr r2, 800fdac <Custom_STM_App_Notification+0x28>)
 800fda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdaa:	bf00      	nop
 800fdac:	0800fdbd 	.word	0x0800fdbd
 800fdb0:	0800fdc9 	.word	0x0800fdc9
 800fdb4:	0800fdd1 	.word	0x0800fdd1
 800fdb8:	0800fdd1 	.word	0x0800fdd1

    /* envoi_rep_definition */
    case CUSTOM_STM_MOVEMENT_RECORD_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOVEMENT_RECORD_READ_EVT */
    	// +BCH
    	Custom_App_Context.Movement_record_Notification_Status = 1;
 800fdbc:	4b08      	ldr	r3, [pc, #32]	@ (800fde0 <Custom_STM_App_Notification+0x5c>)
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	701a      	strb	r2, [r3, #0]
    	Custom_Movement_record_Send_Notification();
 800fdc2:	f000 f85b 	bl	800fe7c <Custom_Movement_record_Send_Notification>
      /* USER CODE END CUSTOM_STM_MOVEMENT_RECORD_READ_EVT */
      break;
 800fdc6:	e004      	b.n	800fdd2 <Custom_STM_App_Notification+0x4e>

    case CUSTOM_STM_MOVEMENT_RECORD_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOVEMENT_RECORD_WRITE_NO_RESP_EVT */
    	Custom_App_Context.Movement_record_Notification_Status = 0;
 800fdc8:	4b05      	ldr	r3, [pc, #20]	@ (800fde0 <Custom_STM_App_Notification+0x5c>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_MOVEMENT_RECORD_WRITE_NO_RESP_EVT */
      break;
 800fdce:	e000      	b.n	800fdd2 <Custom_STM_App_Notification+0x4e>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800fdd0:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800fdd2:	bf00      	nop
}
 800fdd4:	3708      	adds	r7, #8
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	20000958 	.word	0x20000958
 800fde0:	20000954 	.word	0x20000954

0800fde4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d002      	beq.n	800fdfa <Custom_APP_Notification+0x16>
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d002      	beq.n	800fdfe <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800fdf8:	e002      	b.n	800fe00 <Custom_APP_Notification+0x1c>
      break;
 800fdfa:	bf00      	nop
 800fdfc:	e000      	b.n	800fe00 <Custom_APP_Notification+0x1c>
      break;
 800fdfe:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800fe00:	bf00      	nop
}
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  /* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.Movement_record_Notification_Status = 0;
 800fe10:	4b05      	ldr	r3, [pc, #20]	@ (800fe28 <Custom_APP_Init+0x1c>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_RegTask(1 << CFG_TASK_ACC_rep_ref_ID, UTIL_SEQ_RFU,
 800fe16:	4a05      	ldr	r2, [pc, #20]	@ (800fe2c <Custom_APP_Init+0x20>)
 800fe18:	2100      	movs	r1, #0
 800fe1a:	2004      	movs	r0, #4
 800fe1c:	f000 fda6 	bl	801096c <UTIL_SEQ_RegTask>
			Custom_Movement_record_Send_Notification);
	Custom_Movement_record_Update_Char();
 800fe20:	f000 f818 	bl	800fe54 <Custom_Movement_record_Update_Char>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800fe24:	bf00      	nop
}
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	20000954 	.word	0x20000954
 800fe2c:	0800fe7d 	.word	0x0800fe7d

0800fe30 <BLE_MVT_REF>:

/* USER CODE BEGIN FD */
void BLE_MVT_REF(void) {
 800fe30:	b580      	push	{r7, lr}
 800fe32:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ref_ID, CFG_SCH_PRIO_0);
 800fe34:	2100      	movs	r1, #0
 800fe36:	2004      	movs	r0, #4
 800fe38:	f000 fdba 	bl	80109b0 <UTIL_SEQ_SetTask>

	//UTIL_SEQ_SetTask( 1<<CFG_TASK_B1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

	Custom_App_Context.Movement_record_Notification_Status = 1;
 800fe3c:	4b03      	ldr	r3, [pc, #12]	@ (800fe4c <BLE_MVT_REF+0x1c>)
 800fe3e:	2201      	movs	r2, #1
 800fe40:	701a      	strb	r2, [r3, #0]
	printf("on est dans le FSVC_APP_B1_Button_Action");
 800fe42:	4803      	ldr	r0, [pc, #12]	@ (800fe50 <BLE_MVT_REF+0x20>)
 800fe44:	f000 ff92 	bl	8010d6c <iprintf>

	return;
 800fe48:	bf00      	nop
}
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	20000954 	.word	0x20000954
 800fe50:	0801301c 	.word	0x0801301c

0800fe54 <Custom_Movement_record_Update_Char>:
 *
 *************************************************************/

/* envoi_rep_definition */
void Custom_Movement_record_Update_Char(void) /* Property Read */
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Movement_record_UC_1*/

  /* USER CODE END Movement_record_UC_1*/

  if (updateflag != 0)
 800fe5e:	79fb      	ldrb	r3, [r7, #7]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d004      	beq.n	800fe6e <Custom_Movement_record_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MOVEMENT_RECORD, (uint8_t *)UpdateCharData);
 800fe64:	4904      	ldr	r1, [pc, #16]	@ (800fe78 <Custom_Movement_record_Update_Char+0x24>)
 800fe66:	2000      	movs	r0, #0
 800fe68:	f000 f9ac 	bl	80101c4 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Movement_record_UC_Last*/

  /* USER CODE END Movement_record_UC_Last*/
  return;
 800fe6c:	bf00      	nop
 800fe6e:	bf00      	nop
}
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	20000958 	.word	0x20000958

0800fe7c <Custom_Movement_record_Send_Notification>:

void Custom_Movement_record_Send_Notification(void) /* Property Notification */
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800fe82:	2300      	movs	r3, #0
 800fe84:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Movement_record_NS_1*/
  if (Custom_App_Context.Movement_record_Notification_Status == 1) {
 800fe86:	4b1c      	ldr	r3, [pc, #112]	@ (800fef8 <Custom_Movement_record_Send_Notification+0x7c>)
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d11c      	bne.n	800fec8 <Custom_Movement_record_Send_Notification+0x4c>
  		updateflag = 1;
 800fe8e:	2301      	movs	r3, #1
 800fe90:	71fb      	strb	r3, [r7, #7]
  		char rep_valide[] = "salut";
 800fe92:	4a1a      	ldr	r2, [pc, #104]	@ (800fefc <Custom_Movement_record_Send_Notification+0x80>)
 800fe94:	463b      	mov	r3, r7
 800fe96:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe9a:	6018      	str	r0, [r3, #0]
 800fe9c:	3304      	adds	r3, #4
 800fe9e:	8019      	strh	r1, [r3, #0]
  		memcpy(&NotifyCharData[0], &rep_valide, sizeof(rep_valide));
 800fea0:	4b17      	ldr	r3, [pc, #92]	@ (800ff00 <Custom_Movement_record_Send_Notification+0x84>)
 800fea2:	463a      	mov	r2, r7
 800fea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fea8:	6018      	str	r0, [r3, #0]
 800feaa:	3304      	adds	r3, #4
 800feac:	8019      	strh	r1, [r3, #0]
  		APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep good \n");
 800feae:	4815      	ldr	r0, [pc, #84]	@ (800ff04 <Custom_Movement_record_Send_Notification+0x88>)
 800feb0:	f7fe fed4 	bl	800ec5c <DbgTraceGetFileName>
 800feb4:	4601      	mov	r1, r0
 800feb6:	23ee      	movs	r3, #238	@ 0xee
 800feb8:	4a13      	ldr	r2, [pc, #76]	@ (800ff08 <Custom_Movement_record_Send_Notification+0x8c>)
 800feba:	4814      	ldr	r0, [pc, #80]	@ (800ff0c <Custom_Movement_record_Send_Notification+0x90>)
 800febc:	f000 ff56 	bl	8010d6c <iprintf>
 800fec0:	4813      	ldr	r0, [pc, #76]	@ (800ff10 <Custom_Movement_record_Send_Notification+0x94>)
 800fec2:	f000 ffc3 	bl	8010e4c <puts>
 800fec6:	e00b      	b.n	800fee0 <Custom_Movement_record_Send_Notification+0x64>

  	} else {
  		APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800fec8:	480e      	ldr	r0, [pc, #56]	@ (800ff04 <Custom_Movement_record_Send_Notification+0x88>)
 800feca:	f7fe fec7 	bl	800ec5c <DbgTraceGetFileName>
 800fece:	4601      	mov	r1, r0
 800fed0:	23f1      	movs	r3, #241	@ 0xf1
 800fed2:	4a0d      	ldr	r2, [pc, #52]	@ (800ff08 <Custom_Movement_record_Send_Notification+0x8c>)
 800fed4:	480d      	ldr	r0, [pc, #52]	@ (800ff0c <Custom_Movement_record_Send_Notification+0x90>)
 800fed6:	f000 ff49 	bl	8010d6c <iprintf>
 800feda:	480e      	ldr	r0, [pc, #56]	@ (800ff14 <Custom_Movement_record_Send_Notification+0x98>)
 800fedc:	f000 ffb6 	bl	8010e4c <puts>
  	}
  /* USER CODE END Movement_record_NS_1*/

  if (updateflag != 0)
 800fee0:	79fb      	ldrb	r3, [r7, #7]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d004      	beq.n	800fef0 <Custom_Movement_record_Send_Notification+0x74>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MOVEMENT_RECORD, (uint8_t *)NotifyCharData);
 800fee6:	4906      	ldr	r1, [pc, #24]	@ (800ff00 <Custom_Movement_record_Send_Notification+0x84>)
 800fee8:	2000      	movs	r0, #0
 800feea:	f000 f96b 	bl	80101c4 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Movement_record_NS_Last*/

  /* USER CODE END Movement_record_NS_Last*/

  return;
 800feee:	bf00      	nop
 800fef0:	bf00      	nop
}
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	20000954 	.word	0x20000954
 800fefc:	080130fc 	.word	0x080130fc
 800ff00:	20000a50 	.word	0x20000a50
 800ff04:	08013048 	.word	0x08013048
 800ff08:	0801358c 	.word	0x0801358c
 800ff0c:	08013068 	.word	0x08013068
 800ff10:	0801307c 	.word	0x0801307c
 800ff14:	080130b4 	.word	0x080130b4

0800ff18 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b08c      	sub	sp, #48	@ 0x30
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800ff20:	2300      	movs	r3, #0
 800ff22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	3301      	adds	r3, #1
 800ff2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800ff2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2bff      	cmp	r3, #255	@ 0xff
 800ff32:	d178      	bne.n	8010026 <Custom_STM_Event_Handler+0x10e>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800ff34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff36:	3302      	adds	r3, #2
 800ff38:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff3c:	881b      	ldrh	r3, [r3, #0]
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	f640 4214 	movw	r2, #3092	@ 0xc14
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d040      	beq.n	800ffca <Custom_STM_Event_Handler+0xb2>
 800ff48:	f640 4214 	movw	r2, #3092	@ 0xc14
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	dc62      	bgt.n	8010016 <Custom_STM_Event_Handler+0xfe>
 800ff50:	f640 4201 	movw	r2, #3073	@ 0xc01
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d004      	beq.n	800ff62 <Custom_STM_Event_Handler+0x4a>
 800ff58:	f640 4213 	movw	r2, #3091	@ 0xc13
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d04a      	beq.n	800fff6 <Custom_STM_Event_Handler+0xde>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800ff60:	e059      	b.n	8010016 <Custom_STM_Event_Handler+0xfe>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ff62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff64:	3302      	adds	r3, #2
 800ff66:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMovement_RecordHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	885b      	ldrh	r3, [r3, #2]
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	461a      	mov	r2, r3
 800ff70:	4b30      	ldr	r3, [pc, #192]	@ (8010034 <Custom_STM_Event_Handler+0x11c>)
 800ff72:	885b      	ldrh	r3, [r3, #2]
 800ff74:	3302      	adds	r3, #2
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d119      	bne.n	800ffae <Custom_STM_Event_Handler+0x96>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	7a1b      	ldrb	r3, [r3, #8]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d002      	beq.n	800ff8e <Custom_STM_Event_Handler+0x76>
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d008      	beq.n	800ff9e <Custom_STM_Event_Handler+0x86>
              break;
 800ff8c:	e01c      	b.n	800ffc8 <Custom_STM_Event_Handler+0xb0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOVEMENT_RECORD_NOTIFY_DISABLED_EVT;
 800ff8e:	2303      	movs	r3, #3
 800ff90:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800ff92:	f107 0308 	add.w	r3, r7, #8
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7ff fef4 	bl	800fd84 <Custom_STM_App_Notification>
                break;
 800ff9c:	e014      	b.n	800ffc8 <Custom_STM_Event_Handler+0xb0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOVEMENT_RECORD_NOTIFY_ENABLED_EVT;
 800ff9e:	2302      	movs	r3, #2
 800ffa0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800ffa2:	f107 0308 	add.w	r3, r7, #8
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7ff feec 	bl	800fd84 <Custom_STM_App_Notification>
                break;
 800ffac:	e00c      	b.n	800ffc8 <Custom_STM_Event_Handler+0xb0>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMovement_RecordHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	885b      	ldrh	r3, [r3, #2]
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	4b1f      	ldr	r3, [pc, #124]	@ (8010034 <Custom_STM_Event_Handler+0x11c>)
 800ffb8:	885b      	ldrh	r3, [r3, #2]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d12c      	bne.n	801001a <Custom_STM_Event_Handler+0x102>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800ffc6:	e028      	b.n	801001a <Custom_STM_Event_Handler+0x102>
 800ffc8:	e027      	b.n	801001a <Custom_STM_Event_Handler+0x102>
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800ffca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffcc:	3302      	adds	r3, #2
 800ffce:	623b      	str	r3, [r7, #32]
          if (read_req->Attribute_Handle == (CustomContext.CustomMovement_RecordHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ffd0:	6a3b      	ldr	r3, [r7, #32]
 800ffd2:	885b      	ldrh	r3, [r3, #2]
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	4b16      	ldr	r3, [pc, #88]	@ (8010034 <Custom_STM_Event_Handler+0x11c>)
 800ffda:	885b      	ldrh	r3, [r3, #2]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d11d      	bne.n	801001e <Custom_STM_Event_Handler+0x106>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            aci_gatt_allow_read(read_req->Connection_Handle);
 800ffe8:	6a3b      	ldr	r3, [r7, #32]
 800ffea:	881b      	ldrh	r3, [r3, #0]
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7fd fcb2 	bl	800d958 <aci_gatt_allow_read>
          break;
 800fff4:	e013      	b.n	801001e <Custom_STM_Event_Handler+0x106>
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800fff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff8:	3302      	adds	r3, #2
 800fffa:	61fb      	str	r3, [r7, #28]
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomMovement_RecordHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	885b      	ldrh	r3, [r3, #2]
 8010000:	b29b      	uxth	r3, r3
 8010002:	461a      	mov	r2, r3
 8010004:	4b0b      	ldr	r3, [pc, #44]	@ (8010034 <Custom_STM_Event_Handler+0x11c>)
 8010006:	885b      	ldrh	r3, [r3, #2]
 8010008:	3301      	adds	r3, #1
 801000a:	429a      	cmp	r2, r3
 801000c:	d109      	bne.n	8010022 <Custom_STM_Event_Handler+0x10a>
            return_value = SVCCTL_EvtAckFlowEnable;
 801000e:	2301      	movs	r3, #1
 8010010:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8010014:	e005      	b.n	8010022 <Custom_STM_Event_Handler+0x10a>
          break;
 8010016:	bf00      	nop
 8010018:	e006      	b.n	8010028 <Custom_STM_Event_Handler+0x110>
          break;
 801001a:	bf00      	nop
 801001c:	e004      	b.n	8010028 <Custom_STM_Event_Handler+0x110>
          break;
 801001e:	bf00      	nop
 8010020:	e002      	b.n	8010028 <Custom_STM_Event_Handler+0x110>
          break;
 8010022:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010024:	e000      	b.n	8010028 <Custom_STM_Event_Handler+0x110>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8010026:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8010028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 801002c:	4618      	mov	r0, r3
 801002e:	3730      	adds	r7, #48	@ 0x30
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	20000b48 	.word	0x20000b48

08010038 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b08c      	sub	sp, #48	@ 0x30
 801003c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801003e:	2392      	movs	r3, #146	@ 0x92
 8010040:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8010042:	4855      	ldr	r0, [pc, #340]	@ (8010198 <SVCCTL_InitCustomSvc+0x160>)
 8010044:	f7fd ff8e 	bl	800df64 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 8010048:	2304      	movs	r3, #4
 801004a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_ENVOI_REP_DEFINITION_UUID(uuid.Char_UUID_128);
 801004c:	238f      	movs	r3, #143	@ 0x8f
 801004e:	713b      	strb	r3, [r7, #4]
 8010050:	23e5      	movs	r3, #229	@ 0xe5
 8010052:	717b      	strb	r3, [r7, #5]
 8010054:	23b3      	movs	r3, #179	@ 0xb3
 8010056:	71bb      	strb	r3, [r7, #6]
 8010058:	23d5      	movs	r3, #213	@ 0xd5
 801005a:	71fb      	strb	r3, [r7, #7]
 801005c:	232e      	movs	r3, #46	@ 0x2e
 801005e:	723b      	strb	r3, [r7, #8]
 8010060:	237f      	movs	r3, #127	@ 0x7f
 8010062:	727b      	strb	r3, [r7, #9]
 8010064:	234a      	movs	r3, #74	@ 0x4a
 8010066:	72bb      	strb	r3, [r7, #10]
 8010068:	2398      	movs	r3, #152	@ 0x98
 801006a:	72fb      	strb	r3, [r7, #11]
 801006c:	232a      	movs	r3, #42	@ 0x2a
 801006e:	733b      	strb	r3, [r7, #12]
 8010070:	2348      	movs	r3, #72	@ 0x48
 8010072:	737b      	strb	r3, [r7, #13]
 8010074:	237a      	movs	r3, #122	@ 0x7a
 8010076:	73bb      	strb	r3, [r7, #14]
 8010078:	23cc      	movs	r3, #204	@ 0xcc
 801007a:	73fb      	strb	r3, [r7, #15]
 801007c:	2300      	movs	r3, #0
 801007e:	743b      	strb	r3, [r7, #16]
 8010080:	2300      	movs	r3, #0
 8010082:	747b      	strb	r3, [r7, #17]
 8010084:	2300      	movs	r3, #0
 8010086:	74bb      	strb	r3, [r7, #18]
 8010088:	2300      	movs	r3, #0
 801008a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801008c:	7dbb      	ldrb	r3, [r7, #22]
 801008e:	1d39      	adds	r1, r7, #4
 8010090:	4a42      	ldr	r2, [pc, #264]	@ (801019c <SVCCTL_InitCustomSvc+0x164>)
 8010092:	9200      	str	r2, [sp, #0]
 8010094:	2201      	movs	r2, #1
 8010096:	2002      	movs	r0, #2
 8010098:	f7fd f9d7 	bl	800d44a <aci_gatt_add_service>
 801009c:	4603      	mov	r3, r0
 801009e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomRep_RefHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80100a0:	7dfb      	ldrb	r3, [r7, #23]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d00f      	beq.n	80100c6 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: rep_ref, error code: 0x%x \n\r", ret);
 80100a6:	483e      	ldr	r0, [pc, #248]	@ (80101a0 <SVCCTL_InitCustomSvc+0x168>)
 80100a8:	f7fe fdd8 	bl	800ec5c <DbgTraceGetFileName>
 80100ac:	4601      	mov	r1, r0
 80100ae:	f240 1349 	movw	r3, #329	@ 0x149
 80100b2:	4a3c      	ldr	r2, [pc, #240]	@ (80101a4 <SVCCTL_InitCustomSvc+0x16c>)
 80100b4:	483c      	ldr	r0, [pc, #240]	@ (80101a8 <SVCCTL_InitCustomSvc+0x170>)
 80100b6:	f000 fe59 	bl	8010d6c <iprintf>
 80100ba:	7dfb      	ldrb	r3, [r7, #23]
 80100bc:	4619      	mov	r1, r3
 80100be:	483b      	ldr	r0, [pc, #236]	@ (80101ac <SVCCTL_InitCustomSvc+0x174>)
 80100c0:	f000 fe54 	bl	8010d6c <iprintf>
 80100c4:	e00c      	b.n	80100e0 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: rep_ref \n\r");
 80100c6:	4836      	ldr	r0, [pc, #216]	@ (80101a0 <SVCCTL_InitCustomSvc+0x168>)
 80100c8:	f7fe fdc8 	bl	800ec5c <DbgTraceGetFileName>
 80100cc:	4601      	mov	r1, r0
 80100ce:	f240 134d 	movw	r3, #333	@ 0x14d
 80100d2:	4a34      	ldr	r2, [pc, #208]	@ (80101a4 <SVCCTL_InitCustomSvc+0x16c>)
 80100d4:	4834      	ldr	r0, [pc, #208]	@ (80101a8 <SVCCTL_InitCustomSvc+0x170>)
 80100d6:	f000 fe49 	bl	8010d6c <iprintf>
 80100da:	4835      	ldr	r0, [pc, #212]	@ (80101b0 <SVCCTL_InitCustomSvc+0x178>)
 80100dc:	f000 fe46 	bl	8010d6c <iprintf>
  }

  /**
   *  Movement_record_ref
   */
  COPY_MOVEMENT_RECORD_REF_UUID(uuid.Char_UUID_128);
 80100e0:	2319      	movs	r3, #25
 80100e2:	713b      	strb	r3, [r7, #4]
 80100e4:	23ed      	movs	r3, #237	@ 0xed
 80100e6:	717b      	strb	r3, [r7, #5]
 80100e8:	2382      	movs	r3, #130	@ 0x82
 80100ea:	71bb      	strb	r3, [r7, #6]
 80100ec:	23ae      	movs	r3, #174	@ 0xae
 80100ee:	71fb      	strb	r3, [r7, #7]
 80100f0:	23ed      	movs	r3, #237	@ 0xed
 80100f2:	723b      	strb	r3, [r7, #8]
 80100f4:	2321      	movs	r3, #33	@ 0x21
 80100f6:	727b      	strb	r3, [r7, #9]
 80100f8:	234c      	movs	r3, #76	@ 0x4c
 80100fa:	72bb      	strb	r3, [r7, #10]
 80100fc:	239d      	movs	r3, #157	@ 0x9d
 80100fe:	72fb      	strb	r3, [r7, #11]
 8010100:	2341      	movs	r3, #65	@ 0x41
 8010102:	733b      	strb	r3, [r7, #12]
 8010104:	2345      	movs	r3, #69	@ 0x45
 8010106:	737b      	strb	r3, [r7, #13]
 8010108:	2322      	movs	r3, #34	@ 0x22
 801010a:	73bb      	strb	r3, [r7, #14]
 801010c:	238e      	movs	r3, #142	@ 0x8e
 801010e:	73fb      	strb	r3, [r7, #15]
 8010110:	23cd      	movs	r3, #205	@ 0xcd
 8010112:	743b      	strb	r3, [r7, #16]
 8010114:	23ab      	movs	r3, #171	@ 0xab
 8010116:	747b      	strb	r3, [r7, #17]
 8010118:	2300      	movs	r3, #0
 801011a:	74bb      	strb	r3, [r7, #18]
 801011c:	2300      	movs	r3, #0
 801011e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomRep_RefHdle,
 8010120:	4b1e      	ldr	r3, [pc, #120]	@ (801019c <SVCCTL_InitCustomSvc+0x164>)
 8010122:	8818      	ldrh	r0, [r3, #0]
 8010124:	4b23      	ldr	r3, [pc, #140]	@ (80101b4 <SVCCTL_InitCustomSvc+0x17c>)
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	4619      	mov	r1, r3
 801012a:	1d3a      	adds	r2, r7, #4
 801012c:	4b22      	ldr	r3, [pc, #136]	@ (80101b8 <SVCCTL_InitCustomSvc+0x180>)
 801012e:	9305      	str	r3, [sp, #20]
 8010130:	2301      	movs	r3, #1
 8010132:	9304      	str	r3, [sp, #16]
 8010134:	2310      	movs	r3, #16
 8010136:	9303      	str	r3, [sp, #12]
 8010138:	2307      	movs	r3, #7
 801013a:	9302      	str	r3, [sp, #8]
 801013c:	2300      	movs	r3, #0
 801013e:	9301      	str	r3, [sp, #4]
 8010140:	2316      	movs	r3, #22
 8010142:	9300      	str	r3, [sp, #0]
 8010144:	460b      	mov	r3, r1
 8010146:	2102      	movs	r1, #2
 8010148:	f7fd fa55 	bl	800d5f6 <aci_gatt_add_char>
 801014c:	4603      	mov	r3, r0
 801014e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomMovement_RecordHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8010150:	7dfb      	ldrb	r3, [r7, #23]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00f      	beq.n	8010176 <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MOVEMENT_RECORD, error code: 0x%x \n\r", ret);
 8010156:	4812      	ldr	r0, [pc, #72]	@ (80101a0 <SVCCTL_InitCustomSvc+0x168>)
 8010158:	f7fe fd80 	bl	800ec5c <DbgTraceGetFileName>
 801015c:	4601      	mov	r1, r0
 801015e:	f240 135f 	movw	r3, #351	@ 0x15f
 8010162:	4a10      	ldr	r2, [pc, #64]	@ (80101a4 <SVCCTL_InitCustomSvc+0x16c>)
 8010164:	4810      	ldr	r0, [pc, #64]	@ (80101a8 <SVCCTL_InitCustomSvc+0x170>)
 8010166:	f000 fe01 	bl	8010d6c <iprintf>
 801016a:	7dfb      	ldrb	r3, [r7, #23]
 801016c:	4619      	mov	r1, r3
 801016e:	4813      	ldr	r0, [pc, #76]	@ (80101bc <SVCCTL_InitCustomSvc+0x184>)
 8010170:	f000 fdfc 	bl	8010d6c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8010174:	e00d      	b.n	8010192 <SVCCTL_InitCustomSvc+0x15a>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MOVEMENT_RECORD \n\r");
 8010176:	480a      	ldr	r0, [pc, #40]	@ (80101a0 <SVCCTL_InitCustomSvc+0x168>)
 8010178:	f7fe fd70 	bl	800ec5c <DbgTraceGetFileName>
 801017c:	4601      	mov	r1, r0
 801017e:	f240 1363 	movw	r3, #355	@ 0x163
 8010182:	4a08      	ldr	r2, [pc, #32]	@ (80101a4 <SVCCTL_InitCustomSvc+0x16c>)
 8010184:	4808      	ldr	r0, [pc, #32]	@ (80101a8 <SVCCTL_InitCustomSvc+0x170>)
 8010186:	f000 fdf1 	bl	8010d6c <iprintf>
 801018a:	480d      	ldr	r0, [pc, #52]	@ (80101c0 <SVCCTL_InitCustomSvc+0x188>)
 801018c:	f000 fdee 	bl	8010d6c <iprintf>
  return;
 8010190:	bf00      	nop
}
 8010192:	3718      	adds	r7, #24
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	0800ff19 	.word	0x0800ff19
 801019c:	20000b48 	.word	0x20000b48
 80101a0:	08013104 	.word	0x08013104
 80101a4:	080135b8 	.word	0x080135b8
 80101a8:	08013124 	.word	0x08013124
 80101ac:	08013138 	.word	0x08013138
 80101b0:	08013180 	.word	0x08013180
 80101b4:	20000107 	.word	0x20000107
 80101b8:	20000b4a 	.word	0x20000b4a
 80101bc:	080131b4 	.word	0x080131b4
 80101c0:	08013204 	.word	0x08013204

080101c4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af02      	add	r7, sp, #8
 80101ca:	4603      	mov	r3, r0
 80101cc:	6039      	str	r1, [r7, #0]
 80101ce:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80101d0:	2392      	movs	r3, #146	@ 0x92
 80101d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80101d4:	79fb      	ldrb	r3, [r7, #7]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d12e      	bne.n	8010238 <Custom_STM_App_Update_Char+0x74>
  {

    case CUSTOM_STM_MOVEMENT_RECORD:
      ret = aci_gatt_update_char_value(CustomContext.CustomRep_RefHdle,
 80101da:	4b1a      	ldr	r3, [pc, #104]	@ (8010244 <Custom_STM_App_Update_Char+0x80>)
 80101dc:	8818      	ldrh	r0, [r3, #0]
 80101de:	4b19      	ldr	r3, [pc, #100]	@ (8010244 <Custom_STM_App_Update_Char+0x80>)
 80101e0:	8859      	ldrh	r1, [r3, #2]
 80101e2:	4b19      	ldr	r3, [pc, #100]	@ (8010248 <Custom_STM_App_Update_Char+0x84>)
 80101e4:	781a      	ldrb	r2, [r3, #0]
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	9300      	str	r3, [sp, #0]
 80101ea:	4613      	mov	r3, r2
 80101ec:	2200      	movs	r2, #0
 80101ee:	f7fd fb0a 	bl	800d806 <aci_gatt_update_char_value>
 80101f2:	4603      	mov	r3, r0
 80101f4:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomMovement_RecordHdle,
                                       0, /* charValOffset */
                                       SizeMovement_Record, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80101f6:	7bfb      	ldrb	r3, [r7, #15]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d00f      	beq.n	801021c <Custom_STM_App_Update_Char+0x58>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value MOVEMENT_RECORD command, result : 0x%x \n\r", ret);
 80101fc:	4813      	ldr	r0, [pc, #76]	@ (801024c <Custom_STM_App_Update_Char+0x88>)
 80101fe:	f7fe fd2d 	bl	800ec5c <DbgTraceGetFileName>
 8010202:	4601      	mov	r1, r0
 8010204:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8010208:	4a11      	ldr	r2, [pc, #68]	@ (8010250 <Custom_STM_App_Update_Char+0x8c>)
 801020a:	4812      	ldr	r0, [pc, #72]	@ (8010254 <Custom_STM_App_Update_Char+0x90>)
 801020c:	f000 fdae 	bl	8010d6c <iprintf>
 8010210:	7bfb      	ldrb	r3, [r7, #15]
 8010212:	4619      	mov	r1, r3
 8010214:	4810      	ldr	r0, [pc, #64]	@ (8010258 <Custom_STM_App_Update_Char+0x94>)
 8010216:	f000 fda9 	bl	8010d6c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MOVEMENT_RECORD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 801021a:	e00e      	b.n	801023a <Custom_STM_App_Update_Char+0x76>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MOVEMENT_RECORD command\n\r");
 801021c:	480b      	ldr	r0, [pc, #44]	@ (801024c <Custom_STM_App_Update_Char+0x88>)
 801021e:	f7fe fd1d 	bl	800ec5c <DbgTraceGetFileName>
 8010222:	4601      	mov	r1, r0
 8010224:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8010228:	4a09      	ldr	r2, [pc, #36]	@ (8010250 <Custom_STM_App_Update_Char+0x8c>)
 801022a:	480a      	ldr	r0, [pc, #40]	@ (8010254 <Custom_STM_App_Update_Char+0x90>)
 801022c:	f000 fd9e 	bl	8010d6c <iprintf>
 8010230:	480a      	ldr	r0, [pc, #40]	@ (801025c <Custom_STM_App_Update_Char+0x98>)
 8010232:	f000 fd9b 	bl	8010d6c <iprintf>
      break;
 8010236:	e000      	b.n	801023a <Custom_STM_App_Update_Char+0x76>

    default:
      break;
 8010238:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 801023a:	7bfb      	ldrb	r3, [r7, #15]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	20000b48 	.word	0x20000b48
 8010248:	20000107 	.word	0x20000107
 801024c:	08013104 	.word	0x08013104
 8010250:	080135d0 	.word	0x080135d0
 8010254:	08013124 	.word	0x08013124
 8010258:	08013240 	.word	0x08013240
 801025c:	08013290 	.word	0x08013290

08010260 <LL_PWR_EnableBootC2>:
{
 8010260:	b480      	push	{r7}
 8010262:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8010264:	4b05      	ldr	r3, [pc, #20]	@ (801027c <LL_PWR_EnableBootC2+0x1c>)
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	4a04      	ldr	r2, [pc, #16]	@ (801027c <LL_PWR_EnableBootC2+0x1c>)
 801026a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801026e:	60d3      	str	r3, [r2, #12]
}
 8010270:	bf00      	nop
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr
 801027a:	bf00      	nop
 801027c:	58000400 	.word	0x58000400

08010280 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010288:	4b06      	ldr	r3, [pc, #24]	@ (80102a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801028a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801028e:	4905      	ldr	r1, [pc, #20]	@ (80102a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4313      	orrs	r3, r2
 8010294:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	58000800 	.word	0x58000800

080102a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80102b0:	4b05      	ldr	r3, [pc, #20]	@ (80102c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80102b2:	6a1a      	ldr	r2, [r3, #32]
 80102b4:	4904      	ldr	r1, [pc, #16]	@ (80102c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4313      	orrs	r3, r2
 80102ba:	620b      	str	r3, [r1, #32]
}
 80102bc:	bf00      	nop
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr
 80102c8:	58000800 	.word	0x58000800

080102cc <LL_AHB3_GRP1_EnableClock>:
{
 80102cc:	b480      	push	{r7}
 80102ce:	b085      	sub	sp, #20
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80102d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4313      	orrs	r3, r2
 80102e2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80102e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4013      	ands	r3, r2
 80102ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80102f0:	68fb      	ldr	r3, [r7, #12]
}
 80102f2:	bf00      	nop
 80102f4:	3714      	adds	r7, #20
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr

080102fe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80102fe:	b480      	push	{r7}
 8010300:	b085      	sub	sp, #20
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8010306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801030a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801030e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4313      	orrs	r3, r2
 8010316:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801031a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801031e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4013      	ands	r3, r2
 8010326:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010328:	68fb      	ldr	r3, [r7, #12]
}
 801032a:	bf00      	nop
 801032c:	3714      	adds	r7, #20
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr

08010336 <LL_C1_IPCC_EnableIT_TXF>:
{
 8010336:	b480      	push	{r7}
 8010338:	b083      	sub	sp, #12
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	601a      	str	r2, [r3, #0]
}
 801034a:	bf00      	nop
 801034c:	370c      	adds	r7, #12
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr

08010356 <LL_C1_IPCC_EnableIT_RXO>:
{
 8010356:	b480      	push	{r7}
 8010358:	b083      	sub	sp, #12
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f043 0201 	orr.w	r2, r3, #1
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	601a      	str	r2, [r3, #0]
}
 801036a:	bf00      	nop
 801036c:	370c      	adds	r7, #12
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr

08010376 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8010376:	b480      	push	{r7}
 8010378:	b083      	sub	sp, #12
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	685a      	ldr	r2, [r3, #4]
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	041b      	lsls	r3, r3, #16
 8010388:	43db      	mvns	r3, r3
 801038a:	401a      	ands	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	605a      	str	r2, [r3, #4]
}
 8010390:	bf00      	nop
 8010392:	370c      	adds	r7, #12
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <LL_C1_IPCC_DisableTransmitChannel>:
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	685a      	ldr	r2, [r3, #4]
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	041b      	lsls	r3, r3, #16
 80103ae:	431a      	orrs	r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	605a      	str	r2, [r3, #4]
}
 80103b4:	bf00      	nop
 80103b6:	370c      	adds	r7, #12
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr

080103c0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	685a      	ldr	r2, [r3, #4]
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	43db      	mvns	r3, r3
 80103d2:	401a      	ands	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	605a      	str	r2, [r3, #4]
}
 80103d8:	bf00      	nop
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	683a      	ldr	r2, [r7, #0]
 80103f2:	609a      	str	r2, [r3, #8]
}
 80103f4:	bf00      	nop
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <LL_C1_IPCC_SetFlag_CHx>:
{
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	041a      	lsls	r2, r3, #16
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	609a      	str	r2, [r3, #8]
}
 8010412:	bf00      	nop
 8010414:	370c      	adds	r7, #12
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr

0801041e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 801041e:	b480      	push	{r7}
 8010420:	b083      	sub	sp, #12
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
 8010426:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	68da      	ldr	r2, [r3, #12]
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	4013      	ands	r3, r2
 8010430:	683a      	ldr	r2, [r7, #0]
 8010432:	429a      	cmp	r2, r3
 8010434:	d101      	bne.n	801043a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8010436:	2301      	movs	r3, #1
 8010438:	e000      	b.n	801043c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801043a:	2300      	movs	r3, #0
}
 801043c:	4618      	mov	r0, r3
 801043e:	370c      	adds	r7, #12
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr

08010448 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	69da      	ldr	r2, [r3, #28]
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	4013      	ands	r3, r2
 801045a:	683a      	ldr	r2, [r7, #0]
 801045c:	429a      	cmp	r2, r3
 801045e:	d101      	bne.n	8010464 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8010460:	2301      	movs	r3, #1
 8010462:	e000      	b.n	8010466 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8010464:	2300      	movs	r3, #0
}
 8010466:	4618      	mov	r0, r3
 8010468:	370c      	adds	r7, #12
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr
	...

08010474 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8010474:	b580      	push	{r7, lr}
 8010476:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8010478:	2102      	movs	r1, #2
 801047a:	4818      	ldr	r0, [pc, #96]	@ (80104dc <HW_IPCC_Rx_Handler+0x68>)
 801047c:	f7ff ffe4 	bl	8010448 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d008      	beq.n	8010498 <HW_IPCC_Rx_Handler+0x24>
 8010486:	4b15      	ldr	r3, [pc, #84]	@ (80104dc <HW_IPCC_Rx_Handler+0x68>)
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	f003 0302 	and.w	r3, r3, #2
 801048e:	2b00      	cmp	r3, #0
 8010490:	d102      	bne.n	8010498 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8010492:	f000 f8d5 	bl	8010640 <HW_IPCC_SYS_EvtHandler>
 8010496:	e01e      	b.n	80104d6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8010498:	2101      	movs	r1, #1
 801049a:	4810      	ldr	r0, [pc, #64]	@ (80104dc <HW_IPCC_Rx_Handler+0x68>)
 801049c:	f7ff ffd4 	bl	8010448 <LL_C2_IPCC_IsActiveFlag_CHx>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d008      	beq.n	80104b8 <HW_IPCC_Rx_Handler+0x44>
 80104a6:	4b0d      	ldr	r3, [pc, #52]	@ (80104dc <HW_IPCC_Rx_Handler+0x68>)
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	f003 0301 	and.w	r3, r3, #1
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d102      	bne.n	80104b8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80104b2:	f000 f889 	bl	80105c8 <HW_IPCC_BLE_EvtHandler>
 80104b6:	e00e      	b.n	80104d6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80104b8:	2108      	movs	r1, #8
 80104ba:	4808      	ldr	r0, [pc, #32]	@ (80104dc <HW_IPCC_Rx_Handler+0x68>)
 80104bc:	f7ff ffc4 	bl	8010448 <LL_C2_IPCC_IsActiveFlag_CHx>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d008      	beq.n	80104d8 <HW_IPCC_Rx_Handler+0x64>
 80104c6:	4b05      	ldr	r3, [pc, #20]	@ (80104dc <HW_IPCC_Rx_Handler+0x68>)
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	f003 0308 	and.w	r3, r3, #8
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d102      	bne.n	80104d8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80104d2:	f000 f901 	bl	80106d8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80104d6:	bf00      	nop
 80104d8:	bf00      	nop
}
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	58000c00 	.word	0x58000c00

080104e0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80104e4:	2102      	movs	r1, #2
 80104e6:	4818      	ldr	r0, [pc, #96]	@ (8010548 <HW_IPCC_Tx_Handler+0x68>)
 80104e8:	f7ff ff99 	bl	801041e <LL_C1_IPCC_IsActiveFlag_CHx>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d108      	bne.n	8010504 <HW_IPCC_Tx_Handler+0x24>
 80104f2:	4b15      	ldr	r3, [pc, #84]	@ (8010548 <HW_IPCC_Tx_Handler+0x68>)
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d102      	bne.n	8010504 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80104fe:	f000 f893 	bl	8010628 <HW_IPCC_SYS_CmdEvtHandler>
 8010502:	e01e      	b.n	8010542 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8010504:	2108      	movs	r1, #8
 8010506:	4810      	ldr	r0, [pc, #64]	@ (8010548 <HW_IPCC_Tx_Handler+0x68>)
 8010508:	f7ff ff89 	bl	801041e <LL_C1_IPCC_IsActiveFlag_CHx>
 801050c:	4603      	mov	r3, r0
 801050e:	2b00      	cmp	r3, #0
 8010510:	d108      	bne.n	8010524 <HW_IPCC_Tx_Handler+0x44>
 8010512:	4b0d      	ldr	r3, [pc, #52]	@ (8010548 <HW_IPCC_Tx_Handler+0x68>)
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801051a:	2b00      	cmp	r3, #0
 801051c:	d102      	bne.n	8010524 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801051e:	f000 f8bd 	bl	801069c <HW_IPCC_MM_FreeBufHandler>
 8010522:	e00e      	b.n	8010542 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8010524:	2120      	movs	r1, #32
 8010526:	4808      	ldr	r0, [pc, #32]	@ (8010548 <HW_IPCC_Tx_Handler+0x68>)
 8010528:	f7ff ff79 	bl	801041e <LL_C1_IPCC_IsActiveFlag_CHx>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d108      	bne.n	8010544 <HW_IPCC_Tx_Handler+0x64>
 8010532:	4b05      	ldr	r3, [pc, #20]	@ (8010548 <HW_IPCC_Tx_Handler+0x68>)
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801053a:	2b00      	cmp	r3, #0
 801053c:	d102      	bne.n	8010544 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801053e:	f000 f84f 	bl	80105e0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8010542:	bf00      	nop
 8010544:	bf00      	nop
}
 8010546:	bd80      	pop	{r7, pc}
 8010548:	58000c00 	.word	0x58000c00

0801054c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801054c:	b580      	push	{r7, lr}
 801054e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8010550:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010554:	f7ff fed3 	bl	80102fe <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010558:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801055c:	f7ff fea4 	bl	80102a8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8010560:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010564:	f7ff fe8c 	bl	8010280 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8010568:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801056a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801056c:	f7ff fe78 	bl	8010260 <LL_PWR_EnableBootC2>

  return;
 8010570:	bf00      	nop
}
 8010572:	bd80      	pop	{r7, pc}

08010574 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8010578:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801057c:	f7ff fea6 	bl	80102cc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8010580:	4806      	ldr	r0, [pc, #24]	@ (801059c <HW_IPCC_Init+0x28>)
 8010582:	f7ff fee8 	bl	8010356 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8010586:	4805      	ldr	r0, [pc, #20]	@ (801059c <HW_IPCC_Init+0x28>)
 8010588:	f7ff fed5 	bl	8010336 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801058c:	202c      	movs	r0, #44	@ 0x2c
 801058e:	f7f8 f8d6 	bl	800873e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8010592:	202d      	movs	r0, #45	@ 0x2d
 8010594:	f7f8 f8d3 	bl	800873e <HAL_NVIC_EnableIRQ>

  return;
 8010598:	bf00      	nop
}
 801059a:	bd80      	pop	{r7, pc}
 801059c:	58000c00 	.word	0x58000c00

080105a0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80105a4:	2101      	movs	r1, #1
 80105a6:	4802      	ldr	r0, [pc, #8]	@ (80105b0 <HW_IPCC_BLE_Init+0x10>)
 80105a8:	f7ff ff0a 	bl	80103c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80105ac:	bf00      	nop
}
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	58000c00 	.word	0x58000c00

080105b4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80105b8:	2101      	movs	r1, #1
 80105ba:	4802      	ldr	r0, [pc, #8]	@ (80105c4 <HW_IPCC_BLE_SendCmd+0x10>)
 80105bc:	f7ff ff20 	bl	8010400 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80105c0:	bf00      	nop
}
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	58000c00 	.word	0x58000c00

080105c8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80105cc:	f7fe f98e 	bl	800e8ec <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80105d0:	2101      	movs	r1, #1
 80105d2:	4802      	ldr	r0, [pc, #8]	@ (80105dc <HW_IPCC_BLE_EvtHandler+0x14>)
 80105d4:	f7ff ff06 	bl	80103e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80105d8:	bf00      	nop
}
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	58000c00 	.word	0x58000c00

080105e0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80105e4:	2120      	movs	r1, #32
 80105e6:	4803      	ldr	r0, [pc, #12]	@ (80105f4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80105e8:	f7ff fed8 	bl	801039c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80105ec:	f7fe f9ae 	bl	800e94c <HW_IPCC_BLE_AclDataAckNot>

  return;
 80105f0:	bf00      	nop
}
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	58000c00 	.word	0x58000c00

080105f8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80105fc:	2102      	movs	r1, #2
 80105fe:	4802      	ldr	r0, [pc, #8]	@ (8010608 <HW_IPCC_SYS_Init+0x10>)
 8010600:	f7ff fede 	bl	80103c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010604:	bf00      	nop
}
 8010606:	bd80      	pop	{r7, pc}
 8010608:	58000c00 	.word	0x58000c00

0801060c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801060c:	b580      	push	{r7, lr}
 801060e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010610:	2102      	movs	r1, #2
 8010612:	4804      	ldr	r0, [pc, #16]	@ (8010624 <HW_IPCC_SYS_SendCmd+0x18>)
 8010614:	f7ff fef4 	bl	8010400 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010618:	2102      	movs	r1, #2
 801061a:	4802      	ldr	r0, [pc, #8]	@ (8010624 <HW_IPCC_SYS_SendCmd+0x18>)
 801061c:	f7ff feab 	bl	8010376 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8010620:	bf00      	nop
}
 8010622:	bd80      	pop	{r7, pc}
 8010624:	58000c00 	.word	0x58000c00

08010628 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801062c:	2102      	movs	r1, #2
 801062e:	4803      	ldr	r0, [pc, #12]	@ (801063c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8010630:	f7ff feb4 	bl	801039c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8010634:	f7fe f9da 	bl	800e9ec <HW_IPCC_SYS_CmdEvtNot>

  return;
 8010638:	bf00      	nop
}
 801063a:	bd80      	pop	{r7, pc}
 801063c:	58000c00 	.word	0x58000c00

08010640 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8010640:	b580      	push	{r7, lr}
 8010642:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8010644:	f7fe f9e8 	bl	800ea18 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010648:	2102      	movs	r1, #2
 801064a:	4802      	ldr	r0, [pc, #8]	@ (8010654 <HW_IPCC_SYS_EvtHandler+0x14>)
 801064c:	f7ff feca 	bl	80103e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010650:	bf00      	nop
}
 8010652:	bd80      	pop	{r7, pc}
 8010654:	58000c00 	.word	0x58000c00

08010658 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8010660:	2108      	movs	r1, #8
 8010662:	480c      	ldr	r0, [pc, #48]	@ (8010694 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010664:	f7ff fedb 	bl	801041e <LL_C1_IPCC_IsActiveFlag_CHx>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d007      	beq.n	801067e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801066e:	4a0a      	ldr	r2, [pc, #40]	@ (8010698 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010674:	2108      	movs	r1, #8
 8010676:	4807      	ldr	r0, [pc, #28]	@ (8010694 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010678:	f7ff fe7d 	bl	8010376 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801067c:	e006      	b.n	801068c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010682:	2108      	movs	r1, #8
 8010684:	4803      	ldr	r0, [pc, #12]	@ (8010694 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010686:	f7ff febb 	bl	8010400 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801068a:	bf00      	nop
}
 801068c:	3708      	adds	r7, #8
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	58000c00 	.word	0x58000c00
 8010698:	20000b4c 	.word	0x20000b4c

0801069c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801069c:	b580      	push	{r7, lr}
 801069e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80106a0:	2108      	movs	r1, #8
 80106a2:	4806      	ldr	r0, [pc, #24]	@ (80106bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80106a4:	f7ff fe7a 	bl	801039c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80106a8:	4b05      	ldr	r3, [pc, #20]	@ (80106c0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80106ae:	2108      	movs	r1, #8
 80106b0:	4802      	ldr	r0, [pc, #8]	@ (80106bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80106b2:	f7ff fea5 	bl	8010400 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80106b6:	bf00      	nop
}
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	58000c00 	.word	0x58000c00
 80106c0:	20000b4c 	.word	0x20000b4c

080106c4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80106c8:	2108      	movs	r1, #8
 80106ca:	4802      	ldr	r0, [pc, #8]	@ (80106d4 <HW_IPCC_TRACES_Init+0x10>)
 80106cc:	f7ff fe78 	bl	80103c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80106d0:	bf00      	nop
}
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	58000c00 	.word	0x58000c00

080106d8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80106dc:	f7fe fa44 	bl	800eb68 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80106e0:	2108      	movs	r1, #8
 80106e2:	4802      	ldr	r0, [pc, #8]	@ (80106ec <HW_IPCC_TRACES_EvtHandler+0x14>)
 80106e4:	f7ff fe7e 	bl	80103e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80106e8:	bf00      	nop
}
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	58000c00 	.word	0x58000c00

080106f0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80106f0:	b480      	push	{r7}
 80106f2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80106f4:	4b05      	ldr	r3, [pc, #20]	@ (801070c <UTIL_LPM_Init+0x1c>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80106fa:	4b05      	ldr	r3, [pc, #20]	@ (8010710 <UTIL_LPM_Init+0x20>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010700:	bf00      	nop
 8010702:	46bd      	mov	sp, r7
 8010704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010708:	4770      	bx	lr
 801070a:	bf00      	nop
 801070c:	20000b50 	.word	0x20000b50
 8010710:	20000b54 	.word	0x20000b54

08010714 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8010714:	b480      	push	{r7}
 8010716:	b087      	sub	sp, #28
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	460b      	mov	r3, r1
 801071e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010720:	f3ef 8310 	mrs	r3, PRIMASK
 8010724:	613b      	str	r3, [r7, #16]
  return(result);
 8010726:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8010728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801072a:	b672      	cpsid	i
}
 801072c:	bf00      	nop
  
  switch(state)
 801072e:	78fb      	ldrb	r3, [r7, #3]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d008      	beq.n	8010746 <UTIL_LPM_SetOffMode+0x32>
 8010734:	2b01      	cmp	r3, #1
 8010736:	d10e      	bne.n	8010756 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010738:	4b0d      	ldr	r3, [pc, #52]	@ (8010770 <UTIL_LPM_SetOffMode+0x5c>)
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	4313      	orrs	r3, r2
 8010740:	4a0b      	ldr	r2, [pc, #44]	@ (8010770 <UTIL_LPM_SetOffMode+0x5c>)
 8010742:	6013      	str	r3, [r2, #0]
      break;
 8010744:	e008      	b.n	8010758 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	43da      	mvns	r2, r3
 801074a:	4b09      	ldr	r3, [pc, #36]	@ (8010770 <UTIL_LPM_SetOffMode+0x5c>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	4013      	ands	r3, r2
 8010750:	4a07      	ldr	r2, [pc, #28]	@ (8010770 <UTIL_LPM_SetOffMode+0x5c>)
 8010752:	6013      	str	r3, [r2, #0]
      break;
 8010754:	e000      	b.n	8010758 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8010756:	bf00      	nop
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f383 8810 	msr	PRIMASK, r3
}
 8010762:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010764:	bf00      	nop
 8010766:	371c      	adds	r7, #28
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr
 8010770:	20000b54 	.word	0x20000b54

08010774 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b090      	sub	sp, #64	@ 0x40
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801077c:	4b73      	ldr	r3, [pc, #460]	@ (801094c <UTIL_SEQ_Run+0x1d8>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8010782:	4b72      	ldr	r3, [pc, #456]	@ (801094c <UTIL_SEQ_Run+0x1d8>)
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4013      	ands	r3, r2
 801078a:	4a70      	ldr	r2, [pc, #448]	@ (801094c <UTIL_SEQ_Run+0x1d8>)
 801078c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801078e:	4b70      	ldr	r3, [pc, #448]	@ (8010950 <UTIL_SEQ_Run+0x1dc>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8010794:	4b6f      	ldr	r3, [pc, #444]	@ (8010954 <UTIL_SEQ_Run+0x1e0>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801079a:	4b6f      	ldr	r3, [pc, #444]	@ (8010958 <UTIL_SEQ_Run+0x1e4>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80107a0:	4b6e      	ldr	r3, [pc, #440]	@ (801095c <UTIL_SEQ_Run+0x1e8>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80107a6:	e08d      	b.n	80108c4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80107a8:	2300      	movs	r3, #0
 80107aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80107ac:	e002      	b.n	80107b4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80107ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107b0:	3301      	adds	r3, #1
 80107b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80107b4:	4a6a      	ldr	r2, [pc, #424]	@ (8010960 <UTIL_SEQ_Run+0x1ec>)
 80107b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80107bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107be:	401a      	ands	r2, r3
 80107c0:	4b62      	ldr	r3, [pc, #392]	@ (801094c <UTIL_SEQ_Run+0x1d8>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4013      	ands	r3, r2
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d0f1      	beq.n	80107ae <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80107ca:	4a65      	ldr	r2, [pc, #404]	@ (8010960 <UTIL_SEQ_Run+0x1ec>)
 80107cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80107d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d4:	401a      	ands	r2, r3
 80107d6:	4b5d      	ldr	r3, [pc, #372]	@ (801094c <UTIL_SEQ_Run+0x1d8>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	4013      	ands	r3, r2
 80107dc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80107de:	4a60      	ldr	r2, [pc, #384]	@ (8010960 <UTIL_SEQ_Run+0x1ec>)
 80107e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	4413      	add	r3, r2
 80107e6:	685a      	ldr	r2, [r3, #4]
 80107e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ea:	4013      	ands	r3, r2
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d106      	bne.n	80107fe <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80107f0:	4a5b      	ldr	r2, [pc, #364]	@ (8010960 <UTIL_SEQ_Run+0x1ec>)
 80107f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107f4:	00db      	lsls	r3, r3, #3
 80107f6:	4413      	add	r3, r2
 80107f8:	f04f 32ff 	mov.w	r2, #4294967295
 80107fc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80107fe:	4a58      	ldr	r2, [pc, #352]	@ (8010960 <UTIL_SEQ_Run+0x1ec>)
 8010800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010802:	00db      	lsls	r3, r3, #3
 8010804:	4413      	add	r3, r2
 8010806:	685a      	ldr	r2, [r3, #4]
 8010808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801080a:	4013      	ands	r3, r2
 801080c:	4618      	mov	r0, r3
 801080e:	f000 f9b3 	bl	8010b78 <SEQ_BitPosition>
 8010812:	4603      	mov	r3, r0
 8010814:	461a      	mov	r2, r3
 8010816:	4b53      	ldr	r3, [pc, #332]	@ (8010964 <UTIL_SEQ_Run+0x1f0>)
 8010818:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801081a:	4a51      	ldr	r2, [pc, #324]	@ (8010960 <UTIL_SEQ_Run+0x1ec>)
 801081c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801081e:	00db      	lsls	r3, r3, #3
 8010820:	4413      	add	r3, r2
 8010822:	685a      	ldr	r2, [r3, #4]
 8010824:	4b4f      	ldr	r3, [pc, #316]	@ (8010964 <UTIL_SEQ_Run+0x1f0>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	2101      	movs	r1, #1
 801082a:	fa01 f303 	lsl.w	r3, r1, r3
 801082e:	43db      	mvns	r3, r3
 8010830:	401a      	ands	r2, r3
 8010832:	494b      	ldr	r1, [pc, #300]	@ (8010960 <UTIL_SEQ_Run+0x1ec>)
 8010834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010836:	00db      	lsls	r3, r3, #3
 8010838:	440b      	add	r3, r1
 801083a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801083c:	f3ef 8310 	mrs	r3, PRIMASK
 8010840:	61bb      	str	r3, [r7, #24]
  return(result);
 8010842:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010844:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8010846:	b672      	cpsid	i
}
 8010848:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801084a:	4b46      	ldr	r3, [pc, #280]	@ (8010964 <UTIL_SEQ_Run+0x1f0>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2201      	movs	r2, #1
 8010850:	fa02 f303 	lsl.w	r3, r2, r3
 8010854:	43da      	mvns	r2, r3
 8010856:	4b3e      	ldr	r3, [pc, #248]	@ (8010950 <UTIL_SEQ_Run+0x1dc>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4013      	ands	r3, r2
 801085c:	4a3c      	ldr	r2, [pc, #240]	@ (8010950 <UTIL_SEQ_Run+0x1dc>)
 801085e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010860:	2302      	movs	r3, #2
 8010862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010864:	e013      	b.n	801088e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010868:	3b01      	subs	r3, #1
 801086a:	4a3d      	ldr	r2, [pc, #244]	@ (8010960 <UTIL_SEQ_Run+0x1ec>)
 801086c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010870:	4b3c      	ldr	r3, [pc, #240]	@ (8010964 <UTIL_SEQ_Run+0x1f0>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2201      	movs	r2, #1
 8010876:	fa02 f303 	lsl.w	r3, r2, r3
 801087a:	43da      	mvns	r2, r3
 801087c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801087e:	3b01      	subs	r3, #1
 8010880:	400a      	ands	r2, r1
 8010882:	4937      	ldr	r1, [pc, #220]	@ (8010960 <UTIL_SEQ_Run+0x1ec>)
 8010884:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801088a:	3b01      	subs	r3, #1
 801088c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801088e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1e8      	bne.n	8010866 <UTIL_SEQ_Run+0xf2>
 8010894:	6a3b      	ldr	r3, [r7, #32]
 8010896:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	f383 8810 	msr	PRIMASK, r3
}
 801089e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80108a0:	4b30      	ldr	r3, [pc, #192]	@ (8010964 <UTIL_SEQ_Run+0x1f0>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a30      	ldr	r2, [pc, #192]	@ (8010968 <UTIL_SEQ_Run+0x1f4>)
 80108a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108aa:	4798      	blx	r3

    local_taskset = TaskSet;
 80108ac:	4b28      	ldr	r3, [pc, #160]	@ (8010950 <UTIL_SEQ_Run+0x1dc>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80108b2:	4b28      	ldr	r3, [pc, #160]	@ (8010954 <UTIL_SEQ_Run+0x1e0>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80108b8:	4b27      	ldr	r3, [pc, #156]	@ (8010958 <UTIL_SEQ_Run+0x1e4>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80108be:	4b27      	ldr	r3, [pc, #156]	@ (801095c <UTIL_SEQ_Run+0x1e8>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80108c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80108c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c8:	401a      	ands	r2, r3
 80108ca:	4b20      	ldr	r3, [pc, #128]	@ (801094c <UTIL_SEQ_Run+0x1d8>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4013      	ands	r3, r2
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d005      	beq.n	80108e0 <UTIL_SEQ_Run+0x16c>
 80108d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80108d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d8:	4013      	ands	r3, r2
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f43f af64 	beq.w	80107a8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80108e0:	4b20      	ldr	r3, [pc, #128]	@ (8010964 <UTIL_SEQ_Run+0x1f0>)
 80108e2:	f04f 32ff 	mov.w	r2, #4294967295
 80108e6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80108e8:	f000 f938 	bl	8010b5c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108ec:	f3ef 8310 	mrs	r3, PRIMASK
 80108f0:	613b      	str	r3, [r7, #16]
  return(result);
 80108f2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80108f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80108f6:	b672      	cpsid	i
}
 80108f8:	bf00      	nop
  local_taskset = TaskSet;
 80108fa:	4b15      	ldr	r3, [pc, #84]	@ (8010950 <UTIL_SEQ_Run+0x1dc>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8010900:	4b14      	ldr	r3, [pc, #80]	@ (8010954 <UTIL_SEQ_Run+0x1e0>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8010906:	4b14      	ldr	r3, [pc, #80]	@ (8010958 <UTIL_SEQ_Run+0x1e4>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801090c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801090e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010910:	401a      	ands	r2, r3
 8010912:	4b0e      	ldr	r3, [pc, #56]	@ (801094c <UTIL_SEQ_Run+0x1d8>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4013      	ands	r3, r2
 8010918:	2b00      	cmp	r3, #0
 801091a:	d107      	bne.n	801092c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801091c:	4b0f      	ldr	r3, [pc, #60]	@ (801095c <UTIL_SEQ_Run+0x1e8>)
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010922:	4013      	ands	r3, r2
 8010924:	2b00      	cmp	r3, #0
 8010926:	d101      	bne.n	801092c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8010928:	f7f1 f971 	bl	8001c0e <UTIL_SEQ_Idle>
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f383 8810 	msr	PRIMASK, r3
}
 8010936:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8010938:	f000 f917 	bl	8010b6a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801093c:	4a03      	ldr	r2, [pc, #12]	@ (801094c <UTIL_SEQ_Run+0x1d8>)
 801093e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010940:	6013      	str	r3, [r2, #0]

  return;
 8010942:	bf00      	nop
}
 8010944:	3740      	adds	r7, #64	@ 0x40
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	2000010c 	.word	0x2000010c
 8010950:	20000b58 	.word	0x20000b58
 8010954:	20000b5c 	.word	0x20000b5c
 8010958:	20000108 	.word	0x20000108
 801095c:	20000b60 	.word	0x20000b60
 8010960:	20000be8 	.word	0x20000be8
 8010964:	20000b64 	.word	0x20000b64
 8010968:	20000b68 	.word	0x20000b68

0801096c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b088      	sub	sp, #32
 8010970:	af00      	add	r7, sp, #0
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010978:	f3ef 8310 	mrs	r3, PRIMASK
 801097c:	617b      	str	r3, [r7, #20]
  return(result);
 801097e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8010980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010982:	b672      	cpsid	i
}
 8010984:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010986:	68f8      	ldr	r0, [r7, #12]
 8010988:	f000 f8f6 	bl	8010b78 <SEQ_BitPosition>
 801098c:	4603      	mov	r3, r0
 801098e:	4619      	mov	r1, r3
 8010990:	4a06      	ldr	r2, [pc, #24]	@ (80109ac <UTIL_SEQ_RegTask+0x40>)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010998:	69fb      	ldr	r3, [r7, #28]
 801099a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801099c:	69bb      	ldr	r3, [r7, #24]
 801099e:	f383 8810 	msr	PRIMASK, r3
}
 80109a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80109a4:	bf00      	nop
}
 80109a6:	3720      	adds	r7, #32
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	20000b68 	.word	0x20000b68

080109b0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80109b0:	b480      	push	{r7}
 80109b2:	b087      	sub	sp, #28
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109ba:	f3ef 8310 	mrs	r3, PRIMASK
 80109be:	60fb      	str	r3, [r7, #12]
  return(result);
 80109c0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80109c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80109c4:	b672      	cpsid	i
}
 80109c6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80109c8:	4b0d      	ldr	r3, [pc, #52]	@ (8010a00 <UTIL_SEQ_SetTask+0x50>)
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	4313      	orrs	r3, r2
 80109d0:	4a0b      	ldr	r2, [pc, #44]	@ (8010a00 <UTIL_SEQ_SetTask+0x50>)
 80109d2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80109d4:	4a0b      	ldr	r2, [pc, #44]	@ (8010a04 <UTIL_SEQ_SetTask+0x54>)
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	431a      	orrs	r2, r3
 80109e0:	4908      	ldr	r1, [pc, #32]	@ (8010a04 <UTIL_SEQ_SetTask+0x54>)
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	f383 8810 	msr	PRIMASK, r3
}
 80109f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80109f4:	bf00      	nop
}
 80109f6:	371c      	adds	r7, #28
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr
 8010a00:	20000b58 	.word	0x20000b58
 8010a04:	20000be8 	.word	0x20000be8

08010a08 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b087      	sub	sp, #28
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a10:	f3ef 8310 	mrs	r3, PRIMASK
 8010a14:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a16:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010a18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010a1a:	b672      	cpsid	i
}
 8010a1c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	43da      	mvns	r2, r3
 8010a22:	4b08      	ldr	r3, [pc, #32]	@ (8010a44 <UTIL_SEQ_PauseTask+0x3c>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4013      	ands	r3, r2
 8010a28:	4a06      	ldr	r2, [pc, #24]	@ (8010a44 <UTIL_SEQ_PauseTask+0x3c>)
 8010a2a:	6013      	str	r3, [r2, #0]
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	f383 8810 	msr	PRIMASK, r3
}
 8010a36:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010a38:	bf00      	nop
}
 8010a3a:	371c      	adds	r7, #28
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr
 8010a44:	20000108 	.word	0x20000108

08010a48 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b087      	sub	sp, #28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a50:	f3ef 8310 	mrs	r3, PRIMASK
 8010a54:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a56:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010a58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010a5a:	b672      	cpsid	i
}
 8010a5c:	bf00      	nop

  TaskMask |= TaskId_bm;
 8010a5e:	4b09      	ldr	r3, [pc, #36]	@ (8010a84 <UTIL_SEQ_ResumeTask+0x3c>)
 8010a60:	681a      	ldr	r2, [r3, #0]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4313      	orrs	r3, r2
 8010a66:	4a07      	ldr	r2, [pc, #28]	@ (8010a84 <UTIL_SEQ_ResumeTask+0x3c>)
 8010a68:	6013      	str	r3, [r2, #0]
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	f383 8810 	msr	PRIMASK, r3
}
 8010a74:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010a76:	bf00      	nop
}
 8010a78:	371c      	adds	r7, #28
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr
 8010a82:	bf00      	nop
 8010a84:	20000108 	.word	0x20000108

08010a88 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b087      	sub	sp, #28
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a90:	f3ef 8310 	mrs	r3, PRIMASK
 8010a94:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a96:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010a98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010a9a:	b672      	cpsid	i
}
 8010a9c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8010a9e:	4b09      	ldr	r3, [pc, #36]	@ (8010ac4 <UTIL_SEQ_SetEvt+0x3c>)
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	4a07      	ldr	r2, [pc, #28]	@ (8010ac4 <UTIL_SEQ_SetEvt+0x3c>)
 8010aa8:	6013      	str	r3, [r2, #0]
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	f383 8810 	msr	PRIMASK, r3
}
 8010ab4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010ab6:	bf00      	nop
}
 8010ab8:	371c      	adds	r7, #28
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	20000b5c 	.word	0x20000b5c

08010ac8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b088      	sub	sp, #32
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8010ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8010b50 <UTIL_SEQ_WaitEvt+0x88>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8010ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8010b50 <UTIL_SEQ_WaitEvt+0x88>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ade:	d102      	bne.n	8010ae6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	61fb      	str	r3, [r7, #28]
 8010ae4:	e005      	b.n	8010af2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8010ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8010b50 <UTIL_SEQ_WaitEvt+0x88>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2201      	movs	r2, #1
 8010aec:	fa02 f303 	lsl.w	r3, r2, r3
 8010af0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8010af2:	4b18      	ldr	r3, [pc, #96]	@ (8010b54 <UTIL_SEQ_WaitEvt+0x8c>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8010af8:	4a16      	ldr	r2, [pc, #88]	@ (8010b54 <UTIL_SEQ_WaitEvt+0x8c>)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8010afe:	e003      	b.n	8010b08 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8010b00:	6879      	ldr	r1, [r7, #4]
 8010b02:	69f8      	ldr	r0, [r7, #28]
 8010b04:	f7f1 f88a 	bl	8001c1c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8010b08:	4b13      	ldr	r3, [pc, #76]	@ (8010b58 <UTIL_SEQ_WaitEvt+0x90>)
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4013      	ands	r3, r2
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d0f5      	beq.n	8010b00 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8010b14:	4a0e      	ldr	r2, [pc, #56]	@ (8010b50 <UTIL_SEQ_WaitEvt+0x88>)
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8010b1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b20:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b24:	b672      	cpsid	i
}
 8010b26:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	43da      	mvns	r2, r3
 8010b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8010b58 <UTIL_SEQ_WaitEvt+0x90>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4013      	ands	r3, r2
 8010b32:	4a09      	ldr	r2, [pc, #36]	@ (8010b58 <UTIL_SEQ_WaitEvt+0x90>)
 8010b34:	6013      	str	r3, [r2, #0]
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f383 8810 	msr	PRIMASK, r3
}
 8010b40:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8010b42:	4a04      	ldr	r2, [pc, #16]	@ (8010b54 <UTIL_SEQ_WaitEvt+0x8c>)
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	6013      	str	r3, [r2, #0]
  return;
 8010b48:	bf00      	nop
}
 8010b4a:	3720      	adds	r7, #32
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}
 8010b50:	20000b64 	.word	0x20000b64
 8010b54:	20000b60 	.word	0x20000b60
 8010b58:	20000b5c 	.word	0x20000b5c

08010b5c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010b60:	bf00      	nop
}
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr

08010b6a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8010b6a:	b480      	push	{r7}
 8010b6c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010b6e:	bf00      	nop
}
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr

08010b78 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8010b80:	2300      	movs	r3, #0
 8010b82:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b8e:	d204      	bcs.n	8010b9a <SEQ_BitPosition+0x22>
 8010b90:	2310      	movs	r3, #16
 8010b92:	73fb      	strb	r3, [r7, #15]
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	041b      	lsls	r3, r3, #16
 8010b98:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010ba0:	d205      	bcs.n	8010bae <SEQ_BitPosition+0x36>
 8010ba2:	7bfb      	ldrb	r3, [r7, #15]
 8010ba4:	3308      	adds	r3, #8
 8010ba6:	73fb      	strb	r3, [r7, #15]
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	021b      	lsls	r3, r3, #8
 8010bac:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010bb4:	d205      	bcs.n	8010bc2 <SEQ_BitPosition+0x4a>
 8010bb6:	7bfb      	ldrb	r3, [r7, #15]
 8010bb8:	3304      	adds	r3, #4
 8010bba:	73fb      	strb	r3, [r7, #15]
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	011b      	lsls	r3, r3, #4
 8010bc0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	0f1b      	lsrs	r3, r3, #28
 8010bc6:	4a07      	ldr	r2, [pc, #28]	@ (8010be4 <SEQ_BitPosition+0x6c>)
 8010bc8:	5cd2      	ldrb	r2, [r2, r3]
 8010bca:	7bfb      	ldrb	r3, [r7, #15]
 8010bcc:	4413      	add	r3, r2
 8010bce:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8010bd0:	7bfb      	ldrb	r3, [r7, #15]
 8010bd2:	f1c3 031f 	rsb	r3, r3, #31
 8010bd6:	b2db      	uxtb	r3, r3
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3714      	adds	r7, #20
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr
 8010be4:	080135ec 	.word	0x080135ec

08010be8 <std>:
 8010be8:	2300      	movs	r3, #0
 8010bea:	b510      	push	{r4, lr}
 8010bec:	4604      	mov	r4, r0
 8010bee:	e9c0 3300 	strd	r3, r3, [r0]
 8010bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bf6:	6083      	str	r3, [r0, #8]
 8010bf8:	8181      	strh	r1, [r0, #12]
 8010bfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8010bfc:	81c2      	strh	r2, [r0, #14]
 8010bfe:	6183      	str	r3, [r0, #24]
 8010c00:	4619      	mov	r1, r3
 8010c02:	2208      	movs	r2, #8
 8010c04:	305c      	adds	r0, #92	@ 0x5c
 8010c06:	f000 fa01 	bl	801100c <memset>
 8010c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c40 <std+0x58>)
 8010c0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c44 <std+0x5c>)
 8010c10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c12:	4b0d      	ldr	r3, [pc, #52]	@ (8010c48 <std+0x60>)
 8010c14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c16:	4b0d      	ldr	r3, [pc, #52]	@ (8010c4c <std+0x64>)
 8010c18:	6323      	str	r3, [r4, #48]	@ 0x30
 8010c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c50 <std+0x68>)
 8010c1c:	6224      	str	r4, [r4, #32]
 8010c1e:	429c      	cmp	r4, r3
 8010c20:	d006      	beq.n	8010c30 <std+0x48>
 8010c22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c26:	4294      	cmp	r4, r2
 8010c28:	d002      	beq.n	8010c30 <std+0x48>
 8010c2a:	33d0      	adds	r3, #208	@ 0xd0
 8010c2c:	429c      	cmp	r4, r3
 8010c2e:	d105      	bne.n	8010c3c <std+0x54>
 8010c30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c38:	f000 ba76 	b.w	8011128 <__retarget_lock_init_recursive>
 8010c3c:	bd10      	pop	{r4, pc}
 8010c3e:	bf00      	nop
 8010c40:	08010e5d 	.word	0x08010e5d
 8010c44:	08010e7f 	.word	0x08010e7f
 8010c48:	08010eb7 	.word	0x08010eb7
 8010c4c:	08010edb 	.word	0x08010edb
 8010c50:	20000bf8 	.word	0x20000bf8

08010c54 <stdio_exit_handler>:
 8010c54:	4a02      	ldr	r2, [pc, #8]	@ (8010c60 <stdio_exit_handler+0xc>)
 8010c56:	4903      	ldr	r1, [pc, #12]	@ (8010c64 <stdio_exit_handler+0x10>)
 8010c58:	4803      	ldr	r0, [pc, #12]	@ (8010c68 <stdio_exit_handler+0x14>)
 8010c5a:	f000 b869 	b.w	8010d30 <_fwalk_sglue>
 8010c5e:	bf00      	nop
 8010c60:	20000110 	.word	0x20000110
 8010c64:	080119e5 	.word	0x080119e5
 8010c68:	20000120 	.word	0x20000120

08010c6c <cleanup_stdio>:
 8010c6c:	6841      	ldr	r1, [r0, #4]
 8010c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8010ca0 <cleanup_stdio+0x34>)
 8010c70:	4299      	cmp	r1, r3
 8010c72:	b510      	push	{r4, lr}
 8010c74:	4604      	mov	r4, r0
 8010c76:	d001      	beq.n	8010c7c <cleanup_stdio+0x10>
 8010c78:	f000 feb4 	bl	80119e4 <_fflush_r>
 8010c7c:	68a1      	ldr	r1, [r4, #8]
 8010c7e:	4b09      	ldr	r3, [pc, #36]	@ (8010ca4 <cleanup_stdio+0x38>)
 8010c80:	4299      	cmp	r1, r3
 8010c82:	d002      	beq.n	8010c8a <cleanup_stdio+0x1e>
 8010c84:	4620      	mov	r0, r4
 8010c86:	f000 fead 	bl	80119e4 <_fflush_r>
 8010c8a:	68e1      	ldr	r1, [r4, #12]
 8010c8c:	4b06      	ldr	r3, [pc, #24]	@ (8010ca8 <cleanup_stdio+0x3c>)
 8010c8e:	4299      	cmp	r1, r3
 8010c90:	d004      	beq.n	8010c9c <cleanup_stdio+0x30>
 8010c92:	4620      	mov	r0, r4
 8010c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c98:	f000 bea4 	b.w	80119e4 <_fflush_r>
 8010c9c:	bd10      	pop	{r4, pc}
 8010c9e:	bf00      	nop
 8010ca0:	20000bf8 	.word	0x20000bf8
 8010ca4:	20000c60 	.word	0x20000c60
 8010ca8:	20000cc8 	.word	0x20000cc8

08010cac <global_stdio_init.part.0>:
 8010cac:	b510      	push	{r4, lr}
 8010cae:	4b0b      	ldr	r3, [pc, #44]	@ (8010cdc <global_stdio_init.part.0+0x30>)
 8010cb0:	4c0b      	ldr	r4, [pc, #44]	@ (8010ce0 <global_stdio_init.part.0+0x34>)
 8010cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8010ce4 <global_stdio_init.part.0+0x38>)
 8010cb4:	601a      	str	r2, [r3, #0]
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	2200      	movs	r2, #0
 8010cba:	2104      	movs	r1, #4
 8010cbc:	f7ff ff94 	bl	8010be8 <std>
 8010cc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	2109      	movs	r1, #9
 8010cc8:	f7ff ff8e 	bl	8010be8 <std>
 8010ccc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010cd0:	2202      	movs	r2, #2
 8010cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cd6:	2112      	movs	r1, #18
 8010cd8:	f7ff bf86 	b.w	8010be8 <std>
 8010cdc:	20000d30 	.word	0x20000d30
 8010ce0:	20000bf8 	.word	0x20000bf8
 8010ce4:	08010c55 	.word	0x08010c55

08010ce8 <__sfp_lock_acquire>:
 8010ce8:	4801      	ldr	r0, [pc, #4]	@ (8010cf0 <__sfp_lock_acquire+0x8>)
 8010cea:	f000 ba1e 	b.w	801112a <__retarget_lock_acquire_recursive>
 8010cee:	bf00      	nop
 8010cf0:	20000d39 	.word	0x20000d39

08010cf4 <__sfp_lock_release>:
 8010cf4:	4801      	ldr	r0, [pc, #4]	@ (8010cfc <__sfp_lock_release+0x8>)
 8010cf6:	f000 ba19 	b.w	801112c <__retarget_lock_release_recursive>
 8010cfa:	bf00      	nop
 8010cfc:	20000d39 	.word	0x20000d39

08010d00 <__sinit>:
 8010d00:	b510      	push	{r4, lr}
 8010d02:	4604      	mov	r4, r0
 8010d04:	f7ff fff0 	bl	8010ce8 <__sfp_lock_acquire>
 8010d08:	6a23      	ldr	r3, [r4, #32]
 8010d0a:	b11b      	cbz	r3, 8010d14 <__sinit+0x14>
 8010d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d10:	f7ff bff0 	b.w	8010cf4 <__sfp_lock_release>
 8010d14:	4b04      	ldr	r3, [pc, #16]	@ (8010d28 <__sinit+0x28>)
 8010d16:	6223      	str	r3, [r4, #32]
 8010d18:	4b04      	ldr	r3, [pc, #16]	@ (8010d2c <__sinit+0x2c>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d1f5      	bne.n	8010d0c <__sinit+0xc>
 8010d20:	f7ff ffc4 	bl	8010cac <global_stdio_init.part.0>
 8010d24:	e7f2      	b.n	8010d0c <__sinit+0xc>
 8010d26:	bf00      	nop
 8010d28:	08010c6d 	.word	0x08010c6d
 8010d2c:	20000d30 	.word	0x20000d30

08010d30 <_fwalk_sglue>:
 8010d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d34:	4607      	mov	r7, r0
 8010d36:	4688      	mov	r8, r1
 8010d38:	4614      	mov	r4, r2
 8010d3a:	2600      	movs	r6, #0
 8010d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d40:	f1b9 0901 	subs.w	r9, r9, #1
 8010d44:	d505      	bpl.n	8010d52 <_fwalk_sglue+0x22>
 8010d46:	6824      	ldr	r4, [r4, #0]
 8010d48:	2c00      	cmp	r4, #0
 8010d4a:	d1f7      	bne.n	8010d3c <_fwalk_sglue+0xc>
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d52:	89ab      	ldrh	r3, [r5, #12]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d907      	bls.n	8010d68 <_fwalk_sglue+0x38>
 8010d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	d003      	beq.n	8010d68 <_fwalk_sglue+0x38>
 8010d60:	4629      	mov	r1, r5
 8010d62:	4638      	mov	r0, r7
 8010d64:	47c0      	blx	r8
 8010d66:	4306      	orrs	r6, r0
 8010d68:	3568      	adds	r5, #104	@ 0x68
 8010d6a:	e7e9      	b.n	8010d40 <_fwalk_sglue+0x10>

08010d6c <iprintf>:
 8010d6c:	b40f      	push	{r0, r1, r2, r3}
 8010d6e:	b507      	push	{r0, r1, r2, lr}
 8010d70:	4906      	ldr	r1, [pc, #24]	@ (8010d8c <iprintf+0x20>)
 8010d72:	ab04      	add	r3, sp, #16
 8010d74:	6808      	ldr	r0, [r1, #0]
 8010d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d7a:	6881      	ldr	r1, [r0, #8]
 8010d7c:	9301      	str	r3, [sp, #4]
 8010d7e:	f000 fb07 	bl	8011390 <_vfiprintf_r>
 8010d82:	b003      	add	sp, #12
 8010d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d88:	b004      	add	sp, #16
 8010d8a:	4770      	bx	lr
 8010d8c:	2000011c 	.word	0x2000011c

08010d90 <putchar>:
 8010d90:	4b02      	ldr	r3, [pc, #8]	@ (8010d9c <putchar+0xc>)
 8010d92:	4601      	mov	r1, r0
 8010d94:	6818      	ldr	r0, [r3, #0]
 8010d96:	6882      	ldr	r2, [r0, #8]
 8010d98:	f000 beae 	b.w	8011af8 <_putc_r>
 8010d9c:	2000011c 	.word	0x2000011c

08010da0 <_puts_r>:
 8010da0:	6a03      	ldr	r3, [r0, #32]
 8010da2:	b570      	push	{r4, r5, r6, lr}
 8010da4:	6884      	ldr	r4, [r0, #8]
 8010da6:	4605      	mov	r5, r0
 8010da8:	460e      	mov	r6, r1
 8010daa:	b90b      	cbnz	r3, 8010db0 <_puts_r+0x10>
 8010dac:	f7ff ffa8 	bl	8010d00 <__sinit>
 8010db0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010db2:	07db      	lsls	r3, r3, #31
 8010db4:	d405      	bmi.n	8010dc2 <_puts_r+0x22>
 8010db6:	89a3      	ldrh	r3, [r4, #12]
 8010db8:	0598      	lsls	r0, r3, #22
 8010dba:	d402      	bmi.n	8010dc2 <_puts_r+0x22>
 8010dbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dbe:	f000 f9b4 	bl	801112a <__retarget_lock_acquire_recursive>
 8010dc2:	89a3      	ldrh	r3, [r4, #12]
 8010dc4:	0719      	lsls	r1, r3, #28
 8010dc6:	d502      	bpl.n	8010dce <_puts_r+0x2e>
 8010dc8:	6923      	ldr	r3, [r4, #16]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d135      	bne.n	8010e3a <_puts_r+0x9a>
 8010dce:	4621      	mov	r1, r4
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	f000 f8c5 	bl	8010f60 <__swsetup_r>
 8010dd6:	b380      	cbz	r0, 8010e3a <_puts_r+0x9a>
 8010dd8:	f04f 35ff 	mov.w	r5, #4294967295
 8010ddc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010dde:	07da      	lsls	r2, r3, #31
 8010de0:	d405      	bmi.n	8010dee <_puts_r+0x4e>
 8010de2:	89a3      	ldrh	r3, [r4, #12]
 8010de4:	059b      	lsls	r3, r3, #22
 8010de6:	d402      	bmi.n	8010dee <_puts_r+0x4e>
 8010de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dea:	f000 f99f 	bl	801112c <__retarget_lock_release_recursive>
 8010dee:	4628      	mov	r0, r5
 8010df0:	bd70      	pop	{r4, r5, r6, pc}
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	da04      	bge.n	8010e00 <_puts_r+0x60>
 8010df6:	69a2      	ldr	r2, [r4, #24]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	dc17      	bgt.n	8010e2c <_puts_r+0x8c>
 8010dfc:	290a      	cmp	r1, #10
 8010dfe:	d015      	beq.n	8010e2c <_puts_r+0x8c>
 8010e00:	6823      	ldr	r3, [r4, #0]
 8010e02:	1c5a      	adds	r2, r3, #1
 8010e04:	6022      	str	r2, [r4, #0]
 8010e06:	7019      	strb	r1, [r3, #0]
 8010e08:	68a3      	ldr	r3, [r4, #8]
 8010e0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	60a3      	str	r3, [r4, #8]
 8010e12:	2900      	cmp	r1, #0
 8010e14:	d1ed      	bne.n	8010df2 <_puts_r+0x52>
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	da11      	bge.n	8010e3e <_puts_r+0x9e>
 8010e1a:	4622      	mov	r2, r4
 8010e1c:	210a      	movs	r1, #10
 8010e1e:	4628      	mov	r0, r5
 8010e20:	f000 f85f 	bl	8010ee2 <__swbuf_r>
 8010e24:	3001      	adds	r0, #1
 8010e26:	d0d7      	beq.n	8010dd8 <_puts_r+0x38>
 8010e28:	250a      	movs	r5, #10
 8010e2a:	e7d7      	b.n	8010ddc <_puts_r+0x3c>
 8010e2c:	4622      	mov	r2, r4
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f000 f857 	bl	8010ee2 <__swbuf_r>
 8010e34:	3001      	adds	r0, #1
 8010e36:	d1e7      	bne.n	8010e08 <_puts_r+0x68>
 8010e38:	e7ce      	b.n	8010dd8 <_puts_r+0x38>
 8010e3a:	3e01      	subs	r6, #1
 8010e3c:	e7e4      	b.n	8010e08 <_puts_r+0x68>
 8010e3e:	6823      	ldr	r3, [r4, #0]
 8010e40:	1c5a      	adds	r2, r3, #1
 8010e42:	6022      	str	r2, [r4, #0]
 8010e44:	220a      	movs	r2, #10
 8010e46:	701a      	strb	r2, [r3, #0]
 8010e48:	e7ee      	b.n	8010e28 <_puts_r+0x88>
	...

08010e4c <puts>:
 8010e4c:	4b02      	ldr	r3, [pc, #8]	@ (8010e58 <puts+0xc>)
 8010e4e:	4601      	mov	r1, r0
 8010e50:	6818      	ldr	r0, [r3, #0]
 8010e52:	f7ff bfa5 	b.w	8010da0 <_puts_r>
 8010e56:	bf00      	nop
 8010e58:	2000011c 	.word	0x2000011c

08010e5c <__sread>:
 8010e5c:	b510      	push	{r4, lr}
 8010e5e:	460c      	mov	r4, r1
 8010e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e64:	f000 f912 	bl	801108c <_read_r>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	bfab      	itete	ge
 8010e6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8010e70:	181b      	addge	r3, r3, r0
 8010e72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010e76:	bfac      	ite	ge
 8010e78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010e7a:	81a3      	strhlt	r3, [r4, #12]
 8010e7c:	bd10      	pop	{r4, pc}

08010e7e <__swrite>:
 8010e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e82:	461f      	mov	r7, r3
 8010e84:	898b      	ldrh	r3, [r1, #12]
 8010e86:	05db      	lsls	r3, r3, #23
 8010e88:	4605      	mov	r5, r0
 8010e8a:	460c      	mov	r4, r1
 8010e8c:	4616      	mov	r6, r2
 8010e8e:	d505      	bpl.n	8010e9c <__swrite+0x1e>
 8010e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e94:	2302      	movs	r3, #2
 8010e96:	2200      	movs	r2, #0
 8010e98:	f000 f8e6 	bl	8011068 <_lseek_r>
 8010e9c:	89a3      	ldrh	r3, [r4, #12]
 8010e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ea6:	81a3      	strh	r3, [r4, #12]
 8010ea8:	4632      	mov	r2, r6
 8010eaa:	463b      	mov	r3, r7
 8010eac:	4628      	mov	r0, r5
 8010eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb2:	f000 b8fd 	b.w	80110b0 <_write_r>

08010eb6 <__sseek>:
 8010eb6:	b510      	push	{r4, lr}
 8010eb8:	460c      	mov	r4, r1
 8010eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ebe:	f000 f8d3 	bl	8011068 <_lseek_r>
 8010ec2:	1c43      	adds	r3, r0, #1
 8010ec4:	89a3      	ldrh	r3, [r4, #12]
 8010ec6:	bf15      	itete	ne
 8010ec8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010eca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010ece:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010ed2:	81a3      	strheq	r3, [r4, #12]
 8010ed4:	bf18      	it	ne
 8010ed6:	81a3      	strhne	r3, [r4, #12]
 8010ed8:	bd10      	pop	{r4, pc}

08010eda <__sclose>:
 8010eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ede:	f000 b8b3 	b.w	8011048 <_close_r>

08010ee2 <__swbuf_r>:
 8010ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee4:	460e      	mov	r6, r1
 8010ee6:	4614      	mov	r4, r2
 8010ee8:	4605      	mov	r5, r0
 8010eea:	b118      	cbz	r0, 8010ef4 <__swbuf_r+0x12>
 8010eec:	6a03      	ldr	r3, [r0, #32]
 8010eee:	b90b      	cbnz	r3, 8010ef4 <__swbuf_r+0x12>
 8010ef0:	f7ff ff06 	bl	8010d00 <__sinit>
 8010ef4:	69a3      	ldr	r3, [r4, #24]
 8010ef6:	60a3      	str	r3, [r4, #8]
 8010ef8:	89a3      	ldrh	r3, [r4, #12]
 8010efa:	071a      	lsls	r2, r3, #28
 8010efc:	d501      	bpl.n	8010f02 <__swbuf_r+0x20>
 8010efe:	6923      	ldr	r3, [r4, #16]
 8010f00:	b943      	cbnz	r3, 8010f14 <__swbuf_r+0x32>
 8010f02:	4621      	mov	r1, r4
 8010f04:	4628      	mov	r0, r5
 8010f06:	f000 f82b 	bl	8010f60 <__swsetup_r>
 8010f0a:	b118      	cbz	r0, 8010f14 <__swbuf_r+0x32>
 8010f0c:	f04f 37ff 	mov.w	r7, #4294967295
 8010f10:	4638      	mov	r0, r7
 8010f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f14:	6823      	ldr	r3, [r4, #0]
 8010f16:	6922      	ldr	r2, [r4, #16]
 8010f18:	1a98      	subs	r0, r3, r2
 8010f1a:	6963      	ldr	r3, [r4, #20]
 8010f1c:	b2f6      	uxtb	r6, r6
 8010f1e:	4283      	cmp	r3, r0
 8010f20:	4637      	mov	r7, r6
 8010f22:	dc05      	bgt.n	8010f30 <__swbuf_r+0x4e>
 8010f24:	4621      	mov	r1, r4
 8010f26:	4628      	mov	r0, r5
 8010f28:	f000 fd5c 	bl	80119e4 <_fflush_r>
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	d1ed      	bne.n	8010f0c <__swbuf_r+0x2a>
 8010f30:	68a3      	ldr	r3, [r4, #8]
 8010f32:	3b01      	subs	r3, #1
 8010f34:	60a3      	str	r3, [r4, #8]
 8010f36:	6823      	ldr	r3, [r4, #0]
 8010f38:	1c5a      	adds	r2, r3, #1
 8010f3a:	6022      	str	r2, [r4, #0]
 8010f3c:	701e      	strb	r6, [r3, #0]
 8010f3e:	6962      	ldr	r2, [r4, #20]
 8010f40:	1c43      	adds	r3, r0, #1
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d004      	beq.n	8010f50 <__swbuf_r+0x6e>
 8010f46:	89a3      	ldrh	r3, [r4, #12]
 8010f48:	07db      	lsls	r3, r3, #31
 8010f4a:	d5e1      	bpl.n	8010f10 <__swbuf_r+0x2e>
 8010f4c:	2e0a      	cmp	r6, #10
 8010f4e:	d1df      	bne.n	8010f10 <__swbuf_r+0x2e>
 8010f50:	4621      	mov	r1, r4
 8010f52:	4628      	mov	r0, r5
 8010f54:	f000 fd46 	bl	80119e4 <_fflush_r>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d0d9      	beq.n	8010f10 <__swbuf_r+0x2e>
 8010f5c:	e7d6      	b.n	8010f0c <__swbuf_r+0x2a>
	...

08010f60 <__swsetup_r>:
 8010f60:	b538      	push	{r3, r4, r5, lr}
 8010f62:	4b29      	ldr	r3, [pc, #164]	@ (8011008 <__swsetup_r+0xa8>)
 8010f64:	4605      	mov	r5, r0
 8010f66:	6818      	ldr	r0, [r3, #0]
 8010f68:	460c      	mov	r4, r1
 8010f6a:	b118      	cbz	r0, 8010f74 <__swsetup_r+0x14>
 8010f6c:	6a03      	ldr	r3, [r0, #32]
 8010f6e:	b90b      	cbnz	r3, 8010f74 <__swsetup_r+0x14>
 8010f70:	f7ff fec6 	bl	8010d00 <__sinit>
 8010f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f78:	0719      	lsls	r1, r3, #28
 8010f7a:	d422      	bmi.n	8010fc2 <__swsetup_r+0x62>
 8010f7c:	06da      	lsls	r2, r3, #27
 8010f7e:	d407      	bmi.n	8010f90 <__swsetup_r+0x30>
 8010f80:	2209      	movs	r2, #9
 8010f82:	602a      	str	r2, [r5, #0]
 8010f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f88:	81a3      	strh	r3, [r4, #12]
 8010f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f8e:	e033      	b.n	8010ff8 <__swsetup_r+0x98>
 8010f90:	0758      	lsls	r0, r3, #29
 8010f92:	d512      	bpl.n	8010fba <__swsetup_r+0x5a>
 8010f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f96:	b141      	cbz	r1, 8010faa <__swsetup_r+0x4a>
 8010f98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f9c:	4299      	cmp	r1, r3
 8010f9e:	d002      	beq.n	8010fa6 <__swsetup_r+0x46>
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	f000 f8d3 	bl	801114c <_free_r>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010fb0:	81a3      	strh	r3, [r4, #12]
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	6063      	str	r3, [r4, #4]
 8010fb6:	6923      	ldr	r3, [r4, #16]
 8010fb8:	6023      	str	r3, [r4, #0]
 8010fba:	89a3      	ldrh	r3, [r4, #12]
 8010fbc:	f043 0308 	orr.w	r3, r3, #8
 8010fc0:	81a3      	strh	r3, [r4, #12]
 8010fc2:	6923      	ldr	r3, [r4, #16]
 8010fc4:	b94b      	cbnz	r3, 8010fda <__swsetup_r+0x7a>
 8010fc6:	89a3      	ldrh	r3, [r4, #12]
 8010fc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fd0:	d003      	beq.n	8010fda <__swsetup_r+0x7a>
 8010fd2:	4621      	mov	r1, r4
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	f000 fd53 	bl	8011a80 <__smakebuf_r>
 8010fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fde:	f013 0201 	ands.w	r2, r3, #1
 8010fe2:	d00a      	beq.n	8010ffa <__swsetup_r+0x9a>
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	60a2      	str	r2, [r4, #8]
 8010fe8:	6962      	ldr	r2, [r4, #20]
 8010fea:	4252      	negs	r2, r2
 8010fec:	61a2      	str	r2, [r4, #24]
 8010fee:	6922      	ldr	r2, [r4, #16]
 8010ff0:	b942      	cbnz	r2, 8011004 <__swsetup_r+0xa4>
 8010ff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010ff6:	d1c5      	bne.n	8010f84 <__swsetup_r+0x24>
 8010ff8:	bd38      	pop	{r3, r4, r5, pc}
 8010ffa:	0799      	lsls	r1, r3, #30
 8010ffc:	bf58      	it	pl
 8010ffe:	6962      	ldrpl	r2, [r4, #20]
 8011000:	60a2      	str	r2, [r4, #8]
 8011002:	e7f4      	b.n	8010fee <__swsetup_r+0x8e>
 8011004:	2000      	movs	r0, #0
 8011006:	e7f7      	b.n	8010ff8 <__swsetup_r+0x98>
 8011008:	2000011c 	.word	0x2000011c

0801100c <memset>:
 801100c:	4402      	add	r2, r0
 801100e:	4603      	mov	r3, r0
 8011010:	4293      	cmp	r3, r2
 8011012:	d100      	bne.n	8011016 <memset+0xa>
 8011014:	4770      	bx	lr
 8011016:	f803 1b01 	strb.w	r1, [r3], #1
 801101a:	e7f9      	b.n	8011010 <memset+0x4>

0801101c <strrchr>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8011022:	4603      	mov	r3, r0
 8011024:	d10e      	bne.n	8011044 <strrchr+0x28>
 8011026:	4621      	mov	r1, r4
 8011028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801102c:	f000 bd98 	b.w	8011b60 <strchr>
 8011030:	1c43      	adds	r3, r0, #1
 8011032:	4605      	mov	r5, r0
 8011034:	4621      	mov	r1, r4
 8011036:	4618      	mov	r0, r3
 8011038:	f000 fd92 	bl	8011b60 <strchr>
 801103c:	2800      	cmp	r0, #0
 801103e:	d1f7      	bne.n	8011030 <strrchr+0x14>
 8011040:	4628      	mov	r0, r5
 8011042:	bd38      	pop	{r3, r4, r5, pc}
 8011044:	2500      	movs	r5, #0
 8011046:	e7f5      	b.n	8011034 <strrchr+0x18>

08011048 <_close_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4d06      	ldr	r5, [pc, #24]	@ (8011064 <_close_r+0x1c>)
 801104c:	2300      	movs	r3, #0
 801104e:	4604      	mov	r4, r0
 8011050:	4608      	mov	r0, r1
 8011052:	602b      	str	r3, [r5, #0]
 8011054:	f7f2 fa55 	bl	8003502 <_close>
 8011058:	1c43      	adds	r3, r0, #1
 801105a:	d102      	bne.n	8011062 <_close_r+0x1a>
 801105c:	682b      	ldr	r3, [r5, #0]
 801105e:	b103      	cbz	r3, 8011062 <_close_r+0x1a>
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	bd38      	pop	{r3, r4, r5, pc}
 8011064:	20000d34 	.word	0x20000d34

08011068 <_lseek_r>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4d07      	ldr	r5, [pc, #28]	@ (8011088 <_lseek_r+0x20>)
 801106c:	4604      	mov	r4, r0
 801106e:	4608      	mov	r0, r1
 8011070:	4611      	mov	r1, r2
 8011072:	2200      	movs	r2, #0
 8011074:	602a      	str	r2, [r5, #0]
 8011076:	461a      	mov	r2, r3
 8011078:	f7f2 fa6a 	bl	8003550 <_lseek>
 801107c:	1c43      	adds	r3, r0, #1
 801107e:	d102      	bne.n	8011086 <_lseek_r+0x1e>
 8011080:	682b      	ldr	r3, [r5, #0]
 8011082:	b103      	cbz	r3, 8011086 <_lseek_r+0x1e>
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	bd38      	pop	{r3, r4, r5, pc}
 8011088:	20000d34 	.word	0x20000d34

0801108c <_read_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	4d07      	ldr	r5, [pc, #28]	@ (80110ac <_read_r+0x20>)
 8011090:	4604      	mov	r4, r0
 8011092:	4608      	mov	r0, r1
 8011094:	4611      	mov	r1, r2
 8011096:	2200      	movs	r2, #0
 8011098:	602a      	str	r2, [r5, #0]
 801109a:	461a      	mov	r2, r3
 801109c:	f7f2 fa14 	bl	80034c8 <_read>
 80110a0:	1c43      	adds	r3, r0, #1
 80110a2:	d102      	bne.n	80110aa <_read_r+0x1e>
 80110a4:	682b      	ldr	r3, [r5, #0]
 80110a6:	b103      	cbz	r3, 80110aa <_read_r+0x1e>
 80110a8:	6023      	str	r3, [r4, #0]
 80110aa:	bd38      	pop	{r3, r4, r5, pc}
 80110ac:	20000d34 	.word	0x20000d34

080110b0 <_write_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	4d07      	ldr	r5, [pc, #28]	@ (80110d0 <_write_r+0x20>)
 80110b4:	4604      	mov	r4, r0
 80110b6:	4608      	mov	r0, r1
 80110b8:	4611      	mov	r1, r2
 80110ba:	2200      	movs	r2, #0
 80110bc:	602a      	str	r2, [r5, #0]
 80110be:	461a      	mov	r2, r3
 80110c0:	f7ef fdeb 	bl	8000c9a <_write>
 80110c4:	1c43      	adds	r3, r0, #1
 80110c6:	d102      	bne.n	80110ce <_write_r+0x1e>
 80110c8:	682b      	ldr	r3, [r5, #0]
 80110ca:	b103      	cbz	r3, 80110ce <_write_r+0x1e>
 80110cc:	6023      	str	r3, [r4, #0]
 80110ce:	bd38      	pop	{r3, r4, r5, pc}
 80110d0:	20000d34 	.word	0x20000d34

080110d4 <__errno>:
 80110d4:	4b01      	ldr	r3, [pc, #4]	@ (80110dc <__errno+0x8>)
 80110d6:	6818      	ldr	r0, [r3, #0]
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop
 80110dc:	2000011c 	.word	0x2000011c

080110e0 <__libc_init_array>:
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	4d0d      	ldr	r5, [pc, #52]	@ (8011118 <__libc_init_array+0x38>)
 80110e4:	4c0d      	ldr	r4, [pc, #52]	@ (801111c <__libc_init_array+0x3c>)
 80110e6:	1b64      	subs	r4, r4, r5
 80110e8:	10a4      	asrs	r4, r4, #2
 80110ea:	2600      	movs	r6, #0
 80110ec:	42a6      	cmp	r6, r4
 80110ee:	d109      	bne.n	8011104 <__libc_init_array+0x24>
 80110f0:	4d0b      	ldr	r5, [pc, #44]	@ (8011120 <__libc_init_array+0x40>)
 80110f2:	4c0c      	ldr	r4, [pc, #48]	@ (8011124 <__libc_init_array+0x44>)
 80110f4:	f000 fdf2 	bl	8011cdc <_init>
 80110f8:	1b64      	subs	r4, r4, r5
 80110fa:	10a4      	asrs	r4, r4, #2
 80110fc:	2600      	movs	r6, #0
 80110fe:	42a6      	cmp	r6, r4
 8011100:	d105      	bne.n	801110e <__libc_init_array+0x2e>
 8011102:	bd70      	pop	{r4, r5, r6, pc}
 8011104:	f855 3b04 	ldr.w	r3, [r5], #4
 8011108:	4798      	blx	r3
 801110a:	3601      	adds	r6, #1
 801110c:	e7ee      	b.n	80110ec <__libc_init_array+0xc>
 801110e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011112:	4798      	blx	r3
 8011114:	3601      	adds	r6, #1
 8011116:	e7f2      	b.n	80110fe <__libc_init_array+0x1e>
 8011118:	08013638 	.word	0x08013638
 801111c:	08013638 	.word	0x08013638
 8011120:	08013638 	.word	0x08013638
 8011124:	0801363c 	.word	0x0801363c

08011128 <__retarget_lock_init_recursive>:
 8011128:	4770      	bx	lr

0801112a <__retarget_lock_acquire_recursive>:
 801112a:	4770      	bx	lr

0801112c <__retarget_lock_release_recursive>:
 801112c:	4770      	bx	lr

0801112e <memcpy>:
 801112e:	440a      	add	r2, r1
 8011130:	4291      	cmp	r1, r2
 8011132:	f100 33ff 	add.w	r3, r0, #4294967295
 8011136:	d100      	bne.n	801113a <memcpy+0xc>
 8011138:	4770      	bx	lr
 801113a:	b510      	push	{r4, lr}
 801113c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011144:	4291      	cmp	r1, r2
 8011146:	d1f9      	bne.n	801113c <memcpy+0xe>
 8011148:	bd10      	pop	{r4, pc}
	...

0801114c <_free_r>:
 801114c:	b538      	push	{r3, r4, r5, lr}
 801114e:	4605      	mov	r5, r0
 8011150:	2900      	cmp	r1, #0
 8011152:	d041      	beq.n	80111d8 <_free_r+0x8c>
 8011154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011158:	1f0c      	subs	r4, r1, #4
 801115a:	2b00      	cmp	r3, #0
 801115c:	bfb8      	it	lt
 801115e:	18e4      	addlt	r4, r4, r3
 8011160:	f000 f8e0 	bl	8011324 <__malloc_lock>
 8011164:	4a1d      	ldr	r2, [pc, #116]	@ (80111dc <_free_r+0x90>)
 8011166:	6813      	ldr	r3, [r2, #0]
 8011168:	b933      	cbnz	r3, 8011178 <_free_r+0x2c>
 801116a:	6063      	str	r3, [r4, #4]
 801116c:	6014      	str	r4, [r2, #0]
 801116e:	4628      	mov	r0, r5
 8011170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011174:	f000 b8dc 	b.w	8011330 <__malloc_unlock>
 8011178:	42a3      	cmp	r3, r4
 801117a:	d908      	bls.n	801118e <_free_r+0x42>
 801117c:	6820      	ldr	r0, [r4, #0]
 801117e:	1821      	adds	r1, r4, r0
 8011180:	428b      	cmp	r3, r1
 8011182:	bf01      	itttt	eq
 8011184:	6819      	ldreq	r1, [r3, #0]
 8011186:	685b      	ldreq	r3, [r3, #4]
 8011188:	1809      	addeq	r1, r1, r0
 801118a:	6021      	streq	r1, [r4, #0]
 801118c:	e7ed      	b.n	801116a <_free_r+0x1e>
 801118e:	461a      	mov	r2, r3
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	b10b      	cbz	r3, 8011198 <_free_r+0x4c>
 8011194:	42a3      	cmp	r3, r4
 8011196:	d9fa      	bls.n	801118e <_free_r+0x42>
 8011198:	6811      	ldr	r1, [r2, #0]
 801119a:	1850      	adds	r0, r2, r1
 801119c:	42a0      	cmp	r0, r4
 801119e:	d10b      	bne.n	80111b8 <_free_r+0x6c>
 80111a0:	6820      	ldr	r0, [r4, #0]
 80111a2:	4401      	add	r1, r0
 80111a4:	1850      	adds	r0, r2, r1
 80111a6:	4283      	cmp	r3, r0
 80111a8:	6011      	str	r1, [r2, #0]
 80111aa:	d1e0      	bne.n	801116e <_free_r+0x22>
 80111ac:	6818      	ldr	r0, [r3, #0]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	6053      	str	r3, [r2, #4]
 80111b2:	4408      	add	r0, r1
 80111b4:	6010      	str	r0, [r2, #0]
 80111b6:	e7da      	b.n	801116e <_free_r+0x22>
 80111b8:	d902      	bls.n	80111c0 <_free_r+0x74>
 80111ba:	230c      	movs	r3, #12
 80111bc:	602b      	str	r3, [r5, #0]
 80111be:	e7d6      	b.n	801116e <_free_r+0x22>
 80111c0:	6820      	ldr	r0, [r4, #0]
 80111c2:	1821      	adds	r1, r4, r0
 80111c4:	428b      	cmp	r3, r1
 80111c6:	bf04      	itt	eq
 80111c8:	6819      	ldreq	r1, [r3, #0]
 80111ca:	685b      	ldreq	r3, [r3, #4]
 80111cc:	6063      	str	r3, [r4, #4]
 80111ce:	bf04      	itt	eq
 80111d0:	1809      	addeq	r1, r1, r0
 80111d2:	6021      	streq	r1, [r4, #0]
 80111d4:	6054      	str	r4, [r2, #4]
 80111d6:	e7ca      	b.n	801116e <_free_r+0x22>
 80111d8:	bd38      	pop	{r3, r4, r5, pc}
 80111da:	bf00      	nop
 80111dc:	20000d40 	.word	0x20000d40

080111e0 <sbrk_aligned>:
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	4e0f      	ldr	r6, [pc, #60]	@ (8011220 <sbrk_aligned+0x40>)
 80111e4:	460c      	mov	r4, r1
 80111e6:	6831      	ldr	r1, [r6, #0]
 80111e8:	4605      	mov	r5, r0
 80111ea:	b911      	cbnz	r1, 80111f2 <sbrk_aligned+0x12>
 80111ec:	f000 fce8 	bl	8011bc0 <_sbrk_r>
 80111f0:	6030      	str	r0, [r6, #0]
 80111f2:	4621      	mov	r1, r4
 80111f4:	4628      	mov	r0, r5
 80111f6:	f000 fce3 	bl	8011bc0 <_sbrk_r>
 80111fa:	1c43      	adds	r3, r0, #1
 80111fc:	d103      	bne.n	8011206 <sbrk_aligned+0x26>
 80111fe:	f04f 34ff 	mov.w	r4, #4294967295
 8011202:	4620      	mov	r0, r4
 8011204:	bd70      	pop	{r4, r5, r6, pc}
 8011206:	1cc4      	adds	r4, r0, #3
 8011208:	f024 0403 	bic.w	r4, r4, #3
 801120c:	42a0      	cmp	r0, r4
 801120e:	d0f8      	beq.n	8011202 <sbrk_aligned+0x22>
 8011210:	1a21      	subs	r1, r4, r0
 8011212:	4628      	mov	r0, r5
 8011214:	f000 fcd4 	bl	8011bc0 <_sbrk_r>
 8011218:	3001      	adds	r0, #1
 801121a:	d1f2      	bne.n	8011202 <sbrk_aligned+0x22>
 801121c:	e7ef      	b.n	80111fe <sbrk_aligned+0x1e>
 801121e:	bf00      	nop
 8011220:	20000d3c 	.word	0x20000d3c

08011224 <_malloc_r>:
 8011224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011228:	1ccd      	adds	r5, r1, #3
 801122a:	f025 0503 	bic.w	r5, r5, #3
 801122e:	3508      	adds	r5, #8
 8011230:	2d0c      	cmp	r5, #12
 8011232:	bf38      	it	cc
 8011234:	250c      	movcc	r5, #12
 8011236:	2d00      	cmp	r5, #0
 8011238:	4606      	mov	r6, r0
 801123a:	db01      	blt.n	8011240 <_malloc_r+0x1c>
 801123c:	42a9      	cmp	r1, r5
 801123e:	d904      	bls.n	801124a <_malloc_r+0x26>
 8011240:	230c      	movs	r3, #12
 8011242:	6033      	str	r3, [r6, #0]
 8011244:	2000      	movs	r0, #0
 8011246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801124a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011320 <_malloc_r+0xfc>
 801124e:	f000 f869 	bl	8011324 <__malloc_lock>
 8011252:	f8d8 3000 	ldr.w	r3, [r8]
 8011256:	461c      	mov	r4, r3
 8011258:	bb44      	cbnz	r4, 80112ac <_malloc_r+0x88>
 801125a:	4629      	mov	r1, r5
 801125c:	4630      	mov	r0, r6
 801125e:	f7ff ffbf 	bl	80111e0 <sbrk_aligned>
 8011262:	1c43      	adds	r3, r0, #1
 8011264:	4604      	mov	r4, r0
 8011266:	d158      	bne.n	801131a <_malloc_r+0xf6>
 8011268:	f8d8 4000 	ldr.w	r4, [r8]
 801126c:	4627      	mov	r7, r4
 801126e:	2f00      	cmp	r7, #0
 8011270:	d143      	bne.n	80112fa <_malloc_r+0xd6>
 8011272:	2c00      	cmp	r4, #0
 8011274:	d04b      	beq.n	801130e <_malloc_r+0xea>
 8011276:	6823      	ldr	r3, [r4, #0]
 8011278:	4639      	mov	r1, r7
 801127a:	4630      	mov	r0, r6
 801127c:	eb04 0903 	add.w	r9, r4, r3
 8011280:	f000 fc9e 	bl	8011bc0 <_sbrk_r>
 8011284:	4581      	cmp	r9, r0
 8011286:	d142      	bne.n	801130e <_malloc_r+0xea>
 8011288:	6821      	ldr	r1, [r4, #0]
 801128a:	1a6d      	subs	r5, r5, r1
 801128c:	4629      	mov	r1, r5
 801128e:	4630      	mov	r0, r6
 8011290:	f7ff ffa6 	bl	80111e0 <sbrk_aligned>
 8011294:	3001      	adds	r0, #1
 8011296:	d03a      	beq.n	801130e <_malloc_r+0xea>
 8011298:	6823      	ldr	r3, [r4, #0]
 801129a:	442b      	add	r3, r5
 801129c:	6023      	str	r3, [r4, #0]
 801129e:	f8d8 3000 	ldr.w	r3, [r8]
 80112a2:	685a      	ldr	r2, [r3, #4]
 80112a4:	bb62      	cbnz	r2, 8011300 <_malloc_r+0xdc>
 80112a6:	f8c8 7000 	str.w	r7, [r8]
 80112aa:	e00f      	b.n	80112cc <_malloc_r+0xa8>
 80112ac:	6822      	ldr	r2, [r4, #0]
 80112ae:	1b52      	subs	r2, r2, r5
 80112b0:	d420      	bmi.n	80112f4 <_malloc_r+0xd0>
 80112b2:	2a0b      	cmp	r2, #11
 80112b4:	d917      	bls.n	80112e6 <_malloc_r+0xc2>
 80112b6:	1961      	adds	r1, r4, r5
 80112b8:	42a3      	cmp	r3, r4
 80112ba:	6025      	str	r5, [r4, #0]
 80112bc:	bf18      	it	ne
 80112be:	6059      	strne	r1, [r3, #4]
 80112c0:	6863      	ldr	r3, [r4, #4]
 80112c2:	bf08      	it	eq
 80112c4:	f8c8 1000 	streq.w	r1, [r8]
 80112c8:	5162      	str	r2, [r4, r5]
 80112ca:	604b      	str	r3, [r1, #4]
 80112cc:	4630      	mov	r0, r6
 80112ce:	f000 f82f 	bl	8011330 <__malloc_unlock>
 80112d2:	f104 000b 	add.w	r0, r4, #11
 80112d6:	1d23      	adds	r3, r4, #4
 80112d8:	f020 0007 	bic.w	r0, r0, #7
 80112dc:	1ac2      	subs	r2, r0, r3
 80112de:	bf1c      	itt	ne
 80112e0:	1a1b      	subne	r3, r3, r0
 80112e2:	50a3      	strne	r3, [r4, r2]
 80112e4:	e7af      	b.n	8011246 <_malloc_r+0x22>
 80112e6:	6862      	ldr	r2, [r4, #4]
 80112e8:	42a3      	cmp	r3, r4
 80112ea:	bf0c      	ite	eq
 80112ec:	f8c8 2000 	streq.w	r2, [r8]
 80112f0:	605a      	strne	r2, [r3, #4]
 80112f2:	e7eb      	b.n	80112cc <_malloc_r+0xa8>
 80112f4:	4623      	mov	r3, r4
 80112f6:	6864      	ldr	r4, [r4, #4]
 80112f8:	e7ae      	b.n	8011258 <_malloc_r+0x34>
 80112fa:	463c      	mov	r4, r7
 80112fc:	687f      	ldr	r7, [r7, #4]
 80112fe:	e7b6      	b.n	801126e <_malloc_r+0x4a>
 8011300:	461a      	mov	r2, r3
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	42a3      	cmp	r3, r4
 8011306:	d1fb      	bne.n	8011300 <_malloc_r+0xdc>
 8011308:	2300      	movs	r3, #0
 801130a:	6053      	str	r3, [r2, #4]
 801130c:	e7de      	b.n	80112cc <_malloc_r+0xa8>
 801130e:	230c      	movs	r3, #12
 8011310:	6033      	str	r3, [r6, #0]
 8011312:	4630      	mov	r0, r6
 8011314:	f000 f80c 	bl	8011330 <__malloc_unlock>
 8011318:	e794      	b.n	8011244 <_malloc_r+0x20>
 801131a:	6005      	str	r5, [r0, #0]
 801131c:	e7d6      	b.n	80112cc <_malloc_r+0xa8>
 801131e:	bf00      	nop
 8011320:	20000d40 	.word	0x20000d40

08011324 <__malloc_lock>:
 8011324:	4801      	ldr	r0, [pc, #4]	@ (801132c <__malloc_lock+0x8>)
 8011326:	f7ff bf00 	b.w	801112a <__retarget_lock_acquire_recursive>
 801132a:	bf00      	nop
 801132c:	20000d38 	.word	0x20000d38

08011330 <__malloc_unlock>:
 8011330:	4801      	ldr	r0, [pc, #4]	@ (8011338 <__malloc_unlock+0x8>)
 8011332:	f7ff befb 	b.w	801112c <__retarget_lock_release_recursive>
 8011336:	bf00      	nop
 8011338:	20000d38 	.word	0x20000d38

0801133c <__sfputc_r>:
 801133c:	6893      	ldr	r3, [r2, #8]
 801133e:	3b01      	subs	r3, #1
 8011340:	2b00      	cmp	r3, #0
 8011342:	b410      	push	{r4}
 8011344:	6093      	str	r3, [r2, #8]
 8011346:	da08      	bge.n	801135a <__sfputc_r+0x1e>
 8011348:	6994      	ldr	r4, [r2, #24]
 801134a:	42a3      	cmp	r3, r4
 801134c:	db01      	blt.n	8011352 <__sfputc_r+0x16>
 801134e:	290a      	cmp	r1, #10
 8011350:	d103      	bne.n	801135a <__sfputc_r+0x1e>
 8011352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011356:	f7ff bdc4 	b.w	8010ee2 <__swbuf_r>
 801135a:	6813      	ldr	r3, [r2, #0]
 801135c:	1c58      	adds	r0, r3, #1
 801135e:	6010      	str	r0, [r2, #0]
 8011360:	7019      	strb	r1, [r3, #0]
 8011362:	4608      	mov	r0, r1
 8011364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011368:	4770      	bx	lr

0801136a <__sfputs_r>:
 801136a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801136c:	4606      	mov	r6, r0
 801136e:	460f      	mov	r7, r1
 8011370:	4614      	mov	r4, r2
 8011372:	18d5      	adds	r5, r2, r3
 8011374:	42ac      	cmp	r4, r5
 8011376:	d101      	bne.n	801137c <__sfputs_r+0x12>
 8011378:	2000      	movs	r0, #0
 801137a:	e007      	b.n	801138c <__sfputs_r+0x22>
 801137c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011380:	463a      	mov	r2, r7
 8011382:	4630      	mov	r0, r6
 8011384:	f7ff ffda 	bl	801133c <__sfputc_r>
 8011388:	1c43      	adds	r3, r0, #1
 801138a:	d1f3      	bne.n	8011374 <__sfputs_r+0xa>
 801138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011390 <_vfiprintf_r>:
 8011390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011394:	460d      	mov	r5, r1
 8011396:	b09d      	sub	sp, #116	@ 0x74
 8011398:	4614      	mov	r4, r2
 801139a:	4698      	mov	r8, r3
 801139c:	4606      	mov	r6, r0
 801139e:	b118      	cbz	r0, 80113a8 <_vfiprintf_r+0x18>
 80113a0:	6a03      	ldr	r3, [r0, #32]
 80113a2:	b90b      	cbnz	r3, 80113a8 <_vfiprintf_r+0x18>
 80113a4:	f7ff fcac 	bl	8010d00 <__sinit>
 80113a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113aa:	07d9      	lsls	r1, r3, #31
 80113ac:	d405      	bmi.n	80113ba <_vfiprintf_r+0x2a>
 80113ae:	89ab      	ldrh	r3, [r5, #12]
 80113b0:	059a      	lsls	r2, r3, #22
 80113b2:	d402      	bmi.n	80113ba <_vfiprintf_r+0x2a>
 80113b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113b6:	f7ff feb8 	bl	801112a <__retarget_lock_acquire_recursive>
 80113ba:	89ab      	ldrh	r3, [r5, #12]
 80113bc:	071b      	lsls	r3, r3, #28
 80113be:	d501      	bpl.n	80113c4 <_vfiprintf_r+0x34>
 80113c0:	692b      	ldr	r3, [r5, #16]
 80113c2:	b99b      	cbnz	r3, 80113ec <_vfiprintf_r+0x5c>
 80113c4:	4629      	mov	r1, r5
 80113c6:	4630      	mov	r0, r6
 80113c8:	f7ff fdca 	bl	8010f60 <__swsetup_r>
 80113cc:	b170      	cbz	r0, 80113ec <_vfiprintf_r+0x5c>
 80113ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113d0:	07dc      	lsls	r4, r3, #31
 80113d2:	d504      	bpl.n	80113de <_vfiprintf_r+0x4e>
 80113d4:	f04f 30ff 	mov.w	r0, #4294967295
 80113d8:	b01d      	add	sp, #116	@ 0x74
 80113da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113de:	89ab      	ldrh	r3, [r5, #12]
 80113e0:	0598      	lsls	r0, r3, #22
 80113e2:	d4f7      	bmi.n	80113d4 <_vfiprintf_r+0x44>
 80113e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113e6:	f7ff fea1 	bl	801112c <__retarget_lock_release_recursive>
 80113ea:	e7f3      	b.n	80113d4 <_vfiprintf_r+0x44>
 80113ec:	2300      	movs	r3, #0
 80113ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80113f0:	2320      	movs	r3, #32
 80113f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80113f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80113fa:	2330      	movs	r3, #48	@ 0x30
 80113fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80115ac <_vfiprintf_r+0x21c>
 8011400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011404:	f04f 0901 	mov.w	r9, #1
 8011408:	4623      	mov	r3, r4
 801140a:	469a      	mov	sl, r3
 801140c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011410:	b10a      	cbz	r2, 8011416 <_vfiprintf_r+0x86>
 8011412:	2a25      	cmp	r2, #37	@ 0x25
 8011414:	d1f9      	bne.n	801140a <_vfiprintf_r+0x7a>
 8011416:	ebba 0b04 	subs.w	fp, sl, r4
 801141a:	d00b      	beq.n	8011434 <_vfiprintf_r+0xa4>
 801141c:	465b      	mov	r3, fp
 801141e:	4622      	mov	r2, r4
 8011420:	4629      	mov	r1, r5
 8011422:	4630      	mov	r0, r6
 8011424:	f7ff ffa1 	bl	801136a <__sfputs_r>
 8011428:	3001      	adds	r0, #1
 801142a:	f000 80a7 	beq.w	801157c <_vfiprintf_r+0x1ec>
 801142e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011430:	445a      	add	r2, fp
 8011432:	9209      	str	r2, [sp, #36]	@ 0x24
 8011434:	f89a 3000 	ldrb.w	r3, [sl]
 8011438:	2b00      	cmp	r3, #0
 801143a:	f000 809f 	beq.w	801157c <_vfiprintf_r+0x1ec>
 801143e:	2300      	movs	r3, #0
 8011440:	f04f 32ff 	mov.w	r2, #4294967295
 8011444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011448:	f10a 0a01 	add.w	sl, sl, #1
 801144c:	9304      	str	r3, [sp, #16]
 801144e:	9307      	str	r3, [sp, #28]
 8011450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011454:	931a      	str	r3, [sp, #104]	@ 0x68
 8011456:	4654      	mov	r4, sl
 8011458:	2205      	movs	r2, #5
 801145a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801145e:	4853      	ldr	r0, [pc, #332]	@ (80115ac <_vfiprintf_r+0x21c>)
 8011460:	f7ee fe96 	bl	8000190 <memchr>
 8011464:	9a04      	ldr	r2, [sp, #16]
 8011466:	b9d8      	cbnz	r0, 80114a0 <_vfiprintf_r+0x110>
 8011468:	06d1      	lsls	r1, r2, #27
 801146a:	bf44      	itt	mi
 801146c:	2320      	movmi	r3, #32
 801146e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011472:	0713      	lsls	r3, r2, #28
 8011474:	bf44      	itt	mi
 8011476:	232b      	movmi	r3, #43	@ 0x2b
 8011478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801147c:	f89a 3000 	ldrb.w	r3, [sl]
 8011480:	2b2a      	cmp	r3, #42	@ 0x2a
 8011482:	d015      	beq.n	80114b0 <_vfiprintf_r+0x120>
 8011484:	9a07      	ldr	r2, [sp, #28]
 8011486:	4654      	mov	r4, sl
 8011488:	2000      	movs	r0, #0
 801148a:	f04f 0c0a 	mov.w	ip, #10
 801148e:	4621      	mov	r1, r4
 8011490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011494:	3b30      	subs	r3, #48	@ 0x30
 8011496:	2b09      	cmp	r3, #9
 8011498:	d94b      	bls.n	8011532 <_vfiprintf_r+0x1a2>
 801149a:	b1b0      	cbz	r0, 80114ca <_vfiprintf_r+0x13a>
 801149c:	9207      	str	r2, [sp, #28]
 801149e:	e014      	b.n	80114ca <_vfiprintf_r+0x13a>
 80114a0:	eba0 0308 	sub.w	r3, r0, r8
 80114a4:	fa09 f303 	lsl.w	r3, r9, r3
 80114a8:	4313      	orrs	r3, r2
 80114aa:	9304      	str	r3, [sp, #16]
 80114ac:	46a2      	mov	sl, r4
 80114ae:	e7d2      	b.n	8011456 <_vfiprintf_r+0xc6>
 80114b0:	9b03      	ldr	r3, [sp, #12]
 80114b2:	1d19      	adds	r1, r3, #4
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	9103      	str	r1, [sp, #12]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	bfbb      	ittet	lt
 80114bc:	425b      	neglt	r3, r3
 80114be:	f042 0202 	orrlt.w	r2, r2, #2
 80114c2:	9307      	strge	r3, [sp, #28]
 80114c4:	9307      	strlt	r3, [sp, #28]
 80114c6:	bfb8      	it	lt
 80114c8:	9204      	strlt	r2, [sp, #16]
 80114ca:	7823      	ldrb	r3, [r4, #0]
 80114cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80114ce:	d10a      	bne.n	80114e6 <_vfiprintf_r+0x156>
 80114d0:	7863      	ldrb	r3, [r4, #1]
 80114d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80114d4:	d132      	bne.n	801153c <_vfiprintf_r+0x1ac>
 80114d6:	9b03      	ldr	r3, [sp, #12]
 80114d8:	1d1a      	adds	r2, r3, #4
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	9203      	str	r2, [sp, #12]
 80114de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80114e2:	3402      	adds	r4, #2
 80114e4:	9305      	str	r3, [sp, #20]
 80114e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80115bc <_vfiprintf_r+0x22c>
 80114ea:	7821      	ldrb	r1, [r4, #0]
 80114ec:	2203      	movs	r2, #3
 80114ee:	4650      	mov	r0, sl
 80114f0:	f7ee fe4e 	bl	8000190 <memchr>
 80114f4:	b138      	cbz	r0, 8011506 <_vfiprintf_r+0x176>
 80114f6:	9b04      	ldr	r3, [sp, #16]
 80114f8:	eba0 000a 	sub.w	r0, r0, sl
 80114fc:	2240      	movs	r2, #64	@ 0x40
 80114fe:	4082      	lsls	r2, r0
 8011500:	4313      	orrs	r3, r2
 8011502:	3401      	adds	r4, #1
 8011504:	9304      	str	r3, [sp, #16]
 8011506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801150a:	4829      	ldr	r0, [pc, #164]	@ (80115b0 <_vfiprintf_r+0x220>)
 801150c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011510:	2206      	movs	r2, #6
 8011512:	f7ee fe3d 	bl	8000190 <memchr>
 8011516:	2800      	cmp	r0, #0
 8011518:	d03f      	beq.n	801159a <_vfiprintf_r+0x20a>
 801151a:	4b26      	ldr	r3, [pc, #152]	@ (80115b4 <_vfiprintf_r+0x224>)
 801151c:	bb1b      	cbnz	r3, 8011566 <_vfiprintf_r+0x1d6>
 801151e:	9b03      	ldr	r3, [sp, #12]
 8011520:	3307      	adds	r3, #7
 8011522:	f023 0307 	bic.w	r3, r3, #7
 8011526:	3308      	adds	r3, #8
 8011528:	9303      	str	r3, [sp, #12]
 801152a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801152c:	443b      	add	r3, r7
 801152e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011530:	e76a      	b.n	8011408 <_vfiprintf_r+0x78>
 8011532:	fb0c 3202 	mla	r2, ip, r2, r3
 8011536:	460c      	mov	r4, r1
 8011538:	2001      	movs	r0, #1
 801153a:	e7a8      	b.n	801148e <_vfiprintf_r+0xfe>
 801153c:	2300      	movs	r3, #0
 801153e:	3401      	adds	r4, #1
 8011540:	9305      	str	r3, [sp, #20]
 8011542:	4619      	mov	r1, r3
 8011544:	f04f 0c0a 	mov.w	ip, #10
 8011548:	4620      	mov	r0, r4
 801154a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801154e:	3a30      	subs	r2, #48	@ 0x30
 8011550:	2a09      	cmp	r2, #9
 8011552:	d903      	bls.n	801155c <_vfiprintf_r+0x1cc>
 8011554:	2b00      	cmp	r3, #0
 8011556:	d0c6      	beq.n	80114e6 <_vfiprintf_r+0x156>
 8011558:	9105      	str	r1, [sp, #20]
 801155a:	e7c4      	b.n	80114e6 <_vfiprintf_r+0x156>
 801155c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011560:	4604      	mov	r4, r0
 8011562:	2301      	movs	r3, #1
 8011564:	e7f0      	b.n	8011548 <_vfiprintf_r+0x1b8>
 8011566:	ab03      	add	r3, sp, #12
 8011568:	9300      	str	r3, [sp, #0]
 801156a:	462a      	mov	r2, r5
 801156c:	4b12      	ldr	r3, [pc, #72]	@ (80115b8 <_vfiprintf_r+0x228>)
 801156e:	a904      	add	r1, sp, #16
 8011570:	4630      	mov	r0, r6
 8011572:	f3af 8000 	nop.w
 8011576:	4607      	mov	r7, r0
 8011578:	1c78      	adds	r0, r7, #1
 801157a:	d1d6      	bne.n	801152a <_vfiprintf_r+0x19a>
 801157c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801157e:	07d9      	lsls	r1, r3, #31
 8011580:	d405      	bmi.n	801158e <_vfiprintf_r+0x1fe>
 8011582:	89ab      	ldrh	r3, [r5, #12]
 8011584:	059a      	lsls	r2, r3, #22
 8011586:	d402      	bmi.n	801158e <_vfiprintf_r+0x1fe>
 8011588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801158a:	f7ff fdcf 	bl	801112c <__retarget_lock_release_recursive>
 801158e:	89ab      	ldrh	r3, [r5, #12]
 8011590:	065b      	lsls	r3, r3, #25
 8011592:	f53f af1f 	bmi.w	80113d4 <_vfiprintf_r+0x44>
 8011596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011598:	e71e      	b.n	80113d8 <_vfiprintf_r+0x48>
 801159a:	ab03      	add	r3, sp, #12
 801159c:	9300      	str	r3, [sp, #0]
 801159e:	462a      	mov	r2, r5
 80115a0:	4b05      	ldr	r3, [pc, #20]	@ (80115b8 <_vfiprintf_r+0x228>)
 80115a2:	a904      	add	r1, sp, #16
 80115a4:	4630      	mov	r0, r6
 80115a6:	f000 f879 	bl	801169c <_printf_i>
 80115aa:	e7e4      	b.n	8011576 <_vfiprintf_r+0x1e6>
 80115ac:	080135fc 	.word	0x080135fc
 80115b0:	08013606 	.word	0x08013606
 80115b4:	00000000 	.word	0x00000000
 80115b8:	0801136b 	.word	0x0801136b
 80115bc:	08013602 	.word	0x08013602

080115c0 <_printf_common>:
 80115c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c4:	4616      	mov	r6, r2
 80115c6:	4698      	mov	r8, r3
 80115c8:	688a      	ldr	r2, [r1, #8]
 80115ca:	690b      	ldr	r3, [r1, #16]
 80115cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80115d0:	4293      	cmp	r3, r2
 80115d2:	bfb8      	it	lt
 80115d4:	4613      	movlt	r3, r2
 80115d6:	6033      	str	r3, [r6, #0]
 80115d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80115dc:	4607      	mov	r7, r0
 80115de:	460c      	mov	r4, r1
 80115e0:	b10a      	cbz	r2, 80115e6 <_printf_common+0x26>
 80115e2:	3301      	adds	r3, #1
 80115e4:	6033      	str	r3, [r6, #0]
 80115e6:	6823      	ldr	r3, [r4, #0]
 80115e8:	0699      	lsls	r1, r3, #26
 80115ea:	bf42      	ittt	mi
 80115ec:	6833      	ldrmi	r3, [r6, #0]
 80115ee:	3302      	addmi	r3, #2
 80115f0:	6033      	strmi	r3, [r6, #0]
 80115f2:	6825      	ldr	r5, [r4, #0]
 80115f4:	f015 0506 	ands.w	r5, r5, #6
 80115f8:	d106      	bne.n	8011608 <_printf_common+0x48>
 80115fa:	f104 0a19 	add.w	sl, r4, #25
 80115fe:	68e3      	ldr	r3, [r4, #12]
 8011600:	6832      	ldr	r2, [r6, #0]
 8011602:	1a9b      	subs	r3, r3, r2
 8011604:	42ab      	cmp	r3, r5
 8011606:	dc26      	bgt.n	8011656 <_printf_common+0x96>
 8011608:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801160c:	6822      	ldr	r2, [r4, #0]
 801160e:	3b00      	subs	r3, #0
 8011610:	bf18      	it	ne
 8011612:	2301      	movne	r3, #1
 8011614:	0692      	lsls	r2, r2, #26
 8011616:	d42b      	bmi.n	8011670 <_printf_common+0xb0>
 8011618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801161c:	4641      	mov	r1, r8
 801161e:	4638      	mov	r0, r7
 8011620:	47c8      	blx	r9
 8011622:	3001      	adds	r0, #1
 8011624:	d01e      	beq.n	8011664 <_printf_common+0xa4>
 8011626:	6823      	ldr	r3, [r4, #0]
 8011628:	6922      	ldr	r2, [r4, #16]
 801162a:	f003 0306 	and.w	r3, r3, #6
 801162e:	2b04      	cmp	r3, #4
 8011630:	bf02      	ittt	eq
 8011632:	68e5      	ldreq	r5, [r4, #12]
 8011634:	6833      	ldreq	r3, [r6, #0]
 8011636:	1aed      	subeq	r5, r5, r3
 8011638:	68a3      	ldr	r3, [r4, #8]
 801163a:	bf0c      	ite	eq
 801163c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011640:	2500      	movne	r5, #0
 8011642:	4293      	cmp	r3, r2
 8011644:	bfc4      	itt	gt
 8011646:	1a9b      	subgt	r3, r3, r2
 8011648:	18ed      	addgt	r5, r5, r3
 801164a:	2600      	movs	r6, #0
 801164c:	341a      	adds	r4, #26
 801164e:	42b5      	cmp	r5, r6
 8011650:	d11a      	bne.n	8011688 <_printf_common+0xc8>
 8011652:	2000      	movs	r0, #0
 8011654:	e008      	b.n	8011668 <_printf_common+0xa8>
 8011656:	2301      	movs	r3, #1
 8011658:	4652      	mov	r2, sl
 801165a:	4641      	mov	r1, r8
 801165c:	4638      	mov	r0, r7
 801165e:	47c8      	blx	r9
 8011660:	3001      	adds	r0, #1
 8011662:	d103      	bne.n	801166c <_printf_common+0xac>
 8011664:	f04f 30ff 	mov.w	r0, #4294967295
 8011668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801166c:	3501      	adds	r5, #1
 801166e:	e7c6      	b.n	80115fe <_printf_common+0x3e>
 8011670:	18e1      	adds	r1, r4, r3
 8011672:	1c5a      	adds	r2, r3, #1
 8011674:	2030      	movs	r0, #48	@ 0x30
 8011676:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801167a:	4422      	add	r2, r4
 801167c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011680:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011684:	3302      	adds	r3, #2
 8011686:	e7c7      	b.n	8011618 <_printf_common+0x58>
 8011688:	2301      	movs	r3, #1
 801168a:	4622      	mov	r2, r4
 801168c:	4641      	mov	r1, r8
 801168e:	4638      	mov	r0, r7
 8011690:	47c8      	blx	r9
 8011692:	3001      	adds	r0, #1
 8011694:	d0e6      	beq.n	8011664 <_printf_common+0xa4>
 8011696:	3601      	adds	r6, #1
 8011698:	e7d9      	b.n	801164e <_printf_common+0x8e>
	...

0801169c <_printf_i>:
 801169c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116a0:	7e0f      	ldrb	r7, [r1, #24]
 80116a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80116a4:	2f78      	cmp	r7, #120	@ 0x78
 80116a6:	4691      	mov	r9, r2
 80116a8:	4680      	mov	r8, r0
 80116aa:	460c      	mov	r4, r1
 80116ac:	469a      	mov	sl, r3
 80116ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80116b2:	d807      	bhi.n	80116c4 <_printf_i+0x28>
 80116b4:	2f62      	cmp	r7, #98	@ 0x62
 80116b6:	d80a      	bhi.n	80116ce <_printf_i+0x32>
 80116b8:	2f00      	cmp	r7, #0
 80116ba:	f000 80d2 	beq.w	8011862 <_printf_i+0x1c6>
 80116be:	2f58      	cmp	r7, #88	@ 0x58
 80116c0:	f000 80b9 	beq.w	8011836 <_printf_i+0x19a>
 80116c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80116cc:	e03a      	b.n	8011744 <_printf_i+0xa8>
 80116ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80116d2:	2b15      	cmp	r3, #21
 80116d4:	d8f6      	bhi.n	80116c4 <_printf_i+0x28>
 80116d6:	a101      	add	r1, pc, #4	@ (adr r1, 80116dc <_printf_i+0x40>)
 80116d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80116dc:	08011735 	.word	0x08011735
 80116e0:	08011749 	.word	0x08011749
 80116e4:	080116c5 	.word	0x080116c5
 80116e8:	080116c5 	.word	0x080116c5
 80116ec:	080116c5 	.word	0x080116c5
 80116f0:	080116c5 	.word	0x080116c5
 80116f4:	08011749 	.word	0x08011749
 80116f8:	080116c5 	.word	0x080116c5
 80116fc:	080116c5 	.word	0x080116c5
 8011700:	080116c5 	.word	0x080116c5
 8011704:	080116c5 	.word	0x080116c5
 8011708:	08011849 	.word	0x08011849
 801170c:	08011773 	.word	0x08011773
 8011710:	08011803 	.word	0x08011803
 8011714:	080116c5 	.word	0x080116c5
 8011718:	080116c5 	.word	0x080116c5
 801171c:	0801186b 	.word	0x0801186b
 8011720:	080116c5 	.word	0x080116c5
 8011724:	08011773 	.word	0x08011773
 8011728:	080116c5 	.word	0x080116c5
 801172c:	080116c5 	.word	0x080116c5
 8011730:	0801180b 	.word	0x0801180b
 8011734:	6833      	ldr	r3, [r6, #0]
 8011736:	1d1a      	adds	r2, r3, #4
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	6032      	str	r2, [r6, #0]
 801173c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011740:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011744:	2301      	movs	r3, #1
 8011746:	e09d      	b.n	8011884 <_printf_i+0x1e8>
 8011748:	6833      	ldr	r3, [r6, #0]
 801174a:	6820      	ldr	r0, [r4, #0]
 801174c:	1d19      	adds	r1, r3, #4
 801174e:	6031      	str	r1, [r6, #0]
 8011750:	0606      	lsls	r6, r0, #24
 8011752:	d501      	bpl.n	8011758 <_printf_i+0xbc>
 8011754:	681d      	ldr	r5, [r3, #0]
 8011756:	e003      	b.n	8011760 <_printf_i+0xc4>
 8011758:	0645      	lsls	r5, r0, #25
 801175a:	d5fb      	bpl.n	8011754 <_printf_i+0xb8>
 801175c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011760:	2d00      	cmp	r5, #0
 8011762:	da03      	bge.n	801176c <_printf_i+0xd0>
 8011764:	232d      	movs	r3, #45	@ 0x2d
 8011766:	426d      	negs	r5, r5
 8011768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801176c:	4859      	ldr	r0, [pc, #356]	@ (80118d4 <_printf_i+0x238>)
 801176e:	230a      	movs	r3, #10
 8011770:	e011      	b.n	8011796 <_printf_i+0xfa>
 8011772:	6821      	ldr	r1, [r4, #0]
 8011774:	6833      	ldr	r3, [r6, #0]
 8011776:	0608      	lsls	r0, r1, #24
 8011778:	f853 5b04 	ldr.w	r5, [r3], #4
 801177c:	d402      	bmi.n	8011784 <_printf_i+0xe8>
 801177e:	0649      	lsls	r1, r1, #25
 8011780:	bf48      	it	mi
 8011782:	b2ad      	uxthmi	r5, r5
 8011784:	2f6f      	cmp	r7, #111	@ 0x6f
 8011786:	4853      	ldr	r0, [pc, #332]	@ (80118d4 <_printf_i+0x238>)
 8011788:	6033      	str	r3, [r6, #0]
 801178a:	bf14      	ite	ne
 801178c:	230a      	movne	r3, #10
 801178e:	2308      	moveq	r3, #8
 8011790:	2100      	movs	r1, #0
 8011792:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011796:	6866      	ldr	r6, [r4, #4]
 8011798:	60a6      	str	r6, [r4, #8]
 801179a:	2e00      	cmp	r6, #0
 801179c:	bfa2      	ittt	ge
 801179e:	6821      	ldrge	r1, [r4, #0]
 80117a0:	f021 0104 	bicge.w	r1, r1, #4
 80117a4:	6021      	strge	r1, [r4, #0]
 80117a6:	b90d      	cbnz	r5, 80117ac <_printf_i+0x110>
 80117a8:	2e00      	cmp	r6, #0
 80117aa:	d04b      	beq.n	8011844 <_printf_i+0x1a8>
 80117ac:	4616      	mov	r6, r2
 80117ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80117b2:	fb03 5711 	mls	r7, r3, r1, r5
 80117b6:	5dc7      	ldrb	r7, [r0, r7]
 80117b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80117bc:	462f      	mov	r7, r5
 80117be:	42bb      	cmp	r3, r7
 80117c0:	460d      	mov	r5, r1
 80117c2:	d9f4      	bls.n	80117ae <_printf_i+0x112>
 80117c4:	2b08      	cmp	r3, #8
 80117c6:	d10b      	bne.n	80117e0 <_printf_i+0x144>
 80117c8:	6823      	ldr	r3, [r4, #0]
 80117ca:	07df      	lsls	r7, r3, #31
 80117cc:	d508      	bpl.n	80117e0 <_printf_i+0x144>
 80117ce:	6923      	ldr	r3, [r4, #16]
 80117d0:	6861      	ldr	r1, [r4, #4]
 80117d2:	4299      	cmp	r1, r3
 80117d4:	bfde      	ittt	le
 80117d6:	2330      	movle	r3, #48	@ 0x30
 80117d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80117dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80117e0:	1b92      	subs	r2, r2, r6
 80117e2:	6122      	str	r2, [r4, #16]
 80117e4:	f8cd a000 	str.w	sl, [sp]
 80117e8:	464b      	mov	r3, r9
 80117ea:	aa03      	add	r2, sp, #12
 80117ec:	4621      	mov	r1, r4
 80117ee:	4640      	mov	r0, r8
 80117f0:	f7ff fee6 	bl	80115c0 <_printf_common>
 80117f4:	3001      	adds	r0, #1
 80117f6:	d14a      	bne.n	801188e <_printf_i+0x1f2>
 80117f8:	f04f 30ff 	mov.w	r0, #4294967295
 80117fc:	b004      	add	sp, #16
 80117fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	f043 0320 	orr.w	r3, r3, #32
 8011808:	6023      	str	r3, [r4, #0]
 801180a:	4833      	ldr	r0, [pc, #204]	@ (80118d8 <_printf_i+0x23c>)
 801180c:	2778      	movs	r7, #120	@ 0x78
 801180e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011812:	6823      	ldr	r3, [r4, #0]
 8011814:	6831      	ldr	r1, [r6, #0]
 8011816:	061f      	lsls	r7, r3, #24
 8011818:	f851 5b04 	ldr.w	r5, [r1], #4
 801181c:	d402      	bmi.n	8011824 <_printf_i+0x188>
 801181e:	065f      	lsls	r7, r3, #25
 8011820:	bf48      	it	mi
 8011822:	b2ad      	uxthmi	r5, r5
 8011824:	6031      	str	r1, [r6, #0]
 8011826:	07d9      	lsls	r1, r3, #31
 8011828:	bf44      	itt	mi
 801182a:	f043 0320 	orrmi.w	r3, r3, #32
 801182e:	6023      	strmi	r3, [r4, #0]
 8011830:	b11d      	cbz	r5, 801183a <_printf_i+0x19e>
 8011832:	2310      	movs	r3, #16
 8011834:	e7ac      	b.n	8011790 <_printf_i+0xf4>
 8011836:	4827      	ldr	r0, [pc, #156]	@ (80118d4 <_printf_i+0x238>)
 8011838:	e7e9      	b.n	801180e <_printf_i+0x172>
 801183a:	6823      	ldr	r3, [r4, #0]
 801183c:	f023 0320 	bic.w	r3, r3, #32
 8011840:	6023      	str	r3, [r4, #0]
 8011842:	e7f6      	b.n	8011832 <_printf_i+0x196>
 8011844:	4616      	mov	r6, r2
 8011846:	e7bd      	b.n	80117c4 <_printf_i+0x128>
 8011848:	6833      	ldr	r3, [r6, #0]
 801184a:	6825      	ldr	r5, [r4, #0]
 801184c:	6961      	ldr	r1, [r4, #20]
 801184e:	1d18      	adds	r0, r3, #4
 8011850:	6030      	str	r0, [r6, #0]
 8011852:	062e      	lsls	r6, r5, #24
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	d501      	bpl.n	801185c <_printf_i+0x1c0>
 8011858:	6019      	str	r1, [r3, #0]
 801185a:	e002      	b.n	8011862 <_printf_i+0x1c6>
 801185c:	0668      	lsls	r0, r5, #25
 801185e:	d5fb      	bpl.n	8011858 <_printf_i+0x1bc>
 8011860:	8019      	strh	r1, [r3, #0]
 8011862:	2300      	movs	r3, #0
 8011864:	6123      	str	r3, [r4, #16]
 8011866:	4616      	mov	r6, r2
 8011868:	e7bc      	b.n	80117e4 <_printf_i+0x148>
 801186a:	6833      	ldr	r3, [r6, #0]
 801186c:	1d1a      	adds	r2, r3, #4
 801186e:	6032      	str	r2, [r6, #0]
 8011870:	681e      	ldr	r6, [r3, #0]
 8011872:	6862      	ldr	r2, [r4, #4]
 8011874:	2100      	movs	r1, #0
 8011876:	4630      	mov	r0, r6
 8011878:	f7ee fc8a 	bl	8000190 <memchr>
 801187c:	b108      	cbz	r0, 8011882 <_printf_i+0x1e6>
 801187e:	1b80      	subs	r0, r0, r6
 8011880:	6060      	str	r0, [r4, #4]
 8011882:	6863      	ldr	r3, [r4, #4]
 8011884:	6123      	str	r3, [r4, #16]
 8011886:	2300      	movs	r3, #0
 8011888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801188c:	e7aa      	b.n	80117e4 <_printf_i+0x148>
 801188e:	6923      	ldr	r3, [r4, #16]
 8011890:	4632      	mov	r2, r6
 8011892:	4649      	mov	r1, r9
 8011894:	4640      	mov	r0, r8
 8011896:	47d0      	blx	sl
 8011898:	3001      	adds	r0, #1
 801189a:	d0ad      	beq.n	80117f8 <_printf_i+0x15c>
 801189c:	6823      	ldr	r3, [r4, #0]
 801189e:	079b      	lsls	r3, r3, #30
 80118a0:	d413      	bmi.n	80118ca <_printf_i+0x22e>
 80118a2:	68e0      	ldr	r0, [r4, #12]
 80118a4:	9b03      	ldr	r3, [sp, #12]
 80118a6:	4298      	cmp	r0, r3
 80118a8:	bfb8      	it	lt
 80118aa:	4618      	movlt	r0, r3
 80118ac:	e7a6      	b.n	80117fc <_printf_i+0x160>
 80118ae:	2301      	movs	r3, #1
 80118b0:	4632      	mov	r2, r6
 80118b2:	4649      	mov	r1, r9
 80118b4:	4640      	mov	r0, r8
 80118b6:	47d0      	blx	sl
 80118b8:	3001      	adds	r0, #1
 80118ba:	d09d      	beq.n	80117f8 <_printf_i+0x15c>
 80118bc:	3501      	adds	r5, #1
 80118be:	68e3      	ldr	r3, [r4, #12]
 80118c0:	9903      	ldr	r1, [sp, #12]
 80118c2:	1a5b      	subs	r3, r3, r1
 80118c4:	42ab      	cmp	r3, r5
 80118c6:	dcf2      	bgt.n	80118ae <_printf_i+0x212>
 80118c8:	e7eb      	b.n	80118a2 <_printf_i+0x206>
 80118ca:	2500      	movs	r5, #0
 80118cc:	f104 0619 	add.w	r6, r4, #25
 80118d0:	e7f5      	b.n	80118be <_printf_i+0x222>
 80118d2:	bf00      	nop
 80118d4:	0801360d 	.word	0x0801360d
 80118d8:	0801361e 	.word	0x0801361e

080118dc <__sflush_r>:
 80118dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80118e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e4:	0716      	lsls	r6, r2, #28
 80118e6:	4605      	mov	r5, r0
 80118e8:	460c      	mov	r4, r1
 80118ea:	d454      	bmi.n	8011996 <__sflush_r+0xba>
 80118ec:	684b      	ldr	r3, [r1, #4]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	dc02      	bgt.n	80118f8 <__sflush_r+0x1c>
 80118f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	dd48      	ble.n	801198a <__sflush_r+0xae>
 80118f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80118fa:	2e00      	cmp	r6, #0
 80118fc:	d045      	beq.n	801198a <__sflush_r+0xae>
 80118fe:	2300      	movs	r3, #0
 8011900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011904:	682f      	ldr	r7, [r5, #0]
 8011906:	6a21      	ldr	r1, [r4, #32]
 8011908:	602b      	str	r3, [r5, #0]
 801190a:	d030      	beq.n	801196e <__sflush_r+0x92>
 801190c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	0759      	lsls	r1, r3, #29
 8011912:	d505      	bpl.n	8011920 <__sflush_r+0x44>
 8011914:	6863      	ldr	r3, [r4, #4]
 8011916:	1ad2      	subs	r2, r2, r3
 8011918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801191a:	b10b      	cbz	r3, 8011920 <__sflush_r+0x44>
 801191c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801191e:	1ad2      	subs	r2, r2, r3
 8011920:	2300      	movs	r3, #0
 8011922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011924:	6a21      	ldr	r1, [r4, #32]
 8011926:	4628      	mov	r0, r5
 8011928:	47b0      	blx	r6
 801192a:	1c43      	adds	r3, r0, #1
 801192c:	89a3      	ldrh	r3, [r4, #12]
 801192e:	d106      	bne.n	801193e <__sflush_r+0x62>
 8011930:	6829      	ldr	r1, [r5, #0]
 8011932:	291d      	cmp	r1, #29
 8011934:	d82b      	bhi.n	801198e <__sflush_r+0xb2>
 8011936:	4a2a      	ldr	r2, [pc, #168]	@ (80119e0 <__sflush_r+0x104>)
 8011938:	410a      	asrs	r2, r1
 801193a:	07d6      	lsls	r6, r2, #31
 801193c:	d427      	bmi.n	801198e <__sflush_r+0xb2>
 801193e:	2200      	movs	r2, #0
 8011940:	6062      	str	r2, [r4, #4]
 8011942:	04d9      	lsls	r1, r3, #19
 8011944:	6922      	ldr	r2, [r4, #16]
 8011946:	6022      	str	r2, [r4, #0]
 8011948:	d504      	bpl.n	8011954 <__sflush_r+0x78>
 801194a:	1c42      	adds	r2, r0, #1
 801194c:	d101      	bne.n	8011952 <__sflush_r+0x76>
 801194e:	682b      	ldr	r3, [r5, #0]
 8011950:	b903      	cbnz	r3, 8011954 <__sflush_r+0x78>
 8011952:	6560      	str	r0, [r4, #84]	@ 0x54
 8011954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011956:	602f      	str	r7, [r5, #0]
 8011958:	b1b9      	cbz	r1, 801198a <__sflush_r+0xae>
 801195a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801195e:	4299      	cmp	r1, r3
 8011960:	d002      	beq.n	8011968 <__sflush_r+0x8c>
 8011962:	4628      	mov	r0, r5
 8011964:	f7ff fbf2 	bl	801114c <_free_r>
 8011968:	2300      	movs	r3, #0
 801196a:	6363      	str	r3, [r4, #52]	@ 0x34
 801196c:	e00d      	b.n	801198a <__sflush_r+0xae>
 801196e:	2301      	movs	r3, #1
 8011970:	4628      	mov	r0, r5
 8011972:	47b0      	blx	r6
 8011974:	4602      	mov	r2, r0
 8011976:	1c50      	adds	r0, r2, #1
 8011978:	d1c9      	bne.n	801190e <__sflush_r+0x32>
 801197a:	682b      	ldr	r3, [r5, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d0c6      	beq.n	801190e <__sflush_r+0x32>
 8011980:	2b1d      	cmp	r3, #29
 8011982:	d001      	beq.n	8011988 <__sflush_r+0xac>
 8011984:	2b16      	cmp	r3, #22
 8011986:	d11e      	bne.n	80119c6 <__sflush_r+0xea>
 8011988:	602f      	str	r7, [r5, #0]
 801198a:	2000      	movs	r0, #0
 801198c:	e022      	b.n	80119d4 <__sflush_r+0xf8>
 801198e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011992:	b21b      	sxth	r3, r3
 8011994:	e01b      	b.n	80119ce <__sflush_r+0xf2>
 8011996:	690f      	ldr	r7, [r1, #16]
 8011998:	2f00      	cmp	r7, #0
 801199a:	d0f6      	beq.n	801198a <__sflush_r+0xae>
 801199c:	0793      	lsls	r3, r2, #30
 801199e:	680e      	ldr	r6, [r1, #0]
 80119a0:	bf08      	it	eq
 80119a2:	694b      	ldreq	r3, [r1, #20]
 80119a4:	600f      	str	r7, [r1, #0]
 80119a6:	bf18      	it	ne
 80119a8:	2300      	movne	r3, #0
 80119aa:	eba6 0807 	sub.w	r8, r6, r7
 80119ae:	608b      	str	r3, [r1, #8]
 80119b0:	f1b8 0f00 	cmp.w	r8, #0
 80119b4:	dde9      	ble.n	801198a <__sflush_r+0xae>
 80119b6:	6a21      	ldr	r1, [r4, #32]
 80119b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80119ba:	4643      	mov	r3, r8
 80119bc:	463a      	mov	r2, r7
 80119be:	4628      	mov	r0, r5
 80119c0:	47b0      	blx	r6
 80119c2:	2800      	cmp	r0, #0
 80119c4:	dc08      	bgt.n	80119d8 <__sflush_r+0xfc>
 80119c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119ce:	81a3      	strh	r3, [r4, #12]
 80119d0:	f04f 30ff 	mov.w	r0, #4294967295
 80119d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d8:	4407      	add	r7, r0
 80119da:	eba8 0800 	sub.w	r8, r8, r0
 80119de:	e7e7      	b.n	80119b0 <__sflush_r+0xd4>
 80119e0:	dfbffffe 	.word	0xdfbffffe

080119e4 <_fflush_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	690b      	ldr	r3, [r1, #16]
 80119e8:	4605      	mov	r5, r0
 80119ea:	460c      	mov	r4, r1
 80119ec:	b913      	cbnz	r3, 80119f4 <_fflush_r+0x10>
 80119ee:	2500      	movs	r5, #0
 80119f0:	4628      	mov	r0, r5
 80119f2:	bd38      	pop	{r3, r4, r5, pc}
 80119f4:	b118      	cbz	r0, 80119fe <_fflush_r+0x1a>
 80119f6:	6a03      	ldr	r3, [r0, #32]
 80119f8:	b90b      	cbnz	r3, 80119fe <_fflush_r+0x1a>
 80119fa:	f7ff f981 	bl	8010d00 <__sinit>
 80119fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d0f3      	beq.n	80119ee <_fflush_r+0xa>
 8011a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011a08:	07d0      	lsls	r0, r2, #31
 8011a0a:	d404      	bmi.n	8011a16 <_fflush_r+0x32>
 8011a0c:	0599      	lsls	r1, r3, #22
 8011a0e:	d402      	bmi.n	8011a16 <_fflush_r+0x32>
 8011a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a12:	f7ff fb8a 	bl	801112a <__retarget_lock_acquire_recursive>
 8011a16:	4628      	mov	r0, r5
 8011a18:	4621      	mov	r1, r4
 8011a1a:	f7ff ff5f 	bl	80118dc <__sflush_r>
 8011a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a20:	07da      	lsls	r2, r3, #31
 8011a22:	4605      	mov	r5, r0
 8011a24:	d4e4      	bmi.n	80119f0 <_fflush_r+0xc>
 8011a26:	89a3      	ldrh	r3, [r4, #12]
 8011a28:	059b      	lsls	r3, r3, #22
 8011a2a:	d4e1      	bmi.n	80119f0 <_fflush_r+0xc>
 8011a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a2e:	f7ff fb7d 	bl	801112c <__retarget_lock_release_recursive>
 8011a32:	e7dd      	b.n	80119f0 <_fflush_r+0xc>

08011a34 <__swhatbuf_r>:
 8011a34:	b570      	push	{r4, r5, r6, lr}
 8011a36:	460c      	mov	r4, r1
 8011a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a3c:	2900      	cmp	r1, #0
 8011a3e:	b096      	sub	sp, #88	@ 0x58
 8011a40:	4615      	mov	r5, r2
 8011a42:	461e      	mov	r6, r3
 8011a44:	da0d      	bge.n	8011a62 <__swhatbuf_r+0x2e>
 8011a46:	89a3      	ldrh	r3, [r4, #12]
 8011a48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011a4c:	f04f 0100 	mov.w	r1, #0
 8011a50:	bf14      	ite	ne
 8011a52:	2340      	movne	r3, #64	@ 0x40
 8011a54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011a58:	2000      	movs	r0, #0
 8011a5a:	6031      	str	r1, [r6, #0]
 8011a5c:	602b      	str	r3, [r5, #0]
 8011a5e:	b016      	add	sp, #88	@ 0x58
 8011a60:	bd70      	pop	{r4, r5, r6, pc}
 8011a62:	466a      	mov	r2, sp
 8011a64:	f000 f88a 	bl	8011b7c <_fstat_r>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	dbec      	blt.n	8011a46 <__swhatbuf_r+0x12>
 8011a6c:	9901      	ldr	r1, [sp, #4]
 8011a6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011a72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011a76:	4259      	negs	r1, r3
 8011a78:	4159      	adcs	r1, r3
 8011a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a7e:	e7eb      	b.n	8011a58 <__swhatbuf_r+0x24>

08011a80 <__smakebuf_r>:
 8011a80:	898b      	ldrh	r3, [r1, #12]
 8011a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a84:	079d      	lsls	r5, r3, #30
 8011a86:	4606      	mov	r6, r0
 8011a88:	460c      	mov	r4, r1
 8011a8a:	d507      	bpl.n	8011a9c <__smakebuf_r+0x1c>
 8011a8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011a90:	6023      	str	r3, [r4, #0]
 8011a92:	6123      	str	r3, [r4, #16]
 8011a94:	2301      	movs	r3, #1
 8011a96:	6163      	str	r3, [r4, #20]
 8011a98:	b003      	add	sp, #12
 8011a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a9c:	ab01      	add	r3, sp, #4
 8011a9e:	466a      	mov	r2, sp
 8011aa0:	f7ff ffc8 	bl	8011a34 <__swhatbuf_r>
 8011aa4:	9f00      	ldr	r7, [sp, #0]
 8011aa6:	4605      	mov	r5, r0
 8011aa8:	4639      	mov	r1, r7
 8011aaa:	4630      	mov	r0, r6
 8011aac:	f7ff fbba 	bl	8011224 <_malloc_r>
 8011ab0:	b948      	cbnz	r0, 8011ac6 <__smakebuf_r+0x46>
 8011ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ab6:	059a      	lsls	r2, r3, #22
 8011ab8:	d4ee      	bmi.n	8011a98 <__smakebuf_r+0x18>
 8011aba:	f023 0303 	bic.w	r3, r3, #3
 8011abe:	f043 0302 	orr.w	r3, r3, #2
 8011ac2:	81a3      	strh	r3, [r4, #12]
 8011ac4:	e7e2      	b.n	8011a8c <__smakebuf_r+0xc>
 8011ac6:	89a3      	ldrh	r3, [r4, #12]
 8011ac8:	6020      	str	r0, [r4, #0]
 8011aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ace:	81a3      	strh	r3, [r4, #12]
 8011ad0:	9b01      	ldr	r3, [sp, #4]
 8011ad2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011ad6:	b15b      	cbz	r3, 8011af0 <__smakebuf_r+0x70>
 8011ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011adc:	4630      	mov	r0, r6
 8011ade:	f000 f85f 	bl	8011ba0 <_isatty_r>
 8011ae2:	b128      	cbz	r0, 8011af0 <__smakebuf_r+0x70>
 8011ae4:	89a3      	ldrh	r3, [r4, #12]
 8011ae6:	f023 0303 	bic.w	r3, r3, #3
 8011aea:	f043 0301 	orr.w	r3, r3, #1
 8011aee:	81a3      	strh	r3, [r4, #12]
 8011af0:	89a3      	ldrh	r3, [r4, #12]
 8011af2:	431d      	orrs	r5, r3
 8011af4:	81a5      	strh	r5, [r4, #12]
 8011af6:	e7cf      	b.n	8011a98 <__smakebuf_r+0x18>

08011af8 <_putc_r>:
 8011af8:	b570      	push	{r4, r5, r6, lr}
 8011afa:	460d      	mov	r5, r1
 8011afc:	4614      	mov	r4, r2
 8011afe:	4606      	mov	r6, r0
 8011b00:	b118      	cbz	r0, 8011b0a <_putc_r+0x12>
 8011b02:	6a03      	ldr	r3, [r0, #32]
 8011b04:	b90b      	cbnz	r3, 8011b0a <_putc_r+0x12>
 8011b06:	f7ff f8fb 	bl	8010d00 <__sinit>
 8011b0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b0c:	07d8      	lsls	r0, r3, #31
 8011b0e:	d405      	bmi.n	8011b1c <_putc_r+0x24>
 8011b10:	89a3      	ldrh	r3, [r4, #12]
 8011b12:	0599      	lsls	r1, r3, #22
 8011b14:	d402      	bmi.n	8011b1c <_putc_r+0x24>
 8011b16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b18:	f7ff fb07 	bl	801112a <__retarget_lock_acquire_recursive>
 8011b1c:	68a3      	ldr	r3, [r4, #8]
 8011b1e:	3b01      	subs	r3, #1
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	60a3      	str	r3, [r4, #8]
 8011b24:	da05      	bge.n	8011b32 <_putc_r+0x3a>
 8011b26:	69a2      	ldr	r2, [r4, #24]
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	db12      	blt.n	8011b52 <_putc_r+0x5a>
 8011b2c:	b2eb      	uxtb	r3, r5
 8011b2e:	2b0a      	cmp	r3, #10
 8011b30:	d00f      	beq.n	8011b52 <_putc_r+0x5a>
 8011b32:	6823      	ldr	r3, [r4, #0]
 8011b34:	1c5a      	adds	r2, r3, #1
 8011b36:	6022      	str	r2, [r4, #0]
 8011b38:	701d      	strb	r5, [r3, #0]
 8011b3a:	b2ed      	uxtb	r5, r5
 8011b3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b3e:	07da      	lsls	r2, r3, #31
 8011b40:	d405      	bmi.n	8011b4e <_putc_r+0x56>
 8011b42:	89a3      	ldrh	r3, [r4, #12]
 8011b44:	059b      	lsls	r3, r3, #22
 8011b46:	d402      	bmi.n	8011b4e <_putc_r+0x56>
 8011b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b4a:	f7ff faef 	bl	801112c <__retarget_lock_release_recursive>
 8011b4e:	4628      	mov	r0, r5
 8011b50:	bd70      	pop	{r4, r5, r6, pc}
 8011b52:	4629      	mov	r1, r5
 8011b54:	4622      	mov	r2, r4
 8011b56:	4630      	mov	r0, r6
 8011b58:	f7ff f9c3 	bl	8010ee2 <__swbuf_r>
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	e7ed      	b.n	8011b3c <_putc_r+0x44>

08011b60 <strchr>:
 8011b60:	b2c9      	uxtb	r1, r1
 8011b62:	4603      	mov	r3, r0
 8011b64:	4618      	mov	r0, r3
 8011b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b6a:	b112      	cbz	r2, 8011b72 <strchr+0x12>
 8011b6c:	428a      	cmp	r2, r1
 8011b6e:	d1f9      	bne.n	8011b64 <strchr+0x4>
 8011b70:	4770      	bx	lr
 8011b72:	2900      	cmp	r1, #0
 8011b74:	bf18      	it	ne
 8011b76:	2000      	movne	r0, #0
 8011b78:	4770      	bx	lr
	...

08011b7c <_fstat_r>:
 8011b7c:	b538      	push	{r3, r4, r5, lr}
 8011b7e:	4d07      	ldr	r5, [pc, #28]	@ (8011b9c <_fstat_r+0x20>)
 8011b80:	2300      	movs	r3, #0
 8011b82:	4604      	mov	r4, r0
 8011b84:	4608      	mov	r0, r1
 8011b86:	4611      	mov	r1, r2
 8011b88:	602b      	str	r3, [r5, #0]
 8011b8a:	f7f1 fcc6 	bl	800351a <_fstat>
 8011b8e:	1c43      	adds	r3, r0, #1
 8011b90:	d102      	bne.n	8011b98 <_fstat_r+0x1c>
 8011b92:	682b      	ldr	r3, [r5, #0]
 8011b94:	b103      	cbz	r3, 8011b98 <_fstat_r+0x1c>
 8011b96:	6023      	str	r3, [r4, #0]
 8011b98:	bd38      	pop	{r3, r4, r5, pc}
 8011b9a:	bf00      	nop
 8011b9c:	20000d34 	.word	0x20000d34

08011ba0 <_isatty_r>:
 8011ba0:	b538      	push	{r3, r4, r5, lr}
 8011ba2:	4d06      	ldr	r5, [pc, #24]	@ (8011bbc <_isatty_r+0x1c>)
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	4608      	mov	r0, r1
 8011baa:	602b      	str	r3, [r5, #0]
 8011bac:	f7f1 fcc5 	bl	800353a <_isatty>
 8011bb0:	1c43      	adds	r3, r0, #1
 8011bb2:	d102      	bne.n	8011bba <_isatty_r+0x1a>
 8011bb4:	682b      	ldr	r3, [r5, #0]
 8011bb6:	b103      	cbz	r3, 8011bba <_isatty_r+0x1a>
 8011bb8:	6023      	str	r3, [r4, #0]
 8011bba:	bd38      	pop	{r3, r4, r5, pc}
 8011bbc:	20000d34 	.word	0x20000d34

08011bc0 <_sbrk_r>:
 8011bc0:	b538      	push	{r3, r4, r5, lr}
 8011bc2:	4d06      	ldr	r5, [pc, #24]	@ (8011bdc <_sbrk_r+0x1c>)
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	4608      	mov	r0, r1
 8011bca:	602b      	str	r3, [r5, #0]
 8011bcc:	f7f1 fcce 	bl	800356c <_sbrk>
 8011bd0:	1c43      	adds	r3, r0, #1
 8011bd2:	d102      	bne.n	8011bda <_sbrk_r+0x1a>
 8011bd4:	682b      	ldr	r3, [r5, #0]
 8011bd6:	b103      	cbz	r3, 8011bda <_sbrk_r+0x1a>
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	bd38      	pop	{r3, r4, r5, pc}
 8011bdc:	20000d34 	.word	0x20000d34

08011be0 <fmax>:
 8011be0:	b508      	push	{r3, lr}
 8011be2:	ed2d 8b04 	vpush	{d8-d9}
 8011be6:	eeb0 8a40 	vmov.f32	s16, s0
 8011bea:	eef0 8a60 	vmov.f32	s17, s1
 8011bee:	eeb0 9a41 	vmov.f32	s18, s2
 8011bf2:	eef0 9a61 	vmov.f32	s19, s3
 8011bf6:	f000 f847 	bl	8011c88 <__fpclassifyd>
 8011bfa:	b950      	cbnz	r0, 8011c12 <fmax+0x32>
 8011bfc:	eeb0 8a49 	vmov.f32	s16, s18
 8011c00:	eef0 8a69 	vmov.f32	s17, s19
 8011c04:	eeb0 0a48 	vmov.f32	s0, s16
 8011c08:	eef0 0a68 	vmov.f32	s1, s17
 8011c0c:	ecbd 8b04 	vpop	{d8-d9}
 8011c10:	bd08      	pop	{r3, pc}
 8011c12:	eeb0 0a49 	vmov.f32	s0, s18
 8011c16:	eef0 0a69 	vmov.f32	s1, s19
 8011c1a:	f000 f835 	bl	8011c88 <__fpclassifyd>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	d0f0      	beq.n	8011c04 <fmax+0x24>
 8011c22:	ec53 2b19 	vmov	r2, r3, d9
 8011c26:	ec51 0b18 	vmov	r0, r1, d8
 8011c2a:	f7ee fe65 	bl	80008f8 <__aeabi_dcmpgt>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d0e4      	beq.n	8011bfc <fmax+0x1c>
 8011c32:	e7e7      	b.n	8011c04 <fmax+0x24>

08011c34 <fmin>:
 8011c34:	b508      	push	{r3, lr}
 8011c36:	ed2d 8b04 	vpush	{d8-d9}
 8011c3a:	eeb0 8a40 	vmov.f32	s16, s0
 8011c3e:	eef0 8a60 	vmov.f32	s17, s1
 8011c42:	eeb0 9a41 	vmov.f32	s18, s2
 8011c46:	eef0 9a61 	vmov.f32	s19, s3
 8011c4a:	f000 f81d 	bl	8011c88 <__fpclassifyd>
 8011c4e:	b950      	cbnz	r0, 8011c66 <fmin+0x32>
 8011c50:	eeb0 8a49 	vmov.f32	s16, s18
 8011c54:	eef0 8a69 	vmov.f32	s17, s19
 8011c58:	eeb0 0a48 	vmov.f32	s0, s16
 8011c5c:	eef0 0a68 	vmov.f32	s1, s17
 8011c60:	ecbd 8b04 	vpop	{d8-d9}
 8011c64:	bd08      	pop	{r3, pc}
 8011c66:	eeb0 0a49 	vmov.f32	s0, s18
 8011c6a:	eef0 0a69 	vmov.f32	s1, s19
 8011c6e:	f000 f80b 	bl	8011c88 <__fpclassifyd>
 8011c72:	2800      	cmp	r0, #0
 8011c74:	d0f0      	beq.n	8011c58 <fmin+0x24>
 8011c76:	ec53 2b19 	vmov	r2, r3, d9
 8011c7a:	ec51 0b18 	vmov	r0, r1, d8
 8011c7e:	f7ee fe1d 	bl	80008bc <__aeabi_dcmplt>
 8011c82:	2800      	cmp	r0, #0
 8011c84:	d0e4      	beq.n	8011c50 <fmin+0x1c>
 8011c86:	e7e7      	b.n	8011c58 <fmin+0x24>

08011c88 <__fpclassifyd>:
 8011c88:	ec51 0b10 	vmov	r0, r1, d0
 8011c8c:	b510      	push	{r4, lr}
 8011c8e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8011c92:	460b      	mov	r3, r1
 8011c94:	d019      	beq.n	8011cca <__fpclassifyd+0x42>
 8011c96:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8011c9a:	490e      	ldr	r1, [pc, #56]	@ (8011cd4 <__fpclassifyd+0x4c>)
 8011c9c:	428a      	cmp	r2, r1
 8011c9e:	d90e      	bls.n	8011cbe <__fpclassifyd+0x36>
 8011ca0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8011ca4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8011ca8:	428a      	cmp	r2, r1
 8011caa:	d908      	bls.n	8011cbe <__fpclassifyd+0x36>
 8011cac:	4a0a      	ldr	r2, [pc, #40]	@ (8011cd8 <__fpclassifyd+0x50>)
 8011cae:	4213      	tst	r3, r2
 8011cb0:	d007      	beq.n	8011cc2 <__fpclassifyd+0x3a>
 8011cb2:	4294      	cmp	r4, r2
 8011cb4:	d107      	bne.n	8011cc6 <__fpclassifyd+0x3e>
 8011cb6:	fab0 f080 	clz	r0, r0
 8011cba:	0940      	lsrs	r0, r0, #5
 8011cbc:	bd10      	pop	{r4, pc}
 8011cbe:	2004      	movs	r0, #4
 8011cc0:	e7fc      	b.n	8011cbc <__fpclassifyd+0x34>
 8011cc2:	2003      	movs	r0, #3
 8011cc4:	e7fa      	b.n	8011cbc <__fpclassifyd+0x34>
 8011cc6:	2000      	movs	r0, #0
 8011cc8:	e7f8      	b.n	8011cbc <__fpclassifyd+0x34>
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	d1ee      	bne.n	8011cac <__fpclassifyd+0x24>
 8011cce:	2002      	movs	r0, #2
 8011cd0:	e7f4      	b.n	8011cbc <__fpclassifyd+0x34>
 8011cd2:	bf00      	nop
 8011cd4:	7fdfffff 	.word	0x7fdfffff
 8011cd8:	7ff00000 	.word	0x7ff00000

08011cdc <_init>:
 8011cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cde:	bf00      	nop
 8011ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ce2:	bc08      	pop	{r3}
 8011ce4:	469e      	mov	lr, r3
 8011ce6:	4770      	bx	lr

08011ce8 <_fini>:
 8011ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cea:	bf00      	nop
 8011cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cee:	bc08      	pop	{r3}
 8011cf0:	469e      	mov	lr, r3
 8011cf2:	4770      	bx	lr
