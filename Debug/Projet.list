
Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4f8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800b638  0800b638  0001b638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b91c  0800b91c  0001b91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b924  0800b924  0001b924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b928  0800b928  0001b928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000013c  20000008  0800b92c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000684  20000144  0800ba68  00020144  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007c8  0800ba68  000207c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 11 .debug_info   00033df3  00000000  00000000  000201b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004877  00000000  00000000  00053faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003000  00000000  00000000  00058828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000024e2  00000000  00000000  0005b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000265db  00000000  00000000  0005dd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000279bf  00000000  00000000  000842e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ed9e2  00000000  00000000  000abca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000d7fc  00000000  00000000  00199688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001a6e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000144 	.word	0x20000144
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b620 	.word	0x0800b620

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000148 	.word	0x20000148
 800017c:	0800b620 	.word	0x0800b620

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__gedf2>:
 8000598:	f04f 3cff 	mov.w	ip, #4294967295
 800059c:	e006      	b.n	80005ac <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__ledf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	e002      	b.n	80005ac <__cmpdf2+0x4>
 80005a6:	bf00      	nop

080005a8 <__cmpdf2>:
 80005a8:	f04f 0c01 	mov.w	ip, #1
 80005ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005bc:	bf18      	it	ne
 80005be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005c2:	d01b      	beq.n	80005fc <__cmpdf2+0x54>
 80005c4:	b001      	add	sp, #4
 80005c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005ca:	bf0c      	ite	eq
 80005cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005d0:	ea91 0f03 	teqne	r1, r3
 80005d4:	bf02      	ittt	eq
 80005d6:	ea90 0f02 	teqeq	r0, r2
 80005da:	2000      	moveq	r0, #0
 80005dc:	4770      	bxeq	lr
 80005de:	f110 0f00 	cmn.w	r0, #0
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf58      	it	pl
 80005e8:	4299      	cmppl	r1, r3
 80005ea:	bf08      	it	eq
 80005ec:	4290      	cmpeq	r0, r2
 80005ee:	bf2c      	ite	cs
 80005f0:	17d8      	asrcs	r0, r3, #31
 80005f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005f6:	f040 0001 	orr.w	r0, r0, #1
 80005fa:	4770      	bx	lr
 80005fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000604:	d102      	bne.n	800060c <__cmpdf2+0x64>
 8000606:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800060a:	d107      	bne.n	800061c <__cmpdf2+0x74>
 800060c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d1d6      	bne.n	80005c4 <__cmpdf2+0x1c>
 8000616:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800061a:	d0d3      	beq.n	80005c4 <__cmpdf2+0x1c>
 800061c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <__aeabi_cdrcmple>:
 8000624:	4684      	mov	ip, r0
 8000626:	4610      	mov	r0, r2
 8000628:	4662      	mov	r2, ip
 800062a:	468c      	mov	ip, r1
 800062c:	4619      	mov	r1, r3
 800062e:	4663      	mov	r3, ip
 8000630:	e000      	b.n	8000634 <__aeabi_cdcmpeq>
 8000632:	bf00      	nop

08000634 <__aeabi_cdcmpeq>:
 8000634:	b501      	push	{r0, lr}
 8000636:	f7ff ffb7 	bl	80005a8 <__cmpdf2>
 800063a:	2800      	cmp	r0, #0
 800063c:	bf48      	it	mi
 800063e:	f110 0f00 	cmnmi.w	r0, #0
 8000642:	bd01      	pop	{r0, pc}

08000644 <__aeabi_dcmpeq>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff fff4 	bl	8000634 <__aeabi_cdcmpeq>
 800064c:	bf0c      	ite	eq
 800064e:	2001      	moveq	r0, #1
 8000650:	2000      	movne	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_dcmplt>:
 8000658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800065c:	f7ff ffea 	bl	8000634 <__aeabi_cdcmpeq>
 8000660:	bf34      	ite	cc
 8000662:	2001      	movcc	r0, #1
 8000664:	2000      	movcs	r0, #0
 8000666:	f85d fb08 	ldr.w	pc, [sp], #8
 800066a:	bf00      	nop

0800066c <__aeabi_dcmple>:
 800066c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000670:	f7ff ffe0 	bl	8000634 <__aeabi_cdcmpeq>
 8000674:	bf94      	ite	ls
 8000676:	2001      	movls	r0, #1
 8000678:	2000      	movhi	r0, #0
 800067a:	f85d fb08 	ldr.w	pc, [sp], #8
 800067e:	bf00      	nop

08000680 <__aeabi_dcmpge>:
 8000680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000684:	f7ff ffce 	bl	8000624 <__aeabi_cdrcmple>
 8000688:	bf94      	ite	ls
 800068a:	2001      	movls	r0, #1
 800068c:	2000      	movhi	r0, #0
 800068e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000692:	bf00      	nop

08000694 <__aeabi_dcmpgt>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff ffc4 	bl	8000624 <__aeabi_cdrcmple>
 800069c:	bf34      	ite	cc
 800069e:	2001      	movcc	r0, #1
 80006a0:	2000      	movcs	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_d2iz>:
 80006a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006b0:	d215      	bcs.n	80006de <__aeabi_d2iz+0x36>
 80006b2:	d511      	bpl.n	80006d8 <__aeabi_d2iz+0x30>
 80006b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006bc:	d912      	bls.n	80006e4 <__aeabi_d2iz+0x3c>
 80006be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ce:	fa23 f002 	lsr.w	r0, r3, r2
 80006d2:	bf18      	it	ne
 80006d4:	4240      	negne	r0, r0
 80006d6:	4770      	bx	lr
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	4770      	bx	lr
 80006de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006e2:	d105      	bne.n	80006f0 <__aeabi_d2iz+0x48>
 80006e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006e8:	bf08      	it	eq
 80006ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006ee:	4770      	bx	lr
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b970 	b.w	80009f0 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9e08      	ldr	r6, [sp, #32]
 800072e:	460d      	mov	r5, r1
 8000730:	4604      	mov	r4, r0
 8000732:	460f      	mov	r7, r1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d14a      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000738:	428a      	cmp	r2, r1
 800073a:	4694      	mov	ip, r2
 800073c:	d965      	bls.n	800080a <__udivmoddi4+0xe2>
 800073e:	fab2 f382 	clz	r3, r2
 8000742:	b143      	cbz	r3, 8000756 <__udivmoddi4+0x2e>
 8000744:	fa02 fc03 	lsl.w	ip, r2, r3
 8000748:	f1c3 0220 	rsb	r2, r3, #32
 800074c:	409f      	lsls	r7, r3
 800074e:	fa20 f202 	lsr.w	r2, r0, r2
 8000752:	4317      	orrs	r7, r2
 8000754:	409c      	lsls	r4, r3
 8000756:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800075a:	fa1f f58c 	uxth.w	r5, ip
 800075e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000762:	0c22      	lsrs	r2, r4, #16
 8000764:	fb0e 7711 	mls	r7, lr, r1, r7
 8000768:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800076c:	fb01 f005 	mul.w	r0, r1, r5
 8000770:	4290      	cmp	r0, r2
 8000772:	d90a      	bls.n	800078a <__udivmoddi4+0x62>
 8000774:	eb1c 0202 	adds.w	r2, ip, r2
 8000778:	f101 37ff 	add.w	r7, r1, #4294967295
 800077c:	f080 811c 	bcs.w	80009b8 <__udivmoddi4+0x290>
 8000780:	4290      	cmp	r0, r2
 8000782:	f240 8119 	bls.w	80009b8 <__udivmoddi4+0x290>
 8000786:	3902      	subs	r1, #2
 8000788:	4462      	add	r2, ip
 800078a:	1a12      	subs	r2, r2, r0
 800078c:	b2a4      	uxth	r4, r4
 800078e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000792:	fb0e 2210 	mls	r2, lr, r0, r2
 8000796:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800079a:	fb00 f505 	mul.w	r5, r0, r5
 800079e:	42a5      	cmp	r5, r4
 80007a0:	d90a      	bls.n	80007b8 <__udivmoddi4+0x90>
 80007a2:	eb1c 0404 	adds.w	r4, ip, r4
 80007a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007aa:	f080 8107 	bcs.w	80009bc <__udivmoddi4+0x294>
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	f240 8104 	bls.w	80009bc <__udivmoddi4+0x294>
 80007b4:	4464      	add	r4, ip
 80007b6:	3802      	subs	r0, #2
 80007b8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	2100      	movs	r1, #0
 80007c0:	b11e      	cbz	r6, 80007ca <__udivmoddi4+0xa2>
 80007c2:	40dc      	lsrs	r4, r3
 80007c4:	2300      	movs	r3, #0
 80007c6:	e9c6 4300 	strd	r4, r3, [r6]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0xbc>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	f000 80ed 	beq.w	80009b2 <__udivmoddi4+0x28a>
 80007d8:	2100      	movs	r1, #0
 80007da:	e9c6 0500 	strd	r0, r5, [r6]
 80007de:	4608      	mov	r0, r1
 80007e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e4:	fab3 f183 	clz	r1, r3
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d149      	bne.n	8000880 <__udivmoddi4+0x158>
 80007ec:	42ab      	cmp	r3, r5
 80007ee:	d302      	bcc.n	80007f6 <__udivmoddi4+0xce>
 80007f0:	4282      	cmp	r2, r0
 80007f2:	f200 80f8 	bhi.w	80009e6 <__udivmoddi4+0x2be>
 80007f6:	1a84      	subs	r4, r0, r2
 80007f8:	eb65 0203 	sbc.w	r2, r5, r3
 80007fc:	2001      	movs	r0, #1
 80007fe:	4617      	mov	r7, r2
 8000800:	2e00      	cmp	r6, #0
 8000802:	d0e2      	beq.n	80007ca <__udivmoddi4+0xa2>
 8000804:	e9c6 4700 	strd	r4, r7, [r6]
 8000808:	e7df      	b.n	80007ca <__udivmoddi4+0xa2>
 800080a:	b902      	cbnz	r2, 800080e <__udivmoddi4+0xe6>
 800080c:	deff      	udf	#255	; 0xff
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	2b00      	cmp	r3, #0
 8000814:	f040 8090 	bne.w	8000938 <__udivmoddi4+0x210>
 8000818:	1a8a      	subs	r2, r1, r2
 800081a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800081e:	fa1f fe8c 	uxth.w	lr, ip
 8000822:	2101      	movs	r1, #1
 8000824:	fbb2 f5f7 	udiv	r5, r2, r7
 8000828:	fb07 2015 	mls	r0, r7, r5, r2
 800082c:	0c22      	lsrs	r2, r4, #16
 800082e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000832:	fb0e f005 	mul.w	r0, lr, r5
 8000836:	4290      	cmp	r0, r2
 8000838:	d908      	bls.n	800084c <__udivmoddi4+0x124>
 800083a:	eb1c 0202 	adds.w	r2, ip, r2
 800083e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x122>
 8000844:	4290      	cmp	r0, r2
 8000846:	f200 80cb 	bhi.w	80009e0 <__udivmoddi4+0x2b8>
 800084a:	4645      	mov	r5, r8
 800084c:	1a12      	subs	r2, r2, r0
 800084e:	b2a4      	uxth	r4, r4
 8000850:	fbb2 f0f7 	udiv	r0, r2, r7
 8000854:	fb07 2210 	mls	r2, r7, r0, r2
 8000858:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800085c:	fb0e fe00 	mul.w	lr, lr, r0
 8000860:	45a6      	cmp	lr, r4
 8000862:	d908      	bls.n	8000876 <__udivmoddi4+0x14e>
 8000864:	eb1c 0404 	adds.w	r4, ip, r4
 8000868:	f100 32ff 	add.w	r2, r0, #4294967295
 800086c:	d202      	bcs.n	8000874 <__udivmoddi4+0x14c>
 800086e:	45a6      	cmp	lr, r4
 8000870:	f200 80bb 	bhi.w	80009ea <__udivmoddi4+0x2c2>
 8000874:	4610      	mov	r0, r2
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800087e:	e79f      	b.n	80007c0 <__udivmoddi4+0x98>
 8000880:	f1c1 0720 	rsb	r7, r1, #32
 8000884:	408b      	lsls	r3, r1
 8000886:	fa22 fc07 	lsr.w	ip, r2, r7
 800088a:	ea4c 0c03 	orr.w	ip, ip, r3
 800088e:	fa05 f401 	lsl.w	r4, r5, r1
 8000892:	fa20 f307 	lsr.w	r3, r0, r7
 8000896:	40fd      	lsrs	r5, r7
 8000898:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800089c:	4323      	orrs	r3, r4
 800089e:	fbb5 f8f9 	udiv	r8, r5, r9
 80008a2:	fa1f fe8c 	uxth.w	lr, ip
 80008a6:	fb09 5518 	mls	r5, r9, r8, r5
 80008aa:	0c1c      	lsrs	r4, r3, #16
 80008ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008b0:	fb08 f50e 	mul.w	r5, r8, lr
 80008b4:	42a5      	cmp	r5, r4
 80008b6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ba:	fa00 f001 	lsl.w	r0, r0, r1
 80008be:	d90b      	bls.n	80008d8 <__udivmoddi4+0x1b0>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008c8:	f080 8088 	bcs.w	80009dc <__udivmoddi4+0x2b4>
 80008cc:	42a5      	cmp	r5, r4
 80008ce:	f240 8085 	bls.w	80009dc <__udivmoddi4+0x2b4>
 80008d2:	f1a8 0802 	sub.w	r8, r8, #2
 80008d6:	4464      	add	r4, ip
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	b29d      	uxth	r5, r3
 80008dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e0:	fb09 4413 	mls	r4, r9, r3, r4
 80008e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008ec:	45a6      	cmp	lr, r4
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x1da>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008f8:	d26c      	bcs.n	80009d4 <__udivmoddi4+0x2ac>
 80008fa:	45a6      	cmp	lr, r4
 80008fc:	d96a      	bls.n	80009d4 <__udivmoddi4+0x2ac>
 80008fe:	3b02      	subs	r3, #2
 8000900:	4464      	add	r4, ip
 8000902:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000906:	fba3 9502 	umull	r9, r5, r3, r2
 800090a:	eba4 040e 	sub.w	r4, r4, lr
 800090e:	42ac      	cmp	r4, r5
 8000910:	46c8      	mov	r8, r9
 8000912:	46ae      	mov	lr, r5
 8000914:	d356      	bcc.n	80009c4 <__udivmoddi4+0x29c>
 8000916:	d053      	beq.n	80009c0 <__udivmoddi4+0x298>
 8000918:	b156      	cbz	r6, 8000930 <__udivmoddi4+0x208>
 800091a:	ebb0 0208 	subs.w	r2, r0, r8
 800091e:	eb64 040e 	sbc.w	r4, r4, lr
 8000922:	fa04 f707 	lsl.w	r7, r4, r7
 8000926:	40ca      	lsrs	r2, r1
 8000928:	40cc      	lsrs	r4, r1
 800092a:	4317      	orrs	r7, r2
 800092c:	e9c6 7400 	strd	r7, r4, [r6]
 8000930:	4618      	mov	r0, r3
 8000932:	2100      	movs	r1, #0
 8000934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000938:	f1c3 0120 	rsb	r1, r3, #32
 800093c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000940:	fa20 f201 	lsr.w	r2, r0, r1
 8000944:	fa25 f101 	lsr.w	r1, r5, r1
 8000948:	409d      	lsls	r5, r3
 800094a:	432a      	orrs	r2, r5
 800094c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fbb1 f0f7 	udiv	r0, r1, r7
 8000958:	fb07 1510 	mls	r5, r7, r0, r1
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000962:	fb00 f50e 	mul.w	r5, r0, lr
 8000966:	428d      	cmp	r5, r1
 8000968:	fa04 f403 	lsl.w	r4, r4, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x258>
 800096e:	eb1c 0101 	adds.w	r1, ip, r1
 8000972:	f100 38ff 	add.w	r8, r0, #4294967295
 8000976:	d22f      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 8000978:	428d      	cmp	r5, r1
 800097a:	d92d      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 800097c:	3802      	subs	r0, #2
 800097e:	4461      	add	r1, ip
 8000980:	1b49      	subs	r1, r1, r5
 8000982:	b292      	uxth	r2, r2
 8000984:	fbb1 f5f7 	udiv	r5, r1, r7
 8000988:	fb07 1115 	mls	r1, r7, r5, r1
 800098c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000990:	fb05 f10e 	mul.w	r1, r5, lr
 8000994:	4291      	cmp	r1, r2
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x282>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f105 38ff 	add.w	r8, r5, #4294967295
 80009a0:	d216      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 80009a2:	4291      	cmp	r1, r2
 80009a4:	d914      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 80009a6:	3d02      	subs	r5, #2
 80009a8:	4462      	add	r2, ip
 80009aa:	1a52      	subs	r2, r2, r1
 80009ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009b0:	e738      	b.n	8000824 <__udivmoddi4+0xfc>
 80009b2:	4631      	mov	r1, r6
 80009b4:	4630      	mov	r0, r6
 80009b6:	e708      	b.n	80007ca <__udivmoddi4+0xa2>
 80009b8:	4639      	mov	r1, r7
 80009ba:	e6e6      	b.n	800078a <__udivmoddi4+0x62>
 80009bc:	4610      	mov	r0, r2
 80009be:	e6fb      	b.n	80007b8 <__udivmoddi4+0x90>
 80009c0:	4548      	cmp	r0, r9
 80009c2:	d2a9      	bcs.n	8000918 <__udivmoddi4+0x1f0>
 80009c4:	ebb9 0802 	subs.w	r8, r9, r2
 80009c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009cc:	3b01      	subs	r3, #1
 80009ce:	e7a3      	b.n	8000918 <__udivmoddi4+0x1f0>
 80009d0:	4645      	mov	r5, r8
 80009d2:	e7ea      	b.n	80009aa <__udivmoddi4+0x282>
 80009d4:	462b      	mov	r3, r5
 80009d6:	e794      	b.n	8000902 <__udivmoddi4+0x1da>
 80009d8:	4640      	mov	r0, r8
 80009da:	e7d1      	b.n	8000980 <__udivmoddi4+0x258>
 80009dc:	46d0      	mov	r8, sl
 80009de:	e77b      	b.n	80008d8 <__udivmoddi4+0x1b0>
 80009e0:	3d02      	subs	r5, #2
 80009e2:	4462      	add	r2, ip
 80009e4:	e732      	b.n	800084c <__udivmoddi4+0x124>
 80009e6:	4608      	mov	r0, r1
 80009e8:	e70a      	b.n	8000800 <__udivmoddi4+0xd8>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	e742      	b.n	8000876 <__udivmoddi4+0x14e>

080009f0 <__aeabi_idiv0>:
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d013      	beq.n	8000a34 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00b      	beq.n	8000a34 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a1c:	e000      	b.n	8000a20 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a1e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f9      	beq.n	8000a1e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a2a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_write>:
BenchRep currentMovement;
static int validMovements = 0;
static int invalidMovements = 0;


int _write(int file, char *ptr, int len) {
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e009      	b.n	8000a68 <_write+0x26>
        ITM_SendChar(*ptr++);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffc9 	bl	80009f4 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf1      	blt.n	8000a54 <_write+0x12>
    }
    return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <MX_MEMS_Init>:

void MX_MEMS_Init(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    Init_Sensors();
 8000a80:	f000 f89c 	bl	8000bbc <Init_Sensors>
    CalibrateSensors();
 8000a84:	f000 f8e8 	bl	8000c58 <CalibrateSensors>
    // Initialisation des structures BenchRep
    referenceMovement.maxAmplitudeZ = 0;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_MEMS_Init+0x34>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
    referenceMovement.minAmplitudeZ = 0;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_MEMS_Init+0x34>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
    referenceMovement.duration = 0;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_MEMS_Init+0x34>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]

    currentMovement.maxAmplitudeZ = 0;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_MEMS_Init+0x38>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
    currentMovement.minAmplitudeZ = 0;
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <MX_MEMS_Init+0x38>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
    currentMovement.duration = 0;
 8000aa6:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <MX_MEMS_Init+0x38>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000194 	.word	0x20000194
 8000ab4:	200001a4 	.word	0x200001a4

08000ab8 <MX_MEMS_Process>:
void MX_MEMS_Process(void) {
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af06      	add	r7, sp, #24
    // Réinitialisation des compteurs et de l'état
    validMovements = 0;
 8000abe:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <MX_MEMS_Process+0xd0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
    invalidMovements = 0;
 8000ac4:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <MX_MEMS_Process+0xd4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
    isReferenceMovementRecorded = false;
 8000aca:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <MX_MEMS_Process+0xd8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]

    while (true) {
        if (!isReferenceMovementRecorded) {
 8000ad0:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <MX_MEMS_Process+0xd8>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	f083 0301 	eor.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d016      	beq.n	8000b0c <MX_MEMS_Process+0x54>
            printf("Enregistrement du mouvement de référence...\n");
 8000ade:	482d      	ldr	r0, [pc, #180]	; (8000b94 <MX_MEMS_Process+0xdc>)
 8000ae0:	f009 febc 	bl	800a85c <puts>
            if (!recordBenchRep(&referenceMovement)) {
 8000ae4:	482c      	ldr	r0, [pc, #176]	; (8000b98 <MX_MEMS_Process+0xe0>)
 8000ae6:	f000 f94f 	bl	8000d88 <recordBenchRep>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f083 0301 	eor.w	r3, r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <MX_MEMS_Process+0x46>
                printf("Aucun mouvement de référence détecté, fin de la série.\n");
 8000af6:	4829      	ldr	r0, [pc, #164]	; (8000b9c <MX_MEMS_Process+0xe4>)
 8000af8:	f009 feb0 	bl	800a85c <puts>
                break; // Sortie si aucun mouvement n'est détecté dans le délai imparti
 8000afc:	e038      	b.n	8000b70 <MX_MEMS_Process+0xb8>
            }
            isReferenceMovementRecorded = true;
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <MX_MEMS_Process+0xd8>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
            printf("Mouvement de référence enregistré.\n");
 8000b04:	4826      	ldr	r0, [pc, #152]	; (8000ba0 <MX_MEMS_Process+0xe8>)
 8000b06:	f009 fea9 	bl	800a85c <puts>
 8000b0a:	e7e1      	b.n	8000ad0 <MX_MEMS_Process+0x18>
        } else {
            printf("Enregistrement d'une nouvelle répétition...\n");
 8000b0c:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <MX_MEMS_Process+0xec>)
 8000b0e:	f009 fea5 	bl	800a85c <puts>
            if (!recordBenchRep(&currentMovement)) {
 8000b12:	4825      	ldr	r0, [pc, #148]	; (8000ba8 <MX_MEMS_Process+0xf0>)
 8000b14:	f000 f938 	bl	8000d88 <recordBenchRep>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f083 0301 	eor.w	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <MX_MEMS_Process+0x74>
                printf("Fin de la série détectée après 5 secondes d'inactivité.\n");
 8000b24:	4821      	ldr	r0, [pc, #132]	; (8000bac <MX_MEMS_Process+0xf4>)
 8000b26:	f009 fe99 	bl	800a85c <puts>
                break; // Sortie si aucun nouveau mouvement n'est détecté dans le délai imparti
 8000b2a:	e021      	b.n	8000b70 <MX_MEMS_Process+0xb8>
            }

            if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000b2c:	4d1a      	ldr	r5, [pc, #104]	; (8000b98 <MX_MEMS_Process+0xe0>)
 8000b2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b32:	9304      	str	r3, [sp, #16]
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_MEMS_Process+0xf0>)
 8000b36:	466c      	mov	r4, sp
 8000b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b42:	f000 f9e1 	bl	8000f08 <compareBenchReps>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d008      	beq.n	8000b5e <MX_MEMS_Process+0xa6>
                validMovements++;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_MEMS_Process+0xd0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <MX_MEMS_Process+0xd0>)
 8000b54:	6013      	str	r3, [r2, #0]
                printf("Répétition valide.\n");
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <MX_MEMS_Process+0xf8>)
 8000b58:	f009 fe80 	bl	800a85c <puts>
 8000b5c:	e7b8      	b.n	8000ad0 <MX_MEMS_Process+0x18>
            } else {
                invalidMovements++;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_MEMS_Process+0xd4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <MX_MEMS_Process+0xd4>)
 8000b66:	6013      	str	r3, [r2, #0]
                printf("Répétition non valide.\n");
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_MEMS_Process+0xfc>)
 8000b6a:	f009 fe77 	bl	800a85c <puts>
        if (!isReferenceMovementRecorded) {
 8000b6e:	e7af      	b.n	8000ad0 <MX_MEMS_Process+0x18>
            }
        }
    }

    // Affichage des résultats à la fin de la série
    printf("Mouvements valides: %d, Mouvements non valides: %d\n", validMovements, invalidMovements);
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <MX_MEMS_Process+0xd0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <MX_MEMS_Process+0xd4>)
 8000b76:	6812      	ldr	r2, [r2, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <MX_MEMS_Process+0x100>)
 8000b7c:	f009 fe08 	bl	800a790 <iprintf>
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bdb0      	pop	{r4, r5, r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001b4 	.word	0x200001b4
 8000b8c:	200001b8 	.word	0x200001b8
 8000b90:	20000190 	.word	0x20000190
 8000b94:	0800b638 	.word	0x0800b638
 8000b98:	20000194 	.word	0x20000194
 8000b9c:	0800b668 	.word	0x0800b668
 8000ba0:	0800b6a4 	.word	0x0800b6a4
 8000ba4:	0800b6cc 	.word	0x0800b6cc
 8000ba8:	200001a4 	.word	0x200001a4
 8000bac:	0800b6fc 	.word	0x0800b6fc
 8000bb0:	0800b73c 	.word	0x0800b73c
 8000bb4:	0800b754 	.word	0x0800b754
 8000bb8:	0800b770 	.word	0x0800b770

08000bbc <Init_Sensors>:





void Init_Sensors(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    BSP_SENSOR_ACC_Init();
 8000bc0:	f000 f9cf 	bl	8000f62 <BSP_SENSOR_ACC_Init>
    BSP_SENSOR_GYR_Init();
 8000bc4:	f000 f9d5 	bl	8000f72 <BSP_SENSOR_GYR_Init>

    BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8000bc8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000bdc <Init_Sensors+0x20>
 8000bcc:	f000 f9f3 	bl	8000fb6 <BSP_SENSOR_ACC_SetOutputDataRate>
    BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8000bd0:	2004      	movs	r0, #4
 8000bd2:	f000 f9ff 	bl	8000fd4 <BSP_SENSOR_ACC_SetFullScale>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	42480000 	.word	0x42480000

08000be0 <ReadSensorData>:

void ReadSensorData(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    BSP_SENSOR_ACC_GetAxes(&AccValue);
 8000be4:	4818      	ldr	r0, [pc, #96]	; (8000c48 <ReadSensorData+0x68>)
 8000be6:	f000 f9cc 	bl	8000f82 <BSP_SENSOR_ACC_GetAxes>
    BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8000bea:	4818      	ldr	r0, [pc, #96]	; (8000c4c <ReadSensorData+0x6c>)
 8000bec:	f000 f9d6 	bl	8000f9c <BSP_SENSOR_GYR_GetAxes>

    // Appliquer le décalage après la calibration
    AccValue.x -= AccOffset.x;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <ReadSensorData+0x68>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <ReadSensorData+0x70>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <ReadSensorData+0x68>)
 8000bfc:	6013      	str	r3, [r2, #0]
    AccValue.y -= AccOffset.y;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <ReadSensorData+0x68>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <ReadSensorData+0x70>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <ReadSensorData+0x68>)
 8000c0a:	6053      	str	r3, [r2, #4]
    AccValue.z -= AccOffset.z;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <ReadSensorData+0x68>)
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <ReadSensorData+0x70>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <ReadSensorData+0x68>)
 8000c18:	6093      	str	r3, [r2, #8]

    GyrValue.x -= GyrOffset.x;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <ReadSensorData+0x6c>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <ReadSensorData+0x74>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <ReadSensorData+0x6c>)
 8000c26:	6013      	str	r3, [r2, #0]
    GyrValue.y -= GyrOffset.y;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <ReadSensorData+0x6c>)
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <ReadSensorData+0x74>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <ReadSensorData+0x6c>)
 8000c34:	6053      	str	r3, [r2, #4]
    GyrValue.z -= GyrOffset.z;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <ReadSensorData+0x6c>)
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <ReadSensorData+0x74>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	4a02      	ldr	r2, [pc, #8]	; (8000c4c <ReadSensorData+0x6c>)
 8000c42:	6093      	str	r3, [r2, #8]
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000160 	.word	0x20000160
 8000c4c:	2000016c 	.word	0x2000016c
 8000c50:	20000178 	.word	0x20000178
 8000c54:	20000184 	.word	0x20000184

08000c58 <CalibrateSensors>:
    printf("Accéléromètre [X: %ld, Y: %ld, Z: %ld]\n", (long)AccValue.x, (long)AccValue.y, (long)AccValue.z);
    printf("Gyroscope [X: %ld, Y: %ld, Z: %ld]\n", (long)GyrValue.x, (long)GyrValue.y, (long)GyrValue.z);
    HAL_Delay(2000);
}

void CalibrateSensors(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    CalibrateAccelerometer();
 8000c5c:	f000 f804 	bl	8000c68 <CalibrateAccelerometer>
    CalibrateGyroscope();
 8000c60:	f000 f84a 	bl	8000cf8 <CalibrateGyroscope>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <CalibrateAccelerometer>:

void CalibrateAccelerometer(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
    int sumX = 0, sumY = 0, sumZ = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
    MOTION_SENSOR_Axes_t tempVal;

    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	e015      	b.n	8000cac <CalibrateAccelerometer+0x44>
        BSP_SENSOR_ACC_GetAxes(&tempVal);
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f97d 	bl	8000f82 <BSP_SENSOR_ACC_GetAxes>
        sumX += tempVal.x;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	61fb      	str	r3, [r7, #28]
        sumY += tempVal.y;
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4413      	add	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        sumZ += tempVal.z;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	617b      	str	r3, [r7, #20]
        HAL_Delay(10);
 8000ca0:	200a      	movs	r0, #10
 8000ca2:	f005 fdf7 	bl	8006894 <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	2b63      	cmp	r3, #99	; 0x63
 8000cb0:	dde6      	ble.n	8000c80 <CalibrateAccelerometer+0x18>
    }

    AccOffset.x = sumX / CALIBRATION_SAMPLES;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <CalibrateAccelerometer+0x88>)
 8000cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cba:	1152      	asrs	r2, r2, #5
 8000cbc:	17db      	asrs	r3, r3, #31
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <CalibrateAccelerometer+0x8c>)
 8000cc2:	6013      	str	r3, [r2, #0]
    AccOffset.y = sumY / CALIBRATION_SAMPLES;
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <CalibrateAccelerometer+0x88>)
 8000cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ccc:	1152      	asrs	r2, r2, #5
 8000cce:	17db      	asrs	r3, r3, #31
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <CalibrateAccelerometer+0x8c>)
 8000cd4:	6053      	str	r3, [r2, #4]
    AccOffset.z = sumZ / CALIBRATION_SAMPLES;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <CalibrateAccelerometer+0x88>)
 8000cda:	fb82 1203 	smull	r1, r2, r2, r3
 8000cde:	1152      	asrs	r2, r2, #5
 8000ce0:	17db      	asrs	r3, r3, #31
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	4a03      	ldr	r2, [pc, #12]	; (8000cf4 <CalibrateAccelerometer+0x8c>)
 8000ce6:	6093      	str	r3, [r2, #8]
}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	51eb851f 	.word	0x51eb851f
 8000cf4:	20000178 	.word	0x20000178

08000cf8 <CalibrateGyroscope>:

void CalibrateGyroscope(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
    int sumX = 0, sumY = 0, sumZ = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
    MOTION_SENSOR_Axes_t tempVal;

    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	e015      	b.n	8000d3c <CalibrateGyroscope+0x44>
        BSP_SENSOR_GYR_GetAxes(&tempVal);
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f942 	bl	8000f9c <BSP_SENSOR_GYR_GetAxes>
        sumX += tempVal.x;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	61fb      	str	r3, [r7, #28]
        sumY += tempVal.y;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4413      	add	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        sumZ += tempVal.z;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	617b      	str	r3, [r7, #20]
        HAL_Delay(10);
 8000d30:	200a      	movs	r0, #10
 8000d32:	f005 fdaf 	bl	8006894 <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	2b63      	cmp	r3, #99	; 0x63
 8000d40:	dde6      	ble.n	8000d10 <CalibrateGyroscope+0x18>
    }

    GyrOffset.x = sumX / CALIBRATION_SAMPLES;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <CalibrateGyroscope+0x88>)
 8000d46:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4a:	1152      	asrs	r2, r2, #5
 8000d4c:	17db      	asrs	r3, r3, #31
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <CalibrateGyroscope+0x8c>)
 8000d52:	6013      	str	r3, [r2, #0]
    GyrOffset.y = sumY / CALIBRATION_SAMPLES;
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <CalibrateGyroscope+0x88>)
 8000d58:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5c:	1152      	asrs	r2, r2, #5
 8000d5e:	17db      	asrs	r3, r3, #31
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <CalibrateGyroscope+0x8c>)
 8000d64:	6053      	str	r3, [r2, #4]
    GyrOffset.z = sumZ / CALIBRATION_SAMPLES;
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <CalibrateGyroscope+0x88>)
 8000d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6e:	1152      	asrs	r2, r2, #5
 8000d70:	17db      	asrs	r3, r3, #31
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <CalibrateGyroscope+0x8c>)
 8000d76:	6093      	str	r3, [r2, #8]
}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	51eb851f 	.word	0x51eb851f
 8000d84:	20000184 	.word	0x20000184

08000d88 <recordBenchRep>:

bool recordBenchRep(BenchRep *rep) {
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    int maxValueZ = INT_MIN;
 8000d90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    int minValueZ = INT_MAX;
 8000d96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t startTime = HAL_GetTick();
 8000d9c:	f005 fd62 	bl	8006864 <HAL_GetTick>
 8000da0:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t lastMovementTime = startTime;
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	623b      	str	r3, [r7, #32]
    uint32_t currentTime;
    bool movementDetected = false;
 8000da6:	2300      	movs	r3, #0
 8000da8:	77fb      	strb	r3, [r7, #31]
    bool isAscending = false; // Initialisation différée
 8000daa:	2300      	movs	r3, #0
 8000dac:	77bb      	strb	r3, [r7, #30]
    int changeOfDirectionCount = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
    bool directionDetermined = false;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]
    uint32_t inactivityStartTime = HAL_GetTick(); // Pour détecter l'inactivité initiale
 8000db6:	f005 fd55 	bl	8006864 <HAL_GetTick>
 8000dba:	6138      	str	r0, [r7, #16]

    while (true) {
        ReadSensorData();
 8000dbc:	f7ff ff10 	bl	8000be0 <ReadSensorData>

        // Détecter l'inactivité initiale
        if (!movementDetected && (HAL_GetTick() - inactivityStartTime > 5000)) {
 8000dc0:	7ffb      	ldrb	r3, [r7, #31]
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00a      	beq.n	8000de2 <recordBenchRep+0x5a>
 8000dcc:	f005 fd4a 	bl	8006864 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d901      	bls.n	8000de2 <recordBenchRep+0x5a>
            return false; // Aucun mouvement détecté dans les 5 premières secondes
 8000dde:	2300      	movs	r3, #0
 8000de0:	e08c      	b.n	8000efc <recordBenchRep+0x174>
        }

        if (abs(AccValue.z) > MOVEMENT_THRESHOLD) {
 8000de2:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <recordBenchRep+0x17c>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	bfb8      	it	lt
 8000dea:	425b      	neglt	r3, r3
 8000dec:	2b64      	cmp	r3, #100	; 0x64
 8000dee:	dd66      	ble.n	8000ebe <recordBenchRep+0x136>
            if (!movementDetected) {
 8000df0:	7ffb      	ldrb	r3, [r7, #31]
 8000df2:	f083 0301 	eor.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d009      	beq.n	8000e10 <recordBenchRep+0x88>
                movementDetected = true;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	77fb      	strb	r3, [r7, #31]
                startTime = HAL_GetTick();
 8000e00:	f005 fd30 	bl	8006864 <HAL_GetTick>
 8000e04:	6278      	str	r0, [r7, #36]	; 0x24
                lastMovementTime = startTime;
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	623b      	str	r3, [r7, #32]
                inactivityStartTime = 0; // Réinitialiser puisqu'un mouvement a été détecté
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	e002      	b.n	8000e16 <recordBenchRep+0x8e>
            } else {
                lastMovementTime = HAL_GetTick();
 8000e10:	f005 fd28 	bl	8006864 <HAL_GetTick>
 8000e14:	6238      	str	r0, [r7, #32]
            }
            maxValueZ = fmax(maxValueZ, AccValue.z);
 8000e16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e18:	f7ff fb54 	bl	80004c4 <__aeabi_i2d>
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460d      	mov	r5, r1
 8000e20:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <recordBenchRep+0x17c>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb4d 	bl	80004c4 <__aeabi_i2d>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	ec43 2b11 	vmov	d1, r2, r3
 8000e32:	ec45 4b10 	vmov	d0, r4, r5
 8000e36:	f00a fb7b 	bl	800b530 <fmax>
 8000e3a:	ec53 2b10 	vmov	r2, r3, d0
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fc31 	bl	80006a8 <__aeabi_d2iz>
 8000e46:	4603      	mov	r3, r0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
            minValueZ = fmin(minValueZ, AccValue.z);
 8000e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e4c:	f7ff fb3a 	bl	80004c4 <__aeabi_i2d>
 8000e50:	4604      	mov	r4, r0
 8000e52:	460d      	mov	r5, r1
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <recordBenchRep+0x17c>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb33 	bl	80004c4 <__aeabi_i2d>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	ec43 2b11 	vmov	d1, r2, r3
 8000e66:	ec45 4b10 	vmov	d0, r4, r5
 8000e6a:	f00a fb88 	bl	800b57e <fmin>
 8000e6e:	ec53 2b10 	vmov	r2, r3, d0
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fc17 	bl	80006a8 <__aeabi_d2iz>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28

            if (!directionDetermined) {
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d009      	beq.n	8000e9e <recordBenchRep+0x116>
                isAscending = AccValue.z > 0;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <recordBenchRep+0x17c>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	bfcc      	ite	gt
 8000e92:	2301      	movgt	r3, #1
 8000e94:	2300      	movle	r3, #0
 8000e96:	77bb      	strb	r3, [r7, #30]
                directionDetermined = true;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	75fb      	strb	r3, [r7, #23]
 8000e9c:	e00f      	b.n	8000ebe <recordBenchRep+0x136>
            } else {
                bool currentAscending = AccValue.z > 0;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <recordBenchRep+0x17c>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bfcc      	ite	gt
 8000ea6:	2301      	movgt	r3, #1
 8000ea8:	2300      	movle	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
                if (currentAscending != isAscending) {
 8000eac:	7bfa      	ldrb	r2, [r7, #15]
 8000eae:	7fbb      	ldrb	r3, [r7, #30]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d004      	beq.n	8000ebe <recordBenchRep+0x136>
                    changeOfDirectionCount++;
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
                    isAscending = currentAscending;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	77bb      	strb	r3, [r7, #30]
                }
            }
        }

        currentTime = HAL_GetTick();
 8000ebe:	f005 fcd1 	bl	8006864 <HAL_GetTick>
 8000ec2:	60b8      	str	r0, [r7, #8]
        if (movementDetected && (currentTime - lastMovementTime > REPETITION_TIME_OUT)) {
 8000ec4:	7ffb      	ldrb	r3, [r7, #31]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f43f af78 	beq.w	8000dbc <recordBenchRep+0x34>
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ed6:	d800      	bhi.n	8000eda <recordBenchRep+0x152>
        ReadSensorData();
 8000ed8:	e770      	b.n	8000dbc <recordBenchRep+0x34>
            break; // Fin de l'enregistrement d'un mouvement
 8000eda:	bf00      	nop
        }
    }

    // Enregistrement des données du mouvement
    rep->maxAmplitudeZ = maxValueZ;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee0:	601a      	str	r2, [r3, #0]
    rep->minAmplitudeZ = minValueZ;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ee6:	605a      	str	r2, [r3, #4]
    rep->duration = currentTime - startTime;
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
    rep->changeOfDirectionCount = changeOfDirectionCount;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	60da      	str	r2, [r3, #12]

    return true; // Mouvement détecté et enregistré
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3730      	adds	r7, #48	; 0x30
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bdb0      	pop	{r4, r5, r7, pc}
 8000f04:	20000160 	.word	0x20000160

08000f08 <compareBenchReps>:



bool compareBenchReps(BenchRep refRep, BenchRep newRep, int tolerance) {
 8000f08:	b490      	push	{r4, r7}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	463c      	mov	r4, r7
 8000f10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance &&
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	bfb8      	it	lt
 8000f1e:	425b      	neglt	r3, r3
 8000f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f22:	429a      	cmp	r2, r3
 8000f24:	db17      	blt.n	8000f56 <compareBenchReps+0x4e>
        abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance &&
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bfb8      	it	lt
 8000f30:	425b      	neglt	r3, r3
    if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance &&
 8000f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f34:	429a      	cmp	r2, r3
 8000f36:	db0e      	blt.n	8000f56 <compareBenchReps+0x4e>
        abs(refRep.duration - newRep.duration) <= tolerance &&
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bfb8      	it	lt
 8000f42:	425b      	neglt	r3, r3
        abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance &&
 8000f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f46:	429a      	cmp	r2, r3
 8000f48:	db05      	blt.n	8000f56 <compareBenchReps+0x4e>
        refRep.changeOfDirectionCount == newRep.changeOfDirectionCount) {
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        abs(refRep.duration - newRep.duration) <= tolerance &&
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d101      	bne.n	8000f56 <compareBenchReps+0x4e>
        return true;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <compareBenchReps+0x50>
    }
    return false;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc90      	pop	{r4, r7}
 8000f60:	4770      	bx	lr

08000f62 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8000f66:	2102      	movs	r1, #2
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f005 f833 	bl	8005fd4 <IKS01A3_MOTION_SENSOR_Init>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 8000f76:	2101      	movs	r1, #1
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f005 f82b 	bl	8005fd4 <IKS01A3_MOTION_SENSOR_Init>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f005 f91c 	bl	80061cc <IKS01A3_MOTION_SENSOR_GetAxes>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f005 f90f 	bl	80061cc <IKS01A3_MOTION_SENSOR_GetAxes>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 8000fc0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f005 f944 	bl	8006254 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	2102      	movs	r1, #2
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f005 f97d 	bl	80062e0 <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ffe:	f023 0218 	bic.w	r2, r3, #24
 8001002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4313      	orrs	r3, r2
 800100a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800101a:	b480      	push	{r7}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4313      	orrs	r3, r2
 8001030:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4013      	ands	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001050:	f005 fb9a 	bl	8006788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001054:	f000 f80e 	bl	8001074 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001058:	f000 f882 	bl	8001160 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 f914 	bl	8001288 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001060:	f000 f89c 	bl	800119c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001064:	f000 f8e8 	bl	8001238 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 8001068:	f7ff fd08 	bl	8000a7c <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_MEMS_Process();
 800106c:	f7ff fd24 	bl	8000ab8 <MX_MEMS_Process>
 8001070:	e7fc      	b.n	800106c <main+0x20>
	...

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b09a      	sub	sp, #104	; 0x68
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2248      	movs	r2, #72	; 0x48
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f009 fcca 	bl	800aa1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800109a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010a8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80010aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f023 0303 	bic.w	r3, r3, #3
 80010b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010be:	f006 fecf 	bl	8007e60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff ff93 	bl	8000fee <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <SystemClock_Config+0xe8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010d0:	4a22      	ldr	r2, [pc, #136]	; (800115c <SystemClock_Config+0xe8>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <SystemClock_Config+0xe8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80010e4:	2327      	movs	r3, #39	; 0x27
 80010e6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010ee:	2301      	movs	r3, #1
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fc:	2340      	movs	r3, #64	; 0x40
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001100:	2300      	movs	r3, #0
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001104:	2360      	movs	r3, #96	; 0x60
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4618      	mov	r0, r3
 8001112:	f007 fa39 	bl	8008588 <HAL_RCC_OscConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800111c:	f000 f8fc 	bl	8001318 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001120:	236f      	movs	r3, #111	; 0x6f
 8001122:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001124:	2302      	movs	r3, #2
 8001126:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f007 fd95 	bl	8008c70 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800114c:	f000 f8e4 	bl	8001318 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001150:	f008 fb50 	bl	80097f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001154:	bf00      	nop
 8001156:	3768      	adds	r7, #104	; 0x68
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58000400 	.word	0x58000400

08001160 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	; 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2250      	movs	r2, #80	; 0x50
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f009 fc55 	bl	800aa1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001176:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001178:	2300      	movs	r3, #0
 800117a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800117c:	2300      	movs	r3, #0
 800117e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4618      	mov	r0, r3
 8001184:	f008 f9c0 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800118e:	f000 f8c3 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001192:	bf00      	nop
 8001194:	3750      	adds	r7, #80	; 0x50
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011a2:	4a24      	ldr	r2, [pc, #144]	; (8001234 <MX_USART1_UART_Init+0x98>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011c4:	220c      	movs	r2, #12
 80011c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011e6:	4812      	ldr	r0, [pc, #72]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011e8:	f008 fc3b 	bl	8009a62 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80011f2:	f000 f891 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011fa:	f009 f903 	bl	800a404 <HAL_UARTEx_SetTxFifoThreshold>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001204:	f000 f888 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_USART1_UART_Init+0x94>)
 800120c:	f009 f938 	bl	800a480 <HAL_UARTEx_SetRxFifoThreshold>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001216:	f000 f87f 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART1_UART_Init+0x94>)
 800121c:	f009 f8b9 	bl	800a392 <HAL_UARTEx_DisableFifoMode>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001226:	f000 f877 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001bc 	.word	0x200001bc
 8001234:	40013800 	.word	0x40013800

08001238 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USB_PCD_Init+0x48>)
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <MX_USB_PCD_Init+0x4c>)
 8001240:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001244:	2208      	movs	r2, #8
 8001246:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_USB_PCD_Init+0x48>)
 800124a:	2202      	movs	r2, #2
 800124c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001250:	2202      	movs	r2, #2
 8001252:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001256:	2200      	movs	r2, #0
 8001258:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USB_PCD_Init+0x48>)
 800125c:	2200      	movs	r2, #0
 800125e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001262:	2200      	movs	r2, #0
 8001264:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001268:	2200      	movs	r2, #0
 800126a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USB_PCD_Init+0x48>)
 800126e:	f006 fcfe 	bl	8007c6e <HAL_PCD_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001278:	f000 f84e 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000250 	.word	0x20000250
 8001284:	40006800 	.word	0x40006800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	2004      	movs	r0, #4
 800129e:	f7ff febc 	bl	800101a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2002      	movs	r0, #2
 80012a4:	f7ff feb9 	bl	800101a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	2001      	movs	r0, #1
 80012aa:	f7ff feb6 	bl	800101a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	2008      	movs	r0, #8
 80012b0:	f7ff feb3 	bl	800101a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2123      	movs	r1, #35	; 0x23
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <MX_GPIO_Init+0x84>)
 80012ba:	f005 fe41 	bl	8006f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012be:	2310      	movs	r3, #16
 80012c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4810      	ldr	r0, [pc, #64]	; (8001310 <MX_GPIO_Init+0x88>)
 80012d0:	f005 fbe8 	bl	8006aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80012d4:	2323      	movs	r3, #35	; 0x23
 80012d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <MX_GPIO_Init+0x84>)
 80012ea:	f005 fbdb 	bl	8006aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80012ee:	2303      	movs	r3, #3
 80012f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_GPIO_Init+0x8c>)
 8001300:	f005 fbd0 	bl	8006aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	48000400 	.word	0x48000400
 8001310:	48000800 	.word	0x48000800
 8001314:	48000c00 	.word	0x48000c00

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>

08001322 <LL_AHB2_GRP1_EnableClock>:
{
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001330:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4313      	orrs	r3, r2
 8001338:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800133a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4013      	ands	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800135c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4313      	orrs	r3, r2
 800136a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4313      	orrs	r3, r2
 800139c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4013      	ands	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09c      	sub	sp, #112	; 0x70
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2250      	movs	r2, #80	; 0x50
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f009 fb17 	bl	800aa1c <memset>
  if(huart->Instance==USART1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <HAL_UART_MspInit+0x84>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d124      	bne.n	8001442 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4618      	mov	r0, r3
 8001406:	f008 f87f 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001410:	f7ff ff82 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001414:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001418:	f7ff ffb5 	bl	8001386 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	2002      	movs	r0, #2
 800141e:	f7ff ff80 	bl	8001322 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001422:	23c0      	movs	r3, #192	; 0xc0
 8001424:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142a:	2301      	movs	r3, #1
 800142c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001432:	2307      	movs	r3, #7
 8001434:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800143a:	4619      	mov	r1, r3
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <HAL_UART_MspInit+0x88>)
 800143e:	f005 fb31 	bl	8006aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3770      	adds	r7, #112	; 0x70
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40013800 	.word	0x40013800
 8001450:	48000400 	.word	0x48000400

08001454 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b09c      	sub	sp, #112	; 0x70
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2250      	movs	r2, #80	; 0x50
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f009 fad1 	bl	800aa1c <memset>
  if(hpcd->Instance==USB)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <HAL_PCD_MspInit+0xa8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d136      	bne.n	80014f2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001488:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800148a:	2318      	movs	r3, #24
 800148c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800148e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001492:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001498:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800149a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800149e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80014a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014aa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4618      	mov	r0, r3
 80014b2:	f008 f829 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80014bc:	f7ff ff2c 	bl	8001318 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff ff2e 	bl	8001322 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80014d8:	230a      	movs	r3, #10
 80014da:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f005 fadd 	bl	8006aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80014ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80014ee:	f7ff ff31 	bl	8001354 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3770      	adds	r7, #112	; 0x70
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40006800 	.word	0x40006800

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f005 f976 	bl	800683c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <LL_AHB2_GRP1_EnableClock>:
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001578:	68fb      	ldr	r3, [r7, #12]
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_APB1_GRP1_EnableClock>:
{
 8001586:	b480      	push	{r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800158e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001592:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4313      	orrs	r3, r2
 800159c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_APB1_GRP1_DisableClock>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ce:	4013      	ands	r3, r2
 80015d0:	658b      	str	r3, [r1, #88]	; 0x58
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <BSP_I2C1_Init+0x70>)
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <BSP_I2C1_Init+0x74>)
 80015ee:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <BSP_I2C1_Init+0x78>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	4918      	ldr	r1, [pc, #96]	; (8001658 <BSP_I2C1_Init+0x78>)
 80015f8:	600a      	str	r2, [r1, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d122      	bne.n	8001644 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80015fe:	4814      	ldr	r0, [pc, #80]	; (8001650 <BSP_I2C1_Init+0x70>)
 8001600:	f005 ffc2 	bl	8007588 <HAL_I2C_GetState>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d11c      	bne.n	8001644 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800160a:	4811      	ldr	r0, [pc, #68]	; (8001650 <BSP_I2C1_Init+0x70>)
 800160c:	f000 f8fe 	bl	800180c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001616:	480e      	ldr	r0, [pc, #56]	; (8001650 <BSP_I2C1_Init+0x70>)
 8001618:	f000 f8b4 	bl	8001784 <MX_I2C1_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001622:	f06f 0307 	mvn.w	r3, #7
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	e00c      	b.n	8001644 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <BSP_I2C1_Init+0x70>)
 800162e:	f006 fa87 	bl	8007b40 <HAL_I2CEx_ConfigAnalogFilter>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001638:	f06f 0307 	mvn.w	r3, #7
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	e001      	b.n	8001644 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000052c 	.word	0x2000052c
 8001654:	40005400 	.word	0x40005400
 8001658:	20000580 	.word	0x20000580

0800165c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <BSP_I2C1_DeInit+0x48>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d014      	beq.n	8001698 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <BSP_I2C1_DeInit+0x48>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3b01      	subs	r3, #1
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <BSP_I2C1_DeInit+0x48>)
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <BSP_I2C1_DeInit+0x48>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10b      	bne.n	8001698 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001680:	4809      	ldr	r0, [pc, #36]	; (80016a8 <BSP_I2C1_DeInit+0x4c>)
 8001682:	f000 f907 	bl	8001894 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <BSP_I2C1_DeInit+0x4c>)
 8001688:	f005 fd0d 	bl	80070a6 <HAL_I2C_DeInit>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001692:	f06f 0307 	mvn.w	r3, #7
 8001696:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000580 	.word	0x20000580
 80016a8:	2000052c 	.word	0x2000052c

080016ac <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af04      	add	r7, sp, #16
 80016b2:	60ba      	str	r2, [r7, #8]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	81fb      	strh	r3, [r7, #14]
 80016ba:	460b      	mov	r3, r1
 80016bc:	81bb      	strh	r3, [r7, #12]
 80016be:	4613      	mov	r3, r2
 80016c0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80016c6:	89ba      	ldrh	r2, [r7, #12]
 80016c8:	89f9      	ldrh	r1, [r7, #14]
 80016ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	480c      	ldr	r0, [pc, #48]	; (800170c <BSP_I2C1_WriteReg+0x60>)
 80016dc:	f005 fd26 	bl	800712c <HAL_I2C_Mem_Write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00c      	beq.n	8001700 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016e6:	4809      	ldr	r0, [pc, #36]	; (800170c <BSP_I2C1_WriteReg+0x60>)
 80016e8:	f005 ff5c 	bl	80075a4 <HAL_I2C_GetError>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d103      	bne.n	80016fa <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016f2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e002      	b.n	8001700 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80016fa:	f06f 0303 	mvn.w	r3, #3
 80016fe:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001700:	697b      	ldr	r3, [r7, #20]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000052c 	.word	0x2000052c

08001710 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af04      	add	r7, sp, #16
 8001716:	60ba      	str	r2, [r7, #8]
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	81fb      	strh	r3, [r7, #14]
 800171e:	460b      	mov	r3, r1
 8001720:	81bb      	strh	r3, [r7, #12]
 8001722:	4613      	mov	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800172a:	89ba      	ldrh	r2, [r7, #12]
 800172c:	89f9      	ldrh	r1, [r7, #14]
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2301      	movs	r3, #1
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <BSP_I2C1_ReadReg+0x60>)
 8001740:	f005 fe08 	bl	8007354 <HAL_I2C_Mem_Read>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00c      	beq.n	8001764 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800174a:	4809      	ldr	r0, [pc, #36]	; (8001770 <BSP_I2C1_ReadReg+0x60>)
 800174c:	f005 ff2a 	bl	80075a4 <HAL_I2C_GetError>
 8001750:	4603      	mov	r3, r0
 8001752:	2b04      	cmp	r3, #4
 8001754:	d103      	bne.n	800175e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001756:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e002      	b.n	8001764 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800175e:	f06f 0303 	mvn.w	r3, #3
 8001762:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001764:	697b      	ldr	r3, [r7, #20]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000052c 	.word	0x2000052c

08001774 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001778:	f005 f874 	bl	8006864 <HAL_GetTick>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <MX_I2C1_Init+0x80>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <MX_I2C1_Init+0x84>)
 800179a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f005 fbd2 	bl	8006f70 <HAL_I2C_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d6:	2100      	movs	r1, #0
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f006 f9b1 	bl	8007b40 <HAL_I2CEx_ConfigAnalogFilter>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80017e8:	2100      	movs	r1, #0
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f006 f9f3 	bl	8007bd6 <HAL_I2CEx_ConfigDigitalFilter>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40005400 	.word	0x40005400
 8001808:	00707cbb 	.word	0x00707cbb

0800180c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b09c      	sub	sp, #112	; 0x70
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2250      	movs	r2, #80	; 0x50
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f009 f8fd 	bl	800aa1c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001826:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	4618      	mov	r0, r3
 8001832:	f007 fe69 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2002      	movs	r0, #2
 8001838:	f7ff fe8c 	bl	8001554 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800183c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001840:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001842:	2312      	movs	r3, #18
 8001844:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800184e:	2304      	movs	r3, #4
 8001850:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001852:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001856:	4619      	mov	r1, r3
 8001858:	480d      	ldr	r0, [pc, #52]	; (8001890 <I2C1_MspInit+0x84>)
 800185a:	f005 f923 	bl	8006aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800185e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001862:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001864:	2312      	movs	r3, #18
 8001866:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001870:	2304      	movs	r3, #4
 8001872:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001874:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001878:	4619      	mov	r1, r3
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <I2C1_MspInit+0x84>)
 800187c:	f005 f912 	bl	8006aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001880:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001884:	f7ff fe7f 	bl	8001586 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001888:	bf00      	nop
 800188a:	3770      	adds	r7, #112	; 0x70
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	48000400 	.word	0x48000400

08001894 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800189c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80018a0:	f7ff fe8a 	bl	80015b8 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80018a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <I2C1_MspDeInit+0x2c>)
 80018aa:	f005 fa6b 	bl	8006d84 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80018ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <I2C1_MspDeInit+0x2c>)
 80018b4:	f005 fa66 	bl	8006d84 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	48000400 	.word	0x48000400

080018c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	e00a      	b.n	80018ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018d6:	f3af 8000 	nop.w
 80018da:	4601      	mov	r1, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	b2ca      	uxtb	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbf0      	blt.n	80018d6 <_read+0x12>
  }

  return len;
 80018f4:	687b      	ldr	r3, [r7, #4]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001926:	605a      	str	r2, [r3, #4]
  return 0;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_isatty>:

int _isatty(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <_sbrk+0x5c>)
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <_sbrk+0x60>)
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <_sbrk+0x64>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <_sbrk+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	d207      	bcs.n	80019a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001998:	f009 f88e 	bl	800aab8 <__errno>
 800199c:	4603      	mov	r3, r0
 800199e:	220c      	movs	r2, #12
 80019a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	e009      	b.n	80019bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <_sbrk+0x64>)
 80019b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20030000 	.word	0x20030000
 80019c8:	00000400 	.word	0x00000400
 80019cc:	20000584 	.word	0x20000584
 80019d0:	200007c8 	.word	0x200007c8

080019d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <SystemInit+0x98>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <SystemInit+0x98>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001a00:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <SystemInit+0x9c>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1e:	f023 0305 	bic.w	r3, r3, #5
 8001a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <SystemInit+0xa0>)
 8001a40:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <SystemInit+0xa0>)
 8001a48:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	faf6fefb 	.word	0xfaf6fefb
 8001a74:	22041000 	.word	0x22041000

08001a78 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001a78:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7c:	3304      	adds	r3, #4

08001a7e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a80:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001a82:	d3f9      	bcc.n	8001a78 <CopyDataInit>
  bx lr
 8001a84:	4770      	bx	lr

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001a86:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001a88:	3004      	adds	r0, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001a8a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>
  bx lr
 8001a8e:	4770      	bx	lr

08001a90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a94:	f7ff ff9e 	bl	80019d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a98:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <LoopForever+0x6>)
 8001a9a:	490c      	ldr	r1, [pc, #48]	; (8001acc <LoopForever+0xa>)
 8001a9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <LoopForever+0xe>)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f7ff ffed 	bl	8001a7e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <LoopForever+0x12>)
 8001aa6:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <LoopForever+0x16>)
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <LoopForever+0x1a>)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f7ff ffe7 	bl	8001a7e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <LoopForever+0x1e>)
 8001ab2:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <LoopForever+0x22>)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f7ff ffe8 	bl	8001a8a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001aba:	f009 f803 	bl	800aac4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001abe:	f7ff fac5 	bl	800104c <main>

08001ac2 <LoopForever>:

LoopForever:
  b LoopForever
 8001ac2:	e7fe      	b.n	8001ac2 <LoopForever>
  ldr   r0, =_estack
 8001ac4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20000144 	.word	0x20000144
 8001ad0:	0800b92c 	.word	0x0800b92c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ad4:	20030000 	.word	0x20030000
 8001ad8:	20030000 	.word	0x20030000
 8001adc:	0800ba68 	.word	0x0800ba68
  INIT_BSS _sbss, _ebss
 8001ae0:	20000144 	.word	0x20000144
 8001ae4:	200007c8 	.word	0x200007c8

08001ae8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_IRQHandler>
	...

08001aec <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d103      	bne.n	8001b08 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e051      	b.n	8001bac <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	7b1a      	ldrb	r2, [r3, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <LIS2DW12_RegisterBusIO+0xcc>)
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <LIS2DW12_RegisterBusIO+0xd0>)
 8001b4a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	69da      	ldr	r2, [r3, #28]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e020      	b.n	8001bac <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4798      	blx	r3
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e016      	b.n	8001bac <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d112      	bne.n	8001bac <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001b90:	2305      	movs	r3, #5
 8001b92:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	461a      	mov	r2, r3
 8001b98:	2121      	movs	r1, #33	; 0x21
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fcc1 	bl	8002522 <LIS2DW12_Write_Reg>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001bac:	68fb      	ldr	r3, [r7, #12]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	080028b5 	.word	0x080028b5
 8001bbc:	080028eb 	.word	0x080028eb

08001bc0 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3320      	adds	r3, #32
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 f9ce 	bl	8002f70 <lis2dw12_auto_increment_set>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e04b      	b.n	8001c78 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3320      	adds	r3, #32
 8001be4:	2101      	movs	r1, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	f001 f8e2 	bl	8002db0 <lis2dw12_block_data_update_set>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e03f      	b.n	8001c78 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3320      	adds	r3, #32
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 f9dc 	bl	8002fbc <lis2dw12_fifo_mode_set>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e033      	b.n	8001c78 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3320      	adds	r3, #32
 8001c14:	2104      	movs	r1, #4
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 feb2 	bl	8002980 <lis2dw12_power_mode_set>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e027      	b.n	8001c78 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <LIS2DW12_Init+0xc0>)
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3320      	adds	r3, #32
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 ffa3 	bl	8002b90 <lis2dw12_data_rate_set>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
 8001c54:	e010      	b.n	8001c78 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3320      	adds	r3, #32
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 f8cd 	bl	8002dfc <lis2dw12_full_scale_set>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6c:	e004      	b.n	8001c78 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	42c80000 	.word	0x42c80000

08001c84 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f888 	bl	8001da2 <LIS2DW12_ACC_Disable>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	e010      	b.n	8001cc0 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3320      	adds	r3, #32
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 f938 	bl	8002f4e <lis2dw12_device_id_get>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	e000      	b.n	8001cec <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2200      	movs	r2, #0
 8001d14:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2210      	movs	r2, #16
 8001d20:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <LIS2DW12_GetCapabilities+0x58>)
 8001d34:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	44c80000 	.word	0x44c80000

08001d50 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e019      	b.n	8001d9a <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d78:	461a      	mov	r2, r3
 8001d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fbea 	bl	8002558 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e004      	b.n	8001d9a <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e010      	b.n	8001dda <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3320      	adds	r3, #32
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fee6 	bl	8002b90 <lis2dw12_data_rate_set>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e004      	b.n	8001dda <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3320      	adds	r3, #32
 8001df6:	f107 020b 	add.w	r2, r7, #11
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f001 f823 	bl	8002e48 <lis2dw12_full_scale_get>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0c:	e080      	b.n	8001f10 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3320      	adds	r3, #32
 8001e12:	f107 020a 	add.w	r2, r7, #10
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fdff 	bl	8002a1c <lis2dw12_power_mode_get>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295
 8001e28:	e072      	b.n	8001f10 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8001e2a:	7abb      	ldrb	r3, [r7, #10]
 8001e2c:	2b1b      	cmp	r3, #27
 8001e2e:	bf8c      	ite	hi
 8001e30:	2201      	movhi	r2, #1
 8001e32:	2200      	movls	r2, #0
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	d162      	bne.n	8001f00 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8001e42:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d12f      	bne.n	8001eb4 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8001e54:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d04c      	beq.n	8001f00 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001e66:	7afb      	ldrb	r3, [r7, #11]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d81b      	bhi.n	8001ea4 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8001e6c:	a201      	add	r2, pc, #4	; (adr r2, 8001e74 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8001e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e72:	bf00      	nop
 8001e74:	08001e85 	.word	0x08001e85
 8001e78:	08001e8d 	.word	0x08001e8d
 8001e7c:	08001e95 	.word	0x08001e95
 8001e80:	08001e9d 	.word	0x08001e9d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8001e88:	601a      	str	r2, [r3, #0]
          break;
 8001e8a:	e012      	b.n	8001eb2 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8001e90:	601a      	str	r2, [r3, #0]
          break;
 8001e92:	e00e      	b.n	8001eb2 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8001e98:	601a      	str	r2, [r3, #0]
          break;
 8001e9a:	e00a      	b.n	8001eb2 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4a21      	ldr	r2, [pc, #132]	; (8001f24 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8001ea0:	601a      	str	r2, [r3, #0]
          break;
 8001ea2:	e006      	b.n	8001eb2 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001ea8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	60fb      	str	r3, [r7, #12]
          break;
 8001eb0:	bf00      	nop
      }
      break;
 8001eb2:	e02c      	b.n	8001f0e <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d81a      	bhi.n	8001ef0 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8001eba:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8001ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec0:	08001ed1 	.word	0x08001ed1
 8001ec4:	08001ed9 	.word	0x08001ed9
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08001ee9 	.word	0x08001ee9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <LIS2DW12_ACC_GetSensitivity+0x148>)
 8001ed4:	601a      	str	r2, [r3, #0]
          break;
 8001ed6:	e012      	b.n	8001efe <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8001edc:	601a      	str	r2, [r3, #0]
          break;
 8001ede:	e00e      	b.n	8001efe <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8001ee4:	601a      	str	r2, [r3, #0]
          break;
 8001ee6:	e00a      	b.n	8001efe <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8001eec:	601a      	str	r2, [r3, #0]
          break;
 8001eee:	e006      	b.n	8001efe <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001ef4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	60fb      	str	r3, [r7, #12]
          break;
 8001efc:	bf00      	nop
      }
      break;
 8001efe:	e006      	b.n	8001f0e <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001f04:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	60fb      	str	r3, [r7, #12]
      break;
 8001f0c:	bf00      	nop
  }

  return ret;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	3f79db23 	.word	0x3f79db23
 8001f1c:	3ff9db23 	.word	0x3ff9db23
 8001f20:	4079db23 	.word	0x4079db23
 8001f24:	40f9db23 	.word	0x40f9db23
 8001f28:	bf800000 	.word	0xbf800000
 8001f2c:	3e79db23 	.word	0x3e79db23
 8001f30:	3ef9db23 	.word	0x3ef9db23

08001f34 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3320      	adds	r3, #32
 8001f46:	f107 020b 	add.w	r2, r7, #11
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fe65 	bl	8002c1c <lis2dw12_data_rate_get>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	e14f      	b.n	80021fe <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3320      	adds	r3, #32
 8001f62:	f107 020a 	add.w	r2, r7, #10
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fd57 	bl	8002a1c <lis2dw12_power_mode_get>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295
 8001f78:	e141      	b.n	80021fe <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	2b32      	cmp	r3, #50	; 0x32
 8001f7e:	f200 8136 	bhi.w	80021ee <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8001f82:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08002055 	.word	0x08002055
 8001f8c:	0800205f 	.word	0x0800205f
 8001f90:	080020b9 	.word	0x080020b9
 8001f94:	080020c1 	.word	0x080020c1
 8001f98:	080020c9 	.word	0x080020c9
 8001f9c:	080020d1 	.word	0x080020d1
 8001fa0:	080020d9 	.word	0x080020d9
 8001fa4:	080020e1 	.word	0x080020e1
 8001fa8:	0800213b 	.word	0x0800213b
 8001fac:	08002195 	.word	0x08002195
 8001fb0:	080021ef 	.word	0x080021ef
 8001fb4:	080021ef 	.word	0x080021ef
 8001fb8:	080021ef 	.word	0x080021ef
 8001fbc:	080021ef 	.word	0x080021ef
 8001fc0:	080021ef 	.word	0x080021ef
 8001fc4:	080021ef 	.word	0x080021ef
 8001fc8:	080021ef 	.word	0x080021ef
 8001fcc:	080021ef 	.word	0x080021ef
 8001fd0:	08002055 	.word	0x08002055
 8001fd4:	080021ef 	.word	0x080021ef
 8001fd8:	080021ef 	.word	0x080021ef
 8001fdc:	080021ef 	.word	0x080021ef
 8001fe0:	080021ef 	.word	0x080021ef
 8001fe4:	080021ef 	.word	0x080021ef
 8001fe8:	080021ef 	.word	0x080021ef
 8001fec:	080021ef 	.word	0x080021ef
 8001ff0:	080021ef 	.word	0x080021ef
 8001ff4:	080021ef 	.word	0x080021ef
 8001ff8:	080021ef 	.word	0x080021ef
 8001ffc:	080021ef 	.word	0x080021ef
 8002000:	080021ef 	.word	0x080021ef
 8002004:	080021ef 	.word	0x080021ef
 8002008:	080021ef 	.word	0x080021ef
 800200c:	080021ef 	.word	0x080021ef
 8002010:	080021ef 	.word	0x080021ef
 8002014:	080021ef 	.word	0x080021ef
 8002018:	080021ef 	.word	0x080021ef
 800201c:	080021ef 	.word	0x080021ef
 8002020:	080021ef 	.word	0x080021ef
 8002024:	080021ef 	.word	0x080021ef
 8002028:	080021ef 	.word	0x080021ef
 800202c:	080021ef 	.word	0x080021ef
 8002030:	080021ef 	.word	0x080021ef
 8002034:	080021ef 	.word	0x080021ef
 8002038:	080021ef 	.word	0x080021ef
 800203c:	080021ef 	.word	0x080021ef
 8002040:	080021ef 	.word	0x080021ef
 8002044:	080021ef 	.word	0x080021ef
 8002048:	080021ef 	.word	0x080021ef
 800204c:	080021ef 	.word	0x080021ef
 8002050:	08002055 	.word	0x08002055
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
      break;
 800205c:	e0ce      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800205e:	7abb      	ldrb	r3, [r7, #10]
 8002060:	2b1b      	cmp	r3, #27
 8002062:	bf8c      	ite	hi
 8002064:	2201      	movhi	r2, #1
 8002066:	2200      	movls	r2, #0
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	2a00      	cmp	r2, #0
 800206c:	d11c      	bne.n	80020a8 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 800206e:	2201      	movs	r2, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002078:	2a00      	cmp	r2, #0
 800207a:	bf14      	ite	ne
 800207c:	2201      	movne	r2, #1
 800207e:	2200      	moveq	r2, #0
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	2a00      	cmp	r2, #0
 8002084:	d10c      	bne.n	80020a0 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8002086:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4a5b      	ldr	r2, [pc, #364]	; (8002208 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 800209c:	601a      	str	r2, [r3, #0]
          break;
 800209e:	e00a      	b.n	80020b6 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4a5a      	ldr	r2, [pc, #360]	; (800220c <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 80020a4:	601a      	str	r2, [r3, #0]
          break;
 80020a6:	e006      	b.n	80020b6 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4a59      	ldr	r2, [pc, #356]	; (8002210 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80020ac:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	60fb      	str	r3, [r7, #12]
          break;
 80020b4:	bf00      	nop
      }
      break;
 80020b6:	e0a1      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4a53      	ldr	r2, [pc, #332]	; (8002208 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80020bc:	601a      	str	r2, [r3, #0]
      break;
 80020be:	e09d      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4a54      	ldr	r2, [pc, #336]	; (8002214 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 80020c4:	601a      	str	r2, [r3, #0]
      break;
 80020c6:	e099      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4a53      	ldr	r2, [pc, #332]	; (8002218 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 80020cc:	601a      	str	r2, [r3, #0]
      break;
 80020ce:	e095      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4a52      	ldr	r2, [pc, #328]	; (800221c <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 80020d4:	601a      	str	r2, [r3, #0]
      break;
 80020d6:	e091      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4a51      	ldr	r2, [pc, #324]	; (8002220 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80020dc:	601a      	str	r2, [r3, #0]
      break;
 80020de:	e08d      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	2b1b      	cmp	r3, #27
 80020e4:	bf8c      	ite	hi
 80020e6:	2201      	movhi	r2, #1
 80020e8:	2200      	movls	r2, #0
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d11c      	bne.n	800212a <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 80020f0:	2201      	movs	r2, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80020fa:	2a00      	cmp	r2, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2201      	movne	r2, #1
 8002100:	2200      	moveq	r2, #0
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	2a00      	cmp	r2, #0
 8002106:	d10c      	bne.n	8002122 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8002108:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	4a41      	ldr	r2, [pc, #260]	; (8002224 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 800211e:	601a      	str	r2, [r3, #0]
          break;
 8002120:	e00a      	b.n	8002138 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4a3e      	ldr	r2, [pc, #248]	; (8002220 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002126:	601a      	str	r2, [r3, #0]
          break;
 8002128:	e006      	b.n	8002138 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	4a38      	ldr	r2, [pc, #224]	; (8002210 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800212e:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
 8002134:	60fb      	str	r3, [r7, #12]
          break;
 8002136:	bf00      	nop
      }
      break;
 8002138:	e060      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800213a:	7abb      	ldrb	r3, [r7, #10]
 800213c:	2b1b      	cmp	r3, #27
 800213e:	bf8c      	ite	hi
 8002140:	2201      	movhi	r2, #1
 8002142:	2200      	movls	r2, #0
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	2a00      	cmp	r2, #0
 8002148:	d11c      	bne.n	8002184 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 800214a:	2201      	movs	r2, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002154:	2a00      	cmp	r2, #0
 8002156:	bf14      	ite	ne
 8002158:	2201      	movne	r2, #1
 800215a:	2200      	moveq	r2, #0
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	2a00      	cmp	r2, #0
 8002160:	d10c      	bne.n	800217c <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8002162:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8002178:	601a      	str	r2, [r3, #0]
          break;
 800217a:	e00a      	b.n	8002192 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4a28      	ldr	r2, [pc, #160]	; (8002220 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002180:	601a      	str	r2, [r3, #0]
          break;
 8002182:	e006      	b.n	8002192 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4a22      	ldr	r2, [pc, #136]	; (8002210 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002188:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	60fb      	str	r3, [r7, #12]
          break;
 8002190:	bf00      	nop
      }
      break;
 8002192:	e033      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002194:	7abb      	ldrb	r3, [r7, #10]
 8002196:	2b1b      	cmp	r3, #27
 8002198:	bf8c      	ite	hi
 800219a:	2201      	movhi	r2, #1
 800219c:	2200      	movls	r2, #0
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d11c      	bne.n	80021de <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80021a4:	2201      	movs	r2, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80021ae:	2a00      	cmp	r2, #0
 80021b0:	bf14      	ite	ne
 80021b2:	2201      	movne	r2, #1
 80021b4:	2200      	moveq	r2, #0
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d10c      	bne.n	80021d6 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 80021bc:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 80021d2:	601a      	str	r2, [r3, #0]
          break;
 80021d4:	e00a      	b.n	80021ec <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	4a11      	ldr	r2, [pc, #68]	; (8002220 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80021da:	601a      	str	r2, [r3, #0]
          break;
 80021dc:	e006      	b.n	80021ec <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80021e2:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
 80021e8:	60fb      	str	r3, [r7, #12]
          break;
 80021ea:	bf00      	nop
      }
      break;
 80021ec:	e006      	b.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80021f2:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
 80021f8:	60fb      	str	r3, [r7, #12]
      break;
 80021fa:	bf00      	nop
  }

  return ret;
 80021fc:	68fb      	ldr	r3, [r7, #12]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	41480000 	.word	0x41480000
 800220c:	3fcccccd 	.word	0x3fcccccd
 8002210:	bf800000 	.word	0xbf800000
 8002214:	41c80000 	.word	0x41c80000
 8002218:	42480000 	.word	0x42480000
 800221c:	42c80000 	.word	0x42c80000
 8002220:	43480000 	.word	0x43480000
 8002224:	43c80000 	.word	0x43c80000
 8002228:	44480000 	.word	0x44480000
 800222c:	44c80000 	.word	0x44c80000

08002230 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	ed97 0a00 	vldr	s0, [r7]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f805 	bl	8002254 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800224a:	4603      	mov	r3, r0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002260:	460b      	mov	r3, r1
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4613      	mov	r3, r2
 8002266:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800226e:	2b01      	cmp	r3, #1
 8002270:	d109      	bne.n	8002286 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002272:	79ba      	ldrb	r2, [r7, #6]
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4619      	mov	r1, r3
 8002278:	ed97 0a02 	vldr	s0, [r7, #8]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f96b 	bl	8002558 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002282:	4603      	mov	r3, r0
 8002284:	e008      	b.n	8002298 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8002286:	79ba      	ldrb	r2, [r7, #6]
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4619      	mov	r1, r3
 800228c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fa7d 	bl	8002790 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8002296:	4603      	mov	r3, r0
  }
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3320      	adds	r3, #32
 80022b2:	f107 020b 	add.w	r2, r7, #11
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fdc5 	bl	8002e48 <lis2dw12_full_scale_get>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	e027      	b.n	800231a <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d81b      	bhi.n	8002308 <LIS2DW12_ACC_GetFullScale+0x68>
 80022d0:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <LIS2DW12_ACC_GetFullScale+0x38>)
 80022d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d6:	bf00      	nop
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080022f1 	.word	0x080022f1
 80022e0:	080022f9 	.word	0x080022f9
 80022e4:	08002301 	.word	0x08002301
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2202      	movs	r2, #2
 80022ec:	601a      	str	r2, [r3, #0]
      break;
 80022ee:	e013      	b.n	8002318 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2204      	movs	r2, #4
 80022f4:	601a      	str	r2, [r3, #0]
      break;
 80022f6:	e00f      	b.n	8002318 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2208      	movs	r2, #8
 80022fc:	601a      	str	r2, [r3, #0]
      break;
 80022fe:	e00b      	b.n	8002318 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2210      	movs	r2, #16
 8002304:	601a      	str	r2, [r3, #0]
      break;
 8002306:	e007      	b.n	8002318 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f04f 32ff 	mov.w	r2, #4294967295
 800230e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	60fb      	str	r3, [r7, #12]
      break;
 8002316:	bf00      	nop
  }

  return ret;
 8002318:	68fb      	ldr	r3, [r7, #12]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop

08002324 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b02      	cmp	r3, #2
 8002332:	dd0b      	ble.n	800234c <LIS2DW12_ACC_SetFullScale+0x28>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b04      	cmp	r3, #4
 8002338:	dd06      	ble.n	8002348 <LIS2DW12_ACC_SetFullScale+0x24>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b08      	cmp	r3, #8
 800233e:	dc01      	bgt.n	8002344 <LIS2DW12_ACC_SetFullScale+0x20>
 8002340:	2302      	movs	r3, #2
 8002342:	e004      	b.n	800234e <LIS2DW12_ACC_SetFullScale+0x2a>
 8002344:	2303      	movs	r3, #3
 8002346:	e002      	b.n	800234e <LIS2DW12_ACC_SetFullScale+0x2a>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <LIS2DW12_ACC_SetFullScale+0x2a>
 800234c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800234e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3320      	adds	r3, #32
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd4f 	bl	8002dfc <lis2dw12_full_scale_set>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
 8002368:	e000      	b.n	800236c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3320      	adds	r3, #32
 8002386:	f107 020b 	add.w	r2, r7, #11
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fb45 	bl	8002a1c <lis2dw12_power_mode_get>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
 800239c:	e068      	b.n	8002470 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3320      	adds	r3, #32
 80023a2:	f107 020c 	add.w	r2, r7, #12
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fd85 	bl	8002eb8 <lis2dw12_acceleration_raw_get>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	e05a      	b.n	8002470 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	2b1b      	cmp	r3, #27
 80023be:	bf8c      	ite	hi
 80023c0:	2201      	movhi	r2, #1
 80023c2:	2200      	movls	r2, #0
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	2a00      	cmp	r2, #0
 80023c8:	d14d      	bne.n	8002466 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80023ca:	2201      	movs	r2, #1
 80023cc:	409a      	lsls	r2, r3
 80023ce:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 80023d2:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf14      	ite	ne
 80023da:	2301      	movne	r3, #1
 80023dc:	2300      	moveq	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d124      	bne.n	800242e <LIS2DW12_ACC_GetAxesRaw+0xba>
 80023e4:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d037      	beq.n	8002466 <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80023f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	da00      	bge.n	8002400 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 80023fe:	330f      	adds	r3, #15
 8002400:	111b      	asrs	r3, r3, #4
 8002402:	b21a      	sxth	r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8002408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800240c:	2b00      	cmp	r3, #0
 800240e:	da00      	bge.n	8002412 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8002410:	330f      	adds	r3, #15
 8002412:	111b      	asrs	r3, r3, #4
 8002414:	b21a      	sxth	r2, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800241a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	da00      	bge.n	8002424 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8002422:	330f      	adds	r3, #15
 8002424:	111b      	asrs	r3, r3, #4
 8002426:	b21a      	sxth	r2, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	809a      	strh	r2, [r3, #4]
      break;
 800242c:	e01f      	b.n	800246e <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 800242e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	da00      	bge.n	8002438 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 8002436:	3303      	adds	r3, #3
 8002438:	109b      	asrs	r3, r3, #2
 800243a:	b21a      	sxth	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002440:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002444:	2b00      	cmp	r3, #0
 8002446:	da00      	bge.n	800244a <LIS2DW12_ACC_GetAxesRaw+0xd6>
 8002448:	3303      	adds	r3, #3
 800244a:	109b      	asrs	r3, r3, #2
 800244c:	b21a      	sxth	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002452:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da00      	bge.n	800245c <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800245a:	3303      	adds	r3, #3
 800245c:	109b      	asrs	r3, r3, #2
 800245e:	b21a      	sxth	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	809a      	strh	r2, [r3, #4]
      break;
 8002464:	e003      	b.n	800246e <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	617b      	str	r3, [r7, #20]
      break;
 800246c:	bf00      	nop
  }

  return ret;
 800246e:	697b      	ldr	r3, [r7, #20]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ff70 	bl	8002374 <LIS2DW12_ACC_GetAxesRaw>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e03c      	b.n	800251a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fc9c 	bl	8001de4 <LIS2DW12_ACC_GetSensitivity>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e030      	b.n	800251a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80024b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d0:	ee17 2a90 	vmov	r2, s15
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80024d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f0:	ee17 2a90 	vmov	r2, s15
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80024f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002504:	edd7 7a03 	vldr	s15, [r7, #12]
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002510:	ee17 2a90 	vmov	r2, s15
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	70fb      	strb	r3, [r7, #3]
 800252e:	4613      	mov	r3, r2
 8002530:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f103 0020 	add.w	r0, r3, #32
 8002538:	1cba      	adds	r2, r7, #2
 800253a:	78f9      	ldrb	r1, [r7, #3]
 800253c:	2301      	movs	r3, #1
 800253e:	f000 fa07 	bl	8002950 <lis2dw12_write_reg>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	e000      	b.n	8002550 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	ed87 0a02 	vstr	s0, [r7, #8]
 8002564:	460b      	mov	r3, r1
 8002566:	71fb      	strb	r3, [r7, #7]
 8002568:	4613      	mov	r3, r2
 800256a:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	3b01      	subs	r3, #1
 8002570:	2b03      	cmp	r3, #3
 8002572:	d80b      	bhi.n	800258c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002574:	a201      	add	r2, pc, #4	; (adr r2, 800257c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	080025b9 	.word	0x080025b9
 8002580:	080025e5 	.word	0x080025e5
 8002584:	08002611 	.word	0x08002611
 8002588:	0800263d 	.word	0x0800263d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 800258c:	79bb      	ldrb	r3, [r7, #6]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d002      	beq.n	8002598 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002592:	2304      	movs	r3, #4
 8002594:	75fb      	strb	r3, [r7, #23]
          break;
 8002596:	e002      	b.n	800259e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002598:	2314      	movs	r3, #20
 800259a:	75fb      	strb	r3, [r7, #23]
          break;
 800259c:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 800259e:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80025a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	d400      	bmi.n	80025b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80025b0:	e05a      	b.n	8002668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80025b2:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80025b4:	60bb      	str	r3, [r7, #8]
      break;
 80025b6:	e057      	b.n	8002668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80025b8:	79bb      	ldrb	r3, [r7, #6]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d002      	beq.n	80025c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80025be:	2303      	movs	r3, #3
 80025c0:	75fb      	strb	r3, [r7, #23]
          break;
 80025c2:	e002      	b.n	80025ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80025c4:	2313      	movs	r3, #19
 80025c6:	75fb      	strb	r3, [r7, #23]
          break;
 80025c8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80025ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ce:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002774 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80025d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	dc00      	bgt.n	80025de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80025dc:	e044      	b.n	8002668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80025de:	4b66      	ldr	r3, [pc, #408]	; (8002778 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80025e0:	60bb      	str	r3, [r7, #8]
      break;
 80025e2:	e041      	b.n	8002668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80025e4:	79bb      	ldrb	r3, [r7, #6]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d002      	beq.n	80025f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80025ea:	2302      	movs	r3, #2
 80025ec:	75fb      	strb	r3, [r7, #23]
          break;
 80025ee:	e002      	b.n	80025f6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80025f0:	2312      	movs	r3, #18
 80025f2:	75fb      	strb	r3, [r7, #23]
          break;
 80025f4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80025f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025fa:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002774 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80025fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	dc00      	bgt.n	800260a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002608:	e02e      	b.n	8002668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800260a:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800260c:	60bb      	str	r3, [r7, #8]
      break;
 800260e:	e02b      	b.n	8002668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002610:	79bb      	ldrb	r3, [r7, #6]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d002      	beq.n	800261c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
          break;
 800261a:	e002      	b.n	8002622 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800261c:	2311      	movs	r3, #17
 800261e:	75fb      	strb	r3, [r7, #23]
          break;
 8002620:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002622:	edd7 7a02 	vldr	s15, [r7, #8]
 8002626:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002774 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800262a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002632:	dc00      	bgt.n	8002636 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002634:	e018      	b.n	8002668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002636:	4b50      	ldr	r3, [pc, #320]	; (8002778 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002638:	60bb      	str	r3, [r7, #8]
      break;
 800263a:	e015      	b.n	8002668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 800263c:	79bb      	ldrb	r3, [r7, #6]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d002      	beq.n	8002648 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002642:	2300      	movs	r3, #0
 8002644:	75fb      	strb	r3, [r7, #23]
          break;
 8002646:	e002      	b.n	800264e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002648:	2310      	movs	r3, #16
 800264a:	75fb      	strb	r3, [r7, #23]
          break;
 800264c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800264e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002652:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002774 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265e:	dc00      	bgt.n	8002662 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002660:	e001      	b.n	8002666 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002662:	4b45      	ldr	r3, [pc, #276]	; (8002778 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002664:	60bb      	str	r3, [r7, #8]
      break;
 8002666:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002668:	edd7 7a02 	vldr	s15, [r7, #8]
 800266c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	d801      	bhi.n	800267e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800267a:	2301      	movs	r3, #1
 800267c:	e04d      	b.n	800271a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800267e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002682:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	d801      	bhi.n	8002694 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002690:	2302      	movs	r3, #2
 8002692:	e042      	b.n	800271a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002694:	edd7 7a02 	vldr	s15, [r7, #8]
 8002698:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800269c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	d801      	bhi.n	80026aa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80026a6:	2303      	movs	r3, #3
 80026a8:	e037      	b.n	800271a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80026aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ae:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002780 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80026b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d801      	bhi.n	80026c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80026bc:	2304      	movs	r3, #4
 80026be:	e02c      	b.n	800271a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80026c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002784 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80026c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d801      	bhi.n	80026d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80026d2:	2305      	movs	r3, #5
 80026d4:	e021      	b.n	800271a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80026d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026da:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002774 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80026de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e6:	d801      	bhi.n	80026ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80026e8:	2306      	movs	r3, #6
 80026ea:	e016      	b.n	800271a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80026ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002788 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 80026f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	d801      	bhi.n	8002702 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80026fe:	2307      	movs	r3, #7
 8002700:	e00b      	b.n	800271a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002702:	edd7 7a02 	vldr	s15, [r7, #8]
 8002706:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800278c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800270a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002712:	d801      	bhi.n	8002718 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002714:	2308      	movs	r3, #8
 8002716:	e000      	b.n	800271a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002718:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800271a:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3320      	adds	r3, #32
 8002720:	7dba      	ldrb	r2, [r7, #22]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fa33 	bl	8002b90 <lis2dw12_data_rate_set>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
 8002734:	e018      	b.n	8002768 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3320      	adds	r3, #32
 800273a:	7dfa      	ldrb	r2, [r7, #23]
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f91e 	bl	8002980 <lis2dw12_power_mode_set>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e00b      	b.n	8002768 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	79fa      	ldrb	r2, [r7, #7]
 800275a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	79ba      	ldrb	r2, [r7, #6]
 8002762:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	41480000 	.word	0x41480000
 8002774:	43480000 	.word	0x43480000
 8002778:	43480000 	.word	0x43480000
 800277c:	3fcccccd 	.word	0x3fcccccd
 8002780:	42480000 	.word	0x42480000
 8002784:	42c80000 	.word	0x42c80000
 8002788:	43c80000 	.word	0x43c80000
 800278c:	44480000 	.word	0x44480000

08002790 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	ed87 0a02 	vstr	s0, [r7, #8]
 800279c:	460b      	mov	r3, r1
 800279e:	71fb      	strb	r3, [r7, #7]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	79fa      	ldrb	r2, [r7, #7]
 80027a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	79ba      	ldrb	r2, [r7, #6]
 80027b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80027b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002878 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80027bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c4:	d801      	bhi.n	80027ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80027c8:	e04d      	b.n	8002866 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 80027ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ce:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80027d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	d801      	bhi.n	80027e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80027de:	e042      	b.n	8002866 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 80027e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027e4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80027e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f0:	d801      	bhi.n	80027f6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80027f4:	e037      	b.n	8002866 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 80027f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027fa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80027fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	d801      	bhi.n	800280c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800280a:	e02c      	b.n	8002866 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 800280c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002810:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002890 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	d801      	bhi.n	8002822 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002820:	e021      	b.n	8002866 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002822:	edd7 7a02 	vldr	s15, [r7, #8]
 8002826:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002898 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800282a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002832:	d801      	bhi.n	8002838 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002836:	e016      	b.n	8002866 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002838:	edd7 7a02 	vldr	s15, [r7, #8]
 800283c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80028a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	d801      	bhi.n	800284e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800284a:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 800284c:	e00b      	b.n	8002866 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 800284e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002852:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80028a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285e:	d801      	bhi.n	8002864 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002862:	e000      	b.n	8002866 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	3fcccccd 	.word	0x3fcccccd
 800287c:	3fcccccd 	.word	0x3fcccccd
 8002880:	41480000 	.word	0x41480000
 8002884:	41c80000 	.word	0x41c80000
 8002888:	42480000 	.word	0x42480000
 800288c:	42480000 	.word	0x42480000
 8002890:	42c80000 	.word	0x42c80000
 8002894:	42c80000 	.word	0x42c80000
 8002898:	43480000 	.word	0x43480000
 800289c:	43480000 	.word	0x43480000
 80028a0:	43c80000 	.word	0x43c80000
 80028a4:	43c80000 	.word	0x43c80000
 80028a8:	44480000 	.word	0x44480000
 80028ac:	44480000 	.word	0x44480000
 80028b0:	44c80000 	.word	0x44c80000

080028b4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	461a      	mov	r2, r3
 80028c0:	460b      	mov	r3, r1
 80028c2:	72fb      	strb	r3, [r7, #11]
 80028c4:	4613      	mov	r3, r2
 80028c6:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	695c      	ldr	r4, [r3, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	7b1b      	ldrb	r3, [r3, #12]
 80028d4:	b298      	uxth	r0, r3
 80028d6:	7afb      	ldrb	r3, [r7, #11]
 80028d8:	b299      	uxth	r1, r3
 80028da:	893b      	ldrh	r3, [r7, #8]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	47a0      	blx	r4
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}

080028ea <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80028ea:	b590      	push	{r4, r7, lr}
 80028ec:	b087      	sub	sp, #28
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	461a      	mov	r2, r3
 80028f6:	460b      	mov	r3, r1
 80028f8:	72fb      	strb	r3, [r7, #11]
 80028fa:	4613      	mov	r3, r2
 80028fc:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	691c      	ldr	r4, [r3, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	7b1b      	ldrb	r3, [r3, #12]
 800290a:	b298      	uxth	r0, r3
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	b299      	uxth	r1, r3
 8002910:	893b      	ldrh	r3, [r7, #8]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	47a0      	blx	r4
 8002916:	4603      	mov	r3, r0
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}

08002920 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	461a      	mov	r2, r3
 800292c:	460b      	mov	r3, r1
 800292e:	72fb      	strb	r3, [r7, #11]
 8002930:	4613      	mov	r3, r2
 8002932:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685c      	ldr	r4, [r3, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68d8      	ldr	r0, [r3, #12]
 800293c:	893b      	ldrh	r3, [r7, #8]
 800293e:	7af9      	ldrb	r1, [r7, #11]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	47a0      	blx	r4
 8002944:	6178      	str	r0, [r7, #20]

  return ret;
 8002946:	697b      	ldr	r3, [r7, #20]
}
 8002948:	4618      	mov	r0, r3
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd90      	pop	{r4, r7, pc}

08002950 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	461a      	mov	r2, r3
 800295c:	460b      	mov	r3, r1
 800295e:	72fb      	strb	r3, [r7, #11]
 8002960:	4613      	mov	r3, r2
 8002962:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681c      	ldr	r4, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68d8      	ldr	r0, [r3, #12]
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	7af9      	ldrb	r1, [r7, #11]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	47a0      	blx	r4
 8002974:	6178      	str	r0, [r7, #20]

  return ret;
 8002976:	697b      	ldr	r3, [r7, #20]
}
 8002978:	4618      	mov	r0, r3
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}

08002980 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800298c:	f107 0210 	add.w	r2, r7, #16
 8002990:	2301      	movs	r3, #1
 8002992:	2120      	movs	r1, #32
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ffc3 	bl	8002920 <lis2dw12_read_reg>
 800299a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d118      	bne.n	80029d4 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	7c3b      	ldrb	r3, [r7, #16]
 80029ae:	f362 0383 	bfi	r3, r2, #2, #2
 80029b2:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	7c3b      	ldrb	r3, [r7, #16]
 80029be:	f362 0301 	bfi	r3, r2, #0, #2
 80029c2:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80029c4:	f107 0210 	add.w	r2, r7, #16
 80029c8:	2301      	movs	r3, #1
 80029ca:	2120      	movs	r1, #32
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ffbf 	bl	8002950 <lis2dw12_write_reg>
 80029d2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d107      	bne.n	80029ea <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80029da:	f107 020c 	add.w	r2, r7, #12
 80029de:	2301      	movs	r3, #1
 80029e0:	2125      	movs	r1, #37	; 0x25
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ff9c 	bl	8002920 <lis2dw12_read_reg>
 80029e8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d110      	bne.n	8002a12 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	7b3b      	ldrb	r3, [r7, #12]
 80029fc:	f362 0382 	bfi	r3, r2, #2, #1
 8002a00:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002a02:	f107 020c 	add.w	r2, r7, #12
 8002a06:	2301      	movs	r3, #1
 8002a08:	2125      	movs	r1, #37	; 0x25
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffa0 	bl	8002950 <lis2dw12_write_reg>
 8002a10:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002a12:	697b      	ldr	r3, [r7, #20]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002a26:	f107 0210 	add.w	r2, r7, #16
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ff76 	bl	8002920 <lis2dw12_read_reg>
 8002a34:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 80a3 	bne.w	8002b84 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002a3e:	f107 020c 	add.w	r2, r7, #12
 8002a42:	2301      	movs	r3, #1
 8002a44:	2125      	movs	r1, #37	; 0x25
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff6a 	bl	8002920 <lis2dw12_read_reg>
 8002a4c:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002a4e:	7b3b      	ldrb	r3, [r7, #12]
 8002a50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	011a      	lsls	r2, r3, #4
 8002a58:	7c3b      	ldrb	r3, [r7, #16]
 8002a5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002a64:	7c3a      	ldrb	r2, [r7, #16]
 8002a66:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002a6a:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002a6c:	4413      	add	r3, r2
 8002a6e:	2b1b      	cmp	r3, #27
 8002a70:	f200 8084 	bhi.w	8002b7c <lis2dw12_power_mode_get+0x160>
 8002a74:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <lis2dw12_power_mode_get+0x60>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002b0d 	.word	0x08002b0d
 8002a80:	08002b05 	.word	0x08002b05
 8002a84:	08002afd 	.word	0x08002afd
 8002a88:	08002af5 	.word	0x08002af5
 8002a8c:	08002aed 	.word	0x08002aed
 8002a90:	08002b7d 	.word	0x08002b7d
 8002a94:	08002b7d 	.word	0x08002b7d
 8002a98:	08002b7d 	.word	0x08002b7d
 8002a9c:	08002b2d 	.word	0x08002b2d
 8002aa0:	08002b25 	.word	0x08002b25
 8002aa4:	08002b1d 	.word	0x08002b1d
 8002aa8:	08002b15 	.word	0x08002b15
 8002aac:	08002b7d 	.word	0x08002b7d
 8002ab0:	08002b7d 	.word	0x08002b7d
 8002ab4:	08002b7d 	.word	0x08002b7d
 8002ab8:	08002b7d 	.word	0x08002b7d
 8002abc:	08002b55 	.word	0x08002b55
 8002ac0:	08002b4d 	.word	0x08002b4d
 8002ac4:	08002b45 	.word	0x08002b45
 8002ac8:	08002b3d 	.word	0x08002b3d
 8002acc:	08002b35 	.word	0x08002b35
 8002ad0:	08002b7d 	.word	0x08002b7d
 8002ad4:	08002b7d 	.word	0x08002b7d
 8002ad8:	08002b7d 	.word	0x08002b7d
 8002adc:	08002b75 	.word	0x08002b75
 8002ae0:	08002b6d 	.word	0x08002b6d
 8002ae4:	08002b65 	.word	0x08002b65
 8002ae8:	08002b5d 	.word	0x08002b5d
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	701a      	strb	r2, [r3, #0]
        break;
 8002af2:	e047      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2203      	movs	r2, #3
 8002af8:	701a      	strb	r2, [r3, #0]
        break;
 8002afa:	e043      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2202      	movs	r2, #2
 8002b00:	701a      	strb	r2, [r3, #0]
        break;
 8002b02:	e03f      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
        break;
 8002b0a:	e03b      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
        break;
 8002b12:	e037      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	220b      	movs	r2, #11
 8002b18:	701a      	strb	r2, [r3, #0]
        break;
 8002b1a:	e033      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	220a      	movs	r2, #10
 8002b20:	701a      	strb	r2, [r3, #0]
        break;
 8002b22:	e02f      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2209      	movs	r2, #9
 8002b28:	701a      	strb	r2, [r3, #0]
        break;
 8002b2a:	e02b      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2208      	movs	r2, #8
 8002b30:	701a      	strb	r2, [r3, #0]
        break;
 8002b32:	e027      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2214      	movs	r2, #20
 8002b38:	701a      	strb	r2, [r3, #0]
        break;
 8002b3a:	e023      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2213      	movs	r2, #19
 8002b40:	701a      	strb	r2, [r3, #0]
        break;
 8002b42:	e01f      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2212      	movs	r2, #18
 8002b48:	701a      	strb	r2, [r3, #0]
        break;
 8002b4a:	e01b      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2211      	movs	r2, #17
 8002b50:	701a      	strb	r2, [r3, #0]
        break;
 8002b52:	e017      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2210      	movs	r2, #16
 8002b58:	701a      	strb	r2, [r3, #0]
        break;
 8002b5a:	e013      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	221b      	movs	r2, #27
 8002b60:	701a      	strb	r2, [r3, #0]
        break;
 8002b62:	e00f      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	221a      	movs	r2, #26
 8002b68:	701a      	strb	r2, [r3, #0]
        break;
 8002b6a:	e00b      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2219      	movs	r2, #25
 8002b70:	701a      	strb	r2, [r3, #0]
        break;
 8002b72:	e007      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2218      	movs	r2, #24
 8002b78:	701a      	strb	r2, [r3, #0]
        break;
 8002b7a:	e003      	b.n	8002b84 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	701a      	strb	r2, [r3, #0]
        break;
 8002b82:	bf00      	nop
    }
  }

  return ret;
 8002b84:	697b      	ldr	r3, [r7, #20]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop

08002b90 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002b9c:	f107 0210 	add.w	r2, r7, #16
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff febb 	bl	8002920 <lis2dw12_read_reg>
 8002baa:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	7c3b      	ldrb	r3, [r7, #16]
 8002bbc:	f362 1307 	bfi	r3, r2, #4, #4
 8002bc0:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002bc2:	f107 0210 	add.w	r2, r7, #16
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	2120      	movs	r1, #32
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fec0 	bl	8002950 <lis2dw12_write_reg>
 8002bd0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002bd8:	f107 020c 	add.w	r2, r7, #12
 8002bdc:	2301      	movs	r3, #1
 8002bde:	2122      	movs	r1, #34	; 0x22
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fe9d 	bl	8002920 <lis2dw12_read_reg>
 8002be6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d110      	bne.n	8002c10 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	7b3b      	ldrb	r3, [r7, #12]
 8002bfa:	f362 0301 	bfi	r3, r2, #0, #2
 8002bfe:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002c00:	f107 020c 	add.w	r2, r7, #12
 8002c04:	2301      	movs	r3, #1
 8002c06:	2122      	movs	r1, #34	; 0x22
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fea1 	bl	8002950 <lis2dw12_write_reg>
 8002c0e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002c10:	697b      	ldr	r3, [r7, #20]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002c26:	f107 0210 	add.w	r2, r7, #16
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fe76 	bl	8002920 <lis2dw12_read_reg>
 8002c34:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 80b3 	bne.w	8002da4 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002c3e:	f107 020c 	add.w	r2, r7, #12
 8002c42:	2301      	movs	r3, #1
 8002c44:	2122      	movs	r1, #34	; 0x22
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff fe6a 	bl	8002920 <lis2dw12_read_reg>
 8002c4c:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002c4e:	7b3b      	ldrb	r3, [r7, #12]
 8002c50:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	7c3a      	ldrb	r2, [r7, #16]
 8002c5a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	4413      	add	r3, r2
 8002c62:	2b32      	cmp	r3, #50	; 0x32
 8002c64:	f200 809a 	bhi.w	8002d9c <lis2dw12_data_rate_get+0x180>
 8002c68:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <lis2dw12_data_rate_get+0x54>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002d3d 	.word	0x08002d3d
 8002c74:	08002d45 	.word	0x08002d45
 8002c78:	08002d4d 	.word	0x08002d4d
 8002c7c:	08002d55 	.word	0x08002d55
 8002c80:	08002d5d 	.word	0x08002d5d
 8002c84:	08002d65 	.word	0x08002d65
 8002c88:	08002d6d 	.word	0x08002d6d
 8002c8c:	08002d75 	.word	0x08002d75
 8002c90:	08002d7d 	.word	0x08002d7d
 8002c94:	08002d85 	.word	0x08002d85
 8002c98:	08002d9d 	.word	0x08002d9d
 8002c9c:	08002d9d 	.word	0x08002d9d
 8002ca0:	08002d9d 	.word	0x08002d9d
 8002ca4:	08002d9d 	.word	0x08002d9d
 8002ca8:	08002d9d 	.word	0x08002d9d
 8002cac:	08002d9d 	.word	0x08002d9d
 8002cb0:	08002d9d 	.word	0x08002d9d
 8002cb4:	08002d9d 	.word	0x08002d9d
 8002cb8:	08002d95 	.word	0x08002d95
 8002cbc:	08002d9d 	.word	0x08002d9d
 8002cc0:	08002d9d 	.word	0x08002d9d
 8002cc4:	08002d9d 	.word	0x08002d9d
 8002cc8:	08002d9d 	.word	0x08002d9d
 8002ccc:	08002d9d 	.word	0x08002d9d
 8002cd0:	08002d9d 	.word	0x08002d9d
 8002cd4:	08002d9d 	.word	0x08002d9d
 8002cd8:	08002d9d 	.word	0x08002d9d
 8002cdc:	08002d9d 	.word	0x08002d9d
 8002ce0:	08002d9d 	.word	0x08002d9d
 8002ce4:	08002d9d 	.word	0x08002d9d
 8002ce8:	08002d9d 	.word	0x08002d9d
 8002cec:	08002d9d 	.word	0x08002d9d
 8002cf0:	08002d9d 	.word	0x08002d9d
 8002cf4:	08002d9d 	.word	0x08002d9d
 8002cf8:	08002d9d 	.word	0x08002d9d
 8002cfc:	08002d9d 	.word	0x08002d9d
 8002d00:	08002d9d 	.word	0x08002d9d
 8002d04:	08002d9d 	.word	0x08002d9d
 8002d08:	08002d9d 	.word	0x08002d9d
 8002d0c:	08002d9d 	.word	0x08002d9d
 8002d10:	08002d9d 	.word	0x08002d9d
 8002d14:	08002d9d 	.word	0x08002d9d
 8002d18:	08002d9d 	.word	0x08002d9d
 8002d1c:	08002d9d 	.word	0x08002d9d
 8002d20:	08002d9d 	.word	0x08002d9d
 8002d24:	08002d9d 	.word	0x08002d9d
 8002d28:	08002d9d 	.word	0x08002d9d
 8002d2c:	08002d9d 	.word	0x08002d9d
 8002d30:	08002d9d 	.word	0x08002d9d
 8002d34:	08002d9d 	.word	0x08002d9d
 8002d38:	08002d8d 	.word	0x08002d8d
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
        break;
 8002d42:	e02f      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
        break;
 8002d4a:	e02b      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	701a      	strb	r2, [r3, #0]
        break;
 8002d52:	e027      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2203      	movs	r2, #3
 8002d58:	701a      	strb	r2, [r3, #0]
        break;
 8002d5a:	e023      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	701a      	strb	r2, [r3, #0]
        break;
 8002d62:	e01f      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2205      	movs	r2, #5
 8002d68:	701a      	strb	r2, [r3, #0]
        break;
 8002d6a:	e01b      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2206      	movs	r2, #6
 8002d70:	701a      	strb	r2, [r3, #0]
        break;
 8002d72:	e017      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2207      	movs	r2, #7
 8002d78:	701a      	strb	r2, [r3, #0]
        break;
 8002d7a:	e013      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	701a      	strb	r2, [r3, #0]
        break;
 8002d82:	e00f      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2209      	movs	r2, #9
 8002d88:	701a      	strb	r2, [r3, #0]
        break;
 8002d8a:	e00b      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2232      	movs	r2, #50	; 0x32
 8002d90:	701a      	strb	r2, [r3, #0]
        break;
 8002d92:	e007      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2212      	movs	r2, #18
 8002d98:	701a      	strb	r2, [r3, #0]
        break;
 8002d9a:	e003      	b.n	8002da4 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
        break;
 8002da2:	bf00      	nop
    }
  }

  return ret;
 8002da4:	697b      	ldr	r3, [r7, #20]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop

08002db0 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002dbc:	f107 0208 	add.w	r2, r7, #8
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	2121      	movs	r1, #33	; 0x21
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff fdab 	bl	8002920 <lis2dw12_read_reg>
 8002dca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	7a3b      	ldrb	r3, [r7, #8]
 8002ddc:	f362 03c3 	bfi	r3, r2, #3, #1
 8002de0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002de2:	f107 0208 	add.w	r2, r7, #8
 8002de6:	2301      	movs	r3, #1
 8002de8:	2121      	movs	r1, #33	; 0x21
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff fdb0 	bl	8002950 <lis2dw12_write_reg>
 8002df0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002e08:	f107 0208 	add.w	r2, r7, #8
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	2125      	movs	r1, #37	; 0x25
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fd85 	bl	8002920 <lis2dw12_read_reg>
 8002e16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10f      	bne.n	8002e3e <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	7a3b      	ldrb	r3, [r7, #8]
 8002e28:	f362 1305 	bfi	r3, r2, #4, #2
 8002e2c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002e2e:	f107 0208 	add.w	r2, r7, #8
 8002e32:	2301      	movs	r3, #1
 8002e34:	2125      	movs	r1, #37	; 0x25
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fd8a 	bl	8002950 <lis2dw12_write_reg>
 8002e3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002e52:	f107 0208 	add.w	r2, r7, #8
 8002e56:	2301      	movs	r3, #1
 8002e58:	2125      	movs	r1, #37	; 0x25
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff fd60 	bl	8002920 <lis2dw12_read_reg>
 8002e60:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8002e62:	7a3b      	ldrb	r3, [r7, #8]
 8002e64:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d81a      	bhi.n	8002ea4 <lis2dw12_full_scale_get+0x5c>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <lis2dw12_full_scale_get+0x2c>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e8d 	.word	0x08002e8d
 8002e7c:	08002e95 	.word	0x08002e95
 8002e80:	08002e9d 	.word	0x08002e9d
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
      break;
 8002e8a:	e00f      	b.n	8002eac <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
      break;
 8002e92:	e00b      	b.n	8002eac <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
      break;
 8002e9a:	e007      	b.n	8002eac <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	701a      	strb	r2, [r3, #0]
      break;
 8002ea2:	e003      	b.n	8002eac <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
      break;
 8002eaa:	bf00      	nop
  }

  return ret;
 8002eac:	68fb      	ldr	r3, [r7, #12]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop

08002eb8 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002ec2:	f107 020c 	add.w	r2, r7, #12
 8002ec6:	2306      	movs	r3, #6
 8002ec8:	2128      	movs	r1, #40	; 0x28
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff fd28 	bl	8002920 <lis2dw12_read_reg>
 8002ed0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002ed2:	7b7b      	ldrb	r3, [r7, #13]
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	7b3b      	ldrb	r3, [r7, #12]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b21a      	sxth	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	3302      	adds	r3, #2
 8002efa:	b212      	sxth	r2, r2
 8002efc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	3302      	adds	r3, #2
 8002f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	7bbb      	ldrb	r3, [r7, #14]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	3302      	adds	r3, #2
 8002f18:	b212      	sxth	r2, r2
 8002f1a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002f1c:	7c7a      	ldrb	r2, [r7, #17]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	3304      	adds	r3, #4
 8002f22:	b212      	sxth	r2, r2
 8002f24:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	7c3b      	ldrb	r3, [r7, #16]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	b212      	sxth	r2, r2
 8002f42:	801a      	strh	r2, [r3, #0]

  return ret;
 8002f44:	697b      	ldr	r3, [r7, #20]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002f58:	2301      	movs	r3, #1
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	210f      	movs	r1, #15
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff fcde 	bl	8002920 <lis2dw12_read_reg>
 8002f64:	60f8      	str	r0, [r7, #12]

  return ret;
 8002f66:	68fb      	ldr	r3, [r7, #12]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002f7c:	f107 0208 	add.w	r2, r7, #8
 8002f80:	2301      	movs	r3, #1
 8002f82:	2121      	movs	r1, #33	; 0x21
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fccb 	bl	8002920 <lis2dw12_read_reg>
 8002f8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	7a3b      	ldrb	r3, [r7, #8]
 8002f9c:	f362 0382 	bfi	r3, r2, #2, #1
 8002fa0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002fa2:	f107 0208 	add.w	r2, r7, #8
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	2121      	movs	r1, #33	; 0x21
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fcd0 	bl	8002950 <lis2dw12_write_reg>
 8002fb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002fc8:	f107 0208 	add.w	r2, r7, #8
 8002fcc:	2301      	movs	r3, #1
 8002fce:	212e      	movs	r1, #46	; 0x2e
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fca5 	bl	8002920 <lis2dw12_read_reg>
 8002fd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	7a3b      	ldrb	r3, [r7, #8]
 8002fe8:	f362 1347 	bfi	r3, r2, #5, #3
 8002fec:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002fee:	f107 0208 	add.w	r2, r7, #8
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	212e      	movs	r1, #46	; 0x2e
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fcaa 	bl	8002950 <lis2dw12_write_reg>
 8002ffc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d103      	bne.n	8003024 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800301c:	f04f 33ff 	mov.w	r3, #4294967295
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e067      	b.n	80030f4 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	7b1a      	ldrb	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a28      	ldr	r2, [pc, #160]	; (8003100 <LIS2MDL_RegisterBusIO+0xf8>)
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <LIS2MDL_RegisterBusIO+0xfc>)
 8003066:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d103      	bne.n	8003086 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e036      	b.n	80030f4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4798      	blx	r3
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e02c      	b.n	80030f4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d028      	beq.n	80030f4 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d123      	bne.n	80030f4 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10d      	bne.n	80030d0 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80030b4:	2334      	movs	r3, #52	; 0x34
 80030b6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80030b8:	7afb      	ldrb	r3, [r7, #11]
 80030ba:	461a      	mov	r2, r3
 80030bc:	2162      	movs	r1, #98	; 0x62
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fb1b 	bl	80036fa <LIS2MDL_Write_Reg>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d014      	beq.n	80030f4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	e012      	b.n	80030f6 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d101      	bne.n	80030dc <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	e00c      	b.n	80030f6 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3320      	adds	r3, #32
 80030e0:	2101      	movs	r1, #1
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 ff70 	bl	8003fc8 <lis2mdl_i2c_interface_set>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	e000      	b.n	80030f6 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80030f4:	68fb      	ldr	r3, [r7, #12]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	08003751 	.word	0x08003751
 8003104:	080037d3 	.word	0x080037d3

08003108 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d144      	bne.n	80031a2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003118:	f107 0208 	add.w	r2, r7, #8
 800311c:	2301      	movs	r3, #1
 800311e:	2162      	movs	r1, #98	; 0x62
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fb97 	bl	8003854 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	e06c      	b.n	800320c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003132:	f107 020c 	add.w	r2, r7, #12
 8003136:	2301      	movs	r3, #1
 8003138:	2160      	movs	r1, #96	; 0x60
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fb8a 	bl	8003854 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	e05f      	b.n	800320c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800314c:	7a3b      	ldrb	r3, [r7, #8]
 800314e:	f043 0310 	orr.w	r3, r3, #16
 8003152:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003154:	7a3b      	ldrb	r3, [r7, #8]
 8003156:	f36f 0341 	bfc	r3, #1, #1
 800315a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800315c:	7b3b      	ldrb	r3, [r7, #12]
 800315e:	2202      	movs	r2, #2
 8003160:	f362 0301 	bfi	r3, r2, #0, #2
 8003164:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003166:	7b3b      	ldrb	r3, [r7, #12]
 8003168:	f043 030c 	orr.w	r3, r3, #12
 800316c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800316e:	f107 0208 	add.w	r2, r7, #8
 8003172:	2301      	movs	r3, #1
 8003174:	2162      	movs	r1, #98	; 0x62
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fcab 	bl	8003ad2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	e041      	b.n	800320c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003188:	f107 020c 	add.w	r2, r7, #12
 800318c:	2301      	movs	r3, #1
 800318e:	2160      	movs	r1, #96	; 0x60
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fc9e 	bl	8003ad2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d032      	beq.n	8003202 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
 80031a0:	e034      	b.n	800320c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3320      	adds	r3, #32
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fe65 	bl	8003e78 <lis2mdl_block_data_update_set>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	e028      	b.n	800320c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3320      	adds	r3, #32
 80031be:	2102      	movs	r1, #2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fdd4 	bl	8003d6e <lis2mdl_operating_mode_set>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	e01c      	b.n	800320c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3320      	adds	r3, #32
 80031d6:	2103      	movs	r1, #3
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fdee 	bl	8003dba <lis2mdl_data_rate_set>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80031e4:	f04f 33ff 	mov.w	r3, #4294967295
 80031e8:	e010      	b.n	800320c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3320      	adds	r3, #32
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fec3 	bl	8003f7c <lis2mdl_self_test_set>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e004      	b.n	800320c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f8a5 	bl	800336c <LIS2MDL_MAG_Disable>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	e004      	b.n	8003238 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d10b      	bne.n	800326a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003252:	2301      	movs	r3, #1
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	214f      	movs	r1, #79	; 0x4f
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fafb 	bl	8003854 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	e00c      	b.n	8003284 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3320      	adds	r3, #32
 800326e:	6839      	ldr	r1, [r7, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fe72 	bl	8003f5a <lis2mdl_device_id_get>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800327c:	f04f 33ff 	mov.w	r3, #4294967295
 8003280:	e000      	b.n	8003284 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2201      	movs	r2, #1
 80032a6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2232      	movs	r2, #50	; 0x32
 80032be:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <LIS2MDL_GetCapabilities+0x58>)
 80032d4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	42c80000 	.word	0x42c80000

080032e8 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e032      	b.n	8003364 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d11d      	bne.n	8003342 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003306:	f107 020c 	add.w	r2, r7, #12
 800330a:	2301      	movs	r3, #1
 800330c:	2160      	movs	r1, #96	; 0x60
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 faa0 	bl	8003854 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
 800331e:	e021      	b.n	8003364 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003320:	7b3b      	ldrb	r3, [r7, #12]
 8003322:	f36f 0301 	bfc	r3, #0, #2
 8003326:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003328:	f107 020c 	add.w	r2, r7, #12
 800332c:	2301      	movs	r3, #1
 800332e:	2160      	movs	r1, #96	; 0x60
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fbce 	bl	8003ad2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	e010      	b.n	8003364 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3320      	adds	r3, #32
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fd10 	bl	8003d6e <lis2mdl_operating_mode_set>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
 8003358:	e004      	b.n	8003364 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e033      	b.n	80033ea <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d11e      	bne.n	80033c8 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800338a:	f107 020c 	add.w	r2, r7, #12
 800338e:	2301      	movs	r3, #1
 8003390:	2160      	movs	r1, #96	; 0x60
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa5e 	bl	8003854 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800339e:	f04f 33ff 	mov.w	r3, #4294967295
 80033a2:	e022      	b.n	80033ea <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80033a4:	7b3b      	ldrb	r3, [r7, #12]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f362 0301 	bfi	r3, r2, #0, #2
 80033ac:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80033ae:	f107 020c 	add.w	r2, r7, #12
 80033b2:	2301      	movs	r3, #1
 80033b4:	2160      	movs	r1, #96	; 0x60
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fb8b 	bl	8003ad2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00e      	beq.n	80033e0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	e010      	b.n	80033ea <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3320      	adds	r3, #32
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fccd 	bl	8003d6e <lis2mdl_operating_mode_set>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	e004      	b.n	80033ea <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003402:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3320      	adds	r3, #32
 8003426:	f107 020b 	add.w	r2, r7, #11
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fceb 	bl	8003e08 <lis2mdl_data_rate_get>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295
 800343c:	e023      	b.n	8003486 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800343e:	7afb      	ldrb	r3, [r7, #11]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d81b      	bhi.n	800347c <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003444:	a201      	add	r2, pc, #4	; (adr r2, 800344c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	0800345d 	.word	0x0800345d
 8003450:	08003465 	.word	0x08003465
 8003454:	0800346d 	.word	0x0800346d
 8003458:	08003475 	.word	0x08003475
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003460:	601a      	str	r2, [r3, #0]
      break;
 8003462:	e00f      	b.n	8003484 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003468:	601a      	str	r2, [r3, #0]
      break;
 800346a:	e00b      	b.n	8003484 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003470:	601a      	str	r2, [r3, #0]
      break;
 8003472:	e007      	b.n	8003484 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4a09      	ldr	r2, [pc, #36]	; (800349c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003478:	601a      	str	r2, [r3, #0]
      break;
 800347a:	e003      	b.n	8003484 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 800347c:	f04f 33ff 	mov.w	r3, #4294967295
 8003480:	60fb      	str	r3, [r7, #12]
      break;
 8003482:	bf00      	nop
  }

  return ret;
 8003484:	68fb      	ldr	r3, [r7, #12]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	41200000 	.word	0x41200000
 8003494:	41a00000 	.word	0x41a00000
 8003498:	42480000 	.word	0x42480000
 800349c:	42c80000 	.word	0x42c80000

080034a0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80034ac:	edd7 7a00 	vldr	s15, [r7]
 80034b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034bc:	d801      	bhi.n	80034c2 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80034be:	2300      	movs	r3, #0
 80034c0:	e016      	b.n	80034f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80034c2:	edd7 7a00 	vldr	s15, [r7]
 80034c6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80034ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	d801      	bhi.n	80034d8 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e00b      	b.n	80034f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80034d8:	edd7 7a00 	vldr	s15, [r7]
 80034dc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003564 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80034e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e8:	d801      	bhi.n	80034ee <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e000      	b.n	80034f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80034ee:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80034f0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d121      	bne.n	800353e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80034fa:	f107 020c 	add.w	r2, r7, #12
 80034fe:	2301      	movs	r3, #1
 8003500:	2160      	movs	r1, #96	; 0x60
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f9a6 	bl	8003854 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	e022      	b.n	800355a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	b2da      	uxtb	r2, r3
 800351c:	7b3b      	ldrb	r3, [r7, #12]
 800351e:	f362 0383 	bfi	r3, r2, #2, #2
 8003522:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003524:	f107 020c 	add.w	r2, r7, #12
 8003528:	2301      	movs	r3, #1
 800352a:	2160      	movs	r1, #96	; 0x60
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fad0 	bl	8003ad2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00f      	beq.n	8003558 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
 800353c:	e00d      	b.n	800355a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3320      	adds	r3, #32
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fc37 	bl	8003dba <lis2mdl_data_rate_set>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	e000      	b.n	800355a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	42480000 	.word	0x42480000

08003568 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2232      	movs	r2, #50	; 0x32
 8003576:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3320      	adds	r3, #32
 80035ac:	f107 0208 	add.w	r2, r7, #8
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fc86 	bl	8003ec4 <lis2mdl_magnetic_raw_get>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e00c      	b.n	80035de <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80035c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80035cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80035d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b088      	sub	sp, #32
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d137      	bne.n	8003668 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80035f8:	f107 0218 	add.w	r2, r7, #24
 80035fc:	2306      	movs	r3, #6
 80035fe:	2168      	movs	r1, #104	; 0x68
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f927 	bl	8003854 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800360c:	f04f 33ff 	mov.w	r3, #4294967295
 8003610:	e06f      	b.n	80036f2 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003612:	7e7b      	ldrb	r3, [r7, #25]
 8003614:	b21b      	sxth	r3, r3
 8003616:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003618:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800361c:	b29b      	uxth	r3, r3
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	b29a      	uxth	r2, r3
 8003622:	7e3b      	ldrb	r3, [r7, #24]
 8003624:	b29b      	uxth	r3, r3
 8003626:	4413      	add	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	b21b      	sxth	r3, r3
 800362c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800362e:	7efb      	ldrb	r3, [r7, #27]
 8003630:	b21b      	sxth	r3, r3
 8003632:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003638:	b29b      	uxth	r3, r3
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	b29a      	uxth	r2, r3
 800363e:	7ebb      	ldrb	r3, [r7, #26]
 8003640:	b29b      	uxth	r3, r3
 8003642:	4413      	add	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	b21b      	sxth	r3, r3
 8003648:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 800364a:	7f7b      	ldrb	r3, [r7, #29]
 800364c:	b21b      	sxth	r3, r3
 800364e:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003650:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003654:	b29b      	uxth	r3, r3
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	b29a      	uxth	r2, r3
 800365a:	7f3b      	ldrb	r3, [r7, #28]
 800365c:	b29b      	uxth	r3, r3
 800365e:	4413      	add	r3, r2
 8003660:	b29b      	uxth	r3, r3
 8003662:	b21b      	sxth	r3, r3
 8003664:	82bb      	strh	r3, [r7, #20]
 8003666:	e00d      	b.n	8003684 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3320      	adds	r3, #32
 800366c:	f107 0210 	add.w	r2, r7, #16
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fc26 	bl	8003ec4 <lis2mdl_magnetic_raw_get>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e036      	b.n	80036f2 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003684:	f107 030c 	add.w	r3, r7, #12
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff feb1 	bl	80033f2 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003690:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800369c:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a8:	ee17 2a90 	vmov	r2, s15
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80036b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80036c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c8:	ee17 2a90 	vmov	r2, s15
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80036d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e8:	ee17 2a90 	vmov	r2, s15
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	70fb      	strb	r3, [r7, #3]
 8003706:	4613      	mov	r3, r2
 8003708:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d10b      	bne.n	800372a <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003712:	1cba      	adds	r2, r7, #2
 8003714:	78f9      	ldrb	r1, [r7, #3]
 8003716:	2301      	movs	r3, #1
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f9da 	bl	8003ad2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	e00e      	b.n	8003748 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f103 0020 	add.w	r0, r3, #32
 8003730:	1cba      	adds	r2, r7, #2
 8003732:	78f9      	ldrb	r1, [r7, #3]
 8003734:	2301      	movs	r3, #1
 8003736:	f000 fb02 	bl	8003d3e <lis2mdl_write_reg>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	e000      	b.n	8003748 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	461a      	mov	r2, r3
 800375c:	460b      	mov	r3, r1
 800375e:	72fb      	strb	r3, [r7, #11]
 8003760:	4613      	mov	r3, r2
 8003762:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10e      	bne.n	800378e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	695c      	ldr	r4, [r3, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	7b1b      	ldrb	r3, [r3, #12]
 8003778:	b298      	uxth	r0, r3
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003780:	b2db      	uxtb	r3, r3
 8003782:	b299      	uxth	r1, r3
 8003784:	893b      	ldrh	r3, [r7, #8]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	47a0      	blx	r4
 800378a:	4603      	mov	r3, r0
 800378c:	e01d      	b.n	80037ca <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d10b      	bne.n	80037ae <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	695c      	ldr	r4, [r3, #20]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	7b1b      	ldrb	r3, [r3, #12]
 800379e:	b298      	uxth	r0, r3
 80037a0:	7afb      	ldrb	r3, [r7, #11]
 80037a2:	b299      	uxth	r1, r3
 80037a4:	893b      	ldrh	r3, [r7, #8]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	47a0      	blx	r4
 80037aa:	4603      	mov	r3, r0
 80037ac:	e00d      	b.n	80037ca <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	695c      	ldr	r4, [r3, #20]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	7b1b      	ldrb	r3, [r3, #12]
 80037b6:	b298      	uxth	r0, r3
 80037b8:	7afb      	ldrb	r3, [r7, #11]
 80037ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	b299      	uxth	r1, r3
 80037c2:	893b      	ldrh	r3, [r7, #8]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	47a0      	blx	r4
 80037c8:	4603      	mov	r3, r0
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd90      	pop	{r4, r7, pc}

080037d2 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037d2:	b590      	push	{r4, r7, lr}
 80037d4:	b087      	sub	sp, #28
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	461a      	mov	r2, r3
 80037de:	460b      	mov	r3, r1
 80037e0:	72fb      	strb	r3, [r7, #11]
 80037e2:	4613      	mov	r3, r2
 80037e4:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10e      	bne.n	8003810 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	691c      	ldr	r4, [r3, #16]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	7b1b      	ldrb	r3, [r3, #12]
 80037fa:	b298      	uxth	r0, r3
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003802:	b2db      	uxtb	r3, r3
 8003804:	b299      	uxth	r1, r3
 8003806:	893b      	ldrh	r3, [r7, #8]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	47a0      	blx	r4
 800380c:	4603      	mov	r3, r0
 800380e:	e01d      	b.n	800384c <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d10b      	bne.n	8003830 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	691c      	ldr	r4, [r3, #16]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	7b1b      	ldrb	r3, [r3, #12]
 8003820:	b298      	uxth	r0, r3
 8003822:	7afb      	ldrb	r3, [r7, #11]
 8003824:	b299      	uxth	r1, r3
 8003826:	893b      	ldrh	r3, [r7, #8]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	47a0      	blx	r4
 800382c:	4603      	mov	r3, r0
 800382e:	e00d      	b.n	800384c <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	691c      	ldr	r4, [r3, #16]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	7b1b      	ldrb	r3, [r3, #12]
 8003838:	b298      	uxth	r0, r3
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003840:	b2db      	uxtb	r3, r3
 8003842:	b299      	uxth	r1, r3
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	47a0      	blx	r4
 800384a:	4603      	mov	r3, r0
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd90      	pop	{r4, r7, pc}

08003854 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	; 0x30
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	461a      	mov	r2, r3
 8003860:	460b      	mov	r3, r1
 8003862:	72fb      	strb	r3, [r7, #11]
 8003864:	4613      	mov	r3, r2
 8003866:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003874:	2300      	movs	r3, #0
 8003876:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 800387a:	233d      	movs	r3, #61	; 0x3d
 800387c:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800387e:	2315      	movs	r3, #21
 8003880:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003884:	2316      	movs	r3, #22
 8003886:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800388a:	2317      	movs	r3, #23
 800388c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003890:	2314      	movs	r3, #20
 8003892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003896:	2344      	movs	r3, #68	; 0x44
 8003898:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 800389a:	2302      	movs	r3, #2
 800389c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80038a0:	2339      	movs	r3, #57	; 0x39
 80038a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80038ac:	2329      	movs	r3, #41	; 0x29
 80038ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80038b2:	231e      	movs	r3, #30
 80038b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 80038be:	893b      	ldrh	r3, [r7, #8]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80038c4:	2310      	movs	r3, #16
 80038c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80038d0:	2340      	movs	r3, #64	; 0x40
 80038d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f103 0020 	add.w	r0, r3, #32
 80038dc:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80038e0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80038e4:	2301      	movs	r3, #1
 80038e6:	f000 fa2a 	bl	8003d3e <lis2mdl_write_reg>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	e0e9      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f103 0020 	add.w	r0, r3, #32
 80038fc:	f107 021f 	add.w	r2, r7, #31
 8003900:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003904:	2301      	movs	r3, #1
 8003906:	f000 fa1a 	bl	8003d3e <lis2mdl_write_reg>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	e0d9      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f103 0020 	add.w	r0, r3, #32
 800391c:	f107 020b 	add.w	r2, r7, #11
 8003920:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003924:	2301      	movs	r3, #1
 8003926:	f000 fa0a 	bl	8003d3e <lis2mdl_write_reg>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	e0c9      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f103 0020 	add.w	r0, r3, #32
 800393c:	f107 021d 	add.w	r2, r7, #29
 8003940:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003944:	2301      	movs	r3, #1
 8003946:	f000 f9fa 	bl	8003d3e <lis2mdl_write_reg>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e0b9      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f103 0020 	add.w	r0, r3, #32
 800395c:	f107 021e 	add.w	r2, r7, #30
 8003960:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003964:	2301      	movs	r3, #1
 8003966:	f000 f9ea 	bl	8003d3e <lis2mdl_write_reg>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
 8003974:	e0a9      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f103 0020 	add.w	r0, r3, #32
 800397c:	f107 0220 	add.w	r2, r7, #32
 8003980:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003984:	2301      	movs	r3, #1
 8003986:	f000 f9da 	bl	8003d3e <lis2mdl_write_reg>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	e099      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f103 0020 	add.w	r0, r3, #32
 800399c:	f107 021c 	add.w	r2, r7, #28
 80039a0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80039a4:	2301      	movs	r3, #1
 80039a6:	f000 f9b2 	bl	8003d0e <lis2mdl_read_reg>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295
 80039b4:	e089      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80039b6:	7f3b      	ldrb	r3, [r7, #28]
 80039b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80039bc:	429a      	cmp	r2, r3
 80039be:	d102      	bne.n	80039c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80039c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80039c4:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f103 0020 	add.w	r0, r3, #32
 80039cc:	f107 021c 	add.w	r2, r7, #28
 80039d0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80039d4:	2301      	movs	r3, #1
 80039d6:	f000 f9b2 	bl	8003d3e <lis2mdl_write_reg>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
 80039e4:	e071      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f103 0020 	add.w	r0, r3, #32
 80039ec:	f107 0214 	add.w	r2, r7, #20
 80039f0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80039f4:	2306      	movs	r3, #6
 80039f6:	f000 f98a 	bl	8003d0e <lis2mdl_read_reg>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	e061      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f103 0020 	add.w	r0, r3, #32
 8003a0c:	f107 021b 	add.w	r2, r7, #27
 8003a10:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003a14:	2301      	movs	r3, #1
 8003a16:	f000 f97a 	bl	8003d0e <lis2mdl_read_reg>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	e051      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003a26:	7efa      	ldrb	r2, [r7, #27]
 8003a28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d1e6      	bne.n	8003a06 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f103 0020 	add.w	r0, r3, #32
 8003a3e:	f107 021b 	add.w	r2, r7, #27
 8003a42:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003a46:	2301      	movs	r3, #1
 8003a48:	f000 f961 	bl	8003d0e <lis2mdl_read_reg>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	e038      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003a58:	7efa      	ldrb	r2, [r7, #27]
 8003a5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a5e:	4013      	ands	r3, r2
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d1e6      	bne.n	8003a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f103 0020 	add.w	r0, r3, #32
 8003a70:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003a74:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f000 f960 	bl	8003d3e <lis2mdl_write_reg>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
 8003a88:	e01f      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f103 0020 	add.w	r0, r3, #32
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	f000 f939 	bl	8003d0e <lis2mdl_read_reg>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa6:	e010      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f103 0020 	add.w	r0, r3, #32
 8003aae:	f107 0220 	add.w	r2, r7, #32
 8003ab2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f000 f941 	bl	8003d3e <lis2mdl_write_reg>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	e000      	b.n	8003aca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3730      	adds	r7, #48	; 0x30
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b08c      	sub	sp, #48	; 0x30
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	461a      	mov	r2, r3
 8003ade:	460b      	mov	r3, r1
 8003ae0:	72fb      	strb	r3, [r7, #11]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003aec:	2340      	movs	r3, #64	; 0x40
 8003aee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003af8:	233c      	movs	r3, #60	; 0x3c
 8003afa:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003afc:	2315      	movs	r3, #21
 8003afe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003b02:	2316      	movs	r3, #22
 8003b04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003b08:	2317      	movs	r3, #23
 8003b0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003b12:	2314      	movs	r3, #20
 8003b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003b18:	2344      	movs	r3, #68	; 0x44
 8003b1a:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003b1c:	2339      	movs	r3, #57	; 0x39
 8003b1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003b28:	2329      	movs	r3, #41	; 0x29
 8003b2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003b2e:	231e      	movs	r3, #30
 8003b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003b4c:	230e      	movs	r3, #14
 8003b4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f103 0020 	add.w	r0, r3, #32
 8003b58:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003b5c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003b60:	2301      	movs	r3, #1
 8003b62:	f000 f8ec 	bl	8003d3e <lis2mdl_write_reg>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b70:	e0c9      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f103 0020 	add.w	r0, r3, #32
 8003b78:	f107 021f 	add.w	r2, r7, #31
 8003b7c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003b80:	2301      	movs	r3, #1
 8003b82:	f000 f8dc 	bl	8003d3e <lis2mdl_write_reg>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	e0b9      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f103 0020 	add.w	r0, r3, #32
 8003b98:	f107 020b 	add.w	r2, r7, #11
 8003b9c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f000 f8cc 	bl	8003d3e <lis2mdl_write_reg>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	e0a9      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f103 0020 	add.w	r0, r3, #32
 8003bb8:	f107 021e 	add.w	r2, r7, #30
 8003bbc:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f000 f8bc 	bl	8003d3e <lis2mdl_write_reg>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd0:	e099      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f103 0020 	add.w	r0, r3, #32
 8003bd8:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003bdc:	2301      	movs	r3, #1
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	f000 f8ad 	bl	8003d3e <lis2mdl_write_reg>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	e08a      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f103 0020 	add.w	r0, r3, #32
 8003bf6:	f107 021d 	add.w	r2, r7, #29
 8003bfa:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f000 f89d 	bl	8003d3e <lis2mdl_write_reg>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	e07a      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f103 0020 	add.w	r0, r3, #32
 8003c16:	f107 0220 	add.w	r2, r7, #32
 8003c1a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f000 f88d 	bl	8003d3e <lis2mdl_write_reg>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	e06a      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f103 0020 	add.w	r0, r3, #32
 8003c36:	f107 021c 	add.w	r2, r7, #28
 8003c3a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f000 f865 	bl	8003d0e <lis2mdl_read_reg>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	e05a      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003c50:	7f3b      	ldrb	r3, [r7, #28]
 8003c52:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d102      	bne.n	8003c60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c5e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f103 0020 	add.w	r0, r3, #32
 8003c66:	f107 021c 	add.w	r2, r7, #28
 8003c6a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f000 f865 	bl	8003d3e <lis2mdl_write_reg>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	e042      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f103 0020 	add.w	r0, r3, #32
 8003c86:	f107 0214 	add.w	r2, r7, #20
 8003c8a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003c8e:	2306      	movs	r3, #6
 8003c90:	f000 f83d 	bl	8003d0e <lis2mdl_read_reg>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9e:	e032      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f103 0020 	add.w	r0, r3, #32
 8003ca6:	f107 021b 	add.w	r2, r7, #27
 8003caa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f000 f82d 	bl	8003d0e <lis2mdl_read_reg>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbe:	e022      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003cc0:	7efa      	ldrb	r2, [r7, #27]
 8003cc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d1e6      	bne.n	8003ca0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f103 0020 	add.w	r0, r3, #32
 8003cd8:	f107 021b 	add.w	r2, r7, #27
 8003cdc:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f000 f814 	bl	8003d0e <lis2mdl_read_reg>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	e009      	b.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003cf2:	7efa      	ldrb	r2, [r7, #27]
 8003cf4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1e6      	bne.n	8003cd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3730      	adds	r7, #48	; 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003d0e:	b590      	push	{r4, r7, lr}
 8003d10:	b087      	sub	sp, #28
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	72fb      	strb	r3, [r7, #11]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685c      	ldr	r4, [r3, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68d8      	ldr	r0, [r3, #12]
 8003d2a:	893b      	ldrh	r3, [r7, #8]
 8003d2c:	7af9      	ldrb	r1, [r7, #11]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	47a0      	blx	r4
 8003d32:	6178      	str	r0, [r7, #20]

  return ret;
 8003d34:	697b      	ldr	r3, [r7, #20]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd90      	pop	{r4, r7, pc}

08003d3e <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003d3e:	b590      	push	{r4, r7, lr}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	72fb      	strb	r3, [r7, #11]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681c      	ldr	r4, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	68d8      	ldr	r0, [r3, #12]
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	7af9      	ldrb	r1, [r7, #11]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	47a0      	blx	r4
 8003d62:	6178      	str	r0, [r7, #20]

  return ret;
 8003d64:	697b      	ldr	r3, [r7, #20]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd90      	pop	{r4, r7, pc}

08003d6e <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003d7a:	f107 0208 	add.w	r2, r7, #8
 8003d7e:	2301      	movs	r3, #1
 8003d80:	2160      	movs	r1, #96	; 0x60
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ffc3 	bl	8003d0e <lis2mdl_read_reg>
 8003d88:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10f      	bne.n	8003db0 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	7a3b      	ldrb	r3, [r7, #8]
 8003d9a:	f362 0301 	bfi	r3, r2, #0, #2
 8003d9e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003da0:	f107 0208 	add.w	r2, r7, #8
 8003da4:	2301      	movs	r3, #1
 8003da6:	2160      	movs	r1, #96	; 0x60
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ffc8 	bl	8003d3e <lis2mdl_write_reg>
 8003dae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003db0:	68fb      	ldr	r3, [r7, #12]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003dc6:	f107 0208 	add.w	r2, r7, #8
 8003dca:	2301      	movs	r3, #1
 8003dcc:	2160      	movs	r1, #96	; 0x60
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ff9d 	bl	8003d0e <lis2mdl_read_reg>
 8003dd4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10f      	bne.n	8003dfc <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	7a3b      	ldrb	r3, [r7, #8]
 8003de6:	f362 0383 	bfi	r3, r2, #2, #2
 8003dea:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003dec:	f107 0208 	add.w	r2, r7, #8
 8003df0:	2301      	movs	r3, #1
 8003df2:	2160      	movs	r1, #96	; 0x60
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ffa2 	bl	8003d3e <lis2mdl_write_reg>
 8003dfa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003e12:	f107 0208 	add.w	r2, r7, #8
 8003e16:	2301      	movs	r3, #1
 8003e18:	2160      	movs	r1, #96	; 0x60
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ff77 	bl	8003d0e <lis2mdl_read_reg>
 8003e20:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003e22:	7a3b      	ldrb	r3, [r7, #8]
 8003e24:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d81a      	bhi.n	8003e64 <lis2mdl_data_rate_get+0x5c>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <lis2mdl_data_rate_get+0x2c>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e4d 	.word	0x08003e4d
 8003e3c:	08003e55 	.word	0x08003e55
 8003e40:	08003e5d 	.word	0x08003e5d
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
      break;
 8003e4a:	e00f      	b.n	8003e6c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
      break;
 8003e52:	e00b      	b.n	8003e6c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2202      	movs	r2, #2
 8003e58:	701a      	strb	r2, [r3, #0]
      break;
 8003e5a:	e007      	b.n	8003e6c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	701a      	strb	r2, [r3, #0]
      break;
 8003e62:	e003      	b.n	8003e6c <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
      break;
 8003e6a:	bf00      	nop
  }

  return ret;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop

08003e78 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003e84:	f107 0208 	add.w	r2, r7, #8
 8003e88:	2301      	movs	r3, #1
 8003e8a:	2162      	movs	r1, #98	; 0x62
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff3e 	bl	8003d0e <lis2mdl_read_reg>
 8003e92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	7a3b      	ldrb	r3, [r7, #8]
 8003ea4:	f362 1304 	bfi	r3, r2, #4, #1
 8003ea8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003eaa:	f107 0208 	add.w	r2, r7, #8
 8003eae:	2301      	movs	r3, #1
 8003eb0:	2162      	movs	r1, #98	; 0x62
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ff43 	bl	8003d3e <lis2mdl_write_reg>
 8003eb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003ece:	f107 020c 	add.w	r2, r7, #12
 8003ed2:	2306      	movs	r3, #6
 8003ed4:	2168      	movs	r1, #104	; 0x68
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ff19 	bl	8003d0e <lis2mdl_read_reg>
 8003edc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003ede:	7b7b      	ldrb	r3, [r7, #13]
 8003ee0:	b21a      	sxth	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	7b3b      	ldrb	r3, [r7, #12]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b21a      	sxth	r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	3302      	adds	r3, #2
 8003f06:	b212      	sxth	r2, r2
 8003f08:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	7bbb      	ldrb	r3, [r7, #14]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	3302      	adds	r3, #2
 8003f24:	b212      	sxth	r2, r2
 8003f26:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003f28:	7c7a      	ldrb	r2, [r7, #17]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	b212      	sxth	r2, r2
 8003f30:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	3304      	adds	r3, #4
 8003f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	7c3b      	ldrb	r3, [r7, #16]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	b212      	sxth	r2, r2
 8003f4e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003f50:	697b      	ldr	r3, [r7, #20]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8003f64:	2301      	movs	r3, #1
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	214f      	movs	r1, #79	; 0x4f
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff fecf 	bl	8003d0e <lis2mdl_read_reg>
 8003f70:	60f8      	str	r0, [r7, #12]

  return ret;
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003f88:	f107 0208 	add.w	r2, r7, #8
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	2162      	movs	r1, #98	; 0x62
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff febc 	bl	8003d0e <lis2mdl_read_reg>
 8003f96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	7a3b      	ldrb	r3, [r7, #8]
 8003fa8:	f362 0341 	bfi	r3, r2, #1, #1
 8003fac:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003fae:	f107 0208 	add.w	r2, r7, #8
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	2162      	movs	r1, #98	; 0x62
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fec1 	bl	8003d3e <lis2mdl_write_reg>
 8003fbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003fd4:	f107 0208 	add.w	r2, r7, #8
 8003fd8:	2301      	movs	r3, #1
 8003fda:	2162      	movs	r1, #98	; 0x62
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fe96 	bl	8003d0e <lis2mdl_read_reg>
 8003fe2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	7a3b      	ldrb	r3, [r7, #8]
 8003ff4:	f362 1345 	bfi	r3, r2, #5, #1
 8003ff8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003ffa:	f107 0208 	add.w	r2, r7, #8
 8003ffe:	2301      	movs	r3, #1
 8004000:	2162      	movs	r1, #98	; 0x62
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff fe9b 	bl	8003d3e <lis2mdl_write_reg>
 8004008:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d103      	bne.n	8004030 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e051      	b.n	80040d4 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	7b1a      	ldrb	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <LSM6DSO_RegisterBusIO+0xcc>)
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <LSM6DSO_RegisterBusIO+0xd0>)
 8004072:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e020      	b.n	80040d4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4798      	blx	r3
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e016      	b.n	80040d4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d112      	bne.n	80040d4 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10d      	bne.n	80040d4 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80040b8:	230c      	movs	r3, #12
 80040ba:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80040bc:	7afb      	ldrb	r3, [r7, #11]
 80040be:	461a      	mov	r2, r3
 80040c0:	2112      	movs	r1, #18
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 ff5d 	bl	8004f82 <LSM6DSO_Write_Reg>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
 80040d2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80040d4:	68fb      	ldr	r3, [r7, #12]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	08005425 	.word	0x08005425
 80040e4:	0800545b 	.word	0x0800545b

080040e8 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d00b      	beq.n	8004110 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3320      	adds	r3, #32
 80040fc:	2180      	movs	r1, #128	; 0x80
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 fe8a 	bl	8005e18 <lsm6dso_i3c_disable_set>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
 800410e:	e060      	b.n	80041d2 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3320      	adds	r3, #32
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f001 fe58 	bl	8005dcc <lsm6dso_auto_increment_set>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	e054      	b.n	80041d2 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3320      	adds	r3, #32
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f001 fd62 	bl	8005bf8 <lsm6dso_block_data_update_set>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	e048      	b.n	80041d2 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3320      	adds	r3, #32
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f001 feae 	bl	8005ea8 <lsm6dso_fifo_mode_set>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	e03c      	b.n	80041d2 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2204      	movs	r2, #4
 800415c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3320      	adds	r3, #32
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fa20 	bl	80055ac <lsm6dso_xl_data_rate_set>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8004172:	f04f 33ff 	mov.w	r3, #4294967295
 8004176:	e02c      	b.n	80041d2 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3320      	adds	r3, #32
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f001 f9b6 	bl	80054f0 <lsm6dso_xl_full_scale_set>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	e020      	b.n	80041d2 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2204      	movs	r2, #4
 8004194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3320      	adds	r3, #32
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 fbce 	bl	8005940 <lsm6dso_gy_data_rate_set>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	e010      	b.n	80041d2 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3320      	adds	r3, #32
 80041b4:	2106      	movs	r1, #6
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 fb5a 	bl	8005870 <lsm6dso_gy_full_scale_set>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	e004      	b.n	80041d2 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f888 	bl	80042f8 <LSM6DSO_ACC_Disable>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295
 80041f2:	e015      	b.n	8004220 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fc2e 	bl	8004a56 <LSM6DSO_GYRO_Disable>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8004200:	f04f 33ff 	mov.w	r3, #4294967295
 8004204:	e00c      	b.n	8004220 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3320      	adds	r3, #32
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f001 fdb6 	bl	8005daa <lsm6dso_device_id_get>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
 8004248:	e000      	b.n	800424c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2200      	movs	r2, #0
 800426e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800427c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2210      	movs	r2, #16
 8004282:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	4a07      	ldr	r2, [pc, #28]	; (80042ac <LSM6DSO_GetCapabilities+0x58>)
 800428e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4a06      	ldr	r2, [pc, #24]	; (80042ac <LSM6DSO_GetCapabilities+0x58>)
 8004294:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	45d02000 	.word	0x45d02000

080042b0 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e014      	b.n	80042f0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f103 0220 	add.w	r2, r3, #32
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f001 f969 	bl	80055ac <lsm6dso_xl_data_rate_set>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
 80042e4:	e004      	b.n	80042f0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e01f      	b.n	800434e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f103 0220 	add.w	r2, r3, #32
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3333      	adds	r3, #51	; 0x33
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f001 fa40 	bl	80057a0 <lsm6dso_xl_data_rate_get>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295
 800432a:	e010      	b.n	800434e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3320      	adds	r3, #32
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f001 f93a 	bl	80055ac <lsm6dso_xl_data_rate_set>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800433e:	f04f 33ff 	mov.w	r3, #4294967295
 8004342:	e004      	b.n	800434e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3320      	adds	r3, #32
 800436a:	f107 020b 	add.w	r2, r7, #11
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f001 f8e3 	bl	800553c <lsm6dso_xl_full_scale_get>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	e023      	b.n	80043ca <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004382:	7afb      	ldrb	r3, [r7, #11]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d81b      	bhi.n	80043c0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043b1 	.word	0x080043b1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80043a4:	601a      	str	r2, [r3, #0]
      break;
 80043a6:	e00f      	b.n	80043c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80043ac:	601a      	str	r2, [r3, #0]
      break;
 80043ae:	e00b      	b.n	80043c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <LSM6DSO_ACC_GetSensitivity+0x84>)
 80043b4:	601a      	str	r2, [r3, #0]
      break;
 80043b6:	e007      	b.n	80043c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80043bc:	601a      	str	r2, [r3, #0]
      break;
 80043be:	e003      	b.n	80043c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	60fb      	str	r3, [r7, #12]
      break;
 80043c6:	bf00      	nop
  }

  return ret;
 80043c8:	68fb      	ldr	r3, [r7, #12]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	3d79db23 	.word	0x3d79db23
 80043d8:	3df9db23 	.word	0x3df9db23
 80043dc:	3e79db23 	.word	0x3e79db23
 80043e0:	3ef9db23 	.word	0x3ef9db23

080043e4 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3320      	adds	r3, #32
 80043f6:	f107 020b 	add.w	r2, r7, #11
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 f9cf 	bl	80057a0 <lsm6dso_xl_data_rate_get>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	e054      	b.n	80044b8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	2b0b      	cmp	r3, #11
 8004412:	d84c      	bhi.n	80044ae <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	0800444d 	.word	0x0800444d
 8004420:	0800445f 	.word	0x0800445f
 8004424:	08004467 	.word	0x08004467
 8004428:	0800446f 	.word	0x0800446f
 800442c:	08004477 	.word	0x08004477
 8004430:	0800447f 	.word	0x0800447f
 8004434:	08004487 	.word	0x08004487
 8004438:	0800448f 	.word	0x0800448f
 800443c:	08004497 	.word	0x08004497
 8004440:	0800449f 	.word	0x0800449f
 8004444:	080044a7 	.word	0x080044a7
 8004448:	08004457 	.word	0x08004457
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
      break;
 8004454:	e02f      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800445a:	601a      	str	r2, [r3, #0]
      break;
 800445c:	e02b      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8004462:	601a      	str	r2, [r3, #0]
      break;
 8004464:	e027      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800446a:	601a      	str	r2, [r3, #0]
      break;
 800446c:	e023      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	4a16      	ldr	r2, [pc, #88]	; (80044cc <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8004472:	601a      	str	r2, [r3, #0]
      break;
 8004474:	e01f      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800447a:	601a      	str	r2, [r3, #0]
      break;
 800447c:	e01b      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8004482:	601a      	str	r2, [r3, #0]
      break;
 8004484:	e017      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	4a13      	ldr	r2, [pc, #76]	; (80044d8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800448a:	601a      	str	r2, [r3, #0]
      break;
 800448c:	e013      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	4a12      	ldr	r2, [pc, #72]	; (80044dc <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8004492:	601a      	str	r2, [r3, #0]
      break;
 8004494:	e00f      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	4a11      	ldr	r2, [pc, #68]	; (80044e0 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800449a:	601a      	str	r2, [r3, #0]
      break;
 800449c:	e00b      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80044a2:	601a      	str	r2, [r3, #0]
      break;
 80044a4:	e007      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	4a0f      	ldr	r2, [pc, #60]	; (80044e8 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80044aa:	601a      	str	r2, [r3, #0]
      break;
 80044ac:	e003      	b.n	80044b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	60fb      	str	r3, [r7, #12]
      break;
 80044b4:	bf00      	nop
  }

  return ret;
 80044b6:	68fb      	ldr	r3, [r7, #12]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	3fcccccd 	.word	0x3fcccccd
 80044c4:	41480000 	.word	0x41480000
 80044c8:	41d00000 	.word	0x41d00000
 80044cc:	42500000 	.word	0x42500000
 80044d0:	42d00000 	.word	0x42d00000
 80044d4:	43500000 	.word	0x43500000
 80044d8:	43d08000 	.word	0x43d08000
 80044dc:	44504000 	.word	0x44504000
 80044e0:	44d06000 	.word	0x44d06000
 80044e4:	45505000 	.word	0x45505000
 80044e8:	45d05800 	.word	0x45d05800

080044ec <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80044f8:	2100      	movs	r1, #0
 80044fa:	ed97 0a00 	vldr	s0, [r7]
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f806 	bl	8004510 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8004504:	4603      	mov	r3, r0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	ed87 0a02 	vstr	s0, [r7, #8]
 800451c:	460b      	mov	r3, r1
 800451e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	2b02      	cmp	r3, #2
 800452c:	f000 80ea 	beq.w	8004704 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004530:	2b02      	cmp	r3, #2
 8004532:	f300 8163 	bgt.w	80047fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800453a:	2b01      	cmp	r3, #1
 800453c:	d074      	beq.n	8004628 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800453e:	e15d      	b.n	80047fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f103 0020 	add.w	r0, r3, #32
 8004546:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800454a:	2301      	movs	r3, #1
 800454c:	2114      	movs	r1, #20
 800454e:	f000 ff9f 	bl	8005490 <lsm6dso_read_reg>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	e16c      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800455e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004562:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d025      	beq.n	80045b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004572:	2b01      	cmp	r3, #1
 8004574:	d10b      	bne.n	800458e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3320      	adds	r3, #32
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f001 f815 	bl	80055ac <lsm6dso_xl_data_rate_set>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8004588:	f04f 33ff 	mov.w	r3, #4294967295
 800458c:	e154      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800458e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004592:	f36f 13c7 	bfc	r3, #7, #1
 8004596:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f103 0020 	add.w	r0, r3, #32
 80045a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80045a4:	2301      	movs	r3, #1
 80045a6:	2114      	movs	r1, #20
 80045a8:	f000 ff8a 	bl	80054c0 <lsm6dso_write_reg>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	e13f      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f103 0020 	add.w	r0, r3, #32
 80045be:	f107 0220 	add.w	r2, r7, #32
 80045c2:	2301      	movs	r3, #1
 80045c4:	2115      	movs	r1, #21
 80045c6:	f000 ff63 	bl	8005490 <lsm6dso_read_reg>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80045d0:	f04f 33ff 	mov.w	r3, #4294967295
 80045d4:	e130      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80045d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d014      	beq.n	800460e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80045e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045e8:	f36f 1304 	bfc	r3, #4, #1
 80045ec:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f103 0020 	add.w	r0, r3, #32
 80045f6:	f107 0220 	add.w	r2, r7, #32
 80045fa:	2301      	movs	r3, #1
 80045fc:	2115      	movs	r1, #21
 80045fe:	f000 ff5f 	bl	80054c0 <lsm6dso_write_reg>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8004608:	f04f 33ff 	mov.w	r3, #4294967295
 800460c:	e114      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800460e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004612:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461e:	d400      	bmi.n	8004622 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004620:	e0f0      	b.n	8004804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8004622:	4b87      	ldr	r3, [pc, #540]	; (8004840 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
 8004626:	e0ed      	b.n	8004804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f103 0020 	add.w	r0, r3, #32
 800462e:	f107 021c 	add.w	r2, r7, #28
 8004632:	2301      	movs	r3, #1
 8004634:	2114      	movs	r1, #20
 8004636:	f000 ff2b 	bl	8005490 <lsm6dso_read_reg>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004640:	f04f 33ff 	mov.w	r3, #4294967295
 8004644:	e0f8      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004646:	7f3b      	ldrb	r3, [r7, #28]
 8004648:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d023      	beq.n	800469a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004658:	2b01      	cmp	r3, #1
 800465a:	d10b      	bne.n	8004674 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3320      	adds	r3, #32
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f000 ffa2 	bl	80055ac <lsm6dso_xl_data_rate_set>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	e0e1      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004674:	7f3b      	ldrb	r3, [r7, #28]
 8004676:	f36f 13c7 	bfc	r3, #7, #1
 800467a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f103 0020 	add.w	r0, r3, #32
 8004682:	f107 021c 	add.w	r2, r7, #28
 8004686:	2301      	movs	r3, #1
 8004688:	2114      	movs	r1, #20
 800468a:	f000 ff19 	bl	80054c0 <lsm6dso_write_reg>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8004694:	f04f 33ff 	mov.w	r3, #4294967295
 8004698:	e0ce      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f103 0020 	add.w	r0, r3, #32
 80046a0:	f107 0218 	add.w	r2, r7, #24
 80046a4:	2301      	movs	r3, #1
 80046a6:	2115      	movs	r1, #21
 80046a8:	f000 fef2 	bl	8005490 <lsm6dso_read_reg>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	e0bf      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80046b8:	7e3b      	ldrb	r3, [r7, #24]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d112      	bne.n	80046ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80046c4:	7e3b      	ldrb	r3, [r7, #24]
 80046c6:	f043 0310 	orr.w	r3, r3, #16
 80046ca:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f103 0020 	add.w	r0, r3, #32
 80046d2:	f107 0218 	add.w	r2, r7, #24
 80046d6:	2301      	movs	r3, #1
 80046d8:	2115      	movs	r1, #21
 80046da:	f000 fef1 	bl	80054c0 <lsm6dso_write_reg>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80046e4:	f04f 33ff 	mov.w	r3, #4294967295
 80046e8:	e0a6      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80046ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80046ee:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004844 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80046f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fa:	dc00      	bgt.n	80046fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80046fc:	e082      	b.n	8004804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80046fe:	4b52      	ldr	r3, [pc, #328]	; (8004848 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28
 8004702:	e07f      	b.n	8004804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f103 0020 	add.w	r0, r3, #32
 800470a:	f107 0210 	add.w	r2, r7, #16
 800470e:	2301      	movs	r3, #1
 8004710:	2115      	movs	r1, #21
 8004712:	f000 febd 	bl	8005490 <lsm6dso_read_reg>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 800471c:	f04f 33ff 	mov.w	r3, #4294967295
 8004720:	e08a      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004722:	7c3b      	ldrb	r3, [r7, #16]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d012      	beq.n	8004754 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 800472e:	7c3b      	ldrb	r3, [r7, #16]
 8004730:	f36f 1304 	bfc	r3, #4, #1
 8004734:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f103 0020 	add.w	r0, r3, #32
 800473c:	f107 0210 	add.w	r2, r7, #16
 8004740:	2301      	movs	r3, #1
 8004742:	2115      	movs	r1, #21
 8004744:	f000 febc 	bl	80054c0 <lsm6dso_write_reg>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 800474e:	f04f 33ff 	mov.w	r3, #4294967295
 8004752:	e071      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800475a:	2b01      	cmp	r3, #1
 800475c:	d108      	bne.n	8004770 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f979 	bl	8004a56 <LSM6DSO_GYRO_Disable>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
 800476e:	e063      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f103 0020 	add.w	r0, r3, #32
 8004776:	f107 0214 	add.w	r2, r7, #20
 800477a:	2301      	movs	r3, #1
 800477c:	2114      	movs	r1, #20
 800477e:	f000 fe87 	bl	8005490 <lsm6dso_read_reg>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8004788:	f04f 33ff 	mov.w	r3, #4294967295
 800478c:	e054      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800478e:	7d3b      	ldrb	r3, [r7, #20]
 8004790:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d123      	bne.n	80047e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d10b      	bne.n	80047bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3320      	adds	r3, #32
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fefe 	bl	80055ac <lsm6dso_xl_data_rate_set>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	e03d      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80047bc:	7d3b      	ldrb	r3, [r7, #20]
 80047be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c2:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f103 0020 	add.w	r0, r3, #32
 80047ca:	f107 0214 	add.w	r2, r7, #20
 80047ce:	2301      	movs	r3, #1
 80047d0:	2114      	movs	r1, #20
 80047d2:	f000 fe75 	bl	80054c0 <lsm6dso_write_reg>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80047dc:	f04f 33ff 	mov.w	r3, #4294967295
 80047e0:	e02a      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80047e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80047e6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004844 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80047ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f2:	dc00      	bgt.n	80047f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80047f4:	e006      	b.n	8004804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fa:	e003      	b.n	8004804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004802:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d102      	bne.n	8004812 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 800480c:	f04f 33ff 	mov.w	r3, #4294967295
 8004810:	e012      	b.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004818:	2b01      	cmp	r3, #1
 800481a:	d106      	bne.n	800482a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800481c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fbc9 	bl	8004fb8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8004826:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004828:	e005      	b.n	8004836 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800482a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fc5a 	bl	80050e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004834:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004838:	4618      	mov	r0, r3
 800483a:	3730      	adds	r7, #48	; 0x30
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	41480000 	.word	0x41480000
 8004844:	43500000 	.word	0x43500000
 8004848:	43500000 	.word	0x43500000

0800484c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3320      	adds	r3, #32
 800485e:	f107 020b 	add.w	r2, r7, #11
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fe69 	bl	800553c <lsm6dso_xl_full_scale_get>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004870:	f04f 33ff 	mov.w	r3, #4294967295
 8004874:	e023      	b.n	80048be <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004876:	7afb      	ldrb	r3, [r7, #11]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d81b      	bhi.n	80048b4 <LSM6DSO_ACC_GetFullScale+0x68>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <LSM6DSO_ACC_GetFullScale+0x38>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004895 	.word	0x08004895
 8004888:	080048ad 	.word	0x080048ad
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048a5 	.word	0x080048a5
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2202      	movs	r2, #2
 8004898:	601a      	str	r2, [r3, #0]
      break;
 800489a:	e00f      	b.n	80048bc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2204      	movs	r2, #4
 80048a0:	601a      	str	r2, [r3, #0]
      break;
 80048a2:	e00b      	b.n	80048bc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2208      	movs	r2, #8
 80048a8:	601a      	str	r2, [r3, #0]
      break;
 80048aa:	e007      	b.n	80048bc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2210      	movs	r2, #16
 80048b0:	601a      	str	r2, [r3, #0]
      break;
 80048b2:	e003      	b.n	80048bc <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80048b4:	f04f 33ff 	mov.w	r3, #4294967295
 80048b8:	60fb      	str	r3, [r7, #12]
      break;
 80048ba:	bf00      	nop
  }

  return ret;
 80048bc:	68fb      	ldr	r3, [r7, #12]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop

080048c8 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	dd0b      	ble.n	80048f0 <LSM6DSO_ACC_SetFullScale+0x28>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	dd06      	ble.n	80048ec <LSM6DSO_ACC_SetFullScale+0x24>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	dc01      	bgt.n	80048e8 <LSM6DSO_ACC_SetFullScale+0x20>
 80048e4:	2303      	movs	r3, #3
 80048e6:	e004      	b.n	80048f2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e002      	b.n	80048f2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e000      	b.n	80048f2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80048f0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80048f2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3320      	adds	r3, #32
 80048f8:	7bfa      	ldrb	r2, [r7, #15]
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fdf7 	bl	80054f0 <lsm6dso_xl_full_scale_set>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8004908:	f04f 33ff 	mov.w	r3, #4294967295
 800490c:	e000      	b.n	8004910 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3320      	adds	r3, #32
 8004926:	f107 0208 	add.w	r2, r7, #8
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f001 f9d4 	bl	8005cda <lsm6dso_acceleration_raw_get>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004938:	f04f 33ff 	mov.w	r3, #4294967295
 800493c:	e00c      	b.n	8004958 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800493e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004946:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800494e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3320      	adds	r3, #32
 8004974:	f107 0210 	add.w	r2, r7, #16
 8004978:	4611      	mov	r1, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f001 f9ad 	bl	8005cda <lsm6dso_acceleration_raw_get>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e03c      	b.n	8004a06 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fce0 	bl	8004358 <LSM6DSO_ACC_GetSensitivity>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	e030      	b.n	8004a06 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80049a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049a8:	ee07 3a90 	vmov	s15, r3
 80049ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049bc:	ee17 2a90 	vmov	r2, s15
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80049c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049dc:	ee17 2a90 	vmov	r2, s15
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80049e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049fc:	ee17 2a90 	vmov	r2, s15
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e014      	b.n	8004a4e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f103 0220 	add.w	r2, r3, #32
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f000 ff84 	bl	8005940 <lsm6dso_gy_data_rate_set>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a42:	e004      	b.n	8004a4e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e01f      	b.n	8004aac <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f103 0220 	add.w	r2, r3, #32
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3334      	adds	r3, #52	; 0x34
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f001 f85b 	bl	8005b34 <lsm6dso_gy_data_rate_get>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004a84:	f04f 33ff 	mov.w	r3, #4294967295
 8004a88:	e010      	b.n	8004aac <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3320      	adds	r3, #32
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 ff55 	bl	8005940 <lsm6dso_gy_data_rate_set>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa0:	e004      	b.n	8004aac <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3320      	adds	r3, #32
 8004ac6:	f107 020b 	add.w	r2, r7, #11
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fef5 	bl	80058bc <lsm6dso_gy_full_scale_get>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	e02d      	b.n	8004b3a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004ade:	7afb      	ldrb	r3, [r7, #11]
 8004ae0:	2b06      	cmp	r3, #6
 8004ae2:	d825      	bhi.n	8004b30 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b11 	.word	0x08004b11
 8004af0:	08004b09 	.word	0x08004b09
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004b31 	.word	0x08004b31
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b31 	.word	0x08004b31
 8004b04:	08004b29 	.word	0x08004b29
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004b0c:	601a      	str	r2, [r3, #0]
      break;
 8004b0e:	e013      	b.n	8004b38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004b14:	601a      	str	r2, [r3, #0]
      break;
 8004b16:	e00f      	b.n	8004b38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004b1c:	601a      	str	r2, [r3, #0]
      break;
 8004b1e:	e00b      	b.n	8004b38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4a0b      	ldr	r2, [pc, #44]	; (8004b50 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004b24:	601a      	str	r2, [r3, #0]
      break;
 8004b26:	e007      	b.n	8004b38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004b2c:	601a      	str	r2, [r3, #0]
      break;
 8004b2e:	e003      	b.n	8004b38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
 8004b34:	60fb      	str	r3, [r7, #12]
      break;
 8004b36:	bf00      	nop
  }

  return ret;
 8004b38:	68fb      	ldr	r3, [r7, #12]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	408c0000 	.word	0x408c0000
 8004b48:	410c0000 	.word	0x410c0000
 8004b4c:	418c0000 	.word	0x418c0000
 8004b50:	420c0000 	.word	0x420c0000
 8004b54:	428c0000 	.word	0x428c0000

08004b58 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3320      	adds	r3, #32
 8004b6a:	f107 020b 	add.w	r2, r7, #11
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 ffdf 	bl	8005b34 <lsm6dso_gy_data_rate_get>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b80:	e04e      	b.n	8004c20 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004b82:	7afb      	ldrb	r3, [r7, #11]
 8004b84:	2b0a      	cmp	r3, #10
 8004b86:	d846      	bhi.n	8004c16 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bbd 	.word	0x08004bbd
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bcf 	.word	0x08004bcf
 8004b9c:	08004bd7 	.word	0x08004bd7
 8004ba0:	08004bdf 	.word	0x08004bdf
 8004ba4:	08004be7 	.word	0x08004be7
 8004ba8:	08004bef 	.word	0x08004bef
 8004bac:	08004bf7 	.word	0x08004bf7
 8004bb0:	08004bff 	.word	0x08004bff
 8004bb4:	08004c07 	.word	0x08004c07
 8004bb8:	08004c0f 	.word	0x08004c0f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
      break;
 8004bc4:	e02b      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004bca:	601a      	str	r2, [r3, #0]
      break;
 8004bcc:	e027      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004bd2:	601a      	str	r2, [r3, #0]
      break;
 8004bd4:	e023      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004bda:	601a      	str	r2, [r3, #0]
      break;
 8004bdc:	e01f      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004be2:	601a      	str	r2, [r3, #0]
      break;
 8004be4:	e01b      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8004bea:	601a      	str	r2, [r3, #0]
      break;
 8004bec:	e017      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004bf2:	601a      	str	r2, [r3, #0]
      break;
 8004bf4:	e013      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8004bfa:	601a      	str	r2, [r3, #0]
      break;
 8004bfc:	e00f      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	4a10      	ldr	r2, [pc, #64]	; (8004c44 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004c02:	601a      	str	r2, [r3, #0]
      break;
 8004c04:	e00b      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	4a0f      	ldr	r2, [pc, #60]	; (8004c48 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8004c0a:	601a      	str	r2, [r3, #0]
      break;
 8004c0c:	e007      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004c12:	601a      	str	r2, [r3, #0]
      break;
 8004c14:	e003      	b.n	8004c1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	60fb      	str	r3, [r7, #12]
      break;
 8004c1c:	bf00      	nop
  }

  return ret;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	41480000 	.word	0x41480000
 8004c2c:	41d00000 	.word	0x41d00000
 8004c30:	42500000 	.word	0x42500000
 8004c34:	42d00000 	.word	0x42d00000
 8004c38:	43500000 	.word	0x43500000
 8004c3c:	43d08000 	.word	0x43d08000
 8004c40:	44504000 	.word	0x44504000
 8004c44:	44d06000 	.word	0x44d06000
 8004c48:	45505000 	.word	0x45505000
 8004c4c:	45d05800 	.word	0x45d05800

08004c50 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	ed97 0a00 	vldr	s0, [r7]
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f806 	bl	8004c74 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004c68:	4603      	mov	r3, r0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c80:	460b      	mov	r3, r1
 8004c82:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d028      	beq.n	8004ce8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004c96:	e05c      	b.n	8004d52 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f103 0020 	add.w	r0, r3, #32
 8004c9e:	f107 0214 	add.w	r2, r7, #20
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	2116      	movs	r1, #22
 8004ca6:	f000 fbf3 	bl	8005490 <lsm6dso_read_reg>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb4:	e06c      	b.n	8004d90 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004cb6:	7d3b      	ldrb	r3, [r7, #20]
 8004cb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04b      	beq.n	8004d5a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004cc2:	7d3b      	ldrb	r3, [r7, #20]
 8004cc4:	f36f 13c7 	bfc	r3, #7, #1
 8004cc8:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f103 0020 	add.w	r0, r3, #32
 8004cd0:	f107 0214 	add.w	r2, r7, #20
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	2116      	movs	r1, #22
 8004cd8:	f000 fbf2 	bl	80054c0 <lsm6dso_write_reg>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d03b      	beq.n	8004d5a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8004ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce6:	e053      	b.n	8004d90 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f103 0020 	add.w	r0, r3, #32
 8004cee:	f107 0210 	add.w	r2, r7, #16
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	2116      	movs	r1, #22
 8004cf6:	f000 fbcb 	bl	8005490 <lsm6dso_read_reg>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004d00:	f04f 33ff 	mov.w	r3, #4294967295
 8004d04:	e044      	b.n	8004d90 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8004d06:	7c3b      	ldrb	r3, [r7, #16]
 8004d08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d112      	bne.n	8004d38 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004d12:	7c3b      	ldrb	r3, [r7, #16]
 8004d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d18:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f103 0020 	add.w	r0, r3, #32
 8004d20:	f107 0210 	add.w	r2, r7, #16
 8004d24:	2301      	movs	r3, #1
 8004d26:	2116      	movs	r1, #22
 8004d28:	f000 fbca 	bl	80054c0 <lsm6dso_write_reg>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
 8004d36:	e02b      	b.n	8004d90 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004d38:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d3c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004d98 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d48:	dc00      	bgt.n	8004d4c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8004d4a:	e007      	b.n	8004d5c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004d4c:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e004      	b.n	8004d5c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004d52:	f04f 33ff 	mov.w	r3, #4294967295
 8004d56:	61fb      	str	r3, [r7, #28]
      break;
 8004d58:	e000      	b.n	8004d5c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8004d5a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d102      	bne.n	8004d6a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004d64:	f04f 33ff 	mov.w	r3, #4294967295
 8004d68:	e012      	b.n	8004d90 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d106      	bne.n	8004d82 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004d74:	ed97 0a06 	vldr	s0, [r7, #24]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fa45 	bl	8005208 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004d7e:	61f8      	str	r0, [r7, #28]
 8004d80:	e005      	b.n	8004d8e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004d82:	ed97 0a06 	vldr	s0, [r7, #24]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 faca 	bl	8005320 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004d8c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	43500000 	.word	0x43500000
 8004d9c:	43500000 	.word	0x43500000

08004da0 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3320      	adds	r3, #32
 8004db2:	f107 020b 	add.w	r2, r7, #11
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fd7f 	bl	80058bc <lsm6dso_gy_full_scale_get>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc8:	e030      	b.n	8004e2c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004dca:	7afb      	ldrb	r3, [r7, #11]
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d828      	bhi.n	8004e22 <LSM6DSO_GYRO_GetFullScale+0x82>
 8004dd0:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004df5 	.word	0x08004df5
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e23 	.word	0x08004e23
 8004de8:	08004e0f 	.word	0x08004e0f
 8004dec:	08004e23 	.word	0x08004e23
 8004df0:	08004e19 	.word	0x08004e19
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	227d      	movs	r2, #125	; 0x7d
 8004df8:	601a      	str	r2, [r3, #0]
      break;
 8004dfa:	e016      	b.n	8004e2a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	22fa      	movs	r2, #250	; 0xfa
 8004e00:	601a      	str	r2, [r3, #0]
      break;
 8004e02:	e012      	b.n	8004e2a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e0a:	601a      	str	r2, [r3, #0]
      break;
 8004e0c:	e00d      	b.n	8004e2a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e14:	601a      	str	r2, [r3, #0]
      break;
 8004e16:	e008      	b.n	8004e2a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004e1e:	601a      	str	r2, [r3, #0]
      break;
 8004e20:	e003      	b.n	8004e2a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295
 8004e26:	60fb      	str	r3, [r7, #12]
      break;
 8004e28:	bf00      	nop
  }

  return ret;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b7d      	cmp	r3, #125	; 0x7d
 8004e42:	dd12      	ble.n	8004e6a <LSM6DSO_GYRO_SetFullScale+0x36>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2bfa      	cmp	r3, #250	; 0xfa
 8004e48:	dd0d      	ble.n	8004e66 <LSM6DSO_GYRO_SetFullScale+0x32>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e50:	dd07      	ble.n	8004e62 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e58:	dc01      	bgt.n	8004e5e <LSM6DSO_GYRO_SetFullScale+0x2a>
 8004e5a:	2304      	movs	r3, #4
 8004e5c:	e006      	b.n	8004e6c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004e5e:	2306      	movs	r3, #6
 8004e60:	e004      	b.n	8004e6c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e002      	b.n	8004e6c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004e6a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8004e6c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3320      	adds	r3, #32
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	4611      	mov	r1, r2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fcfa 	bl	8005870 <lsm6dso_gy_full_scale_set>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8004e82:	f04f 33ff 	mov.w	r3, #4294967295
 8004e86:	e000      	b.n	8004e8a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3320      	adds	r3, #32
 8004ea0:	f107 0208 	add.w	r2, r7, #8
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fecc 	bl	8005c44 <lsm6dso_angular_rate_raw_get>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb6:	e00c      	b.n	8004ed2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004eb8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004ec0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004ec8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3320      	adds	r3, #32
 8004ee8:	f107 0210 	add.w	r2, r7, #16
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fea8 	bl	8005c44 <lsm6dso_angular_rate_raw_get>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	e03c      	b.n	8004f7a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004f00:	f107 030c 	add.w	r3, r7, #12
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fdd4 	bl	8004ab4 <LSM6DSO_GYRO_GetSensitivity>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295
 8004f16:	e030      	b.n	8004f7a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004f18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f1c:	ee07 3a90 	vmov	s15, r3
 8004f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f30:	ee17 2a90 	vmov	r2, s15
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004f38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f50:	ee17 2a90 	vmov	r2, s15
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004f58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f70:	ee17 2a90 	vmov	r2, s15
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b082      	sub	sp, #8
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	70fb      	strb	r3, [r7, #3]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f103 0020 	add.w	r0, r3, #32
 8004f98:	1cba      	adds	r2, r7, #2
 8004f9a:	78f9      	ldrb	r1, [r7, #3]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f000 fa8f 	bl	80054c0 <lsm6dso_write_reg>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fac:	e000      	b.n	8004fb0 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004fc4:	edd7 7a00 	vldr	s15, [r7]
 8004fc8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80050c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd4:	d801      	bhi.n	8004fda <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004fd6:	230b      	movs	r3, #11
 8004fd8:	e063      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004fda:	edd7 7a00 	vldr	s15, [r7]
 8004fde:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fea:	d801      	bhi.n	8004ff0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e058      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004ff0:	edd7 7a00 	vldr	s15, [r7]
 8004ff4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005000:	d801      	bhi.n	8005006 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005002:	2302      	movs	r3, #2
 8005004:	e04d      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005006:	edd7 7a00 	vldr	s15, [r7]
 800500a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80050cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800500e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005016:	d801      	bhi.n	800501c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005018:	2303      	movs	r3, #3
 800501a:	e042      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800501c:	edd7 7a00 	vldr	s15, [r7]
 8005020:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80050d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8005024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502c:	d801      	bhi.n	8005032 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800502e:	2304      	movs	r3, #4
 8005030:	e037      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005032:	edd7 7a00 	vldr	s15, [r7]
 8005036:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80050d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800503a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800503e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005042:	d801      	bhi.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005044:	2305      	movs	r3, #5
 8005046:	e02c      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005048:	edd7 7a00 	vldr	s15, [r7]
 800504c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80050d8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8005050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005058:	d801      	bhi.n	800505e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800505a:	2306      	movs	r3, #6
 800505c:	e021      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800505e:	edd7 7a00 	vldr	s15, [r7]
 8005062:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80050dc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8005066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800506a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506e:	d801      	bhi.n	8005074 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005070:	2307      	movs	r3, #7
 8005072:	e016      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005074:	edd7 7a00 	vldr	s15, [r7]
 8005078:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80050e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800507c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005084:	d801      	bhi.n	800508a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005086:	2308      	movs	r3, #8
 8005088:	e00b      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800508a:	edd7 7a00 	vldr	s15, [r7]
 800508e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80050e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8005092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	d801      	bhi.n	80050a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800509c:	2309      	movs	r3, #9
 800509e:	e000      	b.n	80050a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80050a0:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80050a2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3320      	adds	r3, #32
 80050a8:	7bfa      	ldrb	r2, [r7, #15]
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fa7d 	bl	80055ac <lsm6dso_xl_data_rate_set>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	e000      	b.n	80050c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	3fcccccd 	.word	0x3fcccccd
 80050cc:	42500000 	.word	0x42500000
 80050d0:	42d00000 	.word	0x42d00000
 80050d4:	43500000 	.word	0x43500000
 80050d8:	43d08000 	.word	0x43d08000
 80050dc:	44504000 	.word	0x44504000
 80050e0:	44d06000 	.word	0x44d06000
 80050e4:	45505000 	.word	0x45505000

080050e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80050f4:	edd7 7a00 	vldr	s15, [r7]
 80050f8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80051e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80050fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005104:	d801      	bhi.n	800510a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005106:	230b      	movs	r3, #11
 8005108:	e063      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800510a:	edd7 7a00 	vldr	s15, [r7]
 800510e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511a:	d801      	bhi.n	8005120 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 800511c:	2301      	movs	r3, #1
 800511e:	e058      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005120:	edd7 7a00 	vldr	s15, [r7]
 8005124:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800512c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005130:	d801      	bhi.n	8005136 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005132:	2302      	movs	r3, #2
 8005134:	e04d      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005136:	edd7 7a00 	vldr	s15, [r7]
 800513a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80051ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800513e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005146:	d801      	bhi.n	800514c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005148:	2303      	movs	r3, #3
 800514a:	e042      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800514c:	edd7 7a00 	vldr	s15, [r7]
 8005150:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80051f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8005154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	d801      	bhi.n	8005162 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800515e:	2304      	movs	r3, #4
 8005160:	e037      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005162:	edd7 7a00 	vldr	s15, [r7]
 8005166:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80051f4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800516a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800516e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005172:	d801      	bhi.n	8005178 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005174:	2305      	movs	r3, #5
 8005176:	e02c      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005178:	edd7 7a00 	vldr	s15, [r7]
 800517c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80051f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005188:	d801      	bhi.n	800518e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800518a:	2306      	movs	r3, #6
 800518c:	e021      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800518e:	edd7 7a00 	vldr	s15, [r7]
 8005192:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80051fc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8005196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800519a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519e:	d801      	bhi.n	80051a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80051a0:	2307      	movs	r3, #7
 80051a2:	e016      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80051a4:	edd7 7a00 	vldr	s15, [r7]
 80051a8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005200 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80051ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b4:	d801      	bhi.n	80051ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80051b6:	2308      	movs	r3, #8
 80051b8:	e00b      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80051ba:	edd7 7a00 	vldr	s15, [r7]
 80051be:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005204 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80051c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ca:	d801      	bhi.n	80051d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80051cc:	2309      	movs	r3, #9
 80051ce:	e000      	b.n	80051d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80051d0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	3fcccccd 	.word	0x3fcccccd
 80051ec:	42500000 	.word	0x42500000
 80051f0:	42d00000 	.word	0x42d00000
 80051f4:	43500000 	.word	0x43500000
 80051f8:	43d08000 	.word	0x43d08000
 80051fc:	44504000 	.word	0x44504000
 8005200:	44d06000 	.word	0x44d06000
 8005204:	45505000 	.word	0x45505000

08005208 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005214:	edd7 7a00 	vldr	s15, [r7]
 8005218:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800521c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	d801      	bhi.n	800522a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005226:	2301      	movs	r3, #1
 8005228:	e058      	b.n	80052dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800522a:	edd7 7a00 	vldr	s15, [r7]
 800522e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523a:	d801      	bhi.n	8005240 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800523c:	2302      	movs	r3, #2
 800523e:	e04d      	b.n	80052dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005240:	edd7 7a00 	vldr	s15, [r7]
 8005244:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005304 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800524c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005250:	d801      	bhi.n	8005256 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005252:	2303      	movs	r3, #3
 8005254:	e042      	b.n	80052dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005256:	edd7 7a00 	vldr	s15, [r7]
 800525a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800525e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005266:	d801      	bhi.n	800526c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005268:	2304      	movs	r3, #4
 800526a:	e037      	b.n	80052dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800526c:	edd7 7a00 	vldr	s15, [r7]
 8005270:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800530c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527c:	d801      	bhi.n	8005282 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800527e:	2305      	movs	r3, #5
 8005280:	e02c      	b.n	80052dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005282:	edd7 7a00 	vldr	s15, [r7]
 8005286:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005310 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800528a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800528e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005292:	d801      	bhi.n	8005298 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005294:	2306      	movs	r3, #6
 8005296:	e021      	b.n	80052dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005298:	edd7 7a00 	vldr	s15, [r7]
 800529c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005314 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80052a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a8:	d801      	bhi.n	80052ae <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80052aa:	2307      	movs	r3, #7
 80052ac:	e016      	b.n	80052dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052ae:	edd7 7a00 	vldr	s15, [r7]
 80052b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005318 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80052b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	d801      	bhi.n	80052c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80052c0:	2308      	movs	r3, #8
 80052c2:	e00b      	b.n	80052dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052c4:	edd7 7a00 	vldr	s15, [r7]
 80052c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800531c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80052cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d4:	d801      	bhi.n	80052da <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80052d6:	2309      	movs	r3, #9
 80052d8:	e000      	b.n	80052dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052da:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80052dc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3320      	adds	r3, #32
 80052e2:	7bfa      	ldrb	r2, [r7, #15]
 80052e4:	4611      	mov	r1, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fb2a 	bl	8005940 <lsm6dso_gy_data_rate_set>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80052f2:	f04f 33ff 	mov.w	r3, #4294967295
 80052f6:	e000      	b.n	80052fa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	42500000 	.word	0x42500000
 8005308:	42d00000 	.word	0x42d00000
 800530c:	43500000 	.word	0x43500000
 8005310:	43d08000 	.word	0x43d08000
 8005314:	44504000 	.word	0x44504000
 8005318:	44d06000 	.word	0x44d06000
 800531c:	45505000 	.word	0x45505000

08005320 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800532c:	edd7 7a00 	vldr	s15, [r7]
 8005330:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	d801      	bhi.n	8005342 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800533e:	2301      	movs	r3, #1
 8005340:	e058      	b.n	80053f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005342:	edd7 7a00 	vldr	s15, [r7]
 8005346:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800534a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800534e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005352:	d801      	bhi.n	8005358 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005354:	2302      	movs	r3, #2
 8005356:	e04d      	b.n	80053f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005358:	edd7 7a00 	vldr	s15, [r7]
 800535c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005408 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005368:	d801      	bhi.n	800536e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800536a:	2303      	movs	r3, #3
 800536c:	e042      	b.n	80053f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800536e:	edd7 7a00 	vldr	s15, [r7]
 8005372:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800540c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800537a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537e:	d801      	bhi.n	8005384 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005380:	2304      	movs	r3, #4
 8005382:	e037      	b.n	80053f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005384:	edd7 7a00 	vldr	s15, [r7]
 8005388:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005410 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800538c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005394:	d801      	bhi.n	800539a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005396:	2305      	movs	r3, #5
 8005398:	e02c      	b.n	80053f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800539a:	edd7 7a00 	vldr	s15, [r7]
 800539e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005414 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80053a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053aa:	d801      	bhi.n	80053b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80053ac:	2306      	movs	r3, #6
 80053ae:	e021      	b.n	80053f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053b0:	edd7 7a00 	vldr	s15, [r7]
 80053b4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005418 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80053b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c0:	d801      	bhi.n	80053c6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80053c2:	2307      	movs	r3, #7
 80053c4:	e016      	b.n	80053f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053c6:	edd7 7a00 	vldr	s15, [r7]
 80053ca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800541c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80053ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d6:	d801      	bhi.n	80053dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80053d8:	2308      	movs	r3, #8
 80053da:	e00b      	b.n	80053f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053dc:	edd7 7a00 	vldr	s15, [r7]
 80053e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80053e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ec:	d801      	bhi.n	80053f2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80053ee:	2309      	movs	r3, #9
 80053f0:	e000      	b.n	80053f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053f2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	42500000 	.word	0x42500000
 800540c:	42d00000 	.word	0x42d00000
 8005410:	43500000 	.word	0x43500000
 8005414:	43d08000 	.word	0x43d08000
 8005418:	44504000 	.word	0x44504000
 800541c:	44d06000 	.word	0x44d06000
 8005420:	45505000 	.word	0x45505000

08005424 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	461a      	mov	r2, r3
 8005430:	460b      	mov	r3, r1
 8005432:	72fb      	strb	r3, [r7, #11]
 8005434:	4613      	mov	r3, r2
 8005436:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	695c      	ldr	r4, [r3, #20]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	7b1b      	ldrb	r3, [r3, #12]
 8005444:	b298      	uxth	r0, r3
 8005446:	7afb      	ldrb	r3, [r7, #11]
 8005448:	b299      	uxth	r1, r3
 800544a:	893b      	ldrh	r3, [r7, #8]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	47a0      	blx	r4
 8005450:	4603      	mov	r3, r0
}
 8005452:	4618      	mov	r0, r3
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	bd90      	pop	{r4, r7, pc}

0800545a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800545a:	b590      	push	{r4, r7, lr}
 800545c:	b087      	sub	sp, #28
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	461a      	mov	r2, r3
 8005466:	460b      	mov	r3, r1
 8005468:	72fb      	strb	r3, [r7, #11]
 800546a:	4613      	mov	r3, r2
 800546c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	691c      	ldr	r4, [r3, #16]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	7b1b      	ldrb	r3, [r3, #12]
 800547a:	b298      	uxth	r0, r3
 800547c:	7afb      	ldrb	r3, [r7, #11]
 800547e:	b299      	uxth	r1, r3
 8005480:	893b      	ldrh	r3, [r7, #8]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	47a0      	blx	r4
 8005486:	4603      	mov	r3, r0
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd90      	pop	{r4, r7, pc}

08005490 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	461a      	mov	r2, r3
 800549c:	460b      	mov	r3, r1
 800549e:	72fb      	strb	r3, [r7, #11]
 80054a0:	4613      	mov	r3, r2
 80054a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685c      	ldr	r4, [r3, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68d8      	ldr	r0, [r3, #12]
 80054ac:	893b      	ldrh	r3, [r7, #8]
 80054ae:	7af9      	ldrb	r1, [r7, #11]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	47a0      	blx	r4
 80054b4:	6178      	str	r0, [r7, #20]

  return ret;
 80054b6:	697b      	ldr	r3, [r7, #20]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd90      	pop	{r4, r7, pc}

080054c0 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	461a      	mov	r2, r3
 80054cc:	460b      	mov	r3, r1
 80054ce:	72fb      	strb	r3, [r7, #11]
 80054d0:	4613      	mov	r3, r2
 80054d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681c      	ldr	r4, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68d8      	ldr	r0, [r3, #12]
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	7af9      	ldrb	r1, [r7, #11]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	47a0      	blx	r4
 80054e4:	6178      	str	r0, [r7, #20]

  return ret;
 80054e6:	697b      	ldr	r3, [r7, #20]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd90      	pop	{r4, r7, pc}

080054f0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80054fc:	f107 0208 	add.w	r2, r7, #8
 8005500:	2301      	movs	r3, #1
 8005502:	2110      	movs	r1, #16
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ffc3 	bl	8005490 <lsm6dso_read_reg>
 800550a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10f      	bne.n	8005532 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	b2da      	uxtb	r2, r3
 800551a:	7a3b      	ldrb	r3, [r7, #8]
 800551c:	f362 0383 	bfi	r3, r2, #2, #2
 8005520:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005522:	f107 0208 	add.w	r2, r7, #8
 8005526:	2301      	movs	r3, #1
 8005528:	2110      	movs	r1, #16
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff ffc8 	bl	80054c0 <lsm6dso_write_reg>
 8005530:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005532:	68fb      	ldr	r3, [r7, #12]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005546:	f107 0208 	add.w	r2, r7, #8
 800554a:	2301      	movs	r3, #1
 800554c:	2110      	movs	r1, #16
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff ff9e 	bl	8005490 <lsm6dso_read_reg>
 8005554:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8005556:	7a3b      	ldrb	r3, [r7, #8]
 8005558:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d81a      	bhi.n	8005598 <lsm6dso_xl_full_scale_get+0x5c>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <lsm6dso_xl_full_scale_get+0x2c>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	08005579 	.word	0x08005579
 800556c:	08005581 	.word	0x08005581
 8005570:	08005589 	.word	0x08005589
 8005574:	08005591 	.word	0x08005591
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
      break;
 800557e:	e00f      	b.n	80055a0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
      break;
 8005586:	e00b      	b.n	80055a0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2202      	movs	r2, #2
 800558c:	701a      	strb	r2, [r3, #0]
      break;
 800558e:	e007      	b.n	80055a0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2203      	movs	r2, #3
 8005594:	701a      	strb	r2, [r3, #0]
      break;
 8005596:	e003      	b.n	80055a0 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
      break;
 800559e:	bf00      	nop
  }

  return ret;
 80055a0:	68fb      	ldr	r3, [r7, #12]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop

080055ac <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80055bc:	f107 030c 	add.w	r3, r7, #12
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fc96 	bl	8005ef4 <lsm6dso_fsm_enable_get>
 80055c8:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <lsm6dso_xl_data_rate_set+0x28>
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	e0e0      	b.n	8005796 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80055d4:	7b3b      	ldrb	r3, [r7, #12]
 80055d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80055dc:	7b3b      	ldrb	r3, [r7, #12]
 80055de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80055e2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80055e4:	4313      	orrs	r3, r2
 80055e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80055e8:	7b3b      	ldrb	r3, [r7, #12]
 80055ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80055ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80055f0:	4313      	orrs	r3, r2
 80055f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80055f4:	7b3b      	ldrb	r3, [r7, #12]
 80055f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80055fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80055fc:	4313      	orrs	r3, r2
 80055fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005600:	7b3b      	ldrb	r3, [r7, #12]
 8005602:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005606:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005608:	4313      	orrs	r3, r2
 800560a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800560c:	7b3b      	ldrb	r3, [r7, #12]
 800560e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005612:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005614:	4313      	orrs	r3, r2
 8005616:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005618:	7b3b      	ldrb	r3, [r7, #12]
 800561a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800561e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005620:	4313      	orrs	r3, r2
 8005622:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005624:	7b3b      	ldrb	r3, [r7, #12]
 8005626:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800562a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800562c:	4313      	orrs	r3, r2
 800562e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005630:	7b7b      	ldrb	r3, [r7, #13]
 8005632:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005636:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005638:	4313      	orrs	r3, r2
 800563a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800563c:	7b7b      	ldrb	r3, [r7, #13]
 800563e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005642:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005644:	4313      	orrs	r3, r2
 8005646:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005648:	7b7b      	ldrb	r3, [r7, #13]
 800564a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800564e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005650:	4313      	orrs	r3, r2
 8005652:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005654:	7b7b      	ldrb	r3, [r7, #13]
 8005656:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800565a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800565c:	4313      	orrs	r3, r2
 800565e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005660:	7b7b      	ldrb	r3, [r7, #13]
 8005662:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005666:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005668:	4313      	orrs	r3, r2
 800566a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800566c:	7b7b      	ldrb	r3, [r7, #13]
 800566e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005672:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005674:	4313      	orrs	r3, r2
 8005676:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005678:	7b7b      	ldrb	r3, [r7, #13]
 800567a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800567e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005680:	4313      	orrs	r3, r2
 8005682:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005684:	7b7b      	ldrb	r3, [r7, #13]
 8005686:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800568a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800568c:	4313      	orrs	r3, r2
 800568e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005690:	2b01      	cmp	r3, #1
 8005692:	d164      	bne.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005694:	f107 030b 	add.w	r3, r7, #11
 8005698:	4619      	mov	r1, r3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fc4c 	bl	8005f38 <lsm6dso_fsm_data_rate_get>
 80056a0:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <lsm6dso_xl_data_rate_set+0x100>
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	e074      	b.n	8005796 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80056ac:	7afb      	ldrb	r3, [r7, #11]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d852      	bhi.n	8005758 <lsm6dso_xl_data_rate_set+0x1ac>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <lsm6dso_xl_data_rate_set+0x10c>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056c9 	.word	0x080056c9
 80056bc:	080056db 	.word	0x080056db
 80056c0:	080056f9 	.word	0x080056f9
 80056c4:	08005723 	.word	0x08005723
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80056ce:	2301      	movs	r3, #1
 80056d0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80056d2:	e044      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	75fb      	strb	r3, [r7, #23]
        break;
 80056d8:	e041      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80056e0:	2302      	movs	r3, #2
 80056e2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80056e4:	e03b      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d102      	bne.n	80056f2 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80056ec:	2302      	movs	r3, #2
 80056ee:	75fb      	strb	r3, [r7, #23]
        break;
 80056f0:	e035      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	75fb      	strb	r3, [r7, #23]
        break;
 80056f6:	e032      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80056fe:	2303      	movs	r3, #3
 8005700:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8005702:	e02c      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d102      	bne.n	8005710 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800570a:	2303      	movs	r3, #3
 800570c:	75fb      	strb	r3, [r7, #23]
        break;
 800570e:	e026      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d102      	bne.n	800571c <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005716:	2303      	movs	r3, #3
 8005718:	75fb      	strb	r3, [r7, #23]
        break;
 800571a:	e020      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	75fb      	strb	r3, [r7, #23]
        break;
 8005720:	e01d      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005728:	2304      	movs	r3, #4
 800572a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800572c:	e017      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d102      	bne.n	800573a <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005734:	2304      	movs	r3, #4
 8005736:	75fb      	strb	r3, [r7, #23]
        break;
 8005738:	e011      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d102      	bne.n	8005746 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005740:	2304      	movs	r3, #4
 8005742:	75fb      	strb	r3, [r7, #23]
        break;
 8005744:	e00b      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d102      	bne.n	8005752 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800574c:	2304      	movs	r3, #4
 800574e:	75fb      	strb	r3, [r7, #23]
        break;
 8005750:	e005      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	75fb      	strb	r3, [r7, #23]
        break;
 8005756:	e002      	b.n	800575e <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	75fb      	strb	r3, [r7, #23]
        break;
 800575c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800575e:	f107 0208 	add.w	r2, r7, #8
 8005762:	2301      	movs	r3, #1
 8005764:	2110      	movs	r1, #16
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff fe92 	bl	8005490 <lsm6dso_read_reg>
 800576c:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	b2da      	uxtb	r2, r3
 8005776:	7a3b      	ldrb	r3, [r7, #8]
 8005778:	f362 1307 	bfi	r3, r2, #4, #4
 800577c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800577e:	f107 0208 	add.w	r2, r7, #8
 8005782:	2301      	movs	r3, #1
 8005784:	2110      	movs	r1, #16
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fe9a 	bl	80054c0 <lsm6dso_write_reg>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  return ret;
 8005794:	693b      	ldr	r3, [r7, #16]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop

080057a0 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80057aa:	f107 0208 	add.w	r2, r7, #8
 80057ae:	2301      	movs	r3, #1
 80057b0:	2110      	movs	r1, #16
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff fe6c 	bl	8005490 <lsm6dso_read_reg>
 80057b8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80057ba:	7a3b      	ldrb	r3, [r7, #8]
 80057bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b0b      	cmp	r3, #11
 80057c4:	d84a      	bhi.n	800585c <lsm6dso_xl_data_rate_get+0xbc>
 80057c6:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <lsm6dso_xl_data_rate_get+0x2c>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	080057fd 	.word	0x080057fd
 80057d0:	08005805 	.word	0x08005805
 80057d4:	0800580d 	.word	0x0800580d
 80057d8:	08005815 	.word	0x08005815
 80057dc:	0800581d 	.word	0x0800581d
 80057e0:	08005825 	.word	0x08005825
 80057e4:	0800582d 	.word	0x0800582d
 80057e8:	08005835 	.word	0x08005835
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	08005845 	.word	0x08005845
 80057f4:	0800584d 	.word	0x0800584d
 80057f8:	08005855 	.word	0x08005855
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
      break;
 8005802:	e02f      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	701a      	strb	r2, [r3, #0]
      break;
 800580a:	e02b      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2202      	movs	r2, #2
 8005810:	701a      	strb	r2, [r3, #0]
      break;
 8005812:	e027      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2203      	movs	r2, #3
 8005818:	701a      	strb	r2, [r3, #0]
      break;
 800581a:	e023      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2204      	movs	r2, #4
 8005820:	701a      	strb	r2, [r3, #0]
      break;
 8005822:	e01f      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2205      	movs	r2, #5
 8005828:	701a      	strb	r2, [r3, #0]
      break;
 800582a:	e01b      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2206      	movs	r2, #6
 8005830:	701a      	strb	r2, [r3, #0]
      break;
 8005832:	e017      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2207      	movs	r2, #7
 8005838:	701a      	strb	r2, [r3, #0]
      break;
 800583a:	e013      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2208      	movs	r2, #8
 8005840:	701a      	strb	r2, [r3, #0]
      break;
 8005842:	e00f      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2209      	movs	r2, #9
 8005848:	701a      	strb	r2, [r3, #0]
      break;
 800584a:	e00b      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	220a      	movs	r2, #10
 8005850:	701a      	strb	r2, [r3, #0]
      break;
 8005852:	e007      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	220b      	movs	r2, #11
 8005858:	701a      	strb	r2, [r3, #0]
      break;
 800585a:	e003      	b.n	8005864 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
      break;
 8005862:	bf00      	nop
  }

  return ret;
 8005864:	68fb      	ldr	r3, [r7, #12]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop

08005870 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800587c:	f107 0208 	add.w	r2, r7, #8
 8005880:	2301      	movs	r3, #1
 8005882:	2111      	movs	r1, #17
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fe03 	bl	8005490 <lsm6dso_read_reg>
 800588a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10f      	bne.n	80058b2 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	b2da      	uxtb	r2, r3
 800589a:	7a3b      	ldrb	r3, [r7, #8]
 800589c:	f362 0343 	bfi	r3, r2, #1, #3
 80058a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80058a2:	f107 0208 	add.w	r2, r7, #8
 80058a6:	2301      	movs	r3, #1
 80058a8:	2111      	movs	r1, #17
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fe08 	bl	80054c0 <lsm6dso_write_reg>
 80058b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80058c6:	f107 0208 	add.w	r2, r7, #8
 80058ca:	2301      	movs	r3, #1
 80058cc:	2111      	movs	r1, #17
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff fdde 	bl	8005490 <lsm6dso_read_reg>
 80058d4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80058d6:	7a3b      	ldrb	r3, [r7, #8]
 80058d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b06      	cmp	r3, #6
 80058e0:	d824      	bhi.n	800592c <lsm6dso_gy_full_scale_get+0x70>
 80058e2:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <lsm6dso_gy_full_scale_get+0x2c>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	08005905 	.word	0x08005905
 80058ec:	0800590d 	.word	0x0800590d
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800592d 	.word	0x0800592d
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	0800592d 	.word	0x0800592d
 8005900:	08005925 	.word	0x08005925
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2200      	movs	r2, #0
 8005908:	701a      	strb	r2, [r3, #0]
      break;
 800590a:	e013      	b.n	8005934 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
      break;
 8005912:	e00f      	b.n	8005934 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2202      	movs	r2, #2
 8005918:	701a      	strb	r2, [r3, #0]
      break;
 800591a:	e00b      	b.n	8005934 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2204      	movs	r2, #4
 8005920:	701a      	strb	r2, [r3, #0]
      break;
 8005922:	e007      	b.n	8005934 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2206      	movs	r2, #6
 8005928:	701a      	strb	r2, [r3, #0]
      break;
 800592a:	e003      	b.n	8005934 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]
      break;
 8005932:	bf00      	nop
  }

  return ret;
 8005934:	68fb      	ldr	r3, [r7, #12]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop

08005940 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005950:	f107 030c 	add.w	r3, r7, #12
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 facc 	bl	8005ef4 <lsm6dso_fsm_enable_get>
 800595c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <lsm6dso_gy_data_rate_set+0x28>
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	e0e0      	b.n	8005b2a <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005968:	7b3b      	ldrb	r3, [r7, #12]
 800596a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800596e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005970:	7b3b      	ldrb	r3, [r7, #12]
 8005972:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005976:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005978:	4313      	orrs	r3, r2
 800597a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800597c:	7b3b      	ldrb	r3, [r7, #12]
 800597e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005982:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005984:	4313      	orrs	r3, r2
 8005986:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005988:	7b3b      	ldrb	r3, [r7, #12]
 800598a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800598e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005990:	4313      	orrs	r3, r2
 8005992:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005994:	7b3b      	ldrb	r3, [r7, #12]
 8005996:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800599a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800599c:	4313      	orrs	r3, r2
 800599e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80059a0:	7b3b      	ldrb	r3, [r7, #12]
 80059a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80059a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80059a8:	4313      	orrs	r3, r2
 80059aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80059ac:	7b3b      	ldrb	r3, [r7, #12]
 80059ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80059b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80059b8:	7b3b      	ldrb	r3, [r7, #12]
 80059ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80059be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80059c0:	4313      	orrs	r3, r2
 80059c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80059c4:	7b7b      	ldrb	r3, [r7, #13]
 80059c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80059ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80059cc:	4313      	orrs	r3, r2
 80059ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80059d0:	7b7b      	ldrb	r3, [r7, #13]
 80059d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80059d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80059d8:	4313      	orrs	r3, r2
 80059da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80059dc:	7b7b      	ldrb	r3, [r7, #13]
 80059de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80059e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80059e4:	4313      	orrs	r3, r2
 80059e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80059e8:	7b7b      	ldrb	r3, [r7, #13]
 80059ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80059ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80059f0:	4313      	orrs	r3, r2
 80059f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80059f4:	7b7b      	ldrb	r3, [r7, #13]
 80059f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80059fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80059fc:	4313      	orrs	r3, r2
 80059fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005a00:	7b7b      	ldrb	r3, [r7, #13]
 8005a02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005a0c:	7b7b      	ldrb	r3, [r7, #13]
 8005a0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005a12:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005a14:	4313      	orrs	r3, r2
 8005a16:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005a18:	7b7b      	ldrb	r3, [r7, #13]
 8005a1a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a1e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005a20:	4313      	orrs	r3, r2
 8005a22:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d164      	bne.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005a28:	f107 030b 	add.w	r3, r7, #11
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa82 	bl	8005f38 <lsm6dso_fsm_data_rate_get>
 8005a34:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <lsm6dso_gy_data_rate_set+0x100>
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	e074      	b.n	8005b2a <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8005a40:	7afb      	ldrb	r3, [r7, #11]
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d852      	bhi.n	8005aec <lsm6dso_gy_data_rate_set+0x1ac>
 8005a46:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <lsm6dso_gy_data_rate_set+0x10c>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a5d 	.word	0x08005a5d
 8005a50:	08005a6f 	.word	0x08005a6f
 8005a54:	08005a8d 	.word	0x08005a8d
 8005a58:	08005ab7 	.word	0x08005ab7
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d102      	bne.n	8005a68 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005a66:	e044      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	75fb      	strb	r3, [r7, #23]
        break;
 8005a6c:	e041      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005a74:	2302      	movs	r3, #2
 8005a76:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005a78:	e03b      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d102      	bne.n	8005a86 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005a80:	2302      	movs	r3, #2
 8005a82:	75fb      	strb	r3, [r7, #23]
        break;
 8005a84:	e035      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	75fb      	strb	r3, [r7, #23]
        break;
 8005a8a:	e032      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005a92:	2303      	movs	r3, #3
 8005a94:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005a96:	e02c      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d102      	bne.n	8005aa4 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	75fb      	strb	r3, [r7, #23]
        break;
 8005aa2:	e026      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d102      	bne.n	8005ab0 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	75fb      	strb	r3, [r7, #23]
        break;
 8005aae:	e020      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	75fb      	strb	r3, [r7, #23]
        break;
 8005ab4:	e01d      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005abc:	2304      	movs	r3, #4
 8005abe:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005ac0:	e017      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d102      	bne.n	8005ace <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ac8:	2304      	movs	r3, #4
 8005aca:	75fb      	strb	r3, [r7, #23]
        break;
 8005acc:	e011      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d102      	bne.n	8005ada <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	75fb      	strb	r3, [r7, #23]
        break;
 8005ad8:	e00b      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d102      	bne.n	8005ae6 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	75fb      	strb	r3, [r7, #23]
        break;
 8005ae4:	e005      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	75fb      	strb	r3, [r7, #23]
        break;
 8005aea:	e002      	b.n	8005af2 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	75fb      	strb	r3, [r7, #23]
        break;
 8005af0:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005af2:	f107 0208 	add.w	r2, r7, #8
 8005af6:	2301      	movs	r3, #1
 8005af8:	2111      	movs	r1, #17
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff fcc8 	bl	8005490 <lsm6dso_read_reg>
 8005b00:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	7a3b      	ldrb	r3, [r7, #8]
 8005b0c:	f362 1307 	bfi	r3, r2, #4, #4
 8005b10:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005b12:	f107 0208 	add.w	r2, r7, #8
 8005b16:	2301      	movs	r3, #1
 8005b18:	2111      	movs	r1, #17
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fcd0 	bl	80054c0 <lsm6dso_write_reg>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4413      	add	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]

  return ret;
 8005b28:	693b      	ldr	r3, [r7, #16]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop

08005b34 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005b3e:	f107 0208 	add.w	r2, r7, #8
 8005b42:	2301      	movs	r3, #1
 8005b44:	2111      	movs	r1, #17
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fca2 	bl	8005490 <lsm6dso_read_reg>
 8005b4c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8005b4e:	7a3b      	ldrb	r3, [r7, #8]
 8005b50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b0a      	cmp	r3, #10
 8005b58:	d844      	bhi.n	8005be4 <lsm6dso_gy_data_rate_get+0xb0>
 8005b5a:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <lsm6dso_gy_data_rate_get+0x2c>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	08005b95 	.word	0x08005b95
 8005b68:	08005b9d 	.word	0x08005b9d
 8005b6c:	08005ba5 	.word	0x08005ba5
 8005b70:	08005bad 	.word	0x08005bad
 8005b74:	08005bb5 	.word	0x08005bb5
 8005b78:	08005bbd 	.word	0x08005bbd
 8005b7c:	08005bc5 	.word	0x08005bc5
 8005b80:	08005bcd 	.word	0x08005bcd
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	08005bdd 	.word	0x08005bdd
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
      break;
 8005b92:	e02b      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2201      	movs	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
      break;
 8005b9a:	e027      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	701a      	strb	r2, [r3, #0]
      break;
 8005ba2:	e023      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	701a      	strb	r2, [r3, #0]
      break;
 8005baa:	e01f      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	701a      	strb	r2, [r3, #0]
      break;
 8005bb2:	e01b      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2205      	movs	r2, #5
 8005bb8:	701a      	strb	r2, [r3, #0]
      break;
 8005bba:	e017      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2206      	movs	r2, #6
 8005bc0:	701a      	strb	r2, [r3, #0]
      break;
 8005bc2:	e013      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2207      	movs	r2, #7
 8005bc8:	701a      	strb	r2, [r3, #0]
      break;
 8005bca:	e00f      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2208      	movs	r2, #8
 8005bd0:	701a      	strb	r2, [r3, #0]
      break;
 8005bd2:	e00b      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2209      	movs	r2, #9
 8005bd8:	701a      	strb	r2, [r3, #0]
      break;
 8005bda:	e007      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	220a      	movs	r2, #10
 8005be0:	701a      	strb	r2, [r3, #0]
      break;
 8005be2:	e003      	b.n	8005bec <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
      break;
 8005bea:	bf00      	nop
  }

  return ret;
 8005bec:	68fb      	ldr	r3, [r7, #12]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop

08005bf8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005c04:	f107 0208 	add.w	r2, r7, #8
 8005c08:	2301      	movs	r3, #1
 8005c0a:	2112      	movs	r1, #18
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff fc3f 	bl	8005490 <lsm6dso_read_reg>
 8005c12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10f      	bne.n	8005c3a <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	7a3b      	ldrb	r3, [r7, #8]
 8005c24:	f362 1386 	bfi	r3, r2, #6, #1
 8005c28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005c2a:	f107 0208 	add.w	r2, r7, #8
 8005c2e:	2301      	movs	r3, #1
 8005c30:	2112      	movs	r1, #18
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fc44 	bl	80054c0 <lsm6dso_write_reg>
 8005c38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005c4e:	f107 020c 	add.w	r2, r7, #12
 8005c52:	2306      	movs	r3, #6
 8005c54:	2122      	movs	r1, #34	; 0x22
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff fc1a 	bl	8005490 <lsm6dso_read_reg>
 8005c5c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c5e:	7b7b      	ldrb	r3, [r7, #13]
 8005c60:	b21a      	sxth	r2, r3
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	7b3b      	ldrb	r3, [r7, #12]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	b21a      	sxth	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005c80:	7bfa      	ldrb	r2, [r7, #15]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	3302      	adds	r3, #2
 8005c86:	b212      	sxth	r2, r2
 8005c88:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	b212      	sxth	r2, r2
 8005ca6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005ca8:	7c7a      	ldrb	r2, [r7, #17]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	3304      	adds	r3, #4
 8005cae:	b212      	sxth	r2, r2
 8005cb0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	7c3b      	ldrb	r3, [r7, #16]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	b212      	sxth	r2, r2
 8005cce:	801a      	strh	r2, [r3, #0]

  return ret;
 8005cd0:	697b      	ldr	r3, [r7, #20]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005ce4:	f107 020c 	add.w	r2, r7, #12
 8005ce8:	2306      	movs	r3, #6
 8005cea:	2128      	movs	r1, #40	; 0x28
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fbcf 	bl	8005490 <lsm6dso_read_reg>
 8005cf2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005cf4:	7b7b      	ldrb	r3, [r7, #13]
 8005cf6:	b21a      	sxth	r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	7b3b      	ldrb	r3, [r7, #12]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	b21a      	sxth	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005d16:	7bfa      	ldrb	r2, [r7, #15]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	b212      	sxth	r2, r2
 8005d1e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	3302      	adds	r3, #2
 8005d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	7bbb      	ldrb	r3, [r7, #14]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	3302      	adds	r3, #2
 8005d3a:	b212      	sxth	r2, r2
 8005d3c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005d3e:	7c7a      	ldrb	r2, [r7, #17]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	3304      	adds	r3, #4
 8005d44:	b212      	sxth	r2, r2
 8005d46:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	7c3b      	ldrb	r3, [r7, #16]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	3304      	adds	r3, #4
 8005d62:	b212      	sxth	r2, r2
 8005d64:	801a      	strh	r2, [r3, #0]

  return ret;
 8005d66:	697b      	ldr	r3, [r7, #20]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	7a3b      	ldrb	r3, [r7, #8]
 8005d8a:	f362 1387 	bfi	r3, r2, #6, #2
 8005d8e:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005d90:	f107 0208 	add.w	r2, r7, #8
 8005d94:	2301      	movs	r3, #1
 8005d96:	2101      	movs	r1, #1
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff fb91 	bl	80054c0 <lsm6dso_write_reg>
 8005d9e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005db4:	2301      	movs	r3, #1
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	210f      	movs	r1, #15
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff fb68 	bl	8005490 <lsm6dso_read_reg>
 8005dc0:	60f8      	str	r0, [r7, #12]

  return ret;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005dd8:	f107 0208 	add.w	r2, r7, #8
 8005ddc:	2301      	movs	r3, #1
 8005dde:	2112      	movs	r1, #18
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff fb55 	bl	8005490 <lsm6dso_read_reg>
 8005de6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	7a3b      	ldrb	r3, [r7, #8]
 8005df8:	f362 0382 	bfi	r3, r2, #2, #1
 8005dfc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005dfe:	f107 0208 	add.w	r2, r7, #8
 8005e02:	2301      	movs	r3, #1
 8005e04:	2112      	movs	r1, #18
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff fb5a 	bl	80054c0 <lsm6dso_write_reg>
 8005e0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005e24:	f107 020c 	add.w	r2, r7, #12
 8005e28:	2301      	movs	r3, #1
 8005e2a:	2118      	movs	r1, #24
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff fb2f 	bl	8005490 <lsm6dso_read_reg>
 8005e32:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	09db      	lsrs	r3, r3, #7
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	7b3b      	ldrb	r3, [r7, #12]
 8005e42:	f362 0341 	bfi	r3, r2, #1, #1
 8005e46:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005e48:	f107 020c 	add.w	r2, r7, #12
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	2118      	movs	r1, #24
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fb35 	bl	80054c0 <lsm6dso_write_reg>
 8005e56:	4602      	mov	r2, r0
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <lsm6dso_i3c_disable_set+0x50>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	e01b      	b.n	8005ea0 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005e68:	f107 0210 	add.w	r2, r7, #16
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	2162      	movs	r1, #98	; 0x62
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fb0d 	bl	8005490 <lsm6dso_read_reg>
 8005e76:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	7c3b      	ldrb	r3, [r7, #16]
 8005e82:	f362 03c4 	bfi	r3, r2, #3, #2
 8005e86:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005e88:	f107 0210 	add.w	r2, r7, #16
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	2162      	movs	r1, #98	; 0x62
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fb15 	bl	80054c0 <lsm6dso_write_reg>
 8005e96:	4602      	mov	r2, r0
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  return ret;
 8005e9e:	697b      	ldr	r3, [r7, #20]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005eb4:	f107 0208 	add.w	r2, r7, #8
 8005eb8:	2301      	movs	r3, #1
 8005eba:	210a      	movs	r1, #10
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff fae7 	bl	8005490 <lsm6dso_read_reg>
 8005ec2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10f      	bne.n	8005eea <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	7a3b      	ldrb	r3, [r7, #8]
 8005ed4:	f362 0302 	bfi	r3, r2, #0, #3
 8005ed8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005eda:	f107 0208 	add.w	r2, r7, #8
 8005ede:	2301      	movs	r3, #1
 8005ee0:	210a      	movs	r1, #10
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff faec 	bl	80054c0 <lsm6dso_write_reg>
 8005ee8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005eea:	68fb      	ldr	r3, [r7, #12]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005efe:	2102      	movs	r1, #2
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff ff35 	bl	8005d70 <lsm6dso_mem_bank_set>
 8005f06:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005f08:	2302      	movs	r3, #2
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	2146      	movs	r1, #70	; 0x46
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff fabe 	bl	8005490 <lsm6dso_read_reg>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff ff26 	bl	8005d70 <lsm6dso_mem_bank_set>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

  return ret;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005f42:	2102      	movs	r1, #2
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ff13 	bl	8005d70 <lsm6dso_mem_bank_set>
 8005f4a:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <lsm6dso_fsm_data_rate_get+0x1e>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	e03a      	b.n	8005fcc <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8005f56:	f107 0208 	add.w	r2, r7, #8
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	215f      	movs	r1, #95	; 0x5f
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fa96 	bl	8005490 <lsm6dso_read_reg>
 8005f64:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d125      	bne.n	8005fb8 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8005f6c:	7a3b      	ldrb	r3, [r7, #8]
 8005f6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d81b      	bhi.n	8005fb0 <lsm6dso_fsm_data_rate_get+0x78>
 8005f78:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <lsm6dso_fsm_data_rate_get+0x48>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005f91 	.word	0x08005f91
 8005f84:	08005f99 	.word	0x08005f99
 8005f88:	08005fa1 	.word	0x08005fa1
 8005f8c:	08005fa9 	.word	0x08005fa9
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
      break;
 8005f96:	e010      	b.n	8005fba <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	701a      	strb	r2, [r3, #0]
      break;
 8005f9e:	e00c      	b.n	8005fba <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	701a      	strb	r2, [r3, #0]
      break;
 8005fa6:	e008      	b.n	8005fba <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2203      	movs	r2, #3
 8005fac:	701a      	strb	r2, [r3, #0]
      break;
 8005fae:	e004      	b.n	8005fba <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
      break;
 8005fb6:	e000      	b.n	8005fba <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8005fb8:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005fba:	2100      	movs	r1, #0
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff fed7 	bl	8005d70 <lsm6dso_mem_bank_set>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  return ret;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08e      	sub	sp, #56	; 0x38
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d06e      	beq.n	80060ce <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	f200 809d 	bhi.w	8006132 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <IKS01A3_MOTION_SENSOR_Init+0x32>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d032      	beq.n	800606a <IKS01A3_MOTION_SENSOR_Init+0x96>
 8006004:	e095      	b.n	8006132 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8006006:	6838      	ldr	r0, [r7, #0]
 8006008:	f000 f9ae 	bl	8006368 <LSM6DSO_0_Probe>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	e0cc      	b.n	80061b2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006018:	4a68      	ldr	r2, [pc, #416]	; (80061bc <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	4967      	ldr	r1, [pc, #412]	; (80061c0 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800602a:	f107 010c 	add.w	r1, r7, #12
 800602e:	4610      	mov	r0, r2
 8006030:	4798      	blx	r3
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006038:	f06f 0306 	mvn.w	r3, #6
 800603c:	e0b9      	b.n	80061b2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800603e:	7b3b      	ldrb	r3, [r7, #12]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d103      	bne.n	800604c <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	f043 0302 	orr.w	r3, r3, #2
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800604c:	7b7b      	ldrb	r3, [r7, #13]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d103      	bne.n	800605a <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d16c      	bne.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	f043 0304 	orr.w	r3, r3, #4
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006068:	e067      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800606a:	6838      	ldr	r0, [r7, #0]
 800606c:	f000 fa3c 	bl	80064e8 <LIS2DW12_0_Probe>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8006076:	f04f 33ff 	mov.w	r3, #4294967295
 800607a:	e09a      	b.n	80061b2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800607c:	4a4f      	ldr	r2, [pc, #316]	; (80061bc <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	494e      	ldr	r1, [pc, #312]	; (80061c0 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800608e:	f107 010c 	add.w	r1, r7, #12
 8006092:	4610      	mov	r0, r2
 8006094:	4798      	blx	r3
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800609c:	f06f 0306 	mvn.w	r3, #6
 80060a0:	e087      	b.n	80061b2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80060a2:	7b3b      	ldrb	r3, [r7, #12]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d103      	bne.n	80060b0 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	f043 0302 	orr.w	r3, r3, #2
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80060b0:	7b7b      	ldrb	r3, [r7, #13]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d103      	bne.n	80060be <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d13c      	bne.n	800613e <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	f043 0304 	orr.w	r3, r3, #4
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80060cc:	e037      	b.n	800613e <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80060ce:	6838      	ldr	r0, [r7, #0]
 80060d0:	f000 fab2 	bl	8006638 <LIS2MDL_0_Probe>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
 80060de:	e068      	b.n	80061b2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80060e0:	4a36      	ldr	r2, [pc, #216]	; (80061bc <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	4935      	ldr	r1, [pc, #212]	; (80061c0 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80060f2:	f107 010c 	add.w	r1, r7, #12
 80060f6:	4610      	mov	r0, r2
 80060f8:	4798      	blx	r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006100:	f06f 0306 	mvn.w	r3, #6
 8006104:	e055      	b.n	80061b2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006106:	7b3b      	ldrb	r3, [r7, #12]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d103      	bne.n	8006114 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	f043 0302 	orr.w	r3, r3, #2
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006114:	7b7b      	ldrb	r3, [r7, #13]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d103      	bne.n	8006122 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	f043 0301 	orr.w	r3, r3, #1
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d10c      	bne.n	8006142 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	f043 0304 	orr.w	r3, r3, #4
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006130:	e007      	b.n	8006142 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8006132:	f06f 0301 	mvn.w	r3, #1
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006138:	e004      	b.n	8006144 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800613a:	bf00      	nop
 800613c:	e002      	b.n	8006144 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800613e:	bf00      	nop
 8006140:	e000      	b.n	8006144 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006142:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614c:	e031      	b.n	80061b2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800614e:	2300      	movs	r3, #0
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006152:	e02a      	b.n	80061aa <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	4013      	ands	r3, r2
 800615a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615c:	429a      	cmp	r2, r3
 800615e:	d11e      	bne.n	800619e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8006160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	4013      	ands	r3, r2
 8006166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006168:	429a      	cmp	r2, r3
 800616a:	d118      	bne.n	800619e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800616c:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006174:	4814      	ldr	r0, [pc, #80]	; (80061c8 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4613      	mov	r3, r2
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	4413      	add	r3, r2
 800617e:	440b      	add	r3, r1
 8006180:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	490e      	ldr	r1, [pc, #56]	; (80061c0 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800618e:	4610      	mov	r0, r2
 8006190:	4798      	blx	r3
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006198:	f06f 0304 	mvn.w	r3, #4
 800619c:	e009      	b.n	80061b2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	3301      	adds	r3, #1
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d9d1      	bls.n	8006154 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3738      	adds	r7, #56	; 0x38
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	200005b8 	.word	0x200005b8
 80061c0:	20000588 	.word	0x20000588
 80061c4:	200000cc 	.word	0x200000cc
 80061c8:	20000594 	.word	0x20000594

080061cc <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d903      	bls.n	80061e6 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80061de:	f06f 0301 	mvn.w	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	e029      	b.n	800623a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80061e6:	4a17      	ldr	r2, [pc, #92]	; (8006244 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d11d      	bne.n	8006234 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80061f8:	4a13      	ldr	r2, [pc, #76]	; (8006248 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006200:	4812      	ldr	r0, [pc, #72]	; (800624c <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4613      	mov	r3, r2
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	4413      	add	r3, r2
 800620a:	440b      	add	r3, r1
 800620c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	490f      	ldr	r1, [pc, #60]	; (8006250 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006226:	f06f 0304 	mvn.w	r3, #4
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e005      	b.n	800623a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e002      	b.n	800623a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006234:	f06f 0301 	mvn.w	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800623a:	697b      	ldr	r3, [r7, #20]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	200005c4 	.word	0x200005c4
 8006248:	200000cc 	.word	0x200000cc
 800624c:	20000594 	.word	0x20000594
 8006250:	20000588 	.word	0x20000588

08006254 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d903      	bls.n	8006270 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006268:	f06f 0301 	mvn.w	r3, #1
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e02a      	b.n	80062c6 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006270:	4a17      	ldr	r2, [pc, #92]	; (80062d0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4013      	ands	r3, r2
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	429a      	cmp	r2, r3
 8006280:	d11e      	bne.n	80062c0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006282:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800628a:	4813      	ldr	r0, [pc, #76]	; (80062d8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4613      	mov	r3, r2
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	4413      	add	r3, r2
 8006294:	440b      	add	r3, r1
 8006296:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	490f      	ldr	r1, [pc, #60]	; (80062dc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80062a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80062a8:	4610      	mov	r0, r2
 80062aa:	4798      	blx	r3
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062b2:	f06f 0304 	mvn.w	r3, #4
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	e005      	b.n	80062c6 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	e002      	b.n	80062c6 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80062c0:	f06f 0301 	mvn.w	r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80062c6:	697b      	ldr	r3, [r7, #20]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	200005c4 	.word	0x200005c4
 80062d4:	200000cc 	.word	0x200000cc
 80062d8:	20000594 	.word	0x20000594
 80062dc:	20000588 	.word	0x20000588

080062e0 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d903      	bls.n	80062fa <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80062f2:	f06f 0301 	mvn.w	r3, #1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	e029      	b.n	800634e <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80062fa:	4a17      	ldr	r2, [pc, #92]	; (8006358 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4013      	ands	r3, r2
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	d11d      	bne.n	8006348 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800630c:	4a13      	ldr	r2, [pc, #76]	; (800635c <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006314:	4812      	ldr	r0, [pc, #72]	; (8006360 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4613      	mov	r3, r2
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	4413      	add	r3, r2
 800631e:	440b      	add	r3, r1
 8006320:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	490f      	ldr	r1, [pc, #60]	; (8006364 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800633a:	f06f 0304 	mvn.w	r3, #4
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e005      	b.n	800634e <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e002      	b.n	800634e <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006348:	f06f 0301 	mvn.w	r3, #1
 800634c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800634e:	697b      	ldr	r3, [r7, #20]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	200005c4 	.word	0x200005c4
 800635c:	200000cc 	.word	0x200000cc
 8006360:	20000594 	.word	0x20000594
 8006364:	20000588 	.word	0x20000588

08006368 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b094      	sub	sp, #80	; 0x50
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006370:	2300      	movs	r3, #0
 8006372:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8006374:	2300      	movs	r3, #0
 8006376:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8006378:	23d7      	movs	r3, #215	; 0xd7
 800637a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800637e:	4b4b      	ldr	r3, [pc, #300]	; (80064ac <LSM6DSO_0_Probe+0x144>)
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006382:	4b4b      	ldr	r3, [pc, #300]	; (80064b0 <LSM6DSO_0_Probe+0x148>)
 8006384:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006386:	4b4b      	ldr	r3, [pc, #300]	; (80064b4 <LSM6DSO_0_Probe+0x14c>)
 8006388:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800638a:	4b4b      	ldr	r3, [pc, #300]	; (80064b8 <LSM6DSO_0_Probe+0x150>)
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800638e:	4b4b      	ldr	r3, [pc, #300]	; (80064bc <LSM6DSO_0_Probe+0x154>)
 8006390:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006392:	4b4b      	ldr	r3, [pc, #300]	; (80064c0 <LSM6DSO_0_Probe+0x158>)
 8006394:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8006396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800639a:	4619      	mov	r1, r3
 800639c:	4849      	ldr	r0, [pc, #292]	; (80064c4 <LSM6DSO_0_Probe+0x15c>)
 800639e:	f7fd fe39 	bl	8004014 <LSM6DSO_RegisterBusIO>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80063a8:	f06f 0306 	mvn.w	r3, #6
 80063ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ae:	e077      	b.n	80064a0 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80063b0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80063b4:	4619      	mov	r1, r3
 80063b6:	4843      	ldr	r0, [pc, #268]	; (80064c4 <LSM6DSO_0_Probe+0x15c>)
 80063b8:	f7fd ff36 	bl	8004228 <LSM6DSO_ReadID>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80063c2:	f06f 0306 	mvn.w	r3, #6
 80063c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c8:	e06a      	b.n	80064a0 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80063ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ce:	2b6c      	cmp	r3, #108	; 0x6c
 80063d0:	d003      	beq.n	80063da <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80063d2:	f06f 0306 	mvn.w	r3, #6
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d8:	e062      	b.n	80064a0 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80063da:	f107 030c 	add.w	r3, r7, #12
 80063de:	4619      	mov	r1, r3
 80063e0:	4838      	ldr	r0, [pc, #224]	; (80064c4 <LSM6DSO_0_Probe+0x15c>)
 80063e2:	f7fd ff37 	bl	8004254 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80063e6:	7b7b      	ldrb	r3, [r7, #13]
 80063e8:	461a      	mov	r2, r3
 80063ea:	7b3b      	ldrb	r3, [r7, #12]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	431a      	orrs	r2, r3
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4313      	orrs	r3, r2
 80063f6:	4a34      	ldr	r2, [pc, #208]	; (80064c8 <LSM6DSO_0_Probe+0x160>)
 80063f8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80063fa:	4b34      	ldr	r3, [pc, #208]	; (80064cc <LSM6DSO_0_Probe+0x164>)
 80063fc:	4a31      	ldr	r2, [pc, #196]	; (80064c4 <LSM6DSO_0_Probe+0x15c>)
 80063fe:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8006400:	4b33      	ldr	r3, [pc, #204]	; (80064d0 <LSM6DSO_0_Probe+0x168>)
 8006402:	4a34      	ldr	r2, [pc, #208]	; (80064d4 <LSM6DSO_0_Probe+0x16c>)
 8006404:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d11d      	bne.n	8006448 <LSM6DSO_0_Probe+0xe0>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d018      	beq.n	8006448 <LSM6DSO_0_Probe+0xe0>
 8006416:	7b7b      	ldrb	r3, [r7, #13]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d115      	bne.n	8006448 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800641c:	4b2e      	ldr	r3, [pc, #184]	; (80064d8 <LSM6DSO_0_Probe+0x170>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a2e      	ldr	r2, [pc, #184]	; (80064dc <LSM6DSO_0_Probe+0x174>)
 8006422:	492f      	ldr	r1, [pc, #188]	; (80064e0 <LSM6DSO_0_Probe+0x178>)
 8006424:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006428:	4b29      	ldr	r3, [pc, #164]	; (80064d0 <LSM6DSO_0_Probe+0x168>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a27      	ldr	r2, [pc, #156]	; (80064cc <LSM6DSO_0_Probe+0x164>)
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	4610      	mov	r0, r2
 8006434:	4798      	blx	r3
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800643c:	f06f 0304 	mvn.w	r3, #4
 8006440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006442:	e001      	b.n	8006448 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006444:	2300      	movs	r3, #0
 8006446:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d11d      	bne.n	800648a <LSM6DSO_0_Probe+0x122>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d018      	beq.n	800648a <LSM6DSO_0_Probe+0x122>
 8006458:	7b3b      	ldrb	r3, [r7, #12]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d115      	bne.n	800648a <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800645e:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <LSM6DSO_0_Probe+0x170>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <LSM6DSO_0_Probe+0x174>)
 8006464:	491f      	ldr	r1, [pc, #124]	; (80064e4 <LSM6DSO_0_Probe+0x17c>)
 8006466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800646a:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <LSM6DSO_0_Probe+0x168>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a16      	ldr	r2, [pc, #88]	; (80064cc <LSM6DSO_0_Probe+0x164>)
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800647e:	f06f 0304 	mvn.w	r3, #4
 8006482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006484:	e001      	b.n	800648a <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006486:	2300      	movs	r3, #0
 8006488:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800648a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d107      	bne.n	80064a0 <LSM6DSO_0_Probe+0x138>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800649a:	f06f 0304 	mvn.w	r3, #4
 800649e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80064a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3750      	adds	r7, #80	; 0x50
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	080015e1 	.word	0x080015e1
 80064b0:	0800165d 	.word	0x0800165d
 80064b4:	08001711 	.word	0x08001711
 80064b8:	080016ad 	.word	0x080016ad
 80064bc:	08001775 	.word	0x08001775
 80064c0:	08006895 	.word	0x08006895
 80064c4:	200005d0 	.word	0x200005d0
 80064c8:	200005c4 	.word	0x200005c4
 80064cc:	20000588 	.word	0x20000588
 80064d0:	200005b8 	.word	0x200005b8
 80064d4:	20000074 	.word	0x20000074
 80064d8:	200000cc 	.word	0x200000cc
 80064dc:	20000594 	.word	0x20000594
 80064e0:	200000a8 	.word	0x200000a8
 80064e4:	20000084 	.word	0x20000084

080064e8 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b094      	sub	sp, #80	; 0x50
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80064f4:	2300      	movs	r3, #0
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 80064f8:	2333      	movs	r3, #51	; 0x33
 80064fa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80064fe:	4b40      	ldr	r3, [pc, #256]	; (8006600 <LIS2DW12_0_Probe+0x118>)
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006502:	4b40      	ldr	r3, [pc, #256]	; (8006604 <LIS2DW12_0_Probe+0x11c>)
 8006504:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006506:	4b40      	ldr	r3, [pc, #256]	; (8006608 <LIS2DW12_0_Probe+0x120>)
 8006508:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800650a:	4b40      	ldr	r3, [pc, #256]	; (800660c <LIS2DW12_0_Probe+0x124>)
 800650c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800650e:	4b40      	ldr	r3, [pc, #256]	; (8006610 <LIS2DW12_0_Probe+0x128>)
 8006510:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006512:	4b40      	ldr	r3, [pc, #256]	; (8006614 <LIS2DW12_0_Probe+0x12c>)
 8006514:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800651a:	4619      	mov	r1, r3
 800651c:	483e      	ldr	r0, [pc, #248]	; (8006618 <LIS2DW12_0_Probe+0x130>)
 800651e:	f7fb fae5 	bl	8001aec <LIS2DW12_RegisterBusIO>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006528:	f06f 0306 	mvn.w	r3, #6
 800652c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800652e:	e062      	b.n	80065f6 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8006530:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006534:	4619      	mov	r1, r3
 8006536:	4838      	ldr	r0, [pc, #224]	; (8006618 <LIS2DW12_0_Probe+0x130>)
 8006538:	f7fb fbc6 	bl	8001cc8 <LIS2DW12_ReadID>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006542:	f06f 0306 	mvn.w	r3, #6
 8006546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006548:	e055      	b.n	80065f6 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800654a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800654e:	2b44      	cmp	r3, #68	; 0x44
 8006550:	d003      	beq.n	800655a <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006552:	f06f 0306 	mvn.w	r3, #6
 8006556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006558:	e04d      	b.n	80065f6 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800655a:	f107 030c 	add.w	r3, r7, #12
 800655e:	4619      	mov	r1, r3
 8006560:	482d      	ldr	r0, [pc, #180]	; (8006618 <LIS2DW12_0_Probe+0x130>)
 8006562:	f7fb fbc7 	bl	8001cf4 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006566:	7b7b      	ldrb	r3, [r7, #13]
 8006568:	461a      	mov	r2, r3
 800656a:	7b3b      	ldrb	r3, [r7, #12]
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	431a      	orrs	r2, r3
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4313      	orrs	r3, r2
 8006576:	4a29      	ldr	r2, [pc, #164]	; (800661c <LIS2DW12_0_Probe+0x134>)
 8006578:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800657a:	4b29      	ldr	r3, [pc, #164]	; (8006620 <LIS2DW12_0_Probe+0x138>)
 800657c:	4a26      	ldr	r2, [pc, #152]	; (8006618 <LIS2DW12_0_Probe+0x130>)
 800657e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <LIS2DW12_0_Probe+0x13c>)
 8006582:	4a29      	ldr	r2, [pc, #164]	; (8006628 <LIS2DW12_0_Probe+0x140>)
 8006584:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11e      	bne.n	80065ca <LIS2DW12_0_Probe+0xe2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d019      	beq.n	80065ca <LIS2DW12_0_Probe+0xe2>
 8006596:	7b3b      	ldrb	r3, [r7, #12]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d116      	bne.n	80065ca <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800659c:	4b23      	ldr	r3, [pc, #140]	; (800662c <LIS2DW12_0_Probe+0x144>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4a23      	ldr	r2, [pc, #140]	; (8006630 <LIS2DW12_0_Probe+0x148>)
 80065a2:	3303      	adds	r3, #3
 80065a4:	4923      	ldr	r1, [pc, #140]	; (8006634 <LIS2DW12_0_Probe+0x14c>)
 80065a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80065aa:	4b1e      	ldr	r3, [pc, #120]	; (8006624 <LIS2DW12_0_Probe+0x13c>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a1b      	ldr	r2, [pc, #108]	; (8006620 <LIS2DW12_0_Probe+0x138>)
 80065b2:	6852      	ldr	r2, [r2, #4]
 80065b4:	4610      	mov	r0, r2
 80065b6:	4798      	blx	r3
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80065be:	f06f 0304 	mvn.w	r3, #4
 80065c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c4:	e001      	b.n	80065ca <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80065ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d107      	bne.n	80065e0 <LIS2DW12_0_Probe+0xf8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80065da:	f06f 0304 	mvn.w	r3, #4
 80065de:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80065e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d107      	bne.n	80065f6 <LIS2DW12_0_Probe+0x10e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80065f0:	f06f 0304 	mvn.w	r3, #4
 80065f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80065f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3750      	adds	r7, #80	; 0x50
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	080015e1 	.word	0x080015e1
 8006604:	0800165d 	.word	0x0800165d
 8006608:	08001711 	.word	0x08001711
 800660c:	080016ad 	.word	0x080016ad
 8006610:	08001775 	.word	0x08001775
 8006614:	08006895 	.word	0x08006895
 8006618:	20000608 	.word	0x20000608
 800661c:	200005c4 	.word	0x200005c4
 8006620:	20000588 	.word	0x20000588
 8006624:	200005b8 	.word	0x200005b8
 8006628:	2000000c 	.word	0x2000000c
 800662c:	200000cc 	.word	0x200000cc
 8006630:	20000594 	.word	0x20000594
 8006634:	2000001c 	.word	0x2000001c

08006638 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b094      	sub	sp, #80	; 0x50
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8006640:	2300      	movs	r3, #0
 8006642:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006644:	2300      	movs	r3, #0
 8006646:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006648:	233d      	movs	r3, #61	; 0x3d
 800664a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800664e:	4b40      	ldr	r3, [pc, #256]	; (8006750 <LIS2MDL_0_Probe+0x118>)
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006652:	4b40      	ldr	r3, [pc, #256]	; (8006754 <LIS2MDL_0_Probe+0x11c>)
 8006654:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006656:	4b40      	ldr	r3, [pc, #256]	; (8006758 <LIS2MDL_0_Probe+0x120>)
 8006658:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800665a:	4b40      	ldr	r3, [pc, #256]	; (800675c <LIS2MDL_0_Probe+0x124>)
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800665e:	4b40      	ldr	r3, [pc, #256]	; (8006760 <LIS2MDL_0_Probe+0x128>)
 8006660:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006662:	4b40      	ldr	r3, [pc, #256]	; (8006764 <LIS2MDL_0_Probe+0x12c>)
 8006664:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800666a:	4619      	mov	r1, r3
 800666c:	483e      	ldr	r0, [pc, #248]	; (8006768 <LIS2MDL_0_Probe+0x130>)
 800666e:	f7fc fccb 	bl	8003008 <LIS2MDL_RegisterBusIO>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006678:	f06f 0306 	mvn.w	r3, #6
 800667c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667e:	e062      	b.n	8006746 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006680:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006684:	4619      	mov	r1, r3
 8006686:	4838      	ldr	r0, [pc, #224]	; (8006768 <LIS2MDL_0_Probe+0x130>)
 8006688:	f7fc fdda 	bl	8003240 <LIS2MDL_ReadID>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006692:	f06f 0306 	mvn.w	r3, #6
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006698:	e055      	b.n	8006746 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800669a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d003      	beq.n	80066aa <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80066a2:	f06f 0306 	mvn.w	r3, #6
 80066a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a8:	e04d      	b.n	8006746 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80066aa:	f107 030c 	add.w	r3, r7, #12
 80066ae:	4619      	mov	r1, r3
 80066b0:	482d      	ldr	r0, [pc, #180]	; (8006768 <LIS2MDL_0_Probe+0x130>)
 80066b2:	f7fc fdeb 	bl	800328c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80066b6:	7b7b      	ldrb	r3, [r7, #13]
 80066b8:	461a      	mov	r2, r3
 80066ba:	7b3b      	ldrb	r3, [r7, #12]
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	431a      	orrs	r2, r3
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4313      	orrs	r3, r2
 80066c6:	4a29      	ldr	r2, [pc, #164]	; (800676c <LIS2MDL_0_Probe+0x134>)
 80066c8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80066ca:	4b29      	ldr	r3, [pc, #164]	; (8006770 <LIS2MDL_0_Probe+0x138>)
 80066cc:	4a26      	ldr	r2, [pc, #152]	; (8006768 <LIS2MDL_0_Probe+0x130>)
 80066ce:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80066d0:	4b28      	ldr	r3, [pc, #160]	; (8006774 <LIS2MDL_0_Probe+0x13c>)
 80066d2:	4a29      	ldr	r2, [pc, #164]	; (8006778 <LIS2MDL_0_Probe+0x140>)
 80066d4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80066d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d11e      	bne.n	800671a <LIS2MDL_0_Probe+0xe2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d019      	beq.n	800671a <LIS2MDL_0_Probe+0xe2>
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d116      	bne.n	800671a <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80066ec:	4b23      	ldr	r3, [pc, #140]	; (800677c <LIS2MDL_0_Probe+0x144>)
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	4a23      	ldr	r2, [pc, #140]	; (8006780 <LIS2MDL_0_Probe+0x148>)
 80066f2:	3306      	adds	r3, #6
 80066f4:	4923      	ldr	r1, [pc, #140]	; (8006784 <LIS2MDL_0_Probe+0x14c>)
 80066f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 80066fa:	4b1e      	ldr	r3, [pc, #120]	; (8006774 <LIS2MDL_0_Probe+0x13c>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1b      	ldr	r2, [pc, #108]	; (8006770 <LIS2MDL_0_Probe+0x138>)
 8006702:	6892      	ldr	r2, [r2, #8]
 8006704:	4610      	mov	r0, r2
 8006706:	4798      	blx	r3
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800670e:	f06f 0304 	mvn.w	r3, #4
 8006712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006714:	e001      	b.n	800671a <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006716:	2300      	movs	r3, #0
 8006718:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800671a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <LIS2MDL_0_Probe+0xf8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800672a:	f06f 0304 	mvn.w	r3, #4
 800672e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d107      	bne.n	8006746 <LIS2MDL_0_Probe+0x10e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006740:	f06f 0304 	mvn.w	r3, #4
 8006744:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006748:	4618      	mov	r0, r3
 800674a:	3750      	adds	r7, #80	; 0x50
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	080015e1 	.word	0x080015e1
 8006754:	0800165d 	.word	0x0800165d
 8006758:	08001711 	.word	0x08001711
 800675c:	080016ad 	.word	0x080016ad
 8006760:	08001775 	.word	0x08001775
 8006764:	08006895 	.word	0x08006895
 8006768:	20000644 	.word	0x20000644
 800676c:	200005c4 	.word	0x200005c4
 8006770:	20000588 	.word	0x20000588
 8006774:	200005b8 	.word	0x200005b8
 8006778:	20000040 	.word	0x20000040
 800677c:	200000cc 	.word	0x200000cc
 8006780:	20000594 	.word	0x20000594
 8006784:	20000050 	.word	0x20000050

08006788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <HAL_Init+0x3c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a0b      	ldr	r2, [pc, #44]	; (80067c4 <HAL_Init+0x3c>)
 8006798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800679e:	2003      	movs	r0, #3
 80067a0:	f000 f94e 	bl	8006a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80067a4:	2000      	movs	r0, #0
 80067a6:	f000 f80f 	bl	80067c8 <HAL_InitTick>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	71fb      	strb	r3, [r7, #7]
 80067b4:	e001      	b.n	80067ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80067b6:	f7fa fdff 	bl	80013b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80067ba:	79fb      	ldrb	r3, [r7, #7]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	58004000 	.word	0x58004000

080067c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80067d4:	4b17      	ldr	r3, [pc, #92]	; (8006834 <HAL_InitTick+0x6c>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d024      	beq.n	8006826 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80067dc:	f002 fbf4 	bl	8008fc8 <HAL_RCC_GetHCLKFreq>
 80067e0:	4602      	mov	r2, r0
 80067e2:	4b14      	ldr	r3, [pc, #80]	; (8006834 <HAL_InitTick+0x6c>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f948 	bl	8006a8a <HAL_SYSTICK_Config>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10f      	bne.n	8006820 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b0f      	cmp	r3, #15
 8006804:	d809      	bhi.n	800681a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006806:	2200      	movs	r2, #0
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	f000 f922 	bl	8006a56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006812:	4a09      	ldr	r2, [pc, #36]	; (8006838 <HAL_InitTick+0x70>)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	e007      	b.n	800682a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	73fb      	strb	r3, [r7, #15]
 800681e:	e004      	b.n	800682a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
 8006824:	e001      	b.n	800682a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	200000e4 	.word	0x200000e4
 8006838:	200000e0 	.word	0x200000e0

0800683c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <HAL_IncTick+0x20>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	4b06      	ldr	r3, [pc, #24]	; (8006860 <HAL_IncTick+0x24>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4413      	add	r3, r2
 800684c:	4a04      	ldr	r2, [pc, #16]	; (8006860 <HAL_IncTick+0x24>)
 800684e:	6013      	str	r3, [r2, #0]
}
 8006850:	bf00      	nop
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	200000e4 	.word	0x200000e4
 8006860:	20000678 	.word	0x20000678

08006864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  return uwTick;
 8006868:	4b03      	ldr	r3, [pc, #12]	; (8006878 <HAL_GetTick+0x14>)
 800686a:	681b      	ldr	r3, [r3, #0]
}
 800686c:	4618      	mov	r0, r3
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	20000678 	.word	0x20000678

0800687c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006880:	4b03      	ldr	r3, [pc, #12]	; (8006890 <HAL_GetTickPrio+0x14>)
 8006882:	681b      	ldr	r3, [r3, #0]
}
 8006884:	4618      	mov	r0, r3
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	200000e0 	.word	0x200000e0

08006894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800689c:	f7ff ffe2 	bl	8006864 <HAL_GetTick>
 80068a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d005      	beq.n	80068ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068ae:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <HAL_Delay+0x44>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80068ba:	bf00      	nop
 80068bc:	f7ff ffd2 	bl	8006864 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d8f7      	bhi.n	80068bc <HAL_Delay+0x28>
  {
  }
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	200000e4 	.word	0x200000e4

080068dc <__NVIC_SetPriorityGrouping>:
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068ec:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <__NVIC_SetPriorityGrouping+0x44>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068f8:	4013      	ands	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800690e:	4a04      	ldr	r2, [pc, #16]	; (8006920 <__NVIC_SetPriorityGrouping+0x44>)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	60d3      	str	r3, [r2, #12]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	e000ed00 	.word	0xe000ed00

08006924 <__NVIC_GetPriorityGrouping>:
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006928:	4b04      	ldr	r3, [pc, #16]	; (800693c <__NVIC_GetPriorityGrouping+0x18>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	f003 0307 	and.w	r3, r3, #7
}
 8006932:	4618      	mov	r0, r3
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	e000ed00 	.word	0xe000ed00

08006940 <__NVIC_SetPriority>:
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	6039      	str	r1, [r7, #0]
 800694a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800694c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006950:	2b00      	cmp	r3, #0
 8006952:	db0a      	blt.n	800696a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	b2da      	uxtb	r2, r3
 8006958:	490c      	ldr	r1, [pc, #48]	; (800698c <__NVIC_SetPriority+0x4c>)
 800695a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695e:	0112      	lsls	r2, r2, #4
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	440b      	add	r3, r1
 8006964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006968:	e00a      	b.n	8006980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	b2da      	uxtb	r2, r3
 800696e:	4908      	ldr	r1, [pc, #32]	; (8006990 <__NVIC_SetPriority+0x50>)
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	3b04      	subs	r3, #4
 8006978:	0112      	lsls	r2, r2, #4
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	440b      	add	r3, r1
 800697e:	761a      	strb	r2, [r3, #24]
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	e000e100 	.word	0xe000e100
 8006990:	e000ed00 	.word	0xe000ed00

08006994 <NVIC_EncodePriority>:
{
 8006994:	b480      	push	{r7}
 8006996:	b089      	sub	sp, #36	; 0x24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	f1c3 0307 	rsb	r3, r3, #7
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	bf28      	it	cs
 80069b2:	2304      	movcs	r3, #4
 80069b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	3304      	adds	r3, #4
 80069ba:	2b06      	cmp	r3, #6
 80069bc:	d902      	bls.n	80069c4 <NVIC_EncodePriority+0x30>
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	3b03      	subs	r3, #3
 80069c2:	e000      	b.n	80069c6 <NVIC_EncodePriority+0x32>
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43da      	mvns	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	401a      	ands	r2, r3
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069dc:	f04f 31ff 	mov.w	r1, #4294967295
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	fa01 f303 	lsl.w	r3, r1, r3
 80069e6:	43d9      	mvns	r1, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069ec:	4313      	orrs	r3, r2
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3724      	adds	r7, #36	; 0x24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <SysTick_Config>:
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a0c:	d301      	bcc.n	8006a12 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e00f      	b.n	8006a32 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a12:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <SysTick_Config+0x40>)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a1a:	210f      	movs	r1, #15
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a20:	f7ff ff8e 	bl	8006940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <SysTick_Config+0x40>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a2a:	4b04      	ldr	r3, [pc, #16]	; (8006a3c <SysTick_Config+0x40>)
 8006a2c:	2207      	movs	r2, #7
 8006a2e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	e000e010 	.word	0xe000e010

08006a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff ff47 	bl	80068dc <__NVIC_SetPriorityGrouping>
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b086      	sub	sp, #24
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006a64:	f7ff ff5e 	bl	8006924 <__NVIC_GetPriorityGrouping>
 8006a68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	6978      	ldr	r0, [r7, #20]
 8006a70:	f7ff ff90 	bl	8006994 <NVIC_EncodePriority>
 8006a74:	4602      	mov	r2, r0
 8006a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff ff5f 	bl	8006940 <__NVIC_SetPriority>
}
 8006a82:	bf00      	nop
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff ffb2 	bl	80069fc <SysTick_Config>
 8006a98:	4603      	mov	r3, r0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ab2:	e14c      	b.n	8006d4e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	2101      	movs	r1, #1
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 813e 	beq.w	8006d48 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d005      	beq.n	8006ae4 <HAL_GPIO_Init+0x40>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d130      	bne.n	8006b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	2203      	movs	r2, #3
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	43db      	mvns	r3, r3
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4013      	ands	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43db      	mvns	r3, r3
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4013      	ands	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	091b      	lsrs	r3, r3, #4
 8006b30:	f003 0201 	and.w	r2, r3, #1
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d017      	beq.n	8006b82 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	43db      	mvns	r3, r3
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4013      	ands	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d123      	bne.n	8006bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	08da      	lsrs	r2, r3, #3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3208      	adds	r2, #8
 8006b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	220f      	movs	r2, #15
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	43db      	mvns	r3, r3
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	08da      	lsrs	r2, r3, #3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3208      	adds	r2, #8
 8006bd0:	6939      	ldr	r1, [r7, #16]
 8006bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	2203      	movs	r2, #3
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	43db      	mvns	r3, r3
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4013      	ands	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f003 0203 	and.w	r2, r3, #3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 8098 	beq.w	8006d48 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006c18:	4a54      	ldr	r2, [pc, #336]	; (8006d6c <HAL_GPIO_Init+0x2c8>)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	089b      	lsrs	r3, r3, #2
 8006c1e:	3302      	adds	r3, #2
 8006c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	220f      	movs	r2, #15
 8006c30:	fa02 f303 	lsl.w	r3, r2, r3
 8006c34:	43db      	mvns	r3, r3
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006c42:	d019      	beq.n	8006c78 <HAL_GPIO_Init+0x1d4>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a4a      	ldr	r2, [pc, #296]	; (8006d70 <HAL_GPIO_Init+0x2cc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d013      	beq.n	8006c74 <HAL_GPIO_Init+0x1d0>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a49      	ldr	r2, [pc, #292]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00d      	beq.n	8006c70 <HAL_GPIO_Init+0x1cc>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a48      	ldr	r2, [pc, #288]	; (8006d78 <HAL_GPIO_Init+0x2d4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d007      	beq.n	8006c6c <HAL_GPIO_Init+0x1c8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a47      	ldr	r2, [pc, #284]	; (8006d7c <HAL_GPIO_Init+0x2d8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <HAL_GPIO_Init+0x1c4>
 8006c64:	2304      	movs	r3, #4
 8006c66:	e008      	b.n	8006c7a <HAL_GPIO_Init+0x1d6>
 8006c68:	2307      	movs	r3, #7
 8006c6a:	e006      	b.n	8006c7a <HAL_GPIO_Init+0x1d6>
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e004      	b.n	8006c7a <HAL_GPIO_Init+0x1d6>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e002      	b.n	8006c7a <HAL_GPIO_Init+0x1d6>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <HAL_GPIO_Init+0x1d6>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	f002 0203 	and.w	r2, r2, #3
 8006c80:	0092      	lsls	r2, r2, #2
 8006c82:	4093      	lsls	r3, r2
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006c8a:	4938      	ldr	r1, [pc, #224]	; (8006d6c <HAL_GPIO_Init+0x2c8>)
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	089b      	lsrs	r3, r3, #2
 8006c90:	3302      	adds	r3, #2
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c98:	4b39      	ldr	r3, [pc, #228]	; (8006d80 <HAL_GPIO_Init+0x2dc>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006cbc:	4a30      	ldr	r2, [pc, #192]	; (8006d80 <HAL_GPIO_Init+0x2dc>)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cc2:	4b2f      	ldr	r3, [pc, #188]	; (8006d80 <HAL_GPIO_Init+0x2dc>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006ce6:	4a26      	ldr	r2, [pc, #152]	; (8006d80 <HAL_GPIO_Init+0x2dc>)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006cec:	4b24      	ldr	r3, [pc, #144]	; (8006d80 <HAL_GPIO_Init+0x2dc>)
 8006cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d12:	4a1b      	ldr	r2, [pc, #108]	; (8006d80 <HAL_GPIO_Init+0x2dc>)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8006d1a:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <HAL_GPIO_Init+0x2dc>)
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	43db      	mvns	r3, r3
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d40:	4a0f      	ldr	r2, [pc, #60]	; (8006d80 <HAL_GPIO_Init+0x2dc>)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f47f aeab 	bne.w	8006ab4 <HAL_GPIO_Init+0x10>
  }
}
 8006d5e:	bf00      	nop
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	40010000 	.word	0x40010000
 8006d70:	48000400 	.word	0x48000400
 8006d74:	48000800 	.word	0x48000800
 8006d78:	48000c00 	.word	0x48000c00
 8006d7c:	48001000 	.word	0x48001000
 8006d80:	58000800 	.word	0x58000800

08006d84 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006d92:	e0bb      	b.n	8006f0c <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006d94:	2201      	movs	r2, #1
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80ae 	beq.w	8006f06 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006daa:	4a5f      	ldr	r2, [pc, #380]	; (8006f28 <HAL_GPIO_DeInit+0x1a4>)
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	3302      	adds	r3, #2
 8006db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006dd2:	d019      	beq.n	8006e08 <HAL_GPIO_DeInit+0x84>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a55      	ldr	r2, [pc, #340]	; (8006f2c <HAL_GPIO_DeInit+0x1a8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d013      	beq.n	8006e04 <HAL_GPIO_DeInit+0x80>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a54      	ldr	r2, [pc, #336]	; (8006f30 <HAL_GPIO_DeInit+0x1ac>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00d      	beq.n	8006e00 <HAL_GPIO_DeInit+0x7c>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a53      	ldr	r2, [pc, #332]	; (8006f34 <HAL_GPIO_DeInit+0x1b0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d007      	beq.n	8006dfc <HAL_GPIO_DeInit+0x78>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a52      	ldr	r2, [pc, #328]	; (8006f38 <HAL_GPIO_DeInit+0x1b4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d101      	bne.n	8006df8 <HAL_GPIO_DeInit+0x74>
 8006df4:	2304      	movs	r3, #4
 8006df6:	e008      	b.n	8006e0a <HAL_GPIO_DeInit+0x86>
 8006df8:	2307      	movs	r3, #7
 8006dfa:	e006      	b.n	8006e0a <HAL_GPIO_DeInit+0x86>
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e004      	b.n	8006e0a <HAL_GPIO_DeInit+0x86>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e002      	b.n	8006e0a <HAL_GPIO_DeInit+0x86>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <HAL_GPIO_DeInit+0x86>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	f002 0203 	and.w	r2, r2, #3
 8006e10:	0092      	lsls	r2, r2, #2
 8006e12:	4093      	lsls	r3, r2
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d136      	bne.n	8006e88 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006e1a:	4b48      	ldr	r3, [pc, #288]	; (8006f3c <HAL_GPIO_DeInit+0x1b8>)
 8006e1c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	43db      	mvns	r3, r3
 8006e24:	4945      	ldr	r1, [pc, #276]	; (8006f3c <HAL_GPIO_DeInit+0x1b8>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006e2c:	4b43      	ldr	r3, [pc, #268]	; (8006f3c <HAL_GPIO_DeInit+0x1b8>)
 8006e2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	43db      	mvns	r3, r3
 8006e36:	4941      	ldr	r1, [pc, #260]	; (8006f3c <HAL_GPIO_DeInit+0x1b8>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006e3e:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <HAL_GPIO_DeInit+0x1b8>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	43db      	mvns	r3, r3
 8006e46:	493d      	ldr	r1, [pc, #244]	; (8006f3c <HAL_GPIO_DeInit+0x1b8>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006e4c:	4b3b      	ldr	r3, [pc, #236]	; (8006f3c <HAL_GPIO_DeInit+0x1b8>)
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	43db      	mvns	r3, r3
 8006e54:	4939      	ldr	r1, [pc, #228]	; (8006f3c <HAL_GPIO_DeInit+0x1b8>)
 8006e56:	4013      	ands	r3, r2
 8006e58:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	220f      	movs	r2, #15
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006e6a:	4a2f      	ldr	r2, [pc, #188]	; (8006f28 <HAL_GPIO_DeInit+0x1a4>)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	089b      	lsrs	r3, r3, #2
 8006e70:	3302      	adds	r3, #2
 8006e72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	43da      	mvns	r2, r3
 8006e7a:	482b      	ldr	r0, [pc, #172]	; (8006f28 <HAL_GPIO_DeInit+0x1a4>)
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	089b      	lsrs	r3, r3, #2
 8006e80:	400a      	ands	r2, r1
 8006e82:	3302      	adds	r3, #2
 8006e84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	2103      	movs	r1, #3
 8006e92:	fa01 f303 	lsl.w	r3, r1, r3
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	08da      	lsrs	r2, r3, #3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3208      	adds	r2, #8
 8006ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	220f      	movs	r2, #15
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	43db      	mvns	r3, r3
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	08d2      	lsrs	r2, r2, #3
 8006ebc:	4019      	ands	r1, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3208      	adds	r2, #8
 8006ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	2103      	movs	r1, #3
 8006ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	401a      	ands	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	2103      	movs	r1, #3
 8006efa:	fa01 f303 	lsl.w	r3, r1, r3
 8006efe:	43db      	mvns	r3, r3
 8006f00:	401a      	ands	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	fa22 f303 	lsr.w	r3, r2, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f47f af3d 	bne.w	8006d94 <HAL_GPIO_DeInit+0x10>
  }
}
 8006f1a:	bf00      	nop
 8006f1c:	bf00      	nop
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	40010000 	.word	0x40010000
 8006f2c:	48000400 	.word	0x48000400
 8006f30:	48000800 	.word	0x48000800
 8006f34:	48000c00 	.word	0x48000c00
 8006f38:	48001000 	.word	0x48001000
 8006f3c:	58000800 	.word	0x58000800

08006f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	807b      	strh	r3, [r7, #2]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f50:	787b      	ldrb	r3, [r7, #1]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f56:	887a      	ldrh	r2, [r7, #2]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f5c:	e002      	b.n	8006f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f5e:	887a      	ldrh	r2, [r7, #2]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e08d      	b.n	800709e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f8b4 	bl	8007104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2224      	movs	r2, #36	; 0x24
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0201 	bic.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d107      	bne.n	8006fea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fe6:	609a      	str	r2, [r3, #8]
 8006fe8:	e006      	b.n	8006ff8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ff6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d108      	bne.n	8007012 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800700e:	605a      	str	r2, [r3, #4]
 8007010:	e007      	b.n	8007022 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007020:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68da      	ldr	r2, [r3, #12]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69d9      	ldr	r1, [r3, #28]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e021      	b.n	80070fc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2224      	movs	r2, #36	; 0x24
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f821 	bl	8007118 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af02      	add	r7, sp, #8
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	4608      	mov	r0, r1
 8007136:	4611      	mov	r1, r2
 8007138:	461a      	mov	r2, r3
 800713a:	4603      	mov	r3, r0
 800713c:	817b      	strh	r3, [r7, #10]
 800713e:	460b      	mov	r3, r1
 8007140:	813b      	strh	r3, [r7, #8]
 8007142:	4613      	mov	r3, r2
 8007144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b20      	cmp	r3, #32
 8007150:	f040 80f9 	bne.w	8007346 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <HAL_I2C_Mem_Write+0x34>
 800715a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007166:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e0ed      	b.n	8007348 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_I2C_Mem_Write+0x4e>
 8007176:	2302      	movs	r3, #2
 8007178:	e0e6      	b.n	8007348 <HAL_I2C_Mem_Write+0x21c>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007182:	f7ff fb6f 	bl	8006864 <HAL_GetTick>
 8007186:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2319      	movs	r3, #25
 800718e:	2201      	movs	r2, #1
 8007190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fadd 	bl	8007754 <I2C_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e0d1      	b.n	8007348 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2221      	movs	r2, #33	; 0x21
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2240      	movs	r2, #64	; 0x40
 80071b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a3a      	ldr	r2, [r7, #32]
 80071be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071cc:	88f8      	ldrh	r0, [r7, #6]
 80071ce:	893a      	ldrh	r2, [r7, #8]
 80071d0:	8979      	ldrh	r1, [r7, #10]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	4603      	mov	r3, r0
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f9ed 	bl	80075bc <I2C_RequestMemoryWrite>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e0a9      	b.n	8007348 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2bff      	cmp	r3, #255	; 0xff
 80071fc:	d90e      	bls.n	800721c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	22ff      	movs	r2, #255	; 0xff
 8007202:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007208:	b2da      	uxtb	r2, r3
 800720a:	8979      	ldrh	r1, [r7, #10]
 800720c:	2300      	movs	r3, #0
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fc61 	bl	8007adc <I2C_TransferConfig>
 800721a:	e00f      	b.n	800723c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800722a:	b2da      	uxtb	r2, r3
 800722c:	8979      	ldrh	r1, [r7, #10]
 800722e:	2300      	movs	r3, #0
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 fc50 	bl	8007adc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fae0 	bl	8007806 <I2C_WaitOnTXISFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e07b      	b.n	8007348 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	781a      	ldrb	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d034      	beq.n	80072f4 <HAL_I2C_Mem_Write+0x1c8>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800728e:	2b00      	cmp	r3, #0
 8007290:	d130      	bne.n	80072f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	2200      	movs	r2, #0
 800729a:	2180      	movs	r1, #128	; 0x80
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fa59 	bl	8007754 <I2C_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e04d      	b.n	8007348 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2bff      	cmp	r3, #255	; 0xff
 80072b4:	d90e      	bls.n	80072d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	22ff      	movs	r2, #255	; 0xff
 80072ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	8979      	ldrh	r1, [r7, #10]
 80072c4:	2300      	movs	r3, #0
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fc05 	bl	8007adc <I2C_TransferConfig>
 80072d2:	e00f      	b.n	80072f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	8979      	ldrh	r1, [r7, #10]
 80072e6:	2300      	movs	r3, #0
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fbf4 	bl	8007adc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d19e      	bne.n	800723c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fac6 	bl	8007894 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e01a      	b.n	8007348 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2220      	movs	r2, #32
 8007318:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6859      	ldr	r1, [r3, #4]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <HAL_I2C_Mem_Write+0x224>)
 8007326:	400b      	ands	r3, r1
 8007328:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e000      	b.n	8007348 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007346:	2302      	movs	r3, #2
  }
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	fe00e800 	.word	0xfe00e800

08007354 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	4608      	mov	r0, r1
 800735e:	4611      	mov	r1, r2
 8007360:	461a      	mov	r2, r3
 8007362:	4603      	mov	r3, r0
 8007364:	817b      	strh	r3, [r7, #10]
 8007366:	460b      	mov	r3, r1
 8007368:	813b      	strh	r3, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b20      	cmp	r3, #32
 8007378:	f040 80fd 	bne.w	8007576 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_I2C_Mem_Read+0x34>
 8007382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d105      	bne.n	8007394 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800738e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e0f1      	b.n	8007578 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <HAL_I2C_Mem_Read+0x4e>
 800739e:	2302      	movs	r3, #2
 80073a0:	e0ea      	b.n	8007578 <HAL_I2C_Mem_Read+0x224>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80073aa:	f7ff fa5b 	bl	8006864 <HAL_GetTick>
 80073ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2319      	movs	r3, #25
 80073b6:	2201      	movs	r2, #1
 80073b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f9c9 	bl	8007754 <I2C_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e0d5      	b.n	8007578 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2222      	movs	r2, #34	; 0x22
 80073d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2240      	movs	r2, #64	; 0x40
 80073d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a3a      	ldr	r2, [r7, #32]
 80073e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073f4:	88f8      	ldrh	r0, [r7, #6]
 80073f6:	893a      	ldrh	r2, [r7, #8]
 80073f8:	8979      	ldrh	r1, [r7, #10]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	4603      	mov	r3, r0
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f92d 	bl	8007664 <I2C_RequestMemoryRead>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e0ad      	b.n	8007578 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	2bff      	cmp	r3, #255	; 0xff
 8007424:	d90e      	bls.n	8007444 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	22ff      	movs	r2, #255	; 0xff
 800742a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007430:	b2da      	uxtb	r2, r3
 8007432:	8979      	ldrh	r1, [r7, #10]
 8007434:	4b52      	ldr	r3, [pc, #328]	; (8007580 <HAL_I2C_Mem_Read+0x22c>)
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fb4d 	bl	8007adc <I2C_TransferConfig>
 8007442:	e00f      	b.n	8007464 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007452:	b2da      	uxtb	r2, r3
 8007454:	8979      	ldrh	r1, [r7, #10]
 8007456:	4b4a      	ldr	r3, [pc, #296]	; (8007580 <HAL_I2C_Mem_Read+0x22c>)
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fb3c 	bl	8007adc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	2200      	movs	r2, #0
 800746c:	2104      	movs	r1, #4
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f970 	bl	8007754 <I2C_WaitOnFlagUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e07c      	b.n	8007578 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d034      	beq.n	8007524 <HAL_I2C_Mem_Read+0x1d0>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d130      	bne.n	8007524 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	2200      	movs	r2, #0
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f941 	bl	8007754 <I2C_WaitOnFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e04d      	b.n	8007578 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2bff      	cmp	r3, #255	; 0xff
 80074e4:	d90e      	bls.n	8007504 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	22ff      	movs	r2, #255	; 0xff
 80074ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	8979      	ldrh	r1, [r7, #10]
 80074f4:	2300      	movs	r3, #0
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 faed 	bl	8007adc <I2C_TransferConfig>
 8007502:	e00f      	b.n	8007524 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007512:	b2da      	uxtb	r2, r3
 8007514:	8979      	ldrh	r1, [r7, #10]
 8007516:	2300      	movs	r3, #0
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fadc 	bl	8007adc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d19a      	bne.n	8007464 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f9ae 	bl	8007894 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e01a      	b.n	8007578 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2220      	movs	r2, #32
 8007548:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6859      	ldr	r1, [r3, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <HAL_I2C_Mem_Read+0x230>)
 8007556:	400b      	ands	r3, r1
 8007558:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e000      	b.n	8007578 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007576:	2302      	movs	r3, #2
  }
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	80002400 	.word	0x80002400
 8007584:	fe00e800 	.word	0xfe00e800

08007588 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007596:	b2db      	uxtb	r3, r3
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	4608      	mov	r0, r1
 80075c6:	4611      	mov	r1, r2
 80075c8:	461a      	mov	r2, r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	817b      	strh	r3, [r7, #10]
 80075ce:	460b      	mov	r3, r1
 80075d0:	813b      	strh	r3, [r7, #8]
 80075d2:	4613      	mov	r3, r2
 80075d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075d6:	88fb      	ldrh	r3, [r7, #6]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	8979      	ldrh	r1, [r7, #10]
 80075dc:	4b20      	ldr	r3, [pc, #128]	; (8007660 <I2C_RequestMemoryWrite+0xa4>)
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fa79 	bl	8007adc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	69b9      	ldr	r1, [r7, #24]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f909 	bl	8007806 <I2C_WaitOnTXISFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e02c      	b.n	8007658 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075fe:	88fb      	ldrh	r3, [r7, #6]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d105      	bne.n	8007610 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007604:	893b      	ldrh	r3, [r7, #8]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	629a      	str	r2, [r3, #40]	; 0x28
 800760e:	e015      	b.n	800763c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007610:	893b      	ldrh	r3, [r7, #8]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	b29b      	uxth	r3, r3
 8007616:	b2da      	uxtb	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	69b9      	ldr	r1, [r7, #24]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f8ef 	bl	8007806 <I2C_WaitOnTXISFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e012      	b.n	8007658 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007632:	893b      	ldrh	r3, [r7, #8]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2200      	movs	r2, #0
 8007644:	2180      	movs	r1, #128	; 0x80
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 f884 	bl	8007754 <I2C_WaitOnFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e000      	b.n	8007658 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	80002000 	.word	0x80002000

08007664 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	4608      	mov	r0, r1
 800766e:	4611      	mov	r1, r2
 8007670:	461a      	mov	r2, r3
 8007672:	4603      	mov	r3, r0
 8007674:	817b      	strh	r3, [r7, #10]
 8007676:	460b      	mov	r3, r1
 8007678:	813b      	strh	r3, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	b2da      	uxtb	r2, r3
 8007682:	8979      	ldrh	r1, [r7, #10]
 8007684:	4b20      	ldr	r3, [pc, #128]	; (8007708 <I2C_RequestMemoryRead+0xa4>)
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	2300      	movs	r3, #0
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fa26 	bl	8007adc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	69b9      	ldr	r1, [r7, #24]
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f8b6 	bl	8007806 <I2C_WaitOnTXISFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e02c      	b.n	80076fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076a4:	88fb      	ldrh	r3, [r7, #6]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d105      	bne.n	80076b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076aa:	893b      	ldrh	r3, [r7, #8]
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	629a      	str	r2, [r3, #40]	; 0x28
 80076b4:	e015      	b.n	80076e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076b6:	893b      	ldrh	r3, [r7, #8]
 80076b8:	0a1b      	lsrs	r3, r3, #8
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	69b9      	ldr	r1, [r7, #24]
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f89c 	bl	8007806 <I2C_WaitOnTXISFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e012      	b.n	80076fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076d8:	893b      	ldrh	r3, [r7, #8]
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2200      	movs	r2, #0
 80076ea:	2140      	movs	r1, #64	; 0x40
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f831 	bl	8007754 <I2C_WaitOnFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e000      	b.n	80076fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	80002000 	.word	0x80002000

0800770c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b02      	cmp	r3, #2
 8007720:	d103      	bne.n	800772a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2200      	movs	r2, #0
 8007728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b01      	cmp	r3, #1
 8007736:	d007      	beq.n	8007748 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699a      	ldr	r2, [r3, #24]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	619a      	str	r2, [r3, #24]
  }
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007764:	e03b      	b.n	80077de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f8d6 	bl	800791c <I2C_IsErrorOccurred>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e041      	b.n	80077fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d02d      	beq.n	80077de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007782:	f7ff f86f 	bl	8006864 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d302      	bcc.n	8007798 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d122      	bne.n	80077de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4013      	ands	r3, r2
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	bf0c      	ite	eq
 80077a8:	2301      	moveq	r3, #1
 80077aa:	2300      	movne	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	461a      	mov	r2, r3
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d113      	bne.n	80077de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ba:	f043 0220 	orr.w	r2, r3, #32
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e00f      	b.n	80077fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4013      	ands	r3, r2
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	bf0c      	ite	eq
 80077ee:	2301      	moveq	r3, #1
 80077f0:	2300      	movne	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	461a      	mov	r2, r3
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d0b4      	beq.n	8007766 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007812:	e033      	b.n	800787c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f87f 	bl	800791c <I2C_IsErrorOccurred>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e031      	b.n	800788c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d025      	beq.n	800787c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007830:	f7ff f818 	bl	8006864 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	429a      	cmp	r2, r3
 800783e:	d302      	bcc.n	8007846 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d11a      	bne.n	800787c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b02      	cmp	r3, #2
 8007852:	d013      	beq.n	800787c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007858:	f043 0220 	orr.w	r2, r3, #32
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e007      	b.n	800788c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b02      	cmp	r3, #2
 8007888:	d1c4      	bne.n	8007814 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078a0:	e02f      	b.n	8007902 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 f838 	bl	800791c <I2C_IsErrorOccurred>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e02d      	b.n	8007912 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b6:	f7fe ffd5 	bl	8006864 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d302      	bcc.n	80078cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11a      	bne.n	8007902 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d013      	beq.n	8007902 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078de:	f043 0220 	orr.w	r2, r3, #32
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e007      	b.n	8007912 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	f003 0320 	and.w	r3, r3, #32
 800790c:	2b20      	cmp	r3, #32
 800790e:	d1c8      	bne.n	80078a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08a      	sub	sp, #40	; 0x28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2b00      	cmp	r3, #0
 8007946:	d068      	beq.n	8007a1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2210      	movs	r2, #16
 800794e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007950:	e049      	b.n	80079e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d045      	beq.n	80079e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800795a:	f7fe ff83 	bl	8006864 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	429a      	cmp	r2, r3
 8007968:	d302      	bcc.n	8007970 <I2C_IsErrorOccurred+0x54>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d13a      	bne.n	80079e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007982:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800798e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007992:	d121      	bne.n	80079d8 <I2C_IsErrorOccurred+0xbc>
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800799a:	d01d      	beq.n	80079d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800799c:	7cfb      	ldrb	r3, [r7, #19]
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d01a      	beq.n	80079d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80079b2:	f7fe ff57 	bl	8006864 <HAL_GetTick>
 80079b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079b8:	e00e      	b.n	80079d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80079ba:	f7fe ff53 	bl	8006864 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b19      	cmp	r3, #25
 80079c6:	d907      	bls.n	80079d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	f043 0320 	orr.w	r3, r3, #32
 80079ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80079d6:	e006      	b.n	80079e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f003 0320 	and.w	r3, r3, #32
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d1e9      	bne.n	80079ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f003 0320 	and.w	r3, r3, #32
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d003      	beq.n	80079fc <I2C_IsErrorOccurred+0xe0>
 80079f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0aa      	beq.n	8007952 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80079fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	f043 0304 	orr.w	r3, r3, #4
 8007a12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	f043 0301 	orr.w	r3, r3, #1
 8007a32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	f043 0308 	orr.w	r3, r3, #8
 8007a54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	f043 0302 	orr.w	r3, r3, #2
 8007a76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01c      	beq.n	8007aca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f7ff fe3b 	bl	800770c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6859      	ldr	r1, [r3, #4]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	; (8007ad8 <I2C_IsErrorOccurred+0x1bc>)
 8007aa2:	400b      	ands	r3, r1
 8007aa4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3728      	adds	r7, #40	; 0x28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	fe00e800 	.word	0xfe00e800

08007adc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	817b      	strh	r3, [r7, #10]
 8007aea:	4613      	mov	r3, r2
 8007aec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007aee:	897b      	ldrh	r3, [r7, #10]
 8007af0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007af4:	7a7b      	ldrb	r3, [r7, #9]
 8007af6:	041b      	lsls	r3, r3, #16
 8007af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007afc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	0d5b      	lsrs	r3, r3, #21
 8007b16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b1a:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <I2C_TransferConfig+0x60>)
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	43db      	mvns	r3, r3
 8007b20:	ea02 0103 	and.w	r1, r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	03ff63ff 	.word	0x03ff63ff

08007b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d138      	bne.n	8007bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d101      	bne.n	8007b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e032      	b.n	8007bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2224      	movs	r2, #36	; 0x24
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0201 	bic.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6819      	ldr	r1, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e000      	b.n	8007bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bc8:	2302      	movs	r3, #2
  }
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	d139      	bne.n	8007c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d101      	bne.n	8007bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e033      	b.n	8007c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2224      	movs	r2, #36	; 0x24
 8007c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0201 	orr.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e000      	b.n	8007c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c60:	2302      	movs	r3, #2
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e0c0      	b.n	8007e02 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d106      	bne.n	8007c9a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7f9 fbdd 	bl	8001454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2203      	movs	r2, #3
 8007c9e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f002 fc76 	bl	800a598 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]
 8007cb0:	e03e      	b.n	8007d30 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007cb2:	7bfa      	ldrb	r2, [r7, #15]
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	440b      	add	r3, r1
 8007cc0:	3311      	adds	r3, #17
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007cc6:	7bfa      	ldrb	r2, [r7, #15]
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	00db      	lsls	r3, r3, #3
 8007cd2:	440b      	add	r3, r1
 8007cd4:	3310      	adds	r3, #16
 8007cd6:	7bfa      	ldrb	r2, [r7, #15]
 8007cd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007cda:	7bfa      	ldrb	r2, [r7, #15]
 8007cdc:	6879      	ldr	r1, [r7, #4]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	440b      	add	r3, r1
 8007ce8:	3313      	adds	r3, #19
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007cee:	7bfa      	ldrb	r2, [r7, #15]
 8007cf0:	6879      	ldr	r1, [r7, #4]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	440b      	add	r3, r1
 8007cfc:	3320      	adds	r3, #32
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d02:	7bfa      	ldrb	r2, [r7, #15]
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	440b      	add	r3, r1
 8007d10:	3324      	adds	r3, #36	; 0x24
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	440b      	add	r3, r1
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	73fb      	strb	r3, [r7, #15]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	791b      	ldrb	r3, [r3, #4]
 8007d34:	7bfa      	ldrb	r2, [r7, #15]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d3bb      	bcc.n	8007cb2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]
 8007d3e:	e044      	b.n	8007dca <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d40:	7bfa      	ldrb	r2, [r7, #15]
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	440b      	add	r3, r1
 8007d4e:	f203 1351 	addw	r3, r3, #337	; 0x151
 8007d52:	2200      	movs	r2, #0
 8007d54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d56:	7bfa      	ldrb	r2, [r7, #15]
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	440b      	add	r3, r1
 8007d64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d68:	7bfa      	ldrb	r2, [r7, #15]
 8007d6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d6c:	7bfa      	ldrb	r2, [r7, #15]
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	440b      	add	r3, r1
 8007d7a:	f203 1353 	addw	r3, r3, #339	; 0x153
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d82:	7bfa      	ldrb	r2, [r7, #15]
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	440b      	add	r3, r1
 8007d90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d98:	7bfa      	ldrb	r2, [r7, #15]
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	440b      	add	r3, r1
 8007da6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007dae:	7bfa      	ldrb	r2, [r7, #15]
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	4613      	mov	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	440b      	add	r3, r1
 8007dbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	73fb      	strb	r3, [r7, #15]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	791b      	ldrb	r3, [r3, #4]
 8007dce:	7bfa      	ldrb	r2, [r7, #15]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d3b5      	bcc.n	8007d40 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007de0:	f002 fbf5 	bl	800a5ce <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	7a9b      	ldrb	r3, [r3, #10]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d102      	bne.n	8007e00 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f805 	bl	8007e0a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b085      	sub	sp, #20
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f043 0301 	orr.w	r3, r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f043 0302 	orr.w	r3, r3, #2
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
	...

08007e60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a04      	ldr	r2, [pc, #16]	; (8007e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e6e:	6013      	str	r3, [r2, #0]
}
 8007e70:	bf00      	nop
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	58000400 	.word	0x58000400

08007e80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007e84:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <HAL_PWREx_GetVoltageRange+0x18>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	58000400 	.word	0x58000400

08007e9c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eae:	d101      	bne.n	8007eb4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <LL_RCC_HSE_Enable>:
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed2:	6013      	str	r3, [r2, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <LL_RCC_HSE_Disable>:
{
 8007ede:	b480      	push	{r7}
 8007ee0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ef0:	6013      	str	r3, [r2, #0]
}
 8007ef2:	bf00      	nop
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <LL_RCC_HSE_IsReady>:
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f0e:	d101      	bne.n	8007f14 <LL_RCC_HSE_IsReady+0x18>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e000      	b.n	8007f16 <LL_RCC_HSE_IsReady+0x1a>
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <LL_RCC_HSI_Enable>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f32:	6013      	str	r3, [r2, #0]
}
 8007f34:	bf00      	nop
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <LL_RCC_HSI_Disable>:
{
 8007f3e:	b480      	push	{r7}
 8007f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f50:	6013      	str	r3, [r2, #0]
}
 8007f52:	bf00      	nop
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <LL_RCC_HSI_IsReady>:
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6e:	d101      	bne.n	8007f74 <LL_RCC_HSI_IsReady+0x18>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <LL_RCC_HSI_IsReady+0x1a>
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	061b      	lsls	r3, r3, #24
 8007f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	604b      	str	r3, [r1, #4]
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <LL_RCC_HSI48_Enable>:
{
 8007faa:	b480      	push	{r7}
 8007fac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007fc2:	bf00      	nop
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <LL_RCC_HSI48_Disable>:
{
 8007fcc:	b480      	push	{r7}
 8007fce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fdc:	f023 0301 	bic.w	r3, r3, #1
 8007fe0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007fe4:	bf00      	nop
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <LL_RCC_HSI48_IsReady>:
{
 8007fee:	b480      	push	{r7}
 8007ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d101      	bne.n	8008006 <LL_RCC_HSI48_IsReady+0x18>
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <LL_RCC_HSI48_IsReady+0x1a>
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <LL_RCC_LSE_Enable>:
{
 8008012:	b480      	push	{r7}
 8008014:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800801a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800802a:	bf00      	nop
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <LL_RCC_LSE_Disable>:
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008044:	f023 0301 	bic.w	r3, r3, #1
 8008048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800804c:	bf00      	nop
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <LL_RCC_LSE_EnableBypass>:
{
 8008056:	b480      	push	{r7}
 8008058:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800805a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008066:	f043 0304 	orr.w	r3, r3, #4
 800806a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800806e:	bf00      	nop
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <LL_RCC_LSE_DisableBypass>:
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800807c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008088:	f023 0304 	bic.w	r3, r3, #4
 800808c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008090:	bf00      	nop
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800809a:	b480      	push	{r7}
 800809c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800809e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d101      	bne.n	80080b2 <LL_RCC_LSE_IsReady+0x18>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <LL_RCC_LSE_IsReady+0x1a>
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80080be:	b480      	push	{r7}
 80080c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80080c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80080d6:	bf00      	nop
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80080e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080f0:	f023 0301 	bic.w	r3, r3, #1
 80080f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80080f8:	bf00      	nop
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8008102:	b480      	push	{r7}
 8008104:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800810a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b02      	cmp	r3, #2
 8008114:	d101      	bne.n	800811a <LL_RCC_LSI1_IsReady+0x18>
 8008116:	2301      	movs	r3, #1
 8008118:	e000      	b.n	800811c <LL_RCC_LSI1_IsReady+0x1a>
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8008126:	b480      	push	{r7}
 8008128:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800812a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800812e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008136:	f043 0304 	orr.w	r3, r3, #4
 800813a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800813e:	bf00      	nop
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8008148:	b480      	push	{r7}
 800814a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800814c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008158:	f023 0304 	bic.w	r3, r3, #4
 800815c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008160:	bf00      	nop
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800816a:	b480      	push	{r7}
 800816c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800816e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b08      	cmp	r3, #8
 800817c:	d101      	bne.n	8008182 <LL_RCC_LSI2_IsReady+0x18>
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <LL_RCC_LSI2_IsReady+0x1a>
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800818e:	b480      	push	{r7}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800819a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800819e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80081c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081ca:	f043 0301 	orr.w	r3, r3, #1
 80081ce:	6013      	str	r3, [r2, #0]
}
 80081d0:	bf00      	nop
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80081da:	b480      	push	{r7}
 80081dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80081de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
}
 80081ee:	bf00      	nop
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80081fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b02      	cmp	r3, #2
 8008208:	d101      	bne.n	800820e <LL_RCC_MSI_IsReady+0x16>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <LL_RCC_MSI_IsReady+0x18>
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800822c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4313      	orrs	r3, r2
 8008234:	600b      	str	r3, [r1, #0]
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008252:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2bb0      	cmp	r3, #176	; 0xb0
 8008258:	d901      	bls.n	800825e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800825a:	23b0      	movs	r3, #176	; 0xb0
 800825c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800825e:	687b      	ldr	r3, [r7, #4]
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008286:	4313      	orrs	r3, r2
 8008288:	604b      	str	r3, [r1, #4]
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800829e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f023 0203 	bic.w	r2, r3, #3
 80082a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	608b      	str	r3, [r1, #8]
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80082be:	b480      	push	{r7}
 80082c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80082c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 030c 	and.w	r3, r3, #12
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80082de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	608b      	str	r3, [r1, #8]
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800830a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800830e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4313      	orrs	r3, r2
 800831a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008336:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800833a:	f023 020f 	bic.w	r2, r3, #15
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008346:	4313      	orrs	r3, r2
 8008348:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800836a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4313      	orrs	r3, r2
 8008372:	608b      	str	r3, [r1, #8]
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4313      	orrs	r3, r2
 800839a:	608b      	str	r3, [r1, #8]
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80083ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80083c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80083e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80083f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008402:	4618      	mov	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800841a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800841e:	6013      	str	r3, [r2, #0]
}
 8008420:	bf00      	nop
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800842a:	b480      	push	{r7}
 800842c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800842e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800843c:	6013      	str	r3, [r2, #0]
}
 800843e:	bf00      	nop
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800844c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800845a:	d101      	bne.n	8008460 <LL_RCC_PLL_IsReady+0x18>
 800845c:	2301      	movs	r3, #1
 800845e:	e000      	b.n	8008462 <LL_RCC_PLL_IsReady+0x1a>
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	0a1b      	lsrs	r3, r3, #8
 8008478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800847c:	4618      	mov	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008486:	b480      	push	{r7}
 8008488:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800848a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008494:	4618      	mov	r0, r3
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800849e:	b480      	push	{r7}
 80084a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80084a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80084b6:	b480      	push	{r7}
 80084b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80084ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f003 0303 	and.w	r3, r3, #3
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80084ce:	b480      	push	{r7}
 80084d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80084d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084e0:	d101      	bne.n	80084e6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e000      	b.n	80084e8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80084f2:	b480      	push	{r7}
 80084f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80084f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80084fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008506:	d101      	bne.n	800850c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008508:	2301      	movs	r3, #1
 800850a:	e000      	b.n	800850e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800851c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008520:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852c:	d101      	bne.n	8008532 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800853e:	b480      	push	{r7}
 8008540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800854c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008550:	d101      	bne.n	8008556 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008562:	b480      	push	{r7}
 8008564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008570:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008574:	d101      	bne.n	800857a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
	...

08008588 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008588:	b590      	push	{r4, r7, lr}
 800858a:	b08d      	sub	sp, #52	; 0x34
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e363      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 808d 	beq.w	80086c2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085a8:	f7ff fe89 	bl	80082be <LL_RCC_GetSysClkSource>
 80085ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085ae:	f7ff ff82 	bl	80084b6 <LL_RCC_PLL_GetMainSource>
 80085b2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <HAL_RCC_OscConfig+0x3e>
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	2b0c      	cmp	r3, #12
 80085be:	d147      	bne.n	8008650 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d144      	bne.n	8008650 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e347      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80085d6:	f7ff fe34 	bl	8008242 <LL_RCC_MSI_GetRange>
 80085da:	4603      	mov	r3, r0
 80085dc:	429c      	cmp	r4, r3
 80085de:	d914      	bls.n	800860a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fd2f 	bl	8009048 <RCC_SetFlashLatencyFromMSIRange>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e336      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7ff fe0e 	bl	800821a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff fe32 	bl	800826c <LL_RCC_MSI_SetCalibTrimming>
 8008608:	e013      	b.n	8008632 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fe03 	bl	800821a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff fe27 	bl	800826c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fd10 	bl	8009048 <RCC_SetFlashLatencyFromMSIRange>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e317      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008632:	f000 fcc9 	bl	8008fc8 <HAL_RCC_GetHCLKFreq>
 8008636:	4603      	mov	r3, r0
 8008638:	4aa4      	ldr	r2, [pc, #656]	; (80088cc <HAL_RCC_OscConfig+0x344>)
 800863a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800863c:	4ba4      	ldr	r3, [pc, #656]	; (80088d0 <HAL_RCC_OscConfig+0x348>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe f8c1 	bl	80067c8 <HAL_InitTick>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d039      	beq.n	80086c0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e308      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01e      	beq.n	8008696 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008658:	f7ff fdb0 	bl	80081bc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800865c:	f7fe f902 	bl	8006864 <HAL_GetTick>
 8008660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008662:	e008      	b.n	8008676 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008664:	f7fe f8fe 	bl	8006864 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b02      	cmp	r3, #2
 8008670:	d901      	bls.n	8008676 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e2f5      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008676:	f7ff fdbf 	bl	80081f8 <LL_RCC_MSI_IsReady>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f1      	beq.n	8008664 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fdc8 	bl	800821a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fdec 	bl	800826c <LL_RCC_MSI_SetCalibTrimming>
 8008694:	e015      	b.n	80086c2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008696:	f7ff fda0 	bl	80081da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800869a:	f7fe f8e3 	bl	8006864 <HAL_GetTick>
 800869e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80086a0:	e008      	b.n	80086b4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086a2:	f7fe f8df 	bl	8006864 <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d901      	bls.n	80086b4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e2d6      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80086b4:	f7ff fda0 	bl	80081f8 <LL_RCC_MSI_IsReady>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1f1      	bne.n	80086a2 <HAL_RCC_OscConfig+0x11a>
 80086be:	e000      	b.n	80086c2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80086c0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d047      	beq.n	800875e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ce:	f7ff fdf6 	bl	80082be <LL_RCC_GetSysClkSource>
 80086d2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086d4:	f7ff feef 	bl	80084b6 <LL_RCC_PLL_GetMainSource>
 80086d8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d005      	beq.n	80086ec <HAL_RCC_OscConfig+0x164>
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	2b0c      	cmp	r3, #12
 80086e4:	d108      	bne.n	80086f8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d105      	bne.n	80086f8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d134      	bne.n	800875e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e2b4      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008700:	d102      	bne.n	8008708 <HAL_RCC_OscConfig+0x180>
 8008702:	f7ff fbdd 	bl	8007ec0 <LL_RCC_HSE_Enable>
 8008706:	e001      	b.n	800870c <HAL_RCC_OscConfig+0x184>
 8008708:	f7ff fbe9 	bl	8007ede <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d012      	beq.n	800873a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008714:	f7fe f8a6 	bl	8006864 <HAL_GetTick>
 8008718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800871c:	f7fe f8a2 	bl	8006864 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b64      	cmp	r3, #100	; 0x64
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e299      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800872e:	f7ff fbe5 	bl	8007efc <LL_RCC_HSE_IsReady>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0f1      	beq.n	800871c <HAL_RCC_OscConfig+0x194>
 8008738:	e011      	b.n	800875e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873a:	f7fe f893 	bl	8006864 <HAL_GetTick>
 800873e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008740:	e008      	b.n	8008754 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008742:	f7fe f88f 	bl	8006864 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b64      	cmp	r3, #100	; 0x64
 800874e:	d901      	bls.n	8008754 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e286      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008754:	f7ff fbd2 	bl	8007efc <LL_RCC_HSE_IsReady>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1f1      	bne.n	8008742 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d04c      	beq.n	8008804 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800876a:	f7ff fda8 	bl	80082be <LL_RCC_GetSysClkSource>
 800876e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008770:	f7ff fea1 	bl	80084b6 <LL_RCC_PLL_GetMainSource>
 8008774:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b04      	cmp	r3, #4
 800877a:	d005      	beq.n	8008788 <HAL_RCC_OscConfig+0x200>
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	2b0c      	cmp	r3, #12
 8008780:	d10e      	bne.n	80087a0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b02      	cmp	r3, #2
 8008786:	d10b      	bne.n	80087a0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e266      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fbf1 	bl	8007f80 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800879e:	e031      	b.n	8008804 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d019      	beq.n	80087dc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087a8:	f7ff fbba 	bl	8007f20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ac:	f7fe f85a 	bl	8006864 <HAL_GetTick>
 80087b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087b4:	f7fe f856 	bl	8006864 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e24d      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80087c6:	f7ff fbc9 	bl	8007f5c <LL_RCC_HSI_IsReady>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0f1      	beq.n	80087b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff fbd3 	bl	8007f80 <LL_RCC_HSI_SetCalibTrimming>
 80087da:	e013      	b.n	8008804 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087dc:	f7ff fbaf 	bl	8007f3e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fe f840 	bl	8006864 <HAL_GetTick>
 80087e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087e8:	f7fe f83c 	bl	8006864 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e233      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80087fa:	f7ff fbaf 	bl	8007f5c <LL_RCC_HSI_IsReady>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1f1      	bne.n	80087e8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0308 	and.w	r3, r3, #8
 800880c:	2b00      	cmp	r3, #0
 800880e:	d106      	bne.n	800881e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80a3 	beq.w	8008964 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d076      	beq.n	8008914 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0310 	and.w	r3, r3, #16
 800882e:	2b00      	cmp	r3, #0
 8008830:	d046      	beq.n	80088c0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008832:	f7ff fc66 	bl	8008102 <LL_RCC_LSI1_IsReady>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d113      	bne.n	8008864 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800883c:	f7ff fc3f 	bl	80080be <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008840:	f7fe f810 	bl	8006864 <HAL_GetTick>
 8008844:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008846:	e008      	b.n	800885a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008848:	f7fe f80c 	bl	8006864 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e203      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800885a:	f7ff fc52 	bl	8008102 <LL_RCC_LSI1_IsReady>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0f1      	beq.n	8008848 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008864:	f7ff fc5f 	bl	8008126 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008868:	f7fd fffc 	bl	8006864 <HAL_GetTick>
 800886c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800886e:	e008      	b.n	8008882 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008870:	f7fd fff8 	bl	8006864 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b03      	cmp	r3, #3
 800887c:	d901      	bls.n	8008882 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e1ef      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008882:	f7ff fc72 	bl	800816a <LL_RCC_LSI2_IsReady>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0f1      	beq.n	8008870 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff fc7c 	bl	800818e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008896:	f7ff fc23 	bl	80080e0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800889a:	f7fd ffe3 	bl	8006864 <HAL_GetTick>
 800889e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80088a0:	e008      	b.n	80088b4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80088a2:	f7fd ffdf 	bl	8006864 <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d901      	bls.n	80088b4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e1d6      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80088b4:	f7ff fc25 	bl	8008102 <LL_RCC_LSI1_IsReady>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f1      	bne.n	80088a2 <HAL_RCC_OscConfig+0x31a>
 80088be:	e051      	b.n	8008964 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80088c0:	f7ff fbfd 	bl	80080be <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c4:	f7fd ffce 	bl	8006864 <HAL_GetTick>
 80088c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80088ca:	e00c      	b.n	80088e6 <HAL_RCC_OscConfig+0x35e>
 80088cc:	20000008 	.word	0x20000008
 80088d0:	200000e0 	.word	0x200000e0
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80088d4:	f7fd ffc6 	bl	8006864 <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e1bd      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80088e6:	f7ff fc0c 	bl	8008102 <LL_RCC_LSI1_IsReady>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f1      	beq.n	80088d4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80088f0:	f7ff fc2a 	bl	8008148 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80088f4:	e008      	b.n	8008908 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80088f6:	f7fd ffb5 	bl	8006864 <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	2b03      	cmp	r3, #3
 8008902:	d901      	bls.n	8008908 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e1ac      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008908:	f7ff fc2f 	bl	800816a <LL_RCC_LSI2_IsReady>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1f1      	bne.n	80088f6 <HAL_RCC_OscConfig+0x36e>
 8008912:	e027      	b.n	8008964 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008914:	f7ff fc18 	bl	8008148 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008918:	f7fd ffa4 	bl	8006864 <HAL_GetTick>
 800891c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800891e:	e008      	b.n	8008932 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008920:	f7fd ffa0 	bl	8006864 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b03      	cmp	r3, #3
 800892c:	d901      	bls.n	8008932 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e197      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008932:	f7ff fc1a 	bl	800816a <LL_RCC_LSI2_IsReady>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f1      	bne.n	8008920 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800893c:	f7ff fbd0 	bl	80080e0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008940:	f7fd ff90 	bl	8006864 <HAL_GetTick>
 8008944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008946:	e008      	b.n	800895a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008948:	f7fd ff8c 	bl	8006864 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e183      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800895a:	f7ff fbd2 	bl	8008102 <LL_RCC_LSI1_IsReady>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f1      	bne.n	8008948 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0304 	and.w	r3, r3, #4
 800896c:	2b00      	cmp	r3, #0
 800896e:	d05b      	beq.n	8008a28 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008970:	4ba7      	ldr	r3, [pc, #668]	; (8008c10 <HAL_RCC_OscConfig+0x688>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008978:	2b00      	cmp	r3, #0
 800897a:	d114      	bne.n	80089a6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800897c:	f7ff fa70 	bl	8007e60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008980:	f7fd ff70 	bl	8006864 <HAL_GetTick>
 8008984:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008986:	e008      	b.n	800899a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008988:	f7fd ff6c 	bl	8006864 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e163      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800899a:	4b9d      	ldr	r3, [pc, #628]	; (8008c10 <HAL_RCC_OscConfig+0x688>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0f0      	beq.n	8008988 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d102      	bne.n	80089b4 <HAL_RCC_OscConfig+0x42c>
 80089ae:	f7ff fb30 	bl	8008012 <LL_RCC_LSE_Enable>
 80089b2:	e00c      	b.n	80089ce <HAL_RCC_OscConfig+0x446>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b05      	cmp	r3, #5
 80089ba:	d104      	bne.n	80089c6 <HAL_RCC_OscConfig+0x43e>
 80089bc:	f7ff fb4b 	bl	8008056 <LL_RCC_LSE_EnableBypass>
 80089c0:	f7ff fb27 	bl	8008012 <LL_RCC_LSE_Enable>
 80089c4:	e003      	b.n	80089ce <HAL_RCC_OscConfig+0x446>
 80089c6:	f7ff fb35 	bl	8008034 <LL_RCC_LSE_Disable>
 80089ca:	f7ff fb55 	bl	8008078 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d014      	beq.n	8008a00 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d6:	f7fd ff45 	bl	8006864 <HAL_GetTick>
 80089da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80089dc:	e00a      	b.n	80089f4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089de:	f7fd ff41 	bl	8006864 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d901      	bls.n	80089f4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e136      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80089f4:	f7ff fb51 	bl	800809a <LL_RCC_LSE_IsReady>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0ef      	beq.n	80089de <HAL_RCC_OscConfig+0x456>
 80089fe:	e013      	b.n	8008a28 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a00:	f7fd ff30 	bl	8006864 <HAL_GetTick>
 8008a04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008a06:	e00a      	b.n	8008a1e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a08:	f7fd ff2c 	bl	8006864 <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d901      	bls.n	8008a1e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e121      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008a1e:	f7ff fb3c 	bl	800809a <LL_RCC_LSE_IsReady>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1ef      	bne.n	8008a08 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d02c      	beq.n	8008a8e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d014      	beq.n	8008a66 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a3c:	f7ff fab5 	bl	8007faa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a40:	f7fd ff10 	bl	8006864 <HAL_GetTick>
 8008a44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008a46:	e008      	b.n	8008a5a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a48:	f7fd ff0c 	bl	8006864 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e103      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008a5a:	f7ff fac8 	bl	8007fee <LL_RCC_HSI48_IsReady>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0f1      	beq.n	8008a48 <HAL_RCC_OscConfig+0x4c0>
 8008a64:	e013      	b.n	8008a8e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a66:	f7ff fab1 	bl	8007fcc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6a:	f7fd fefb 	bl	8006864 <HAL_GetTick>
 8008a6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008a70:	e008      	b.n	8008a84 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a72:	f7fd fef7 	bl	8006864 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e0ee      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008a84:	f7ff fab3 	bl	8007fee <LL_RCC_HSI48_IsReady>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1f1      	bne.n	8008a72 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 80e4 	beq.w	8008c60 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a98:	f7ff fc11 	bl	80082be <LL_RCC_GetSysClkSource>
 8008a9c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	f040 80b4 	bne.w	8008c18 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f003 0203 	and.w	r2, r3, #3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d123      	bne.n	8008b06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d11c      	bne.n	8008b06 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d114      	bne.n	8008b06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d10d      	bne.n	8008b06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d106      	bne.n	8008b06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d05d      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	2b0c      	cmp	r3, #12
 8008b0a:	d058      	beq.n	8008bbe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e0a1      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008b1e:	f7ff fc84 	bl	800842a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b22:	f7fd fe9f 	bl	8006864 <HAL_GetTick>
 8008b26:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b28:	e008      	b.n	8008b3c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b2a:	f7fd fe9b 	bl	8006864 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e092      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1ef      	bne.n	8008b2a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	4b30      	ldr	r3, [pc, #192]	; (8008c14 <HAL_RCC_OscConfig+0x68c>)
 8008b52:	4013      	ands	r3, r2
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b5c:	4311      	orrs	r1, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b62:	0212      	lsls	r2, r2, #8
 8008b64:	4311      	orrs	r1, r2
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008b6a:	4311      	orrs	r1, r2
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008b70:	4311      	orrs	r1, r2
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b76:	430a      	orrs	r2, r1
 8008b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008b80:	f7ff fc44 	bl	800840c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b94:	f7fd fe66 	bl	8006864 <HAL_GetTick>
 8008b98:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b9a:	e008      	b.n	8008bae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b9c:	f7fd fe62 	bl	8006864 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e059      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0ef      	beq.n	8008b9c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bbc:	e050      	b.n	8008c60 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e04f      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d147      	bne.n	8008c60 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008bd0:	f7ff fc1c 	bl	800840c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008be4:	f7fd fe3e 	bl	8006864 <HAL_GetTick>
 8008be8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bec:	f7fd fe3a 	bl	8006864 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e031      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0ef      	beq.n	8008bec <HAL_RCC_OscConfig+0x664>
 8008c0c:	e028      	b.n	8008c60 <HAL_RCC_OscConfig+0x6d8>
 8008c0e:	bf00      	nop
 8008c10:	58000400 	.word	0x58000400
 8008c14:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	2b0c      	cmp	r3, #12
 8008c1c:	d01e      	beq.n	8008c5c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c1e:	f7ff fc04 	bl	800842a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c22:	f7fd fe1f 	bl	8006864 <HAL_GetTick>
 8008c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c28:	e008      	b.n	8008c3c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c2a:	f7fd fe1b 	bl	8006864 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d901      	bls.n	8008c3c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e012      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1ef      	bne.n	8008c2a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c4e:	68da      	ldr	r2, [r3, #12]
 8008c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c54:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <HAL_RCC_OscConfig+0x6e4>)
 8008c56:	4013      	ands	r3, r2
 8008c58:	60cb      	str	r3, [r1, #12]
 8008c5a:	e001      	b.n	8008c60 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e000      	b.n	8008c62 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3734      	adds	r7, #52	; 0x34
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd90      	pop	{r4, r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	eefefffc 	.word	0xeefefffc

08008c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e12d      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c84:	4b98      	ldr	r3, [pc, #608]	; (8008ee8 <HAL_RCC_ClockConfig+0x278>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d91b      	bls.n	8008cca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c92:	4b95      	ldr	r3, [pc, #596]	; (8008ee8 <HAL_RCC_ClockConfig+0x278>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f023 0207 	bic.w	r2, r3, #7
 8008c9a:	4993      	ldr	r1, [pc, #588]	; (8008ee8 <HAL_RCC_ClockConfig+0x278>)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ca2:	f7fd fddf 	bl	8006864 <HAL_GetTick>
 8008ca6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ca8:	e008      	b.n	8008cbc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008caa:	f7fd fddb 	bl	8006864 <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d901      	bls.n	8008cbc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e111      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cbc:	4b8a      	ldr	r3, [pc, #552]	; (8008ee8 <HAL_RCC_ClockConfig+0x278>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d1ef      	bne.n	8008caa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d016      	beq.n	8008d04 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7ff fafb 	bl	80082d6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008ce0:	f7fd fdc0 	bl	8006864 <HAL_GetTick>
 8008ce4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ce8:	f7fd fdbc 	bl	8006864 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e0f2      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008cfa:	f7ff fbe8 	bl	80084ce <LL_RCC_IsActiveFlag_HPRE>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0f1      	beq.n	8008ce8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d016      	beq.n	8008d3e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff faf2 	bl	80082fe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d1a:	f7fd fda3 	bl	8006864 <HAL_GetTick>
 8008d1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008d20:	e008      	b.n	8008d34 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d22:	f7fd fd9f 	bl	8006864 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e0d5      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008d34:	f7ff fbdd 	bl	80084f2 <LL_RCC_IsActiveFlag_C2HPRE>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0f1      	beq.n	8008d22 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d016      	beq.n	8008d78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff faeb 	bl	800832a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d54:	f7fd fd86 	bl	8006864 <HAL_GetTick>
 8008d58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d5a:	e008      	b.n	8008d6e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d5c:	f7fd fd82 	bl	8006864 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d901      	bls.n	8008d6e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e0b8      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d6e:	f7ff fbd3 	bl	8008518 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0f1      	beq.n	8008d5c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d016      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7ff fae5 	bl	8008358 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d8e:	f7fd fd69 	bl	8006864 <HAL_GetTick>
 8008d92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d94:	e008      	b.n	8008da8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d96:	f7fd fd65 	bl	8006864 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d901      	bls.n	8008da8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e09b      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008da8:	f7ff fbc9 	bl	800853e <LL_RCC_IsActiveFlag_PPRE1>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0f1      	beq.n	8008d96 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d017      	beq.n	8008dee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff fadb 	bl	8008380 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008dca:	f7fd fd4b 	bl	8006864 <HAL_GetTick>
 8008dce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008dd0:	e008      	b.n	8008de4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008dd2:	f7fd fd47 	bl	8006864 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d901      	bls.n	8008de4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e07d      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008de4:	f7ff fbbd 	bl	8008562 <LL_RCC_IsActiveFlag_PPRE2>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0f1      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d043      	beq.n	8008e82 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d106      	bne.n	8008e10 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008e02:	f7ff f87b 	bl	8007efc <LL_RCC_HSE_IsReady>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d11e      	bne.n	8008e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e067      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d106      	bne.n	8008e26 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008e18:	f7ff fb16 	bl	8008448 <LL_RCC_PLL_IsReady>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d113      	bne.n	8008e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e05c      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d106      	bne.n	8008e3c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008e2e:	f7ff f9e3 	bl	80081f8 <LL_RCC_MSI_IsReady>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d108      	bne.n	8008e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e051      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008e3c:	f7ff f88e 	bl	8007f5c <LL_RCC_HSI_IsReady>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e04a      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff fa21 	bl	8008296 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e54:	f7fd fd06 	bl	8006864 <HAL_GetTick>
 8008e58:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e5a:	e00a      	b.n	8008e72 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e5c:	f7fd fd02 	bl	8006864 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d901      	bls.n	8008e72 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e036      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e72:	f7ff fa24 	bl	80082be <LL_RCC_GetSysClkSource>
 8008e76:	4602      	mov	r2, r0
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d1ec      	bne.n	8008e5c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e82:	4b19      	ldr	r3, [pc, #100]	; (8008ee8 <HAL_RCC_ClockConfig+0x278>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d21b      	bcs.n	8008ec8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e90:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <HAL_RCC_ClockConfig+0x278>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f023 0207 	bic.w	r2, r3, #7
 8008e98:	4913      	ldr	r1, [pc, #76]	; (8008ee8 <HAL_RCC_ClockConfig+0x278>)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ea0:	f7fd fce0 	bl	8006864 <HAL_GetTick>
 8008ea4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ea6:	e008      	b.n	8008eba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008ea8:	f7fd fcdc 	bl	8006864 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e012      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eba:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <HAL_RCC_ClockConfig+0x278>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d1ef      	bne.n	8008ea8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008ec8:	f000 f87e 	bl	8008fc8 <HAL_RCC_GetHCLKFreq>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	4a07      	ldr	r2, [pc, #28]	; (8008eec <HAL_RCC_ClockConfig+0x27c>)
 8008ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008ed2:	f7fd fcd3 	bl	800687c <HAL_GetTickPrio>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fd fc75 	bl	80067c8 <HAL_InitTick>
 8008ede:	4603      	mov	r3, r0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	58004000 	.word	0x58004000
 8008eec:	20000008 	.word	0x20000008

08008ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ef0:	b590      	push	{r4, r7, lr}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ef6:	f7ff f9e2 	bl	80082be <LL_RCC_GetSysClkSource>
 8008efa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10a      	bne.n	8008f18 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008f02:	f7ff f99e 	bl	8008242 <LL_RCC_MSI_GetRange>
 8008f06:	4603      	mov	r3, r0
 8008f08:	091b      	lsrs	r3, r3, #4
 8008f0a:	f003 030f 	and.w	r3, r3, #15
 8008f0e:	4a2b      	ldr	r2, [pc, #172]	; (8008fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8008f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f14:	60fb      	str	r3, [r7, #12]
 8008f16:	e04b      	b.n	8008fb0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d102      	bne.n	8008f24 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f1e:	4b28      	ldr	r3, [pc, #160]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	e045      	b.n	8008fb0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b08      	cmp	r3, #8
 8008f28:	d10a      	bne.n	8008f40 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008f2a:	f7fe ffb7 	bl	8007e9c <LL_RCC_HSE_IsEnabledDiv2>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d102      	bne.n	8008f3a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008f34:	4b22      	ldr	r3, [pc, #136]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	e03a      	b.n	8008fb0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008f3a:	4b22      	ldr	r3, [pc, #136]	; (8008fc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	e037      	b.n	8008fb0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008f40:	f7ff fab9 	bl	80084b6 <LL_RCC_PLL_GetMainSource>
 8008f44:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d003      	beq.n	8008f54 <HAL_RCC_GetSysClockFreq+0x64>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d003      	beq.n	8008f5a <HAL_RCC_GetSysClockFreq+0x6a>
 8008f52:	e00d      	b.n	8008f70 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008f54:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f56:	60bb      	str	r3, [r7, #8]
        break;
 8008f58:	e015      	b.n	8008f86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008f5a:	f7fe ff9f 	bl	8007e9c <LL_RCC_HSE_IsEnabledDiv2>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d102      	bne.n	8008f6a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008f64:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f66:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008f68:	e00d      	b.n	8008f86 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008f6a:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008f6c:	60bb      	str	r3, [r7, #8]
        break;
 8008f6e:	e00a      	b.n	8008f86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008f70:	f7ff f967 	bl	8008242 <LL_RCC_MSI_GetRange>
 8008f74:	4603      	mov	r3, r0
 8008f76:	091b      	lsrs	r3, r3, #4
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	4a0f      	ldr	r2, [pc, #60]	; (8008fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8008f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f82:	60bb      	str	r3, [r7, #8]
        break;
 8008f84:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008f86:	f7ff fa71 	bl	800846c <LL_RCC_PLL_GetN>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	fb03 f402 	mul.w	r4, r3, r2
 8008f92:	f7ff fa84 	bl	800849e <LL_RCC_PLL_GetDivider>
 8008f96:	4603      	mov	r3, r0
 8008f98:	091b      	lsrs	r3, r3, #4
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	fbb4 f4f3 	udiv	r4, r4, r3
 8008fa0:	f7ff fa71 	bl	8008486 <LL_RCC_PLL_GetR>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	0f5b      	lsrs	r3, r3, #29
 8008fa8:	3301      	adds	r3, #1
 8008faa:	fbb4 f3f3 	udiv	r3, r4, r3
 8008fae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd90      	pop	{r4, r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	0800b880 	.word	0x0800b880
 8008fc0:	00f42400 	.word	0x00f42400
 8008fc4:	01e84800 	.word	0x01e84800

08008fc8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fc8:	b598      	push	{r3, r4, r7, lr}
 8008fca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008fcc:	f7ff ff90 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	f7ff f9e9 	bl	80083a8 <LL_RCC_GetAHBPrescaler>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	091b      	lsrs	r3, r3, #4
 8008fda:	f003 030f 	and.w	r3, r3, #15
 8008fde:	4a03      	ldr	r2, [pc, #12]	; (8008fec <HAL_RCC_GetHCLKFreq+0x24>)
 8008fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	bd98      	pop	{r3, r4, r7, pc}
 8008fec:	0800b820 	.word	0x0800b820

08008ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ff0:	b598      	push	{r3, r4, r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008ff4:	f7ff ffe8 	bl	8008fc8 <HAL_RCC_GetHCLKFreq>
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	f7ff f9ef 	bl	80083dc <LL_RCC_GetAPB1Prescaler>
 8008ffe:	4603      	mov	r3, r0
 8009000:	0a1b      	lsrs	r3, r3, #8
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	4a04      	ldr	r2, [pc, #16]	; (8009018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009014:	4618      	mov	r0, r3
 8009016:	bd98      	pop	{r3, r4, r7, pc}
 8009018:	0800b860 	.word	0x0800b860

0800901c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800901c:	b598      	push	{r3, r4, r7, lr}
 800901e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009020:	f7ff ffd2 	bl	8008fc8 <HAL_RCC_GetHCLKFreq>
 8009024:	4604      	mov	r4, r0
 8009026:	f7ff f9e5 	bl	80083f4 <LL_RCC_GetAPB2Prescaler>
 800902a:	4603      	mov	r3, r0
 800902c:	0adb      	lsrs	r3, r3, #11
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009038:	f003 031f 	and.w	r3, r3, #31
 800903c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009040:	4618      	mov	r0, r3
 8009042:	bd98      	pop	{r3, r4, r7, pc}
 8009044:	0800b860 	.word	0x0800b860

08009048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009048:	b590      	push	{r4, r7, lr}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2bb0      	cmp	r3, #176	; 0xb0
 8009054:	d903      	bls.n	800905e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8009056:	4b15      	ldr	r3, [pc, #84]	; (80090ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	e007      	b.n	800906e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	091b      	lsrs	r3, r3, #4
 8009062:	f003 030f 	and.w	r3, r3, #15
 8009066:	4a11      	ldr	r2, [pc, #68]	; (80090ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800906c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800906e:	f7ff f9a7 	bl	80083c0 <LL_RCC_GetAHB4Prescaler>
 8009072:	4603      	mov	r3, r0
 8009074:	091b      	lsrs	r3, r3, #4
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	4a0d      	ldr	r2, [pc, #52]	; (80090b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800907c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	fbb2 f3f3 	udiv	r3, r2, r3
 8009086:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	4a0a      	ldr	r2, [pc, #40]	; (80090b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800908c:	fba2 2303 	umull	r2, r3, r2, r3
 8009090:	0c9c      	lsrs	r4, r3, #18
 8009092:	f7fe fef5 	bl	8007e80 <HAL_PWREx_GetVoltageRange>
 8009096:	4603      	mov	r3, r0
 8009098:	4619      	mov	r1, r3
 800909a:	4620      	mov	r0, r4
 800909c:	f000 f80c 	bl	80090b8 <RCC_SetFlashLatency>
 80090a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd90      	pop	{r4, r7, pc}
 80090aa:	bf00      	nop
 80090ac:	0800b880 	.word	0x0800b880
 80090b0:	0800b820 	.word	0x0800b820
 80090b4:	431bde83 	.word	0x431bde83

080090b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80090b8:	b590      	push	{r4, r7, lr}
 80090ba:	b093      	sub	sp, #76	; 0x4c
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80090c2:	4b37      	ldr	r3, [pc, #220]	; (80091a0 <RCC_SetFlashLatency+0xe8>)
 80090c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80090c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80090ce:	4a35      	ldr	r2, [pc, #212]	; (80091a4 <RCC_SetFlashLatency+0xec>)
 80090d0:	f107 031c 	add.w	r3, r7, #28
 80090d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80090d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80090da:	4b33      	ldr	r3, [pc, #204]	; (80091a8 <RCC_SetFlashLatency+0xf0>)
 80090dc:	f107 040c 	add.w	r4, r7, #12
 80090e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80090e6:	2300      	movs	r3, #0
 80090e8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f0:	d11a      	bne.n	8009128 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80090f2:	2300      	movs	r3, #0
 80090f4:	643b      	str	r3, [r7, #64]	; 0x40
 80090f6:	e013      	b.n	8009120 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80090f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	3348      	adds	r3, #72	; 0x48
 80090fe:	443b      	add	r3, r7
 8009100:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d807      	bhi.n	800911a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800910a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	3348      	adds	r3, #72	; 0x48
 8009110:	443b      	add	r3, r7
 8009112:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009116:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009118:	e020      	b.n	800915c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800911a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800911c:	3301      	adds	r3, #1
 800911e:	643b      	str	r3, [r7, #64]	; 0x40
 8009120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009122:	2b03      	cmp	r3, #3
 8009124:	d9e8      	bls.n	80090f8 <RCC_SetFlashLatency+0x40>
 8009126:	e019      	b.n	800915c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009128:	2300      	movs	r3, #0
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800912c:	e013      	b.n	8009156 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800912e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	3348      	adds	r3, #72	; 0x48
 8009134:	443b      	add	r3, r7
 8009136:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d807      	bhi.n	8009150 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	3348      	adds	r3, #72	; 0x48
 8009146:	443b      	add	r3, r7
 8009148:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800914c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800914e:	e005      	b.n	800915c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009152:	3301      	adds	r3, #1
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009158:	2b02      	cmp	r3, #2
 800915a:	d9e8      	bls.n	800912e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800915c:	4b13      	ldr	r3, [pc, #76]	; (80091ac <RCC_SetFlashLatency+0xf4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f023 0207 	bic.w	r2, r3, #7
 8009164:	4911      	ldr	r1, [pc, #68]	; (80091ac <RCC_SetFlashLatency+0xf4>)
 8009166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009168:	4313      	orrs	r3, r2
 800916a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800916c:	f7fd fb7a 	bl	8006864 <HAL_GetTick>
 8009170:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009172:	e008      	b.n	8009186 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009174:	f7fd fb76 	bl	8006864 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b02      	cmp	r3, #2
 8009180:	d901      	bls.n	8009186 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e007      	b.n	8009196 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009186:	4b09      	ldr	r3, [pc, #36]	; (80091ac <RCC_SetFlashLatency+0xf4>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009190:	429a      	cmp	r2, r3
 8009192:	d1ef      	bne.n	8009174 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	374c      	adds	r7, #76	; 0x4c
 800919a:	46bd      	mov	sp, r7
 800919c:	bd90      	pop	{r4, r7, pc}
 800919e:	bf00      	nop
 80091a0:	0800b7f4 	.word	0x0800b7f4
 80091a4:	0800b804 	.word	0x0800b804
 80091a8:	0800b810 	.word	0x0800b810
 80091ac:	58004000 	.word	0x58004000

080091b0 <LL_RCC_LSE_IsEnabled>:
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80091b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d101      	bne.n	80091c8 <LL_RCC_LSE_IsEnabled+0x18>
 80091c4:	2301      	movs	r3, #1
 80091c6:	e000      	b.n	80091ca <LL_RCC_LSE_IsEnabled+0x1a>
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <LL_RCC_LSE_IsReady>:
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80091d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d101      	bne.n	80091ec <LL_RCC_LSE_IsReady+0x18>
 80091e8:	2301      	movs	r3, #1
 80091ea:	e000      	b.n	80091ee <LL_RCC_LSE_IsReady+0x1a>
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <LL_RCC_MSI_EnablePLLMode>:
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80091fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009206:	f043 0304 	orr.w	r3, r3, #4
 800920a:	6013      	str	r3, [r2, #0]
}
 800920c:	bf00      	nop
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <LL_RCC_SetRFWKPClockSource>:
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800921e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009226:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800922a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4313      	orrs	r3, r2
 8009232:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <LL_RCC_SetSMPSClockSource>:
{
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800924a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	f023 0203 	bic.w	r2, r3, #3
 8009254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4313      	orrs	r3, r2
 800925c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800925e:	bf00      	nop
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <LL_RCC_SetSMPSPrescaler>:
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800927c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4313      	orrs	r3, r2
 8009284:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <LL_RCC_SetUSARTClockSource>:
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800929a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a2:	f023 0203 	bic.w	r2, r3, #3
 80092a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <LL_RCC_SetLPUARTClockSource>:
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80092c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4313      	orrs	r3, r2
 80092da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <LL_RCC_SetI2CClockSource>:
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80092f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	091b      	lsrs	r3, r3, #4
 80092fe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009302:	43db      	mvns	r3, r3
 8009304:	401a      	ands	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	011b      	lsls	r3, r3, #4
 800930a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800930e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009312:	4313      	orrs	r3, r2
 8009314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <LL_RCC_SetLPTIMClockSource>:
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800932c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009330:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	0c1b      	lsrs	r3, r3, #16
 8009338:	041b      	lsls	r3, r3, #16
 800933a:	43db      	mvns	r3, r3
 800933c:	401a      	ands	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	041b      	lsls	r3, r3, #16
 8009342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009346:	4313      	orrs	r3, r2
 8009348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <LL_RCC_SetSAIClockSource>:
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8009360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800936c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4313      	orrs	r3, r2
 8009374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <LL_RCC_SetRNGClockSource>:
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800938c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009394:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4313      	orrs	r3, r2
 80093a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <LL_RCC_SetCLK48ClockSource>:
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80093b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80093c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <LL_RCC_SetUSBClockSource>:
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff ffe3 	bl	80093b0 <LL_RCC_SetCLK48ClockSource>
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <LL_RCC_SetADCClockSource>:
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80093fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009402:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4313      	orrs	r3, r2
 800940e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <LL_RCC_SetRTCClockSource>:
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800942a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4313      	orrs	r3, r2
 800943a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <LL_RCC_GetRTCClockSource>:
{
 800944a:	b480      	push	{r7}
 800944c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800944e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009456:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800945a:	4618      	mov	r0, r3
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <LL_RCC_ForceBackupDomainReset>:
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800946c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800947c:	bf00      	nop
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009486:	b480      	push	{r7}
 8009488:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800948a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800948e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800949a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800949e:	bf00      	nop
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <LL_RCC_PLLSAI1_Enable>:
{
 80094a8:	b480      	push	{r7}
 80094aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80094ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094ba:	6013      	str	r3, [r2, #0]
}
 80094bc:	bf00      	nop
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <LL_RCC_PLLSAI1_Disable>:
{
 80094c6:	b480      	push	{r7}
 80094c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80094ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094d8:	6013      	str	r3, [r2, #0]
}
 80094da:	bf00      	nop
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <LL_RCC_PLLSAI1_IsReady>:
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80094e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094f6:	d101      	bne.n	80094fc <LL_RCC_PLLSAI1_IsReady+0x18>
 80094f8:	2301      	movs	r3, #1
 80094fa:	e000      	b.n	80094fe <LL_RCC_PLLSAI1_IsReady+0x1a>
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009510:	2300      	movs	r3, #0
 8009512:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009514:	2300      	movs	r3, #0
 8009516:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009520:	2b00      	cmp	r3, #0
 8009522:	d034      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800952c:	d021      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800952e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009532:	d81b      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009538:	d01d      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800953a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800953e:	d815      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009548:	d110      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800954a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009558:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800955a:	e00d      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3304      	adds	r3, #4
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f94d 	bl	8009800 <RCCEx_PLLSAI1_ConfigNP>
 8009566:	4603      	mov	r3, r0
 8009568:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800956a:	e005      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	77fb      	strb	r3, [r7, #31]
        break;
 8009570:	e002      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009572:	bf00      	nop
 8009574:	e000      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009578:	7ffb      	ldrb	r3, [r7, #31]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d105      	bne.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff fee8 	bl	8009358 <LL_RCC_SetSAIClockSource>
 8009588:	e001      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800958a:	7ffb      	ldrb	r3, [r7, #31]
 800958c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009596:	2b00      	cmp	r3, #0
 8009598:	d046      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800959a:	f7ff ff56 	bl	800944a <LL_RCC_GetRTCClockSource>
 800959e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d03c      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80095aa:	f7fe fc59 	bl	8007e60 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d105      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff ff30 	bl	800941e <LL_RCC_SetRTCClockSource>
 80095be:	e02e      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80095c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80095ca:	f7ff ff4b 	bl	8009464 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80095ce:	f7ff ff5a 	bl	8009486 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	4313      	orrs	r3, r2
 80095de:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80095e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80095ea:	f7ff fde1 	bl	80091b0 <LL_RCC_LSE_IsEnabled>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d114      	bne.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80095f4:	f7fd f936 	bl	8006864 <HAL_GetTick>
 80095f8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80095fa:	e00b      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095fc:	f7fd f932 	bl	8006864 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	f241 3288 	movw	r2, #5000	; 0x1388
 800960a:	4293      	cmp	r3, r2
 800960c:	d902      	bls.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	77fb      	strb	r3, [r7, #31]
              break;
 8009612:	e004      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009614:	f7ff fdde 	bl	80091d4 <LL_RCC_LSE_IsReady>
 8009618:	4603      	mov	r3, r0
 800961a:	2b01      	cmp	r3, #1
 800961c:	d1ee      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800961e:	7ffb      	ldrb	r3, [r7, #31]
 8009620:	77bb      	strb	r3, [r7, #30]
 8009622:	e001      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009624:	7ffb      	ldrb	r3, [r7, #31]
 8009626:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff fe2a 	bl	8009292 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fe35 	bl	80092be <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	2b00      	cmp	r3, #0
 800965e:	d004      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff fe5d 	bl	8009324 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b00      	cmp	r3, #0
 8009674:	d004      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff fe52 	bl	8009324 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0304 	and.w	r3, r3, #4
 8009688:	2b00      	cmp	r3, #0
 800968a:	d004      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff fe2a 	bl	80092ea <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0308 	and.w	r3, r3, #8
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d004      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff fe1f 	bl	80092ea <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d022      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff fe8d 	bl	80093dc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096ca:	d107      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80096cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096da:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096e4:	d10b      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3304      	adds	r3, #4
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 f8e3 	bl	80098b6 <RCCEx_PLLSAI1_ConfigNQ>
 80096f0:	4603      	mov	r3, r0
 80096f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80096f4:	7ffb      	ldrb	r3, [r7, #31]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80096fa:	7ffb      	ldrb	r3, [r7, #31]
 80096fc:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009706:	2b00      	cmp	r3, #0
 8009708:	d02b      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009712:	d008      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800971c:	d003      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009722:	2b00      	cmp	r3, #0
 8009724:	d105      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff fe2a 	bl	8009384 <LL_RCC_SetRNGClockSource>
 8009730:	e00a      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800973a:	60fb      	str	r3, [r7, #12]
 800973c:	2000      	movs	r0, #0
 800973e:	f7ff fe21 	bl	8009384 <LL_RCC_SetRNGClockSource>
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff fe34 	bl	80093b0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009750:	d107      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800975c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009760:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800976a:	2b00      	cmp	r3, #0
 800976c:	d022      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fe3d 	bl	80093f2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009780:	d107      	bne.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800978c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009790:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800979a:	d10b      	bne.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3304      	adds	r3, #4
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 f8e3 	bl	800996c <RCCEx_PLLSAI1_ConfigNR>
 80097a6:	4603      	mov	r3, r0
 80097a8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80097aa:	7ffb      	ldrb	r3, [r7, #31]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80097b0:	7ffb      	ldrb	r3, [r7, #31]
 80097b2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fd26 	bl	8009216 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fd45 	bl	800926a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff fd2c 	bl	8009242 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80097ea:	7fbb      	ldrb	r3, [r7, #30]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3720      	adds	r7, #32
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80097f8:	f7ff fcfe 	bl	80091f8 <LL_RCC_MSI_EnablePLLMode>
}
 80097fc:	bf00      	nop
 80097fe:	bd80      	pop	{r7, pc}

08009800 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800980c:	f7ff fe5b 	bl	80094c6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009810:	f7fd f828 	bl	8006864 <HAL_GetTick>
 8009814:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009816:	e009      	b.n	800982c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009818:	f7fd f824 	bl	8006864 <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d902      	bls.n	800982c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	73fb      	strb	r3, [r7, #15]
      break;
 800982a:	e004      	b.n	8009836 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800982c:	f7ff fe5a 	bl	80094e4 <LL_RCC_PLLSAI1_IsReady>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1f0      	bne.n	8009818 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d137      	bne.n	80098ac <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800983c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	021b      	lsls	r3, r3, #8
 800984c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009850:	4313      	orrs	r3, r2
 8009852:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009866:	4313      	orrs	r3, r2
 8009868:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800986a:	f7ff fe1d 	bl	80094a8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800986e:	f7fc fff9 	bl	8006864 <HAL_GetTick>
 8009872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009874:	e009      	b.n	800988a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009876:	f7fc fff5 	bl	8006864 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d902      	bls.n	800988a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	73fb      	strb	r3, [r7, #15]
        break;
 8009888:	e004      	b.n	8009894 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800988a:	f7ff fe2b 	bl	80094e4 <LL_RCC_PLLSAI1_IsReady>
 800988e:	4603      	mov	r3, r0
 8009890:	2b01      	cmp	r3, #1
 8009892:	d1f0      	bne.n	8009876 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d108      	bne.n	80098ac <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800989a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800989e:	691a      	ldr	r2, [r3, #16]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098a8:	4313      	orrs	r3, r2
 80098aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80098c2:	f7ff fe00 	bl	80094c6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80098c6:	f7fc ffcd 	bl	8006864 <HAL_GetTick>
 80098ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80098cc:	e009      	b.n	80098e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098ce:	f7fc ffc9 	bl	8006864 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d902      	bls.n	80098e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	73fb      	strb	r3, [r7, #15]
      break;
 80098e0:	e004      	b.n	80098ec <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80098e2:	f7ff fdff 	bl	80094e4 <LL_RCC_PLLSAI1_IsReady>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f0      	bne.n	80098ce <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d137      	bne.n	8009962 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80098f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009906:	4313      	orrs	r3, r2
 8009908:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800990a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800991c:	4313      	orrs	r3, r2
 800991e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009920:	f7ff fdc2 	bl	80094a8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009924:	f7fc ff9e 	bl	8006864 <HAL_GetTick>
 8009928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800992a:	e009      	b.n	8009940 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800992c:	f7fc ff9a 	bl	8006864 <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	2b02      	cmp	r3, #2
 8009938:	d902      	bls.n	8009940 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	73fb      	strb	r3, [r7, #15]
        break;
 800993e:	e004      	b.n	800994a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009940:	f7ff fdd0 	bl	80094e4 <LL_RCC_PLLSAI1_IsReady>
 8009944:	4603      	mov	r3, r0
 8009946:	2b01      	cmp	r3, #1
 8009948:	d1f0      	bne.n	800992c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d108      	bne.n	8009962 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009954:	691a      	ldr	r2, [r3, #16]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800995e:	4313      	orrs	r3, r2
 8009960:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009962:	7bfb      	ldrb	r3, [r7, #15]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009978:	f7ff fda5 	bl	80094c6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800997c:	f7fc ff72 	bl	8006864 <HAL_GetTick>
 8009980:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009982:	e009      	b.n	8009998 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009984:	f7fc ff6e 	bl	8006864 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	2b02      	cmp	r3, #2
 8009990:	d902      	bls.n	8009998 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	73fb      	strb	r3, [r7, #15]
      break;
 8009996:	e004      	b.n	80099a2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009998:	f7ff fda4 	bl	80094e4 <LL_RCC_PLLSAI1_IsReady>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1f0      	bne.n	8009984 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d137      	bne.n	8009a18 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80099a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	021b      	lsls	r3, r3, #8
 80099b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099bc:	4313      	orrs	r3, r2
 80099be:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80099c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099d2:	4313      	orrs	r3, r2
 80099d4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80099d6:	f7ff fd67 	bl	80094a8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099da:	f7fc ff43 	bl	8006864 <HAL_GetTick>
 80099de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80099e0:	e009      	b.n	80099f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099e2:	f7fc ff3f 	bl	8006864 <HAL_GetTick>
 80099e6:	4602      	mov	r2, r0
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d902      	bls.n	80099f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	73fb      	strb	r3, [r7, #15]
        break;
 80099f4:	e004      	b.n	8009a00 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80099f6:	f7ff fd75 	bl	80094e4 <LL_RCC_PLLSAI1_IsReady>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d1f0      	bne.n	80099e2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d108      	bne.n	8009a18 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a14:	4313      	orrs	r3, r2
 8009a16:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <LL_RCC_GetUSARTClockSource>:
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4013      	ands	r3, r2
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <LL_RCC_GetLPUARTClockSource>:
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4013      	ands	r3, r2
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b082      	sub	sp, #8
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e042      	b.n	8009afa <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d106      	bne.n	8009a8c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7f7 fc9e 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2224      	movs	r2, #36	; 0x24
 8009a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 0201 	bic.w	r2, r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fa51 	bl	8009f54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f826 	bl	8009b04 <UART_SetConfig>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d101      	bne.n	8009ac2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e01b      	b.n	8009afa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ad0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689a      	ldr	r2, [r3, #8]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ae0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f042 0201 	orr.w	r2, r2, #1
 8009af0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fad0 	bl	800a098 <UART_CheckIdleState>
 8009af8:	4603      	mov	r3, r0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b08:	b08c      	sub	sp, #48	; 0x30
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4baf      	ldr	r3, [pc, #700]	; (8009df0 <UART_SetConfig+0x2ec>)
 8009b34:	4013      	ands	r3, r2
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	6812      	ldr	r2, [r2, #0]
 8009b3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4aa4      	ldr	r2, [pc, #656]	; (8009df4 <UART_SetConfig+0x2f0>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d004      	beq.n	8009b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009b7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	6812      	ldr	r2, [r2, #0]
 8009b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b84:	430b      	orrs	r3, r1
 8009b86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8e:	f023 010f 	bic.w	r1, r3, #15
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a95      	ldr	r2, [pc, #596]	; (8009df8 <UART_SetConfig+0x2f4>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d125      	bne.n	8009bf4 <UART_SetConfig+0xf0>
 8009ba8:	2003      	movs	r0, #3
 8009baa:	f7ff ff3a 	bl	8009a22 <LL_RCC_GetUSARTClockSource>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	d81b      	bhi.n	8009bec <UART_SetConfig+0xe8>
 8009bb4:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <UART_SetConfig+0xb8>)
 8009bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bba:	bf00      	nop
 8009bbc:	08009bcd 	.word	0x08009bcd
 8009bc0:	08009bdd 	.word	0x08009bdd
 8009bc4:	08009bd5 	.word	0x08009bd5
 8009bc8:	08009be5 	.word	0x08009be5
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bd2:	e042      	b.n	8009c5a <UART_SetConfig+0x156>
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bda:	e03e      	b.n	8009c5a <UART_SetConfig+0x156>
 8009bdc:	2304      	movs	r3, #4
 8009bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be2:	e03a      	b.n	8009c5a <UART_SetConfig+0x156>
 8009be4:	2308      	movs	r3, #8
 8009be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bea:	e036      	b.n	8009c5a <UART_SetConfig+0x156>
 8009bec:	2310      	movs	r3, #16
 8009bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bf2:	e032      	b.n	8009c5a <UART_SetConfig+0x156>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a7e      	ldr	r2, [pc, #504]	; (8009df4 <UART_SetConfig+0x2f0>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d12a      	bne.n	8009c54 <UART_SetConfig+0x150>
 8009bfe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009c02:	f7ff ff1e 	bl	8009a42 <LL_RCC_GetLPUARTClockSource>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c0c:	d01a      	beq.n	8009c44 <UART_SetConfig+0x140>
 8009c0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c12:	d81b      	bhi.n	8009c4c <UART_SetConfig+0x148>
 8009c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c18:	d00c      	beq.n	8009c34 <UART_SetConfig+0x130>
 8009c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c1e:	d815      	bhi.n	8009c4c <UART_SetConfig+0x148>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <UART_SetConfig+0x128>
 8009c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c28:	d008      	beq.n	8009c3c <UART_SetConfig+0x138>
 8009c2a:	e00f      	b.n	8009c4c <UART_SetConfig+0x148>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c32:	e012      	b.n	8009c5a <UART_SetConfig+0x156>
 8009c34:	2302      	movs	r3, #2
 8009c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c3a:	e00e      	b.n	8009c5a <UART_SetConfig+0x156>
 8009c3c:	2304      	movs	r3, #4
 8009c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c42:	e00a      	b.n	8009c5a <UART_SetConfig+0x156>
 8009c44:	2308      	movs	r3, #8
 8009c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c4a:	e006      	b.n	8009c5a <UART_SetConfig+0x156>
 8009c4c:	2310      	movs	r3, #16
 8009c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c52:	e002      	b.n	8009c5a <UART_SetConfig+0x156>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a65      	ldr	r2, [pc, #404]	; (8009df4 <UART_SetConfig+0x2f0>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	f040 8097 	bne.w	8009d94 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d823      	bhi.n	8009cb6 <UART_SetConfig+0x1b2>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x170>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c99 	.word	0x08009c99
 8009c78:	08009cb7 	.word	0x08009cb7
 8009c7c:	08009ca1 	.word	0x08009ca1
 8009c80:	08009cb7 	.word	0x08009cb7
 8009c84:	08009ca7 	.word	0x08009ca7
 8009c88:	08009cb7 	.word	0x08009cb7
 8009c8c:	08009cb7 	.word	0x08009cb7
 8009c90:	08009cb7 	.word	0x08009cb7
 8009c94:	08009caf 	.word	0x08009caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c98:	f7ff f9aa 	bl	8008ff0 <HAL_RCC_GetPCLK1Freq>
 8009c9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c9e:	e010      	b.n	8009cc2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca0:	4b56      	ldr	r3, [pc, #344]	; (8009dfc <UART_SetConfig+0x2f8>)
 8009ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ca4:	e00d      	b.n	8009cc2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ca6:	f7ff f923 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 8009caa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cac:	e009      	b.n	8009cc2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009cb4:	e005      	b.n	8009cc2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009cc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 812b 	beq.w	8009f20 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cce:	4a4c      	ldr	r2, [pc, #304]	; (8009e00 <UART_SetConfig+0x2fc>)
 8009cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cdc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	4413      	add	r3, r2
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d305      	bcc.n	8009cfa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cf4:	69ba      	ldr	r2, [r7, #24]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d903      	bls.n	8009d02 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009d00:	e10e      	b.n	8009f20 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	2200      	movs	r2, #0
 8009d06:	60bb      	str	r3, [r7, #8]
 8009d08:	60fa      	str	r2, [r7, #12]
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	4a3c      	ldr	r2, [pc, #240]	; (8009e00 <UART_SetConfig+0x2fc>)
 8009d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	2200      	movs	r2, #0
 8009d18:	603b      	str	r3, [r7, #0]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d24:	f7f6 fce8 	bl	80006f8 <__aeabi_uldivmod>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4619      	mov	r1, r3
 8009d30:	f04f 0200 	mov.w	r2, #0
 8009d34:	f04f 0300 	mov.w	r3, #0
 8009d38:	020b      	lsls	r3, r1, #8
 8009d3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d3e:	0202      	lsls	r2, r0, #8
 8009d40:	6979      	ldr	r1, [r7, #20]
 8009d42:	6849      	ldr	r1, [r1, #4]
 8009d44:	0849      	lsrs	r1, r1, #1
 8009d46:	2000      	movs	r0, #0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	eb12 0804 	adds.w	r8, r2, r4
 8009d50:	eb43 0905 	adc.w	r9, r3, r5
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	469a      	mov	sl, r3
 8009d5c:	4693      	mov	fp, r2
 8009d5e:	4652      	mov	r2, sl
 8009d60:	465b      	mov	r3, fp
 8009d62:	4640      	mov	r0, r8
 8009d64:	4649      	mov	r1, r9
 8009d66:	f7f6 fcc7 	bl	80006f8 <__aeabi_uldivmod>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4613      	mov	r3, r2
 8009d70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d78:	d308      	bcc.n	8009d8c <UART_SetConfig+0x288>
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d80:	d204      	bcs.n	8009d8c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6a3a      	ldr	r2, [r7, #32]
 8009d88:	60da      	str	r2, [r3, #12]
 8009d8a:	e0c9      	b.n	8009f20 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009d92:	e0c5      	b.n	8009f20 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d9c:	d16d      	bne.n	8009e7a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009da2:	3b01      	subs	r3, #1
 8009da4:	2b07      	cmp	r3, #7
 8009da6:	d82d      	bhi.n	8009e04 <UART_SetConfig+0x300>
 8009da8:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <UART_SetConfig+0x2ac>)
 8009daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dae:	bf00      	nop
 8009db0:	08009dd1 	.word	0x08009dd1
 8009db4:	08009dd9 	.word	0x08009dd9
 8009db8:	08009e05 	.word	0x08009e05
 8009dbc:	08009ddf 	.word	0x08009ddf
 8009dc0:	08009e05 	.word	0x08009e05
 8009dc4:	08009e05 	.word	0x08009e05
 8009dc8:	08009e05 	.word	0x08009e05
 8009dcc:	08009de7 	.word	0x08009de7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dd0:	f7ff f924 	bl	800901c <HAL_RCC_GetPCLK2Freq>
 8009dd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dd6:	e01b      	b.n	8009e10 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd8:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <UART_SetConfig+0x2f8>)
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ddc:	e018      	b.n	8009e10 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dde:	f7ff f887 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 8009de2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009de4:	e014      	b.n	8009e10 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009dec:	e010      	b.n	8009e10 <UART_SetConfig+0x30c>
 8009dee:	bf00      	nop
 8009df0:	cfff69f3 	.word	0xcfff69f3
 8009df4:	40008000 	.word	0x40008000
 8009df8:	40013800 	.word	0x40013800
 8009dfc:	00f42400 	.word	0x00f42400
 8009e00:	0800b8c0 	.word	0x0800b8c0
      default:
        pclk = 0U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009e0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 8084 	beq.w	8009f20 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	4a4b      	ldr	r2, [pc, #300]	; (8009f4c <UART_SetConfig+0x448>)
 8009e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e2a:	005a      	lsls	r2, r3, #1
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	085b      	lsrs	r3, r3, #1
 8009e32:	441a      	add	r2, r3
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	2b0f      	cmp	r3, #15
 8009e42:	d916      	bls.n	8009e72 <UART_SetConfig+0x36e>
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e4a:	d212      	bcs.n	8009e72 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	f023 030f 	bic.w	r3, r3, #15
 8009e54:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	085b      	lsrs	r3, r3, #1
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	8bfb      	ldrh	r3, [r7, #30]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	8bfa      	ldrh	r2, [r7, #30]
 8009e6e:	60da      	str	r2, [r3, #12]
 8009e70:	e056      	b.n	8009f20 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e78:	e052      	b.n	8009f20 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	2b07      	cmp	r3, #7
 8009e82:	d822      	bhi.n	8009eca <UART_SetConfig+0x3c6>
 8009e84:	a201      	add	r2, pc, #4	; (adr r2, 8009e8c <UART_SetConfig+0x388>)
 8009e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8a:	bf00      	nop
 8009e8c:	08009ead 	.word	0x08009ead
 8009e90:	08009eb5 	.word	0x08009eb5
 8009e94:	08009ecb 	.word	0x08009ecb
 8009e98:	08009ebb 	.word	0x08009ebb
 8009e9c:	08009ecb 	.word	0x08009ecb
 8009ea0:	08009ecb 	.word	0x08009ecb
 8009ea4:	08009ecb 	.word	0x08009ecb
 8009ea8:	08009ec3 	.word	0x08009ec3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eac:	f7ff f8b6 	bl	800901c <HAL_RCC_GetPCLK2Freq>
 8009eb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009eb2:	e010      	b.n	8009ed6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009eb4:	4b26      	ldr	r3, [pc, #152]	; (8009f50 <UART_SetConfig+0x44c>)
 8009eb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009eb8:	e00d      	b.n	8009ed6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eba:	f7ff f819 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 8009ebe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ec0:	e009      	b.n	8009ed6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ec8:	e005      	b.n	8009ed6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d021      	beq.n	8009f20 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	4a1a      	ldr	r2, [pc, #104]	; (8009f4c <UART_SetConfig+0x448>)
 8009ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	085b      	lsrs	r3, r3, #1
 8009ef4:	441a      	add	r2, r3
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009efe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	2b0f      	cmp	r3, #15
 8009f04:	d909      	bls.n	8009f1a <UART_SetConfig+0x416>
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f0c:	d205      	bcs.n	8009f1a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60da      	str	r2, [r3, #12]
 8009f18:	e002      	b.n	8009f20 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2200      	movs	r2, #0
 8009f34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009f3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3730      	adds	r7, #48	; 0x30
 8009f44:	46bd      	mov	sp, r7
 8009f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f4a:	bf00      	nop
 8009f4c:	0800b8c0 	.word	0x0800b8c0
 8009f50:	00f42400 	.word	0x00f42400

08009f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f60:	f003 0308 	and.w	r3, r3, #8
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00a      	beq.n	8009fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa4:	f003 0302 	and.w	r3, r3, #2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc6:	f003 0304 	and.w	r3, r3, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe8:	f003 0310 	and.w	r3, r3, #16
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00a      	beq.n	800a006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a030:	2b00      	cmp	r3, #0
 800a032:	d01a      	beq.n	800a06a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a052:	d10a      	bne.n	800a06a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00a      	beq.n	800a08c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	430a      	orrs	r2, r1
 800a08a:	605a      	str	r2, [r3, #4]
  }
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b098      	sub	sp, #96	; 0x60
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0a8:	f7fc fbdc 	bl	8006864 <HAL_GetTick>
 800a0ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0308 	and.w	r3, r3, #8
 800a0b8:	2b08      	cmp	r3, #8
 800a0ba:	d12f      	bne.n	800a11c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f88e 	bl	800a1ec <UART_WaitOnFlagUntilTimeout>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d022      	beq.n	800a11c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0ea:	653b      	str	r3, [r7, #80]	; 0x50
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e6      	bne.n	800a0d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e063      	b.n	800a1e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b04      	cmp	r3, #4
 800a128:	d149      	bne.n	800a1be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a12a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a132:	2200      	movs	r2, #0
 800a134:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f857 	bl	800a1ec <UART_WaitOnFlagUntilTimeout>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d03c      	beq.n	800a1be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	e853 3f00 	ldrex	r3, [r3]
 800a150:	623b      	str	r3, [r7, #32]
   return(result);
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a162:	633b      	str	r3, [r7, #48]	; 0x30
 800a164:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a16a:	e841 2300 	strex	r3, r2, [r1]
 800a16e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1e6      	bne.n	800a144 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	e853 3f00 	ldrex	r3, [r3]
 800a184:	60fb      	str	r3, [r7, #12]
   return(result);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f023 0301 	bic.w	r3, r3, #1
 800a18c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3308      	adds	r3, #8
 800a194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a196:	61fa      	str	r2, [r7, #28]
 800a198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19a:	69b9      	ldr	r1, [r7, #24]
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	e841 2300 	strex	r3, r2, [r1]
 800a1a2:	617b      	str	r3, [r7, #20]
   return(result);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1e5      	bne.n	800a176 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2220      	movs	r2, #32
 800a1ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e012      	b.n	800a1e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3758      	adds	r7, #88	; 0x58
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1fc:	e04f      	b.n	800a29e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a204:	d04b      	beq.n	800a29e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a206:	f7fc fb2d 	bl	8006864 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	69ba      	ldr	r2, [r7, #24]
 800a212:	429a      	cmp	r2, r3
 800a214:	d302      	bcc.n	800a21c <UART_WaitOnFlagUntilTimeout+0x30>
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e04e      	b.n	800a2be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0304 	and.w	r3, r3, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d037      	beq.n	800a29e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b80      	cmp	r3, #128	; 0x80
 800a232:	d034      	beq.n	800a29e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b40      	cmp	r3, #64	; 0x40
 800a238:	d031      	beq.n	800a29e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	f003 0308 	and.w	r3, r3, #8
 800a244:	2b08      	cmp	r3, #8
 800a246:	d110      	bne.n	800a26a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2208      	movs	r2, #8
 800a24e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f838 	bl	800a2c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2208      	movs	r2, #8
 800a25a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e029      	b.n	800a2be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a278:	d111      	bne.n	800a29e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f000 f81e 	bl	800a2c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2220      	movs	r2, #32
 800a28e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e00f      	b.n	800a2be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	69da      	ldr	r2, [r3, #28]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	bf0c      	ite	eq
 800a2ae:	2301      	moveq	r3, #1
 800a2b0:	2300      	movne	r3, #0
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	79fb      	ldrb	r3, [r7, #7]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d0a0      	beq.n	800a1fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b095      	sub	sp, #84	; 0x54
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d6:	e853 3f00 	ldrex	r3, [r3]
 800a2da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e6      	bne.n	800a2ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3308      	adds	r3, #8
 800a306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	e853 3f00 	ldrex	r3, [r3]
 800a30e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a316:	f023 0301 	bic.w	r3, r3, #1
 800a31a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3308      	adds	r3, #8
 800a322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a324:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a32c:	e841 2300 	strex	r3, r2, [r1]
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e3      	bne.n	800a300 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d118      	bne.n	800a372 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f023 0310 	bic.w	r3, r3, #16
 800a354:	647b      	str	r3, [r7, #68]	; 0x44
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a35e:	61bb      	str	r3, [r7, #24]
 800a360:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	6979      	ldr	r1, [r7, #20]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	613b      	str	r3, [r7, #16]
   return(result);
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1e6      	bne.n	800a340 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2220      	movs	r2, #32
 800a376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a386:	bf00      	nop
 800a388:	3754      	adds	r7, #84	; 0x54
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a392:	b480      	push	{r7}
 800a394:	b085      	sub	sp, #20
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d101      	bne.n	800a3a8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e027      	b.n	800a3f8 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2224      	movs	r2, #36	; 0x24
 800a3b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f022 0201 	bic.w	r2, r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a414:	2b01      	cmp	r3, #1
 800a416:	d101      	bne.n	800a41c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a418:	2302      	movs	r3, #2
 800a41a:	e02d      	b.n	800a478 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2224      	movs	r2, #36	; 0x24
 800a428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 0201 	bic.w	r2, r2, #1
 800a442:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	430a      	orrs	r2, r1
 800a456:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f84f 	bl	800a4fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a494:	2302      	movs	r3, #2
 800a496:	e02d      	b.n	800a4f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2224      	movs	r2, #36	; 0x24
 800a4a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0201 	bic.w	r2, r2, #1
 800a4be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f811 	bl	800a4fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d108      	bne.n	800a51e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a51c:	e031      	b.n	800a582 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a51e:	2308      	movs	r3, #8
 800a520:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a522:	2308      	movs	r3, #8
 800a524:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	0e5b      	lsrs	r3, r3, #25
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	f003 0307 	and.w	r3, r3, #7
 800a534:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	0f5b      	lsrs	r3, r3, #29
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	f003 0307 	and.w	r3, r3, #7
 800a544:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a546:	7bbb      	ldrb	r3, [r7, #14]
 800a548:	7b3a      	ldrb	r2, [r7, #12]
 800a54a:	4911      	ldr	r1, [pc, #68]	; (800a590 <UARTEx_SetNbDataToProcess+0x94>)
 800a54c:	5c8a      	ldrb	r2, [r1, r2]
 800a54e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a552:	7b3a      	ldrb	r2, [r7, #12]
 800a554:	490f      	ldr	r1, [pc, #60]	; (800a594 <UARTEx_SetNbDataToProcess+0x98>)
 800a556:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a558:	fb93 f3f2 	sdiv	r3, r3, r2
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a564:	7bfb      	ldrb	r3, [r7, #15]
 800a566:	7b7a      	ldrb	r2, [r7, #13]
 800a568:	4909      	ldr	r1, [pc, #36]	; (800a590 <UARTEx_SetNbDataToProcess+0x94>)
 800a56a:	5c8a      	ldrb	r2, [r1, r2]
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a570:	7b7a      	ldrb	r2, [r7, #13]
 800a572:	4908      	ldr	r1, [pc, #32]	; (800a594 <UARTEx_SetNbDataToProcess+0x98>)
 800a574:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a576:	fb93 f3f2 	sdiv	r3, r3, r2
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a582:	bf00      	nop
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	0800b8d8 	.word	0x0800b8d8
 800a594:	0800b8e0 	.word	0x0800b8e0

0800a598 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a5a0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a5a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	43db      	mvns	r3, r3
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	1d3b      	adds	r3, r7, #4
 800a5d8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
	...

0800a60c <std>:
 800a60c:	2300      	movs	r3, #0
 800a60e:	b510      	push	{r4, lr}
 800a610:	4604      	mov	r4, r0
 800a612:	e9c0 3300 	strd	r3, r3, [r0]
 800a616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a61a:	6083      	str	r3, [r0, #8]
 800a61c:	8181      	strh	r1, [r0, #12]
 800a61e:	6643      	str	r3, [r0, #100]	; 0x64
 800a620:	81c2      	strh	r2, [r0, #14]
 800a622:	6183      	str	r3, [r0, #24]
 800a624:	4619      	mov	r1, r3
 800a626:	2208      	movs	r2, #8
 800a628:	305c      	adds	r0, #92	; 0x5c
 800a62a:	f000 f9f7 	bl	800aa1c <memset>
 800a62e:	4b0d      	ldr	r3, [pc, #52]	; (800a664 <std+0x58>)
 800a630:	6263      	str	r3, [r4, #36]	; 0x24
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <std+0x5c>)
 800a634:	62a3      	str	r3, [r4, #40]	; 0x28
 800a636:	4b0d      	ldr	r3, [pc, #52]	; (800a66c <std+0x60>)
 800a638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a63a:	4b0d      	ldr	r3, [pc, #52]	; (800a670 <std+0x64>)
 800a63c:	6323      	str	r3, [r4, #48]	; 0x30
 800a63e:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <std+0x68>)
 800a640:	6224      	str	r4, [r4, #32]
 800a642:	429c      	cmp	r4, r3
 800a644:	d006      	beq.n	800a654 <std+0x48>
 800a646:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a64a:	4294      	cmp	r4, r2
 800a64c:	d002      	beq.n	800a654 <std+0x48>
 800a64e:	33d0      	adds	r3, #208	; 0xd0
 800a650:	429c      	cmp	r4, r3
 800a652:	d105      	bne.n	800a660 <std+0x54>
 800a654:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a65c:	f000 ba56 	b.w	800ab0c <__retarget_lock_init_recursive>
 800a660:	bd10      	pop	{r4, pc}
 800a662:	bf00      	nop
 800a664:	0800a86d 	.word	0x0800a86d
 800a668:	0800a88f 	.word	0x0800a88f
 800a66c:	0800a8c7 	.word	0x0800a8c7
 800a670:	0800a8eb 	.word	0x0800a8eb
 800a674:	2000067c 	.word	0x2000067c

0800a678 <stdio_exit_handler>:
 800a678:	4a02      	ldr	r2, [pc, #8]	; (800a684 <stdio_exit_handler+0xc>)
 800a67a:	4903      	ldr	r1, [pc, #12]	; (800a688 <stdio_exit_handler+0x10>)
 800a67c:	4803      	ldr	r0, [pc, #12]	; (800a68c <stdio_exit_handler+0x14>)
 800a67e:	f000 b869 	b.w	800a754 <_fwalk_sglue>
 800a682:	bf00      	nop
 800a684:	200000e8 	.word	0x200000e8
 800a688:	0800b3b9 	.word	0x0800b3b9
 800a68c:	200000f4 	.word	0x200000f4

0800a690 <cleanup_stdio>:
 800a690:	6841      	ldr	r1, [r0, #4]
 800a692:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <cleanup_stdio+0x34>)
 800a694:	4299      	cmp	r1, r3
 800a696:	b510      	push	{r4, lr}
 800a698:	4604      	mov	r4, r0
 800a69a:	d001      	beq.n	800a6a0 <cleanup_stdio+0x10>
 800a69c:	f000 fe8c 	bl	800b3b8 <_fflush_r>
 800a6a0:	68a1      	ldr	r1, [r4, #8]
 800a6a2:	4b09      	ldr	r3, [pc, #36]	; (800a6c8 <cleanup_stdio+0x38>)
 800a6a4:	4299      	cmp	r1, r3
 800a6a6:	d002      	beq.n	800a6ae <cleanup_stdio+0x1e>
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 fe85 	bl	800b3b8 <_fflush_r>
 800a6ae:	68e1      	ldr	r1, [r4, #12]
 800a6b0:	4b06      	ldr	r3, [pc, #24]	; (800a6cc <cleanup_stdio+0x3c>)
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	d004      	beq.n	800a6c0 <cleanup_stdio+0x30>
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6bc:	f000 be7c 	b.w	800b3b8 <_fflush_r>
 800a6c0:	bd10      	pop	{r4, pc}
 800a6c2:	bf00      	nop
 800a6c4:	2000067c 	.word	0x2000067c
 800a6c8:	200006e4 	.word	0x200006e4
 800a6cc:	2000074c 	.word	0x2000074c

0800a6d0 <global_stdio_init.part.0>:
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <global_stdio_init.part.0+0x30>)
 800a6d4:	4c0b      	ldr	r4, [pc, #44]	; (800a704 <global_stdio_init.part.0+0x34>)
 800a6d6:	4a0c      	ldr	r2, [pc, #48]	; (800a708 <global_stdio_init.part.0+0x38>)
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	4620      	mov	r0, r4
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2104      	movs	r1, #4
 800a6e0:	f7ff ff94 	bl	800a60c <std>
 800a6e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	2109      	movs	r1, #9
 800a6ec:	f7ff ff8e 	bl	800a60c <std>
 800a6f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6fa:	2112      	movs	r1, #18
 800a6fc:	f7ff bf86 	b.w	800a60c <std>
 800a700:	200007b4 	.word	0x200007b4
 800a704:	2000067c 	.word	0x2000067c
 800a708:	0800a679 	.word	0x0800a679

0800a70c <__sfp_lock_acquire>:
 800a70c:	4801      	ldr	r0, [pc, #4]	; (800a714 <__sfp_lock_acquire+0x8>)
 800a70e:	f000 b9fe 	b.w	800ab0e <__retarget_lock_acquire_recursive>
 800a712:	bf00      	nop
 800a714:	200007bd 	.word	0x200007bd

0800a718 <__sfp_lock_release>:
 800a718:	4801      	ldr	r0, [pc, #4]	; (800a720 <__sfp_lock_release+0x8>)
 800a71a:	f000 b9f9 	b.w	800ab10 <__retarget_lock_release_recursive>
 800a71e:	bf00      	nop
 800a720:	200007bd 	.word	0x200007bd

0800a724 <__sinit>:
 800a724:	b510      	push	{r4, lr}
 800a726:	4604      	mov	r4, r0
 800a728:	f7ff fff0 	bl	800a70c <__sfp_lock_acquire>
 800a72c:	6a23      	ldr	r3, [r4, #32]
 800a72e:	b11b      	cbz	r3, 800a738 <__sinit+0x14>
 800a730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a734:	f7ff bff0 	b.w	800a718 <__sfp_lock_release>
 800a738:	4b04      	ldr	r3, [pc, #16]	; (800a74c <__sinit+0x28>)
 800a73a:	6223      	str	r3, [r4, #32]
 800a73c:	4b04      	ldr	r3, [pc, #16]	; (800a750 <__sinit+0x2c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1f5      	bne.n	800a730 <__sinit+0xc>
 800a744:	f7ff ffc4 	bl	800a6d0 <global_stdio_init.part.0>
 800a748:	e7f2      	b.n	800a730 <__sinit+0xc>
 800a74a:	bf00      	nop
 800a74c:	0800a691 	.word	0x0800a691
 800a750:	200007b4 	.word	0x200007b4

0800a754 <_fwalk_sglue>:
 800a754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a758:	4607      	mov	r7, r0
 800a75a:	4688      	mov	r8, r1
 800a75c:	4614      	mov	r4, r2
 800a75e:	2600      	movs	r6, #0
 800a760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a764:	f1b9 0901 	subs.w	r9, r9, #1
 800a768:	d505      	bpl.n	800a776 <_fwalk_sglue+0x22>
 800a76a:	6824      	ldr	r4, [r4, #0]
 800a76c:	2c00      	cmp	r4, #0
 800a76e:	d1f7      	bne.n	800a760 <_fwalk_sglue+0xc>
 800a770:	4630      	mov	r0, r6
 800a772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a776:	89ab      	ldrh	r3, [r5, #12]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d907      	bls.n	800a78c <_fwalk_sglue+0x38>
 800a77c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a780:	3301      	adds	r3, #1
 800a782:	d003      	beq.n	800a78c <_fwalk_sglue+0x38>
 800a784:	4629      	mov	r1, r5
 800a786:	4638      	mov	r0, r7
 800a788:	47c0      	blx	r8
 800a78a:	4306      	orrs	r6, r0
 800a78c:	3568      	adds	r5, #104	; 0x68
 800a78e:	e7e9      	b.n	800a764 <_fwalk_sglue+0x10>

0800a790 <iprintf>:
 800a790:	b40f      	push	{r0, r1, r2, r3}
 800a792:	b507      	push	{r0, r1, r2, lr}
 800a794:	4906      	ldr	r1, [pc, #24]	; (800a7b0 <iprintf+0x20>)
 800a796:	ab04      	add	r3, sp, #16
 800a798:	6808      	ldr	r0, [r1, #0]
 800a79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a79e:	6881      	ldr	r1, [r0, #8]
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	f000 fad9 	bl	800ad58 <_vfiprintf_r>
 800a7a6:	b003      	add	sp, #12
 800a7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7ac:	b004      	add	sp, #16
 800a7ae:	4770      	bx	lr
 800a7b0:	20000140 	.word	0x20000140

0800a7b4 <_puts_r>:
 800a7b4:	6a03      	ldr	r3, [r0, #32]
 800a7b6:	b570      	push	{r4, r5, r6, lr}
 800a7b8:	6884      	ldr	r4, [r0, #8]
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	460e      	mov	r6, r1
 800a7be:	b90b      	cbnz	r3, 800a7c4 <_puts_r+0x10>
 800a7c0:	f7ff ffb0 	bl	800a724 <__sinit>
 800a7c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7c6:	07db      	lsls	r3, r3, #31
 800a7c8:	d405      	bmi.n	800a7d6 <_puts_r+0x22>
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	0598      	lsls	r0, r3, #22
 800a7ce:	d402      	bmi.n	800a7d6 <_puts_r+0x22>
 800a7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7d2:	f000 f99c 	bl	800ab0e <__retarget_lock_acquire_recursive>
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	0719      	lsls	r1, r3, #28
 800a7da:	d513      	bpl.n	800a804 <_puts_r+0x50>
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	b18b      	cbz	r3, 800a804 <_puts_r+0x50>
 800a7e0:	3e01      	subs	r6, #1
 800a7e2:	68a3      	ldr	r3, [r4, #8]
 800a7e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	60a3      	str	r3, [r4, #8]
 800a7ec:	b9e9      	cbnz	r1, 800a82a <_puts_r+0x76>
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	da2e      	bge.n	800a850 <_puts_r+0x9c>
 800a7f2:	4622      	mov	r2, r4
 800a7f4:	210a      	movs	r1, #10
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f000 f87b 	bl	800a8f2 <__swbuf_r>
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d007      	beq.n	800a810 <_puts_r+0x5c>
 800a800:	250a      	movs	r5, #10
 800a802:	e007      	b.n	800a814 <_puts_r+0x60>
 800a804:	4621      	mov	r1, r4
 800a806:	4628      	mov	r0, r5
 800a808:	f000 f8b0 	bl	800a96c <__swsetup_r>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d0e7      	beq.n	800a7e0 <_puts_r+0x2c>
 800a810:	f04f 35ff 	mov.w	r5, #4294967295
 800a814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a816:	07da      	lsls	r2, r3, #31
 800a818:	d405      	bmi.n	800a826 <_puts_r+0x72>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	059b      	lsls	r3, r3, #22
 800a81e:	d402      	bmi.n	800a826 <_puts_r+0x72>
 800a820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a822:	f000 f975 	bl	800ab10 <__retarget_lock_release_recursive>
 800a826:	4628      	mov	r0, r5
 800a828:	bd70      	pop	{r4, r5, r6, pc}
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	da04      	bge.n	800a838 <_puts_r+0x84>
 800a82e:	69a2      	ldr	r2, [r4, #24]
 800a830:	429a      	cmp	r2, r3
 800a832:	dc06      	bgt.n	800a842 <_puts_r+0x8e>
 800a834:	290a      	cmp	r1, #10
 800a836:	d004      	beq.n	800a842 <_puts_r+0x8e>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	6022      	str	r2, [r4, #0]
 800a83e:	7019      	strb	r1, [r3, #0]
 800a840:	e7cf      	b.n	800a7e2 <_puts_r+0x2e>
 800a842:	4622      	mov	r2, r4
 800a844:	4628      	mov	r0, r5
 800a846:	f000 f854 	bl	800a8f2 <__swbuf_r>
 800a84a:	3001      	adds	r0, #1
 800a84c:	d1c9      	bne.n	800a7e2 <_puts_r+0x2e>
 800a84e:	e7df      	b.n	800a810 <_puts_r+0x5c>
 800a850:	6823      	ldr	r3, [r4, #0]
 800a852:	250a      	movs	r5, #10
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	6022      	str	r2, [r4, #0]
 800a858:	701d      	strb	r5, [r3, #0]
 800a85a:	e7db      	b.n	800a814 <_puts_r+0x60>

0800a85c <puts>:
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <puts+0xc>)
 800a85e:	4601      	mov	r1, r0
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	f7ff bfa7 	b.w	800a7b4 <_puts_r>
 800a866:	bf00      	nop
 800a868:	20000140 	.word	0x20000140

0800a86c <__sread>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	460c      	mov	r4, r1
 800a870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a874:	f000 f8fc 	bl	800aa70 <_read_r>
 800a878:	2800      	cmp	r0, #0
 800a87a:	bfab      	itete	ge
 800a87c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a87e:	89a3      	ldrhlt	r3, [r4, #12]
 800a880:	181b      	addge	r3, r3, r0
 800a882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a886:	bfac      	ite	ge
 800a888:	6563      	strge	r3, [r4, #84]	; 0x54
 800a88a:	81a3      	strhlt	r3, [r4, #12]
 800a88c:	bd10      	pop	{r4, pc}

0800a88e <__swrite>:
 800a88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a892:	461f      	mov	r7, r3
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	05db      	lsls	r3, r3, #23
 800a898:	4605      	mov	r5, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	4616      	mov	r6, r2
 800a89e:	d505      	bpl.n	800a8ac <__swrite+0x1e>
 800a8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f000 f8d0 	bl	800aa4c <_lseek_r>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	4628      	mov	r0, r5
 800a8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c2:	f000 b8e7 	b.w	800aa94 <_write_r>

0800a8c6 <__sseek>:
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ce:	f000 f8bd 	bl	800aa4c <_lseek_r>
 800a8d2:	1c43      	adds	r3, r0, #1
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	bf15      	itete	ne
 800a8d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8e2:	81a3      	strheq	r3, [r4, #12]
 800a8e4:	bf18      	it	ne
 800a8e6:	81a3      	strhne	r3, [r4, #12]
 800a8e8:	bd10      	pop	{r4, pc}

0800a8ea <__sclose>:
 800a8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ee:	f000 b89d 	b.w	800aa2c <_close_r>

0800a8f2 <__swbuf_r>:
 800a8f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f4:	460e      	mov	r6, r1
 800a8f6:	4614      	mov	r4, r2
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	b118      	cbz	r0, 800a904 <__swbuf_r+0x12>
 800a8fc:	6a03      	ldr	r3, [r0, #32]
 800a8fe:	b90b      	cbnz	r3, 800a904 <__swbuf_r+0x12>
 800a900:	f7ff ff10 	bl	800a724 <__sinit>
 800a904:	69a3      	ldr	r3, [r4, #24]
 800a906:	60a3      	str	r3, [r4, #8]
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	071a      	lsls	r2, r3, #28
 800a90c:	d525      	bpl.n	800a95a <__swbuf_r+0x68>
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	b31b      	cbz	r3, 800a95a <__swbuf_r+0x68>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	6922      	ldr	r2, [r4, #16]
 800a916:	1a98      	subs	r0, r3, r2
 800a918:	6963      	ldr	r3, [r4, #20]
 800a91a:	b2f6      	uxtb	r6, r6
 800a91c:	4283      	cmp	r3, r0
 800a91e:	4637      	mov	r7, r6
 800a920:	dc04      	bgt.n	800a92c <__swbuf_r+0x3a>
 800a922:	4621      	mov	r1, r4
 800a924:	4628      	mov	r0, r5
 800a926:	f000 fd47 	bl	800b3b8 <_fflush_r>
 800a92a:	b9e0      	cbnz	r0, 800a966 <__swbuf_r+0x74>
 800a92c:	68a3      	ldr	r3, [r4, #8]
 800a92e:	3b01      	subs	r3, #1
 800a930:	60a3      	str	r3, [r4, #8]
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	1c5a      	adds	r2, r3, #1
 800a936:	6022      	str	r2, [r4, #0]
 800a938:	701e      	strb	r6, [r3, #0]
 800a93a:	6962      	ldr	r2, [r4, #20]
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	429a      	cmp	r2, r3
 800a940:	d004      	beq.n	800a94c <__swbuf_r+0x5a>
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	07db      	lsls	r3, r3, #31
 800a946:	d506      	bpl.n	800a956 <__swbuf_r+0x64>
 800a948:	2e0a      	cmp	r6, #10
 800a94a:	d104      	bne.n	800a956 <__swbuf_r+0x64>
 800a94c:	4621      	mov	r1, r4
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 fd32 	bl	800b3b8 <_fflush_r>
 800a954:	b938      	cbnz	r0, 800a966 <__swbuf_r+0x74>
 800a956:	4638      	mov	r0, r7
 800a958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95a:	4621      	mov	r1, r4
 800a95c:	4628      	mov	r0, r5
 800a95e:	f000 f805 	bl	800a96c <__swsetup_r>
 800a962:	2800      	cmp	r0, #0
 800a964:	d0d5      	beq.n	800a912 <__swbuf_r+0x20>
 800a966:	f04f 37ff 	mov.w	r7, #4294967295
 800a96a:	e7f4      	b.n	800a956 <__swbuf_r+0x64>

0800a96c <__swsetup_r>:
 800a96c:	b538      	push	{r3, r4, r5, lr}
 800a96e:	4b2a      	ldr	r3, [pc, #168]	; (800aa18 <__swsetup_r+0xac>)
 800a970:	4605      	mov	r5, r0
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	460c      	mov	r4, r1
 800a976:	b118      	cbz	r0, 800a980 <__swsetup_r+0x14>
 800a978:	6a03      	ldr	r3, [r0, #32]
 800a97a:	b90b      	cbnz	r3, 800a980 <__swsetup_r+0x14>
 800a97c:	f7ff fed2 	bl	800a724 <__sinit>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a986:	0718      	lsls	r0, r3, #28
 800a988:	d422      	bmi.n	800a9d0 <__swsetup_r+0x64>
 800a98a:	06d9      	lsls	r1, r3, #27
 800a98c:	d407      	bmi.n	800a99e <__swsetup_r+0x32>
 800a98e:	2309      	movs	r3, #9
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a996:	81a3      	strh	r3, [r4, #12]
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	e034      	b.n	800aa08 <__swsetup_r+0x9c>
 800a99e:	0758      	lsls	r0, r3, #29
 800a9a0:	d512      	bpl.n	800a9c8 <__swsetup_r+0x5c>
 800a9a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9a4:	b141      	cbz	r1, 800a9b8 <__swsetup_r+0x4c>
 800a9a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9aa:	4299      	cmp	r1, r3
 800a9ac:	d002      	beq.n	800a9b4 <__swsetup_r+0x48>
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	f000 f8b0 	bl	800ab14 <_free_r>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	6363      	str	r3, [r4, #52]	; 0x34
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	6063      	str	r3, [r4, #4]
 800a9c4:	6923      	ldr	r3, [r4, #16]
 800a9c6:	6023      	str	r3, [r4, #0]
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	f043 0308 	orr.w	r3, r3, #8
 800a9ce:	81a3      	strh	r3, [r4, #12]
 800a9d0:	6923      	ldr	r3, [r4, #16]
 800a9d2:	b94b      	cbnz	r3, 800a9e8 <__swsetup_r+0x7c>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9de:	d003      	beq.n	800a9e8 <__swsetup_r+0x7c>
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	f000 fd36 	bl	800b454 <__smakebuf_r>
 800a9e8:	89a0      	ldrh	r0, [r4, #12]
 800a9ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9ee:	f010 0301 	ands.w	r3, r0, #1
 800a9f2:	d00a      	beq.n	800aa0a <__swsetup_r+0x9e>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60a3      	str	r3, [r4, #8]
 800a9f8:	6963      	ldr	r3, [r4, #20]
 800a9fa:	425b      	negs	r3, r3
 800a9fc:	61a3      	str	r3, [r4, #24]
 800a9fe:	6923      	ldr	r3, [r4, #16]
 800aa00:	b943      	cbnz	r3, 800aa14 <__swsetup_r+0xa8>
 800aa02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa06:	d1c4      	bne.n	800a992 <__swsetup_r+0x26>
 800aa08:	bd38      	pop	{r3, r4, r5, pc}
 800aa0a:	0781      	lsls	r1, r0, #30
 800aa0c:	bf58      	it	pl
 800aa0e:	6963      	ldrpl	r3, [r4, #20]
 800aa10:	60a3      	str	r3, [r4, #8]
 800aa12:	e7f4      	b.n	800a9fe <__swsetup_r+0x92>
 800aa14:	2000      	movs	r0, #0
 800aa16:	e7f7      	b.n	800aa08 <__swsetup_r+0x9c>
 800aa18:	20000140 	.word	0x20000140

0800aa1c <memset>:
 800aa1c:	4402      	add	r2, r0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d100      	bne.n	800aa26 <memset+0xa>
 800aa24:	4770      	bx	lr
 800aa26:	f803 1b01 	strb.w	r1, [r3], #1
 800aa2a:	e7f9      	b.n	800aa20 <memset+0x4>

0800aa2c <_close_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d06      	ldr	r5, [pc, #24]	; (800aa48 <_close_r+0x1c>)
 800aa30:	2300      	movs	r3, #0
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	602b      	str	r3, [r5, #0]
 800aa38:	f7f6 ff61 	bl	80018fe <_close>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_close_r+0x1a>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_close_r+0x1a>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	200007b8 	.word	0x200007b8

0800aa4c <_lseek_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d07      	ldr	r5, [pc, #28]	; (800aa6c <_lseek_r+0x20>)
 800aa50:	4604      	mov	r4, r0
 800aa52:	4608      	mov	r0, r1
 800aa54:	4611      	mov	r1, r2
 800aa56:	2200      	movs	r2, #0
 800aa58:	602a      	str	r2, [r5, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f7f6 ff76 	bl	800194c <_lseek>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_lseek_r+0x1e>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_lseek_r+0x1e>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	200007b8 	.word	0x200007b8

0800aa70 <_read_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	; (800aa90 <_read_r+0x20>)
 800aa74:	4604      	mov	r4, r0
 800aa76:	4608      	mov	r0, r1
 800aa78:	4611      	mov	r1, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f7f6 ff20 	bl	80018c4 <_read>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_read_r+0x1e>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_read_r+0x1e>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	200007b8 	.word	0x200007b8

0800aa94 <_write_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	; (800aab4 <_write_r+0x20>)
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	602a      	str	r2, [r5, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7f5 ffcd 	bl	8000a42 <_write>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_write_r+0x1e>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_write_r+0x1e>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	200007b8 	.word	0x200007b8

0800aab8 <__errno>:
 800aab8:	4b01      	ldr	r3, [pc, #4]	; (800aac0 <__errno+0x8>)
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	20000140 	.word	0x20000140

0800aac4 <__libc_init_array>:
 800aac4:	b570      	push	{r4, r5, r6, lr}
 800aac6:	4d0d      	ldr	r5, [pc, #52]	; (800aafc <__libc_init_array+0x38>)
 800aac8:	4c0d      	ldr	r4, [pc, #52]	; (800ab00 <__libc_init_array+0x3c>)
 800aaca:	1b64      	subs	r4, r4, r5
 800aacc:	10a4      	asrs	r4, r4, #2
 800aace:	2600      	movs	r6, #0
 800aad0:	42a6      	cmp	r6, r4
 800aad2:	d109      	bne.n	800aae8 <__libc_init_array+0x24>
 800aad4:	4d0b      	ldr	r5, [pc, #44]	; (800ab04 <__libc_init_array+0x40>)
 800aad6:	4c0c      	ldr	r4, [pc, #48]	; (800ab08 <__libc_init_array+0x44>)
 800aad8:	f000 fda2 	bl	800b620 <_init>
 800aadc:	1b64      	subs	r4, r4, r5
 800aade:	10a4      	asrs	r4, r4, #2
 800aae0:	2600      	movs	r6, #0
 800aae2:	42a6      	cmp	r6, r4
 800aae4:	d105      	bne.n	800aaf2 <__libc_init_array+0x2e>
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaec:	4798      	blx	r3
 800aaee:	3601      	adds	r6, #1
 800aaf0:	e7ee      	b.n	800aad0 <__libc_init_array+0xc>
 800aaf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf6:	4798      	blx	r3
 800aaf8:	3601      	adds	r6, #1
 800aafa:	e7f2      	b.n	800aae2 <__libc_init_array+0x1e>
 800aafc:	0800b924 	.word	0x0800b924
 800ab00:	0800b924 	.word	0x0800b924
 800ab04:	0800b924 	.word	0x0800b924
 800ab08:	0800b928 	.word	0x0800b928

0800ab0c <__retarget_lock_init_recursive>:
 800ab0c:	4770      	bx	lr

0800ab0e <__retarget_lock_acquire_recursive>:
 800ab0e:	4770      	bx	lr

0800ab10 <__retarget_lock_release_recursive>:
 800ab10:	4770      	bx	lr
	...

0800ab14 <_free_r>:
 800ab14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab16:	2900      	cmp	r1, #0
 800ab18:	d044      	beq.n	800aba4 <_free_r+0x90>
 800ab1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab1e:	9001      	str	r0, [sp, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f1a1 0404 	sub.w	r4, r1, #4
 800ab26:	bfb8      	it	lt
 800ab28:	18e4      	addlt	r4, r4, r3
 800ab2a:	f000 f8df 	bl	800acec <__malloc_lock>
 800ab2e:	4a1e      	ldr	r2, [pc, #120]	; (800aba8 <_free_r+0x94>)
 800ab30:	9801      	ldr	r0, [sp, #4]
 800ab32:	6813      	ldr	r3, [r2, #0]
 800ab34:	b933      	cbnz	r3, 800ab44 <_free_r+0x30>
 800ab36:	6063      	str	r3, [r4, #4]
 800ab38:	6014      	str	r4, [r2, #0]
 800ab3a:	b003      	add	sp, #12
 800ab3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab40:	f000 b8da 	b.w	800acf8 <__malloc_unlock>
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	d908      	bls.n	800ab5a <_free_r+0x46>
 800ab48:	6825      	ldr	r5, [r4, #0]
 800ab4a:	1961      	adds	r1, r4, r5
 800ab4c:	428b      	cmp	r3, r1
 800ab4e:	bf01      	itttt	eq
 800ab50:	6819      	ldreq	r1, [r3, #0]
 800ab52:	685b      	ldreq	r3, [r3, #4]
 800ab54:	1949      	addeq	r1, r1, r5
 800ab56:	6021      	streq	r1, [r4, #0]
 800ab58:	e7ed      	b.n	800ab36 <_free_r+0x22>
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	b10b      	cbz	r3, 800ab64 <_free_r+0x50>
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	d9fa      	bls.n	800ab5a <_free_r+0x46>
 800ab64:	6811      	ldr	r1, [r2, #0]
 800ab66:	1855      	adds	r5, r2, r1
 800ab68:	42a5      	cmp	r5, r4
 800ab6a:	d10b      	bne.n	800ab84 <_free_r+0x70>
 800ab6c:	6824      	ldr	r4, [r4, #0]
 800ab6e:	4421      	add	r1, r4
 800ab70:	1854      	adds	r4, r2, r1
 800ab72:	42a3      	cmp	r3, r4
 800ab74:	6011      	str	r1, [r2, #0]
 800ab76:	d1e0      	bne.n	800ab3a <_free_r+0x26>
 800ab78:	681c      	ldr	r4, [r3, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	6053      	str	r3, [r2, #4]
 800ab7e:	440c      	add	r4, r1
 800ab80:	6014      	str	r4, [r2, #0]
 800ab82:	e7da      	b.n	800ab3a <_free_r+0x26>
 800ab84:	d902      	bls.n	800ab8c <_free_r+0x78>
 800ab86:	230c      	movs	r3, #12
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	e7d6      	b.n	800ab3a <_free_r+0x26>
 800ab8c:	6825      	ldr	r5, [r4, #0]
 800ab8e:	1961      	adds	r1, r4, r5
 800ab90:	428b      	cmp	r3, r1
 800ab92:	bf04      	itt	eq
 800ab94:	6819      	ldreq	r1, [r3, #0]
 800ab96:	685b      	ldreq	r3, [r3, #4]
 800ab98:	6063      	str	r3, [r4, #4]
 800ab9a:	bf04      	itt	eq
 800ab9c:	1949      	addeq	r1, r1, r5
 800ab9e:	6021      	streq	r1, [r4, #0]
 800aba0:	6054      	str	r4, [r2, #4]
 800aba2:	e7ca      	b.n	800ab3a <_free_r+0x26>
 800aba4:	b003      	add	sp, #12
 800aba6:	bd30      	pop	{r4, r5, pc}
 800aba8:	200007c0 	.word	0x200007c0

0800abac <sbrk_aligned>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	4e0e      	ldr	r6, [pc, #56]	; (800abe8 <sbrk_aligned+0x3c>)
 800abb0:	460c      	mov	r4, r1
 800abb2:	6831      	ldr	r1, [r6, #0]
 800abb4:	4605      	mov	r5, r0
 800abb6:	b911      	cbnz	r1, 800abbe <sbrk_aligned+0x12>
 800abb8:	f000 fcaa 	bl	800b510 <_sbrk_r>
 800abbc:	6030      	str	r0, [r6, #0]
 800abbe:	4621      	mov	r1, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	f000 fca5 	bl	800b510 <_sbrk_r>
 800abc6:	1c43      	adds	r3, r0, #1
 800abc8:	d00a      	beq.n	800abe0 <sbrk_aligned+0x34>
 800abca:	1cc4      	adds	r4, r0, #3
 800abcc:	f024 0403 	bic.w	r4, r4, #3
 800abd0:	42a0      	cmp	r0, r4
 800abd2:	d007      	beq.n	800abe4 <sbrk_aligned+0x38>
 800abd4:	1a21      	subs	r1, r4, r0
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 fc9a 	bl	800b510 <_sbrk_r>
 800abdc:	3001      	adds	r0, #1
 800abde:	d101      	bne.n	800abe4 <sbrk_aligned+0x38>
 800abe0:	f04f 34ff 	mov.w	r4, #4294967295
 800abe4:	4620      	mov	r0, r4
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
 800abe8:	200007c4 	.word	0x200007c4

0800abec <_malloc_r>:
 800abec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf0:	1ccd      	adds	r5, r1, #3
 800abf2:	f025 0503 	bic.w	r5, r5, #3
 800abf6:	3508      	adds	r5, #8
 800abf8:	2d0c      	cmp	r5, #12
 800abfa:	bf38      	it	cc
 800abfc:	250c      	movcc	r5, #12
 800abfe:	2d00      	cmp	r5, #0
 800ac00:	4607      	mov	r7, r0
 800ac02:	db01      	blt.n	800ac08 <_malloc_r+0x1c>
 800ac04:	42a9      	cmp	r1, r5
 800ac06:	d905      	bls.n	800ac14 <_malloc_r+0x28>
 800ac08:	230c      	movs	r3, #12
 800ac0a:	603b      	str	r3, [r7, #0]
 800ac0c:	2600      	movs	r6, #0
 800ac0e:	4630      	mov	r0, r6
 800ac10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ace8 <_malloc_r+0xfc>
 800ac18:	f000 f868 	bl	800acec <__malloc_lock>
 800ac1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac20:	461c      	mov	r4, r3
 800ac22:	bb5c      	cbnz	r4, 800ac7c <_malloc_r+0x90>
 800ac24:	4629      	mov	r1, r5
 800ac26:	4638      	mov	r0, r7
 800ac28:	f7ff ffc0 	bl	800abac <sbrk_aligned>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	4604      	mov	r4, r0
 800ac30:	d155      	bne.n	800acde <_malloc_r+0xf2>
 800ac32:	f8d8 4000 	ldr.w	r4, [r8]
 800ac36:	4626      	mov	r6, r4
 800ac38:	2e00      	cmp	r6, #0
 800ac3a:	d145      	bne.n	800acc8 <_malloc_r+0xdc>
 800ac3c:	2c00      	cmp	r4, #0
 800ac3e:	d048      	beq.n	800acd2 <_malloc_r+0xe6>
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	4631      	mov	r1, r6
 800ac44:	4638      	mov	r0, r7
 800ac46:	eb04 0903 	add.w	r9, r4, r3
 800ac4a:	f000 fc61 	bl	800b510 <_sbrk_r>
 800ac4e:	4581      	cmp	r9, r0
 800ac50:	d13f      	bne.n	800acd2 <_malloc_r+0xe6>
 800ac52:	6821      	ldr	r1, [r4, #0]
 800ac54:	1a6d      	subs	r5, r5, r1
 800ac56:	4629      	mov	r1, r5
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f7ff ffa7 	bl	800abac <sbrk_aligned>
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d037      	beq.n	800acd2 <_malloc_r+0xe6>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	442b      	add	r3, r5
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	f8d8 3000 	ldr.w	r3, [r8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d038      	beq.n	800ace2 <_malloc_r+0xf6>
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	42a2      	cmp	r2, r4
 800ac74:	d12b      	bne.n	800acce <_malloc_r+0xe2>
 800ac76:	2200      	movs	r2, #0
 800ac78:	605a      	str	r2, [r3, #4]
 800ac7a:	e00f      	b.n	800ac9c <_malloc_r+0xb0>
 800ac7c:	6822      	ldr	r2, [r4, #0]
 800ac7e:	1b52      	subs	r2, r2, r5
 800ac80:	d41f      	bmi.n	800acc2 <_malloc_r+0xd6>
 800ac82:	2a0b      	cmp	r2, #11
 800ac84:	d917      	bls.n	800acb6 <_malloc_r+0xca>
 800ac86:	1961      	adds	r1, r4, r5
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	6025      	str	r5, [r4, #0]
 800ac8c:	bf18      	it	ne
 800ac8e:	6059      	strne	r1, [r3, #4]
 800ac90:	6863      	ldr	r3, [r4, #4]
 800ac92:	bf08      	it	eq
 800ac94:	f8c8 1000 	streq.w	r1, [r8]
 800ac98:	5162      	str	r2, [r4, r5]
 800ac9a:	604b      	str	r3, [r1, #4]
 800ac9c:	4638      	mov	r0, r7
 800ac9e:	f104 060b 	add.w	r6, r4, #11
 800aca2:	f000 f829 	bl	800acf8 <__malloc_unlock>
 800aca6:	f026 0607 	bic.w	r6, r6, #7
 800acaa:	1d23      	adds	r3, r4, #4
 800acac:	1af2      	subs	r2, r6, r3
 800acae:	d0ae      	beq.n	800ac0e <_malloc_r+0x22>
 800acb0:	1b9b      	subs	r3, r3, r6
 800acb2:	50a3      	str	r3, [r4, r2]
 800acb4:	e7ab      	b.n	800ac0e <_malloc_r+0x22>
 800acb6:	42a3      	cmp	r3, r4
 800acb8:	6862      	ldr	r2, [r4, #4]
 800acba:	d1dd      	bne.n	800ac78 <_malloc_r+0x8c>
 800acbc:	f8c8 2000 	str.w	r2, [r8]
 800acc0:	e7ec      	b.n	800ac9c <_malloc_r+0xb0>
 800acc2:	4623      	mov	r3, r4
 800acc4:	6864      	ldr	r4, [r4, #4]
 800acc6:	e7ac      	b.n	800ac22 <_malloc_r+0x36>
 800acc8:	4634      	mov	r4, r6
 800acca:	6876      	ldr	r6, [r6, #4]
 800accc:	e7b4      	b.n	800ac38 <_malloc_r+0x4c>
 800acce:	4613      	mov	r3, r2
 800acd0:	e7cc      	b.n	800ac6c <_malloc_r+0x80>
 800acd2:	230c      	movs	r3, #12
 800acd4:	603b      	str	r3, [r7, #0]
 800acd6:	4638      	mov	r0, r7
 800acd8:	f000 f80e 	bl	800acf8 <__malloc_unlock>
 800acdc:	e797      	b.n	800ac0e <_malloc_r+0x22>
 800acde:	6025      	str	r5, [r4, #0]
 800ace0:	e7dc      	b.n	800ac9c <_malloc_r+0xb0>
 800ace2:	605b      	str	r3, [r3, #4]
 800ace4:	deff      	udf	#255	; 0xff
 800ace6:	bf00      	nop
 800ace8:	200007c0 	.word	0x200007c0

0800acec <__malloc_lock>:
 800acec:	4801      	ldr	r0, [pc, #4]	; (800acf4 <__malloc_lock+0x8>)
 800acee:	f7ff bf0e 	b.w	800ab0e <__retarget_lock_acquire_recursive>
 800acf2:	bf00      	nop
 800acf4:	200007bc 	.word	0x200007bc

0800acf8 <__malloc_unlock>:
 800acf8:	4801      	ldr	r0, [pc, #4]	; (800ad00 <__malloc_unlock+0x8>)
 800acfa:	f7ff bf09 	b.w	800ab10 <__retarget_lock_release_recursive>
 800acfe:	bf00      	nop
 800ad00:	200007bc 	.word	0x200007bc

0800ad04 <__sfputc_r>:
 800ad04:	6893      	ldr	r3, [r2, #8]
 800ad06:	3b01      	subs	r3, #1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	b410      	push	{r4}
 800ad0c:	6093      	str	r3, [r2, #8]
 800ad0e:	da08      	bge.n	800ad22 <__sfputc_r+0x1e>
 800ad10:	6994      	ldr	r4, [r2, #24]
 800ad12:	42a3      	cmp	r3, r4
 800ad14:	db01      	blt.n	800ad1a <__sfputc_r+0x16>
 800ad16:	290a      	cmp	r1, #10
 800ad18:	d103      	bne.n	800ad22 <__sfputc_r+0x1e>
 800ad1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad1e:	f7ff bde8 	b.w	800a8f2 <__swbuf_r>
 800ad22:	6813      	ldr	r3, [r2, #0]
 800ad24:	1c58      	adds	r0, r3, #1
 800ad26:	6010      	str	r0, [r2, #0]
 800ad28:	7019      	strb	r1, [r3, #0]
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <__sfputs_r>:
 800ad32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad34:	4606      	mov	r6, r0
 800ad36:	460f      	mov	r7, r1
 800ad38:	4614      	mov	r4, r2
 800ad3a:	18d5      	adds	r5, r2, r3
 800ad3c:	42ac      	cmp	r4, r5
 800ad3e:	d101      	bne.n	800ad44 <__sfputs_r+0x12>
 800ad40:	2000      	movs	r0, #0
 800ad42:	e007      	b.n	800ad54 <__sfputs_r+0x22>
 800ad44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad48:	463a      	mov	r2, r7
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f7ff ffda 	bl	800ad04 <__sfputc_r>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d1f3      	bne.n	800ad3c <__sfputs_r+0xa>
 800ad54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad58 <_vfiprintf_r>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	460d      	mov	r5, r1
 800ad5e:	b09d      	sub	sp, #116	; 0x74
 800ad60:	4614      	mov	r4, r2
 800ad62:	4698      	mov	r8, r3
 800ad64:	4606      	mov	r6, r0
 800ad66:	b118      	cbz	r0, 800ad70 <_vfiprintf_r+0x18>
 800ad68:	6a03      	ldr	r3, [r0, #32]
 800ad6a:	b90b      	cbnz	r3, 800ad70 <_vfiprintf_r+0x18>
 800ad6c:	f7ff fcda 	bl	800a724 <__sinit>
 800ad70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	d405      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	059a      	lsls	r2, r3, #22
 800ad7a:	d402      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad7e:	f7ff fec6 	bl	800ab0e <__retarget_lock_acquire_recursive>
 800ad82:	89ab      	ldrh	r3, [r5, #12]
 800ad84:	071b      	lsls	r3, r3, #28
 800ad86:	d501      	bpl.n	800ad8c <_vfiprintf_r+0x34>
 800ad88:	692b      	ldr	r3, [r5, #16]
 800ad8a:	b99b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x5c>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff fdec 	bl	800a96c <__swsetup_r>
 800ad94:	b170      	cbz	r0, 800adb4 <_vfiprintf_r+0x5c>
 800ad96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad98:	07dc      	lsls	r4, r3, #31
 800ad9a:	d504      	bpl.n	800ada6 <_vfiprintf_r+0x4e>
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	b01d      	add	sp, #116	; 0x74
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	0598      	lsls	r0, r3, #22
 800adaa:	d4f7      	bmi.n	800ad9c <_vfiprintf_r+0x44>
 800adac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adae:	f7ff feaf 	bl	800ab10 <__retarget_lock_release_recursive>
 800adb2:	e7f3      	b.n	800ad9c <_vfiprintf_r+0x44>
 800adb4:	2300      	movs	r3, #0
 800adb6:	9309      	str	r3, [sp, #36]	; 0x24
 800adb8:	2320      	movs	r3, #32
 800adba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc2:	2330      	movs	r3, #48	; 0x30
 800adc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800af78 <_vfiprintf_r+0x220>
 800adc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adcc:	f04f 0901 	mov.w	r9, #1
 800add0:	4623      	mov	r3, r4
 800add2:	469a      	mov	sl, r3
 800add4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add8:	b10a      	cbz	r2, 800adde <_vfiprintf_r+0x86>
 800adda:	2a25      	cmp	r2, #37	; 0x25
 800addc:	d1f9      	bne.n	800add2 <_vfiprintf_r+0x7a>
 800adde:	ebba 0b04 	subs.w	fp, sl, r4
 800ade2:	d00b      	beq.n	800adfc <_vfiprintf_r+0xa4>
 800ade4:	465b      	mov	r3, fp
 800ade6:	4622      	mov	r2, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	4630      	mov	r0, r6
 800adec:	f7ff ffa1 	bl	800ad32 <__sfputs_r>
 800adf0:	3001      	adds	r0, #1
 800adf2:	f000 80a9 	beq.w	800af48 <_vfiprintf_r+0x1f0>
 800adf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf8:	445a      	add	r2, fp
 800adfa:	9209      	str	r2, [sp, #36]	; 0x24
 800adfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 80a1 	beq.w	800af48 <_vfiprintf_r+0x1f0>
 800ae06:	2300      	movs	r3, #0
 800ae08:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae10:	f10a 0a01 	add.w	sl, sl, #1
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae1e:	4654      	mov	r4, sl
 800ae20:	2205      	movs	r2, #5
 800ae22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae26:	4854      	ldr	r0, [pc, #336]	; (800af78 <_vfiprintf_r+0x220>)
 800ae28:	f7f5 f9aa 	bl	8000180 <memchr>
 800ae2c:	9a04      	ldr	r2, [sp, #16]
 800ae2e:	b9d8      	cbnz	r0, 800ae68 <_vfiprintf_r+0x110>
 800ae30:	06d1      	lsls	r1, r2, #27
 800ae32:	bf44      	itt	mi
 800ae34:	2320      	movmi	r3, #32
 800ae36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae3a:	0713      	lsls	r3, r2, #28
 800ae3c:	bf44      	itt	mi
 800ae3e:	232b      	movmi	r3, #43	; 0x2b
 800ae40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae44:	f89a 3000 	ldrb.w	r3, [sl]
 800ae48:	2b2a      	cmp	r3, #42	; 0x2a
 800ae4a:	d015      	beq.n	800ae78 <_vfiprintf_r+0x120>
 800ae4c:	9a07      	ldr	r2, [sp, #28]
 800ae4e:	4654      	mov	r4, sl
 800ae50:	2000      	movs	r0, #0
 800ae52:	f04f 0c0a 	mov.w	ip, #10
 800ae56:	4621      	mov	r1, r4
 800ae58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae5c:	3b30      	subs	r3, #48	; 0x30
 800ae5e:	2b09      	cmp	r3, #9
 800ae60:	d94d      	bls.n	800aefe <_vfiprintf_r+0x1a6>
 800ae62:	b1b0      	cbz	r0, 800ae92 <_vfiprintf_r+0x13a>
 800ae64:	9207      	str	r2, [sp, #28]
 800ae66:	e014      	b.n	800ae92 <_vfiprintf_r+0x13a>
 800ae68:	eba0 0308 	sub.w	r3, r0, r8
 800ae6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae70:	4313      	orrs	r3, r2
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	46a2      	mov	sl, r4
 800ae76:	e7d2      	b.n	800ae1e <_vfiprintf_r+0xc6>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	1d19      	adds	r1, r3, #4
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	9103      	str	r1, [sp, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bfbb      	ittet	lt
 800ae84:	425b      	neglt	r3, r3
 800ae86:	f042 0202 	orrlt.w	r2, r2, #2
 800ae8a:	9307      	strge	r3, [sp, #28]
 800ae8c:	9307      	strlt	r3, [sp, #28]
 800ae8e:	bfb8      	it	lt
 800ae90:	9204      	strlt	r2, [sp, #16]
 800ae92:	7823      	ldrb	r3, [r4, #0]
 800ae94:	2b2e      	cmp	r3, #46	; 0x2e
 800ae96:	d10c      	bne.n	800aeb2 <_vfiprintf_r+0x15a>
 800ae98:	7863      	ldrb	r3, [r4, #1]
 800ae9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae9c:	d134      	bne.n	800af08 <_vfiprintf_r+0x1b0>
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	9203      	str	r2, [sp, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bfb8      	it	lt
 800aeaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeae:	3402      	adds	r4, #2
 800aeb0:	9305      	str	r3, [sp, #20]
 800aeb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800af88 <_vfiprintf_r+0x230>
 800aeb6:	7821      	ldrb	r1, [r4, #0]
 800aeb8:	2203      	movs	r2, #3
 800aeba:	4650      	mov	r0, sl
 800aebc:	f7f5 f960 	bl	8000180 <memchr>
 800aec0:	b138      	cbz	r0, 800aed2 <_vfiprintf_r+0x17a>
 800aec2:	9b04      	ldr	r3, [sp, #16]
 800aec4:	eba0 000a 	sub.w	r0, r0, sl
 800aec8:	2240      	movs	r2, #64	; 0x40
 800aeca:	4082      	lsls	r2, r0
 800aecc:	4313      	orrs	r3, r2
 800aece:	3401      	adds	r4, #1
 800aed0:	9304      	str	r3, [sp, #16]
 800aed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed6:	4829      	ldr	r0, [pc, #164]	; (800af7c <_vfiprintf_r+0x224>)
 800aed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aedc:	2206      	movs	r2, #6
 800aede:	f7f5 f94f 	bl	8000180 <memchr>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d03f      	beq.n	800af66 <_vfiprintf_r+0x20e>
 800aee6:	4b26      	ldr	r3, [pc, #152]	; (800af80 <_vfiprintf_r+0x228>)
 800aee8:	bb1b      	cbnz	r3, 800af32 <_vfiprintf_r+0x1da>
 800aeea:	9b03      	ldr	r3, [sp, #12]
 800aeec:	3307      	adds	r3, #7
 800aeee:	f023 0307 	bic.w	r3, r3, #7
 800aef2:	3308      	adds	r3, #8
 800aef4:	9303      	str	r3, [sp, #12]
 800aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef8:	443b      	add	r3, r7
 800aefa:	9309      	str	r3, [sp, #36]	; 0x24
 800aefc:	e768      	b.n	800add0 <_vfiprintf_r+0x78>
 800aefe:	fb0c 3202 	mla	r2, ip, r2, r3
 800af02:	460c      	mov	r4, r1
 800af04:	2001      	movs	r0, #1
 800af06:	e7a6      	b.n	800ae56 <_vfiprintf_r+0xfe>
 800af08:	2300      	movs	r3, #0
 800af0a:	3401      	adds	r4, #1
 800af0c:	9305      	str	r3, [sp, #20]
 800af0e:	4619      	mov	r1, r3
 800af10:	f04f 0c0a 	mov.w	ip, #10
 800af14:	4620      	mov	r0, r4
 800af16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af1a:	3a30      	subs	r2, #48	; 0x30
 800af1c:	2a09      	cmp	r2, #9
 800af1e:	d903      	bls.n	800af28 <_vfiprintf_r+0x1d0>
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0c6      	beq.n	800aeb2 <_vfiprintf_r+0x15a>
 800af24:	9105      	str	r1, [sp, #20]
 800af26:	e7c4      	b.n	800aeb2 <_vfiprintf_r+0x15a>
 800af28:	fb0c 2101 	mla	r1, ip, r1, r2
 800af2c:	4604      	mov	r4, r0
 800af2e:	2301      	movs	r3, #1
 800af30:	e7f0      	b.n	800af14 <_vfiprintf_r+0x1bc>
 800af32:	ab03      	add	r3, sp, #12
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	462a      	mov	r2, r5
 800af38:	4b12      	ldr	r3, [pc, #72]	; (800af84 <_vfiprintf_r+0x22c>)
 800af3a:	a904      	add	r1, sp, #16
 800af3c:	4630      	mov	r0, r6
 800af3e:	f3af 8000 	nop.w
 800af42:	4607      	mov	r7, r0
 800af44:	1c78      	adds	r0, r7, #1
 800af46:	d1d6      	bne.n	800aef6 <_vfiprintf_r+0x19e>
 800af48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af4a:	07d9      	lsls	r1, r3, #31
 800af4c:	d405      	bmi.n	800af5a <_vfiprintf_r+0x202>
 800af4e:	89ab      	ldrh	r3, [r5, #12]
 800af50:	059a      	lsls	r2, r3, #22
 800af52:	d402      	bmi.n	800af5a <_vfiprintf_r+0x202>
 800af54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af56:	f7ff fddb 	bl	800ab10 <__retarget_lock_release_recursive>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	065b      	lsls	r3, r3, #25
 800af5e:	f53f af1d 	bmi.w	800ad9c <_vfiprintf_r+0x44>
 800af62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af64:	e71c      	b.n	800ada0 <_vfiprintf_r+0x48>
 800af66:	ab03      	add	r3, sp, #12
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	462a      	mov	r2, r5
 800af6c:	4b05      	ldr	r3, [pc, #20]	; (800af84 <_vfiprintf_r+0x22c>)
 800af6e:	a904      	add	r1, sp, #16
 800af70:	4630      	mov	r0, r6
 800af72:	f000 f879 	bl	800b068 <_printf_i>
 800af76:	e7e4      	b.n	800af42 <_vfiprintf_r+0x1ea>
 800af78:	0800b8e8 	.word	0x0800b8e8
 800af7c:	0800b8f2 	.word	0x0800b8f2
 800af80:	00000000 	.word	0x00000000
 800af84:	0800ad33 	.word	0x0800ad33
 800af88:	0800b8ee 	.word	0x0800b8ee

0800af8c <_printf_common>:
 800af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af90:	4616      	mov	r6, r2
 800af92:	4699      	mov	r9, r3
 800af94:	688a      	ldr	r2, [r1, #8]
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	bfb8      	it	lt
 800afa0:	4613      	movlt	r3, r2
 800afa2:	6033      	str	r3, [r6, #0]
 800afa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afa8:	4607      	mov	r7, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b10a      	cbz	r2, 800afb2 <_printf_common+0x26>
 800afae:	3301      	adds	r3, #1
 800afb0:	6033      	str	r3, [r6, #0]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	0699      	lsls	r1, r3, #26
 800afb6:	bf42      	ittt	mi
 800afb8:	6833      	ldrmi	r3, [r6, #0]
 800afba:	3302      	addmi	r3, #2
 800afbc:	6033      	strmi	r3, [r6, #0]
 800afbe:	6825      	ldr	r5, [r4, #0]
 800afc0:	f015 0506 	ands.w	r5, r5, #6
 800afc4:	d106      	bne.n	800afd4 <_printf_common+0x48>
 800afc6:	f104 0a19 	add.w	sl, r4, #25
 800afca:	68e3      	ldr	r3, [r4, #12]
 800afcc:	6832      	ldr	r2, [r6, #0]
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	42ab      	cmp	r3, r5
 800afd2:	dc26      	bgt.n	800b022 <_printf_common+0x96>
 800afd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afd8:	1e13      	subs	r3, r2, #0
 800afda:	6822      	ldr	r2, [r4, #0]
 800afdc:	bf18      	it	ne
 800afde:	2301      	movne	r3, #1
 800afe0:	0692      	lsls	r2, r2, #26
 800afe2:	d42b      	bmi.n	800b03c <_printf_common+0xb0>
 800afe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afe8:	4649      	mov	r1, r9
 800afea:	4638      	mov	r0, r7
 800afec:	47c0      	blx	r8
 800afee:	3001      	adds	r0, #1
 800aff0:	d01e      	beq.n	800b030 <_printf_common+0xa4>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	6922      	ldr	r2, [r4, #16]
 800aff6:	f003 0306 	and.w	r3, r3, #6
 800affa:	2b04      	cmp	r3, #4
 800affc:	bf02      	ittt	eq
 800affe:	68e5      	ldreq	r5, [r4, #12]
 800b000:	6833      	ldreq	r3, [r6, #0]
 800b002:	1aed      	subeq	r5, r5, r3
 800b004:	68a3      	ldr	r3, [r4, #8]
 800b006:	bf0c      	ite	eq
 800b008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b00c:	2500      	movne	r5, #0
 800b00e:	4293      	cmp	r3, r2
 800b010:	bfc4      	itt	gt
 800b012:	1a9b      	subgt	r3, r3, r2
 800b014:	18ed      	addgt	r5, r5, r3
 800b016:	2600      	movs	r6, #0
 800b018:	341a      	adds	r4, #26
 800b01a:	42b5      	cmp	r5, r6
 800b01c:	d11a      	bne.n	800b054 <_printf_common+0xc8>
 800b01e:	2000      	movs	r0, #0
 800b020:	e008      	b.n	800b034 <_printf_common+0xa8>
 800b022:	2301      	movs	r3, #1
 800b024:	4652      	mov	r2, sl
 800b026:	4649      	mov	r1, r9
 800b028:	4638      	mov	r0, r7
 800b02a:	47c0      	blx	r8
 800b02c:	3001      	adds	r0, #1
 800b02e:	d103      	bne.n	800b038 <_printf_common+0xac>
 800b030:	f04f 30ff 	mov.w	r0, #4294967295
 800b034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b038:	3501      	adds	r5, #1
 800b03a:	e7c6      	b.n	800afca <_printf_common+0x3e>
 800b03c:	18e1      	adds	r1, r4, r3
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	2030      	movs	r0, #48	; 0x30
 800b042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b046:	4422      	add	r2, r4
 800b048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b04c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b050:	3302      	adds	r3, #2
 800b052:	e7c7      	b.n	800afe4 <_printf_common+0x58>
 800b054:	2301      	movs	r3, #1
 800b056:	4622      	mov	r2, r4
 800b058:	4649      	mov	r1, r9
 800b05a:	4638      	mov	r0, r7
 800b05c:	47c0      	blx	r8
 800b05e:	3001      	adds	r0, #1
 800b060:	d0e6      	beq.n	800b030 <_printf_common+0xa4>
 800b062:	3601      	adds	r6, #1
 800b064:	e7d9      	b.n	800b01a <_printf_common+0x8e>
	...

0800b068 <_printf_i>:
 800b068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b06c:	7e0f      	ldrb	r7, [r1, #24]
 800b06e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b070:	2f78      	cmp	r7, #120	; 0x78
 800b072:	4691      	mov	r9, r2
 800b074:	4680      	mov	r8, r0
 800b076:	460c      	mov	r4, r1
 800b078:	469a      	mov	sl, r3
 800b07a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b07e:	d807      	bhi.n	800b090 <_printf_i+0x28>
 800b080:	2f62      	cmp	r7, #98	; 0x62
 800b082:	d80a      	bhi.n	800b09a <_printf_i+0x32>
 800b084:	2f00      	cmp	r7, #0
 800b086:	f000 80d4 	beq.w	800b232 <_printf_i+0x1ca>
 800b08a:	2f58      	cmp	r7, #88	; 0x58
 800b08c:	f000 80c0 	beq.w	800b210 <_printf_i+0x1a8>
 800b090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b098:	e03a      	b.n	800b110 <_printf_i+0xa8>
 800b09a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b09e:	2b15      	cmp	r3, #21
 800b0a0:	d8f6      	bhi.n	800b090 <_printf_i+0x28>
 800b0a2:	a101      	add	r1, pc, #4	; (adr r1, 800b0a8 <_printf_i+0x40>)
 800b0a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a8:	0800b101 	.word	0x0800b101
 800b0ac:	0800b115 	.word	0x0800b115
 800b0b0:	0800b091 	.word	0x0800b091
 800b0b4:	0800b091 	.word	0x0800b091
 800b0b8:	0800b091 	.word	0x0800b091
 800b0bc:	0800b091 	.word	0x0800b091
 800b0c0:	0800b115 	.word	0x0800b115
 800b0c4:	0800b091 	.word	0x0800b091
 800b0c8:	0800b091 	.word	0x0800b091
 800b0cc:	0800b091 	.word	0x0800b091
 800b0d0:	0800b091 	.word	0x0800b091
 800b0d4:	0800b219 	.word	0x0800b219
 800b0d8:	0800b141 	.word	0x0800b141
 800b0dc:	0800b1d3 	.word	0x0800b1d3
 800b0e0:	0800b091 	.word	0x0800b091
 800b0e4:	0800b091 	.word	0x0800b091
 800b0e8:	0800b23b 	.word	0x0800b23b
 800b0ec:	0800b091 	.word	0x0800b091
 800b0f0:	0800b141 	.word	0x0800b141
 800b0f4:	0800b091 	.word	0x0800b091
 800b0f8:	0800b091 	.word	0x0800b091
 800b0fc:	0800b1db 	.word	0x0800b1db
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	1d1a      	adds	r2, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	602a      	str	r2, [r5, #0]
 800b108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b10c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b110:	2301      	movs	r3, #1
 800b112:	e09f      	b.n	800b254 <_printf_i+0x1ec>
 800b114:	6820      	ldr	r0, [r4, #0]
 800b116:	682b      	ldr	r3, [r5, #0]
 800b118:	0607      	lsls	r7, r0, #24
 800b11a:	f103 0104 	add.w	r1, r3, #4
 800b11e:	6029      	str	r1, [r5, #0]
 800b120:	d501      	bpl.n	800b126 <_printf_i+0xbe>
 800b122:	681e      	ldr	r6, [r3, #0]
 800b124:	e003      	b.n	800b12e <_printf_i+0xc6>
 800b126:	0646      	lsls	r6, r0, #25
 800b128:	d5fb      	bpl.n	800b122 <_printf_i+0xba>
 800b12a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b12e:	2e00      	cmp	r6, #0
 800b130:	da03      	bge.n	800b13a <_printf_i+0xd2>
 800b132:	232d      	movs	r3, #45	; 0x2d
 800b134:	4276      	negs	r6, r6
 800b136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b13a:	485a      	ldr	r0, [pc, #360]	; (800b2a4 <_printf_i+0x23c>)
 800b13c:	230a      	movs	r3, #10
 800b13e:	e012      	b.n	800b166 <_printf_i+0xfe>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	6820      	ldr	r0, [r4, #0]
 800b144:	1d19      	adds	r1, r3, #4
 800b146:	6029      	str	r1, [r5, #0]
 800b148:	0605      	lsls	r5, r0, #24
 800b14a:	d501      	bpl.n	800b150 <_printf_i+0xe8>
 800b14c:	681e      	ldr	r6, [r3, #0]
 800b14e:	e002      	b.n	800b156 <_printf_i+0xee>
 800b150:	0641      	lsls	r1, r0, #25
 800b152:	d5fb      	bpl.n	800b14c <_printf_i+0xe4>
 800b154:	881e      	ldrh	r6, [r3, #0]
 800b156:	4853      	ldr	r0, [pc, #332]	; (800b2a4 <_printf_i+0x23c>)
 800b158:	2f6f      	cmp	r7, #111	; 0x6f
 800b15a:	bf0c      	ite	eq
 800b15c:	2308      	moveq	r3, #8
 800b15e:	230a      	movne	r3, #10
 800b160:	2100      	movs	r1, #0
 800b162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b166:	6865      	ldr	r5, [r4, #4]
 800b168:	60a5      	str	r5, [r4, #8]
 800b16a:	2d00      	cmp	r5, #0
 800b16c:	bfa2      	ittt	ge
 800b16e:	6821      	ldrge	r1, [r4, #0]
 800b170:	f021 0104 	bicge.w	r1, r1, #4
 800b174:	6021      	strge	r1, [r4, #0]
 800b176:	b90e      	cbnz	r6, 800b17c <_printf_i+0x114>
 800b178:	2d00      	cmp	r5, #0
 800b17a:	d04b      	beq.n	800b214 <_printf_i+0x1ac>
 800b17c:	4615      	mov	r5, r2
 800b17e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b182:	fb03 6711 	mls	r7, r3, r1, r6
 800b186:	5dc7      	ldrb	r7, [r0, r7]
 800b188:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b18c:	4637      	mov	r7, r6
 800b18e:	42bb      	cmp	r3, r7
 800b190:	460e      	mov	r6, r1
 800b192:	d9f4      	bls.n	800b17e <_printf_i+0x116>
 800b194:	2b08      	cmp	r3, #8
 800b196:	d10b      	bne.n	800b1b0 <_printf_i+0x148>
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	07de      	lsls	r6, r3, #31
 800b19c:	d508      	bpl.n	800b1b0 <_printf_i+0x148>
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	6861      	ldr	r1, [r4, #4]
 800b1a2:	4299      	cmp	r1, r3
 800b1a4:	bfde      	ittt	le
 800b1a6:	2330      	movle	r3, #48	; 0x30
 800b1a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1b0:	1b52      	subs	r2, r2, r5
 800b1b2:	6122      	str	r2, [r4, #16]
 800b1b4:	f8cd a000 	str.w	sl, [sp]
 800b1b8:	464b      	mov	r3, r9
 800b1ba:	aa03      	add	r2, sp, #12
 800b1bc:	4621      	mov	r1, r4
 800b1be:	4640      	mov	r0, r8
 800b1c0:	f7ff fee4 	bl	800af8c <_printf_common>
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	d14a      	bne.n	800b25e <_printf_i+0x1f6>
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	b004      	add	sp, #16
 800b1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	f043 0320 	orr.w	r3, r3, #32
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	4833      	ldr	r0, [pc, #204]	; (800b2a8 <_printf_i+0x240>)
 800b1dc:	2778      	movs	r7, #120	; 0x78
 800b1de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	6829      	ldr	r1, [r5, #0]
 800b1e6:	061f      	lsls	r7, r3, #24
 800b1e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1ec:	d402      	bmi.n	800b1f4 <_printf_i+0x18c>
 800b1ee:	065f      	lsls	r7, r3, #25
 800b1f0:	bf48      	it	mi
 800b1f2:	b2b6      	uxthmi	r6, r6
 800b1f4:	07df      	lsls	r7, r3, #31
 800b1f6:	bf48      	it	mi
 800b1f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b1fc:	6029      	str	r1, [r5, #0]
 800b1fe:	bf48      	it	mi
 800b200:	6023      	strmi	r3, [r4, #0]
 800b202:	b91e      	cbnz	r6, 800b20c <_printf_i+0x1a4>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	f023 0320 	bic.w	r3, r3, #32
 800b20a:	6023      	str	r3, [r4, #0]
 800b20c:	2310      	movs	r3, #16
 800b20e:	e7a7      	b.n	800b160 <_printf_i+0xf8>
 800b210:	4824      	ldr	r0, [pc, #144]	; (800b2a4 <_printf_i+0x23c>)
 800b212:	e7e4      	b.n	800b1de <_printf_i+0x176>
 800b214:	4615      	mov	r5, r2
 800b216:	e7bd      	b.n	800b194 <_printf_i+0x12c>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	6826      	ldr	r6, [r4, #0]
 800b21c:	6961      	ldr	r1, [r4, #20]
 800b21e:	1d18      	adds	r0, r3, #4
 800b220:	6028      	str	r0, [r5, #0]
 800b222:	0635      	lsls	r5, r6, #24
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	d501      	bpl.n	800b22c <_printf_i+0x1c4>
 800b228:	6019      	str	r1, [r3, #0]
 800b22a:	e002      	b.n	800b232 <_printf_i+0x1ca>
 800b22c:	0670      	lsls	r0, r6, #25
 800b22e:	d5fb      	bpl.n	800b228 <_printf_i+0x1c0>
 800b230:	8019      	strh	r1, [r3, #0]
 800b232:	2300      	movs	r3, #0
 800b234:	6123      	str	r3, [r4, #16]
 800b236:	4615      	mov	r5, r2
 800b238:	e7bc      	b.n	800b1b4 <_printf_i+0x14c>
 800b23a:	682b      	ldr	r3, [r5, #0]
 800b23c:	1d1a      	adds	r2, r3, #4
 800b23e:	602a      	str	r2, [r5, #0]
 800b240:	681d      	ldr	r5, [r3, #0]
 800b242:	6862      	ldr	r2, [r4, #4]
 800b244:	2100      	movs	r1, #0
 800b246:	4628      	mov	r0, r5
 800b248:	f7f4 ff9a 	bl	8000180 <memchr>
 800b24c:	b108      	cbz	r0, 800b252 <_printf_i+0x1ea>
 800b24e:	1b40      	subs	r0, r0, r5
 800b250:	6060      	str	r0, [r4, #4]
 800b252:	6863      	ldr	r3, [r4, #4]
 800b254:	6123      	str	r3, [r4, #16]
 800b256:	2300      	movs	r3, #0
 800b258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b25c:	e7aa      	b.n	800b1b4 <_printf_i+0x14c>
 800b25e:	6923      	ldr	r3, [r4, #16]
 800b260:	462a      	mov	r2, r5
 800b262:	4649      	mov	r1, r9
 800b264:	4640      	mov	r0, r8
 800b266:	47d0      	blx	sl
 800b268:	3001      	adds	r0, #1
 800b26a:	d0ad      	beq.n	800b1c8 <_printf_i+0x160>
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	079b      	lsls	r3, r3, #30
 800b270:	d413      	bmi.n	800b29a <_printf_i+0x232>
 800b272:	68e0      	ldr	r0, [r4, #12]
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	4298      	cmp	r0, r3
 800b278:	bfb8      	it	lt
 800b27a:	4618      	movlt	r0, r3
 800b27c:	e7a6      	b.n	800b1cc <_printf_i+0x164>
 800b27e:	2301      	movs	r3, #1
 800b280:	4632      	mov	r2, r6
 800b282:	4649      	mov	r1, r9
 800b284:	4640      	mov	r0, r8
 800b286:	47d0      	blx	sl
 800b288:	3001      	adds	r0, #1
 800b28a:	d09d      	beq.n	800b1c8 <_printf_i+0x160>
 800b28c:	3501      	adds	r5, #1
 800b28e:	68e3      	ldr	r3, [r4, #12]
 800b290:	9903      	ldr	r1, [sp, #12]
 800b292:	1a5b      	subs	r3, r3, r1
 800b294:	42ab      	cmp	r3, r5
 800b296:	dcf2      	bgt.n	800b27e <_printf_i+0x216>
 800b298:	e7eb      	b.n	800b272 <_printf_i+0x20a>
 800b29a:	2500      	movs	r5, #0
 800b29c:	f104 0619 	add.w	r6, r4, #25
 800b2a0:	e7f5      	b.n	800b28e <_printf_i+0x226>
 800b2a2:	bf00      	nop
 800b2a4:	0800b8f9 	.word	0x0800b8f9
 800b2a8:	0800b90a 	.word	0x0800b90a

0800b2ac <__sflush_r>:
 800b2ac:	898a      	ldrh	r2, [r1, #12]
 800b2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	0710      	lsls	r0, r2, #28
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	d458      	bmi.n	800b36c <__sflush_r+0xc0>
 800b2ba:	684b      	ldr	r3, [r1, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dc05      	bgt.n	800b2cc <__sflush_r+0x20>
 800b2c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dc02      	bgt.n	800b2cc <__sflush_r+0x20>
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2ce:	2e00      	cmp	r6, #0
 800b2d0:	d0f9      	beq.n	800b2c6 <__sflush_r+0x1a>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2d8:	682f      	ldr	r7, [r5, #0]
 800b2da:	6a21      	ldr	r1, [r4, #32]
 800b2dc:	602b      	str	r3, [r5, #0]
 800b2de:	d032      	beq.n	800b346 <__sflush_r+0x9a>
 800b2e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	075a      	lsls	r2, r3, #29
 800b2e6:	d505      	bpl.n	800b2f4 <__sflush_r+0x48>
 800b2e8:	6863      	ldr	r3, [r4, #4]
 800b2ea:	1ac0      	subs	r0, r0, r3
 800b2ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2ee:	b10b      	cbz	r3, 800b2f4 <__sflush_r+0x48>
 800b2f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2f2:	1ac0      	subs	r0, r0, r3
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2fa:	6a21      	ldr	r1, [r4, #32]
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	47b0      	blx	r6
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	d106      	bne.n	800b314 <__sflush_r+0x68>
 800b306:	6829      	ldr	r1, [r5, #0]
 800b308:	291d      	cmp	r1, #29
 800b30a:	d82b      	bhi.n	800b364 <__sflush_r+0xb8>
 800b30c:	4a29      	ldr	r2, [pc, #164]	; (800b3b4 <__sflush_r+0x108>)
 800b30e:	410a      	asrs	r2, r1
 800b310:	07d6      	lsls	r6, r2, #31
 800b312:	d427      	bmi.n	800b364 <__sflush_r+0xb8>
 800b314:	2200      	movs	r2, #0
 800b316:	6062      	str	r2, [r4, #4]
 800b318:	04d9      	lsls	r1, r3, #19
 800b31a:	6922      	ldr	r2, [r4, #16]
 800b31c:	6022      	str	r2, [r4, #0]
 800b31e:	d504      	bpl.n	800b32a <__sflush_r+0x7e>
 800b320:	1c42      	adds	r2, r0, #1
 800b322:	d101      	bne.n	800b328 <__sflush_r+0x7c>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b903      	cbnz	r3, 800b32a <__sflush_r+0x7e>
 800b328:	6560      	str	r0, [r4, #84]	; 0x54
 800b32a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b32c:	602f      	str	r7, [r5, #0]
 800b32e:	2900      	cmp	r1, #0
 800b330:	d0c9      	beq.n	800b2c6 <__sflush_r+0x1a>
 800b332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b336:	4299      	cmp	r1, r3
 800b338:	d002      	beq.n	800b340 <__sflush_r+0x94>
 800b33a:	4628      	mov	r0, r5
 800b33c:	f7ff fbea 	bl	800ab14 <_free_r>
 800b340:	2000      	movs	r0, #0
 800b342:	6360      	str	r0, [r4, #52]	; 0x34
 800b344:	e7c0      	b.n	800b2c8 <__sflush_r+0x1c>
 800b346:	2301      	movs	r3, #1
 800b348:	4628      	mov	r0, r5
 800b34a:	47b0      	blx	r6
 800b34c:	1c41      	adds	r1, r0, #1
 800b34e:	d1c8      	bne.n	800b2e2 <__sflush_r+0x36>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d0c5      	beq.n	800b2e2 <__sflush_r+0x36>
 800b356:	2b1d      	cmp	r3, #29
 800b358:	d001      	beq.n	800b35e <__sflush_r+0xb2>
 800b35a:	2b16      	cmp	r3, #22
 800b35c:	d101      	bne.n	800b362 <__sflush_r+0xb6>
 800b35e:	602f      	str	r7, [r5, #0]
 800b360:	e7b1      	b.n	800b2c6 <__sflush_r+0x1a>
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b368:	81a3      	strh	r3, [r4, #12]
 800b36a:	e7ad      	b.n	800b2c8 <__sflush_r+0x1c>
 800b36c:	690f      	ldr	r7, [r1, #16]
 800b36e:	2f00      	cmp	r7, #0
 800b370:	d0a9      	beq.n	800b2c6 <__sflush_r+0x1a>
 800b372:	0793      	lsls	r3, r2, #30
 800b374:	680e      	ldr	r6, [r1, #0]
 800b376:	bf08      	it	eq
 800b378:	694b      	ldreq	r3, [r1, #20]
 800b37a:	600f      	str	r7, [r1, #0]
 800b37c:	bf18      	it	ne
 800b37e:	2300      	movne	r3, #0
 800b380:	eba6 0807 	sub.w	r8, r6, r7
 800b384:	608b      	str	r3, [r1, #8]
 800b386:	f1b8 0f00 	cmp.w	r8, #0
 800b38a:	dd9c      	ble.n	800b2c6 <__sflush_r+0x1a>
 800b38c:	6a21      	ldr	r1, [r4, #32]
 800b38e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b390:	4643      	mov	r3, r8
 800b392:	463a      	mov	r2, r7
 800b394:	4628      	mov	r0, r5
 800b396:	47b0      	blx	r6
 800b398:	2800      	cmp	r0, #0
 800b39a:	dc06      	bgt.n	800b3aa <__sflush_r+0xfe>
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a8:	e78e      	b.n	800b2c8 <__sflush_r+0x1c>
 800b3aa:	4407      	add	r7, r0
 800b3ac:	eba8 0800 	sub.w	r8, r8, r0
 800b3b0:	e7e9      	b.n	800b386 <__sflush_r+0xda>
 800b3b2:	bf00      	nop
 800b3b4:	dfbffffe 	.word	0xdfbffffe

0800b3b8 <_fflush_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	690b      	ldr	r3, [r1, #16]
 800b3bc:	4605      	mov	r5, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	b913      	cbnz	r3, 800b3c8 <_fflush_r+0x10>
 800b3c2:	2500      	movs	r5, #0
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	b118      	cbz	r0, 800b3d2 <_fflush_r+0x1a>
 800b3ca:	6a03      	ldr	r3, [r0, #32]
 800b3cc:	b90b      	cbnz	r3, 800b3d2 <_fflush_r+0x1a>
 800b3ce:	f7ff f9a9 	bl	800a724 <__sinit>
 800b3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d0f3      	beq.n	800b3c2 <_fflush_r+0xa>
 800b3da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3dc:	07d0      	lsls	r0, r2, #31
 800b3de:	d404      	bmi.n	800b3ea <_fflush_r+0x32>
 800b3e0:	0599      	lsls	r1, r3, #22
 800b3e2:	d402      	bmi.n	800b3ea <_fflush_r+0x32>
 800b3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3e6:	f7ff fb92 	bl	800ab0e <__retarget_lock_acquire_recursive>
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	f7ff ff5d 	bl	800b2ac <__sflush_r>
 800b3f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3f4:	07da      	lsls	r2, r3, #31
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	d4e4      	bmi.n	800b3c4 <_fflush_r+0xc>
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	059b      	lsls	r3, r3, #22
 800b3fe:	d4e1      	bmi.n	800b3c4 <_fflush_r+0xc>
 800b400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b402:	f7ff fb85 	bl	800ab10 <__retarget_lock_release_recursive>
 800b406:	e7dd      	b.n	800b3c4 <_fflush_r+0xc>

0800b408 <__swhatbuf_r>:
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	460c      	mov	r4, r1
 800b40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b410:	2900      	cmp	r1, #0
 800b412:	b096      	sub	sp, #88	; 0x58
 800b414:	4615      	mov	r5, r2
 800b416:	461e      	mov	r6, r3
 800b418:	da0d      	bge.n	800b436 <__swhatbuf_r+0x2e>
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b420:	f04f 0100 	mov.w	r1, #0
 800b424:	bf0c      	ite	eq
 800b426:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b42a:	2340      	movne	r3, #64	; 0x40
 800b42c:	2000      	movs	r0, #0
 800b42e:	6031      	str	r1, [r6, #0]
 800b430:	602b      	str	r3, [r5, #0]
 800b432:	b016      	add	sp, #88	; 0x58
 800b434:	bd70      	pop	{r4, r5, r6, pc}
 800b436:	466a      	mov	r2, sp
 800b438:	f000 f848 	bl	800b4cc <_fstat_r>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	dbec      	blt.n	800b41a <__swhatbuf_r+0x12>
 800b440:	9901      	ldr	r1, [sp, #4]
 800b442:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b446:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b44a:	4259      	negs	r1, r3
 800b44c:	4159      	adcs	r1, r3
 800b44e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b452:	e7eb      	b.n	800b42c <__swhatbuf_r+0x24>

0800b454 <__smakebuf_r>:
 800b454:	898b      	ldrh	r3, [r1, #12]
 800b456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b458:	079d      	lsls	r5, r3, #30
 800b45a:	4606      	mov	r6, r0
 800b45c:	460c      	mov	r4, r1
 800b45e:	d507      	bpl.n	800b470 <__smakebuf_r+0x1c>
 800b460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	6123      	str	r3, [r4, #16]
 800b468:	2301      	movs	r3, #1
 800b46a:	6163      	str	r3, [r4, #20]
 800b46c:	b002      	add	sp, #8
 800b46e:	bd70      	pop	{r4, r5, r6, pc}
 800b470:	ab01      	add	r3, sp, #4
 800b472:	466a      	mov	r2, sp
 800b474:	f7ff ffc8 	bl	800b408 <__swhatbuf_r>
 800b478:	9900      	ldr	r1, [sp, #0]
 800b47a:	4605      	mov	r5, r0
 800b47c:	4630      	mov	r0, r6
 800b47e:	f7ff fbb5 	bl	800abec <_malloc_r>
 800b482:	b948      	cbnz	r0, 800b498 <__smakebuf_r+0x44>
 800b484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b488:	059a      	lsls	r2, r3, #22
 800b48a:	d4ef      	bmi.n	800b46c <__smakebuf_r+0x18>
 800b48c:	f023 0303 	bic.w	r3, r3, #3
 800b490:	f043 0302 	orr.w	r3, r3, #2
 800b494:	81a3      	strh	r3, [r4, #12]
 800b496:	e7e3      	b.n	800b460 <__smakebuf_r+0xc>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	6020      	str	r0, [r4, #0]
 800b49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4a0:	81a3      	strh	r3, [r4, #12]
 800b4a2:	9b00      	ldr	r3, [sp, #0]
 800b4a4:	6163      	str	r3, [r4, #20]
 800b4a6:	9b01      	ldr	r3, [sp, #4]
 800b4a8:	6120      	str	r0, [r4, #16]
 800b4aa:	b15b      	cbz	r3, 800b4c4 <__smakebuf_r+0x70>
 800b4ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f000 f81d 	bl	800b4f0 <_isatty_r>
 800b4b6:	b128      	cbz	r0, 800b4c4 <__smakebuf_r+0x70>
 800b4b8:	89a3      	ldrh	r3, [r4, #12]
 800b4ba:	f023 0303 	bic.w	r3, r3, #3
 800b4be:	f043 0301 	orr.w	r3, r3, #1
 800b4c2:	81a3      	strh	r3, [r4, #12]
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	431d      	orrs	r5, r3
 800b4c8:	81a5      	strh	r5, [r4, #12]
 800b4ca:	e7cf      	b.n	800b46c <__smakebuf_r+0x18>

0800b4cc <_fstat_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4d07      	ldr	r5, [pc, #28]	; (800b4ec <_fstat_r+0x20>)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f7f6 fa1c 	bl	8001916 <_fstat>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d102      	bne.n	800b4e8 <_fstat_r+0x1c>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	b103      	cbz	r3, 800b4e8 <_fstat_r+0x1c>
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ea:	bf00      	nop
 800b4ec:	200007b8 	.word	0x200007b8

0800b4f0 <_isatty_r>:
 800b4f0:	b538      	push	{r3, r4, r5, lr}
 800b4f2:	4d06      	ldr	r5, [pc, #24]	; (800b50c <_isatty_r+0x1c>)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	602b      	str	r3, [r5, #0]
 800b4fc:	f7f6 fa1b 	bl	8001936 <_isatty>
 800b500:	1c43      	adds	r3, r0, #1
 800b502:	d102      	bne.n	800b50a <_isatty_r+0x1a>
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	b103      	cbz	r3, 800b50a <_isatty_r+0x1a>
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	200007b8 	.word	0x200007b8

0800b510 <_sbrk_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d06      	ldr	r5, [pc, #24]	; (800b52c <_sbrk_r+0x1c>)
 800b514:	2300      	movs	r3, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	602b      	str	r3, [r5, #0]
 800b51c:	f7f6 fa24 	bl	8001968 <_sbrk>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_sbrk_r+0x1a>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_sbrk_r+0x1a>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	200007b8 	.word	0x200007b8

0800b530 <fmax>:
 800b530:	b508      	push	{r3, lr}
 800b532:	ed2d 8b04 	vpush	{d8-d9}
 800b536:	eeb0 8a40 	vmov.f32	s16, s0
 800b53a:	eef0 8a60 	vmov.f32	s17, s1
 800b53e:	eeb0 9a41 	vmov.f32	s18, s2
 800b542:	eef0 9a61 	vmov.f32	s19, s3
 800b546:	f000 f841 	bl	800b5cc <__fpclassifyd>
 800b54a:	b168      	cbz	r0, 800b568 <fmax+0x38>
 800b54c:	eeb0 0a49 	vmov.f32	s0, s18
 800b550:	eef0 0a69 	vmov.f32	s1, s19
 800b554:	f000 f83a 	bl	800b5cc <__fpclassifyd>
 800b558:	b150      	cbz	r0, 800b570 <fmax+0x40>
 800b55a:	ec53 2b19 	vmov	r2, r3, d9
 800b55e:	ec51 0b18 	vmov	r0, r1, d8
 800b562:	f7f5 f897 	bl	8000694 <__aeabi_dcmpgt>
 800b566:	b918      	cbnz	r0, 800b570 <fmax+0x40>
 800b568:	eeb0 8a49 	vmov.f32	s16, s18
 800b56c:	eef0 8a69 	vmov.f32	s17, s19
 800b570:	eeb0 0a48 	vmov.f32	s0, s16
 800b574:	eef0 0a68 	vmov.f32	s1, s17
 800b578:	ecbd 8b04 	vpop	{d8-d9}
 800b57c:	bd08      	pop	{r3, pc}

0800b57e <fmin>:
 800b57e:	b508      	push	{r3, lr}
 800b580:	ed2d 8b04 	vpush	{d8-d9}
 800b584:	eeb0 8a40 	vmov.f32	s16, s0
 800b588:	eef0 8a60 	vmov.f32	s17, s1
 800b58c:	eeb0 9a41 	vmov.f32	s18, s2
 800b590:	eef0 9a61 	vmov.f32	s19, s3
 800b594:	f000 f81a 	bl	800b5cc <__fpclassifyd>
 800b598:	b168      	cbz	r0, 800b5b6 <fmin+0x38>
 800b59a:	eeb0 0a49 	vmov.f32	s0, s18
 800b59e:	eef0 0a69 	vmov.f32	s1, s19
 800b5a2:	f000 f813 	bl	800b5cc <__fpclassifyd>
 800b5a6:	b150      	cbz	r0, 800b5be <fmin+0x40>
 800b5a8:	ec53 2b19 	vmov	r2, r3, d9
 800b5ac:	ec51 0b18 	vmov	r0, r1, d8
 800b5b0:	f7f5 f852 	bl	8000658 <__aeabi_dcmplt>
 800b5b4:	b918      	cbnz	r0, 800b5be <fmin+0x40>
 800b5b6:	eeb0 8a49 	vmov.f32	s16, s18
 800b5ba:	eef0 8a69 	vmov.f32	s17, s19
 800b5be:	eeb0 0a48 	vmov.f32	s0, s16
 800b5c2:	eef0 0a68 	vmov.f32	s1, s17
 800b5c6:	ecbd 8b04 	vpop	{d8-d9}
 800b5ca:	bd08      	pop	{r3, pc}

0800b5cc <__fpclassifyd>:
 800b5cc:	ec51 0b10 	vmov	r0, r1, d0
 800b5d0:	b510      	push	{r4, lr}
 800b5d2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	d019      	beq.n	800b60e <__fpclassifyd+0x42>
 800b5da:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800b5de:	490e      	ldr	r1, [pc, #56]	; (800b618 <__fpclassifyd+0x4c>)
 800b5e0:	428a      	cmp	r2, r1
 800b5e2:	d90e      	bls.n	800b602 <__fpclassifyd+0x36>
 800b5e4:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800b5e8:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800b5ec:	428a      	cmp	r2, r1
 800b5ee:	d908      	bls.n	800b602 <__fpclassifyd+0x36>
 800b5f0:	4a0a      	ldr	r2, [pc, #40]	; (800b61c <__fpclassifyd+0x50>)
 800b5f2:	4213      	tst	r3, r2
 800b5f4:	d007      	beq.n	800b606 <__fpclassifyd+0x3a>
 800b5f6:	4294      	cmp	r4, r2
 800b5f8:	d107      	bne.n	800b60a <__fpclassifyd+0x3e>
 800b5fa:	fab0 f080 	clz	r0, r0
 800b5fe:	0940      	lsrs	r0, r0, #5
 800b600:	bd10      	pop	{r4, pc}
 800b602:	2004      	movs	r0, #4
 800b604:	e7fc      	b.n	800b600 <__fpclassifyd+0x34>
 800b606:	2003      	movs	r0, #3
 800b608:	e7fa      	b.n	800b600 <__fpclassifyd+0x34>
 800b60a:	2000      	movs	r0, #0
 800b60c:	e7f8      	b.n	800b600 <__fpclassifyd+0x34>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d1ee      	bne.n	800b5f0 <__fpclassifyd+0x24>
 800b612:	2002      	movs	r0, #2
 800b614:	e7f4      	b.n	800b600 <__fpclassifyd+0x34>
 800b616:	bf00      	nop
 800b618:	7fdfffff 	.word	0x7fdfffff
 800b61c:	7ff00000 	.word	0x7ff00000

0800b620 <_init>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	bf00      	nop
 800b624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b626:	bc08      	pop	{r3}
 800b628:	469e      	mov	lr, r3
 800b62a:	4770      	bx	lr

0800b62c <_fini>:
 800b62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62e:	bf00      	nop
 800b630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b632:	bc08      	pop	{r3}
 800b634:	469e      	mov	lr, r3
 800b636:	4770      	bx	lr
