
Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012818  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001784  08012958  08012958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080140dc  080140dc  000150dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080140e4  080140e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080140e8  080140e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000160  20000008  080140ec  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000168  0801424c  00016168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001a0  08014281  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb0  200001b4  08014292  000161b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d64  08014292  00016d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00017000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00017000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08014292  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00050e29  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008989  00000000  00000000  000678c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004618  00000000  00000000  00070250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000035de  00000000  00000000  00074868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000317ff  00000000  00000000  00077e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00046e46  00000000  00000000  000a9645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010fefd  00000000  00000000  000f048b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00200388  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000134bc  00000000  00000000  002003cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000065  00000000  00000000  00213888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b4 	.word	0x200001b4
 800015c:	00000000 	.word	0x00000000
 8000160:	08012940 	.word	0x08012940

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b8 	.word	0x200001b8
 800017c:	08012940 	.word	0x08012940

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__gedf2>:
 80007fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000800:	e006      	b.n	8000810 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__ledf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	e002      	b.n	8000810 <__cmpdf2+0x4>
 800080a:	bf00      	nop

0800080c <__cmpdf2>:
 800080c:	f04f 0c01 	mov.w	ip, #1
 8000810:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000814:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800081c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000826:	d01b      	beq.n	8000860 <__cmpdf2+0x54>
 8000828:	b001      	add	sp, #4
 800082a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800082e:	bf0c      	ite	eq
 8000830:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000834:	ea91 0f03 	teqne	r1, r3
 8000838:	bf02      	ittt	eq
 800083a:	ea90 0f02 	teqeq	r0, r2
 800083e:	2000      	moveq	r0, #0
 8000840:	4770      	bxeq	lr
 8000842:	f110 0f00 	cmn.w	r0, #0
 8000846:	ea91 0f03 	teq	r1, r3
 800084a:	bf58      	it	pl
 800084c:	4299      	cmppl	r1, r3
 800084e:	bf08      	it	eq
 8000850:	4290      	cmpeq	r0, r2
 8000852:	bf2c      	ite	cs
 8000854:	17d8      	asrcs	r0, r3, #31
 8000856:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800085a:	f040 0001 	orr.w	r0, r0, #1
 800085e:	4770      	bx	lr
 8000860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000868:	d102      	bne.n	8000870 <__cmpdf2+0x64>
 800086a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800086e:	d107      	bne.n	8000880 <__cmpdf2+0x74>
 8000870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000878:	d1d6      	bne.n	8000828 <__cmpdf2+0x1c>
 800087a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800087e:	d0d3      	beq.n	8000828 <__cmpdf2+0x1c>
 8000880:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <__aeabi_cdrcmple>:
 8000888:	4684      	mov	ip, r0
 800088a:	4610      	mov	r0, r2
 800088c:	4662      	mov	r2, ip
 800088e:	468c      	mov	ip, r1
 8000890:	4619      	mov	r1, r3
 8000892:	4663      	mov	r3, ip
 8000894:	e000      	b.n	8000898 <__aeabi_cdcmpeq>
 8000896:	bf00      	nop

08000898 <__aeabi_cdcmpeq>:
 8000898:	b501      	push	{r0, lr}
 800089a:	f7ff ffb7 	bl	800080c <__cmpdf2>
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf48      	it	mi
 80008a2:	f110 0f00 	cmnmi.w	r0, #0
 80008a6:	bd01      	pop	{r0, pc}

080008a8 <__aeabi_dcmpeq>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff fff4 	bl	8000898 <__aeabi_cdcmpeq>
 80008b0:	bf0c      	ite	eq
 80008b2:	2001      	moveq	r0, #1
 80008b4:	2000      	movne	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmplt>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffea 	bl	8000898 <__aeabi_cdcmpeq>
 80008c4:	bf34      	ite	cc
 80008c6:	2001      	movcc	r0, #1
 80008c8:	2000      	movcs	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmple>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffe0 	bl	8000898 <__aeabi_cdcmpeq>
 80008d8:	bf94      	ite	ls
 80008da:	2001      	movls	r0, #1
 80008dc:	2000      	movhi	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_dcmpge>:
 80008e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e8:	f7ff ffce 	bl	8000888 <__aeabi_cdrcmple>
 80008ec:	bf94      	ite	ls
 80008ee:	2001      	movls	r0, #1
 80008f0:	2000      	movhi	r0, #0
 80008f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f6:	bf00      	nop

080008f8 <__aeabi_dcmpgt>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff ffc4 	bl	8000888 <__aeabi_cdrcmple>
 8000900:	bf34      	ite	cc
 8000902:	2001      	movcc	r0, #1
 8000904:	2000      	movcs	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_d2iz>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d215      	bcs.n	8000942 <__aeabi_d2iz+0x36>
 8000916:	d511      	bpl.n	800093c <__aeabi_d2iz+0x30>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d912      	bls.n	8000948 <__aeabi_d2iz+0x3c>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	bf18      	it	ne
 8000938:	4240      	negne	r0, r0
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000946:	d105      	bne.n	8000954 <__aeabi_d2iz+0x48>
 8000948:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800094c:	bf08      	it	eq
 800094e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b96a 	b.w	8000c48 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9d08      	ldr	r5, [sp, #32]
 8000992:	460c      	mov	r4, r1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d14e      	bne.n	8000a36 <__udivmoddi4+0xaa>
 8000998:	4694      	mov	ip, r2
 800099a:	458c      	cmp	ip, r1
 800099c:	4686      	mov	lr, r0
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	d962      	bls.n	8000a6a <__udivmoddi4+0xde>
 80009a4:	b14a      	cbz	r2, 80009ba <__udivmoddi4+0x2e>
 80009a6:	f1c2 0320 	rsb	r3, r2, #32
 80009aa:	4091      	lsls	r1, r2
 80009ac:	fa20 f303 	lsr.w	r3, r0, r3
 80009b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b4:	4319      	orrs	r1, r3
 80009b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009be:	fa1f f68c 	uxth.w	r6, ip
 80009c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ca:	fb07 1114 	mls	r1, r7, r4, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb04 f106 	mul.w	r1, r4, r6
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x64>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f104 30ff 	add.w	r0, r4, #4294967295
 80009e2:	f080 8112 	bcs.w	8000c0a <__udivmoddi4+0x27e>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 810f 	bls.w	8000c0a <__udivmoddi4+0x27e>
 80009ec:	3c02      	subs	r4, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	1a59      	subs	r1, r3, r1
 80009f2:	fa1f f38e 	uxth.w	r3, lr
 80009f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009fa:	fb07 1110 	mls	r1, r7, r0, r1
 80009fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a02:	fb00 f606 	mul.w	r6, r0, r6
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x94>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a12:	f080 80fc 	bcs.w	8000c0e <__udivmoddi4+0x282>
 8000a16:	429e      	cmp	r6, r3
 8000a18:	f240 80f9 	bls.w	8000c0e <__udivmoddi4+0x282>
 8000a1c:	4463      	add	r3, ip
 8000a1e:	3802      	subs	r0, #2
 8000a20:	1b9b      	subs	r3, r3, r6
 8000a22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a26:	2100      	movs	r1, #0
 8000a28:	b11d      	cbz	r5, 8000a32 <__udivmoddi4+0xa6>
 8000a2a:	40d3      	lsrs	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d905      	bls.n	8000a46 <__udivmoddi4+0xba>
 8000a3a:	b10d      	cbz	r5, 8000a40 <__udivmoddi4+0xb4>
 8000a3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4608      	mov	r0, r1
 8000a44:	e7f5      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a46:	fab3 f183 	clz	r1, r3
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d146      	bne.n	8000adc <__udivmoddi4+0x150>
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xcc>
 8000a52:	4290      	cmp	r0, r2
 8000a54:	f0c0 80f0 	bcc.w	8000c38 <__udivmoddi4+0x2ac>
 8000a58:	1a86      	subs	r6, r0, r2
 8000a5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d0e6      	beq.n	8000a32 <__udivmoddi4+0xa6>
 8000a64:	e9c5 6300 	strd	r6, r3, [r5]
 8000a68:	e7e3      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f040 8090 	bne.w	8000b90 <__udivmoddi4+0x204>
 8000a70:	eba1 040c 	sub.w	r4, r1, ip
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	fa1f f78c 	uxth.w	r7, ip
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a86:	fb08 4416 	mls	r4, r8, r6, r4
 8000a8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8e:	fb07 f006 	mul.w	r0, r7, r6
 8000a92:	4298      	cmp	r0, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x11c>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x11a>
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	f200 80cd 	bhi.w	8000c40 <__udivmoddi4+0x2b4>
 8000aa6:	4626      	mov	r6, r4
 8000aa8:	1a1c      	subs	r4, r3, r0
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ab6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aba:	fb00 f707 	mul.w	r7, r0, r7
 8000abe:	429f      	cmp	r7, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x148>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x146>
 8000acc:	429f      	cmp	r7, r3
 8000ace:	f200 80b0 	bhi.w	8000c32 <__udivmoddi4+0x2a6>
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	1bdb      	subs	r3, r3, r7
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	e7a5      	b.n	8000a28 <__udivmoddi4+0x9c>
 8000adc:	f1c1 0620 	rsb	r6, r1, #32
 8000ae0:	408b      	lsls	r3, r1
 8000ae2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aec:	fa04 f301 	lsl.w	r3, r4, r1
 8000af0:	ea43 030c 	orr.w	r3, r3, ip
 8000af4:	40f4      	lsrs	r4, r6
 8000af6:	fa00 f801 	lsl.w	r8, r0, r1
 8000afa:	0c38      	lsrs	r0, r7, #16
 8000afc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b00:	fbb4 fef0 	udiv	lr, r4, r0
 8000b04:	fa1f fc87 	uxth.w	ip, r7
 8000b08:	fb00 441e 	mls	r4, r0, lr, r4
 8000b0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b10:	fb0e f90c 	mul.w	r9, lr, ip
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x1a6>
 8000b1c:	193c      	adds	r4, r7, r4
 8000b1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b22:	f080 8084 	bcs.w	8000c2e <__udivmoddi4+0x2a2>
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	f240 8081 	bls.w	8000c2e <__udivmoddi4+0x2a2>
 8000b2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b30:	443c      	add	r4, r7
 8000b32:	eba4 0409 	sub.w	r4, r4, r9
 8000b36:	fa1f f983 	uxth.w	r9, r3
 8000b3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b4a:	45a4      	cmp	ip, r4
 8000b4c:	d907      	bls.n	8000b5e <__udivmoddi4+0x1d2>
 8000b4e:	193c      	adds	r4, r7, r4
 8000b50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b54:	d267      	bcs.n	8000c26 <__udivmoddi4+0x29a>
 8000b56:	45a4      	cmp	ip, r4
 8000b58:	d965      	bls.n	8000c26 <__udivmoddi4+0x29a>
 8000b5a:	3b02      	subs	r3, #2
 8000b5c:	443c      	add	r4, r7
 8000b5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b62:	fba0 9302 	umull	r9, r3, r0, r2
 8000b66:	eba4 040c 	sub.w	r4, r4, ip
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	46ce      	mov	lr, r9
 8000b6e:	469c      	mov	ip, r3
 8000b70:	d351      	bcc.n	8000c16 <__udivmoddi4+0x28a>
 8000b72:	d04e      	beq.n	8000c12 <__udivmoddi4+0x286>
 8000b74:	b155      	cbz	r5, 8000b8c <__udivmoddi4+0x200>
 8000b76:	ebb8 030e 	subs.w	r3, r8, lr
 8000b7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b82:	40cb      	lsrs	r3, r1
 8000b84:	431e      	orrs	r6, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	e9c5 6400 	strd	r6, r4, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e750      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f103 	lsr.w	r1, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	430c      	orrs	r4, r1
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bac:	fa1f f78c 	uxth.w	r7, ip
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000bb8:	0c23      	lsrs	r3, r4, #16
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	fb00 f107 	mul.w	r1, r0, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x24c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bce:	d22c      	bcs.n	8000c2a <__udivmoddi4+0x29e>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d92a      	bls.n	8000c2a <__udivmoddi4+0x29e>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000be0:	fb08 3311 	mls	r3, r8, r1, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb01 f307 	mul.w	r3, r1, r7
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x276>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bf8:	d213      	bcs.n	8000c22 <__udivmoddi4+0x296>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d911      	bls.n	8000c22 <__udivmoddi4+0x296>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	1ae4      	subs	r4, r4, r3
 8000c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c08:	e739      	b.n	8000a7e <__udivmoddi4+0xf2>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	e6f0      	b.n	80009f0 <__udivmoddi4+0x64>
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e706      	b.n	8000a20 <__udivmoddi4+0x94>
 8000c12:	45c8      	cmp	r8, r9
 8000c14:	d2ae      	bcs.n	8000b74 <__udivmoddi4+0x1e8>
 8000c16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7a8      	b.n	8000b74 <__udivmoddi4+0x1e8>
 8000c22:	4631      	mov	r1, r6
 8000c24:	e7ed      	b.n	8000c02 <__udivmoddi4+0x276>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e799      	b.n	8000b5e <__udivmoddi4+0x1d2>
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	e7d4      	b.n	8000bd8 <__udivmoddi4+0x24c>
 8000c2e:	46d6      	mov	lr, sl
 8000c30:	e77f      	b.n	8000b32 <__udivmoddi4+0x1a6>
 8000c32:	4463      	add	r3, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	e74d      	b.n	8000ad4 <__udivmoddi4+0x148>
 8000c38:	4606      	mov	r6, r0
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	e70f      	b.n	8000a60 <__udivmoddi4+0xd4>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	e730      	b.n	8000aa8 <__udivmoddi4+0x11c>
 8000c46:	bf00      	nop

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <MX_MEMS_Init>:
        ITM_SendChar(*ptr++);
    }
    return len;
}

void MX_MEMS_Init(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
    Init_Sensors();
 8000c50:	f000 f89e 	bl	8000d90 <Init_Sensors>
    CalibrateSensors();
 8000c54:	f000 f8ea 	bl	8000e2c <CalibrateSensors>
    // Initialisation des structures BenchRep
    referenceMovement.maxAmplitudeZ = 0;
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_MEMS_Init+0x34>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
    referenceMovement.minAmplitudeZ = 0;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_MEMS_Init+0x34>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
    referenceMovement.duration = 0;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_MEMS_Init+0x34>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]

    currentMovement.maxAmplitudeZ = 0;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_MEMS_Init+0x38>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
    currentMovement.minAmplitudeZ = 0;
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <MX_MEMS_Init+0x38>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
    currentMovement.duration = 0;
 8000c76:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <MX_MEMS_Init+0x38>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000204 	.word	0x20000204
 8000c84:	20000214 	.word	0x20000214

08000c88 <MX_MEMS_Process>:
void MX_MEMS_Process(void) {
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af06      	add	r7, sp, #24
    // Réinitialisation des compteurs et de l'état
    validMovements = 0;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <MX_MEMS_Process+0xd4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
    invalidMovements = 0;
 8000c94:	4b32      	ldr	r3, [pc, #200]	@ (8000d60 <MX_MEMS_Process+0xd8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
    isReferenceMovementRecorded = false;
 8000c9a:	4b32      	ldr	r3, [pc, #200]	@ (8000d64 <MX_MEMS_Process+0xdc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]

    while (true) {
        if (!isReferenceMovementRecorded) {
 8000ca0:	4b30      	ldr	r3, [pc, #192]	@ (8000d64 <MX_MEMS_Process+0xdc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f083 0301 	eor.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d018      	beq.n	8000ce0 <MX_MEMS_Process+0x58>
            printf("Enregistrement du mouvement de référence...\n");
 8000cae:	482e      	ldr	r0, [pc, #184]	@ (8000d68 <MX_MEMS_Process+0xe0>)
 8000cb0:	f010 fefe 	bl	8011ab0 <puts>
            if (!recordBenchRep(&referenceMovement)) {
 8000cb4:	482d      	ldr	r0, [pc, #180]	@ (8000d6c <MX_MEMS_Process+0xe4>)
 8000cb6:	f000 f951 	bl	8000f5c <recordBenchRep>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f083 0301 	eor.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <MX_MEMS_Process+0x46>
                printf("Aucun mouvement de référence détecté, fin de la série.\n");
 8000cc6:	482a      	ldr	r0, [pc, #168]	@ (8000d70 <MX_MEMS_Process+0xe8>)
 8000cc8:	f010 fef2 	bl	8011ab0 <puts>
                break; // Sortie si aucun mouvement n'est détecté dans le délai imparti
 8000ccc:	e03a      	b.n	8000d44 <MX_MEMS_Process+0xbc>
            }
            isReferenceMovementRecorded = true;
 8000cce:	4b25      	ldr	r3, [pc, #148]	@ (8000d64 <MX_MEMS_Process+0xdc>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
            BLE_MVT_REF();
 8000cd4:	f00f fede 	bl	8010a94 <BLE_MVT_REF>
            printf("Mouvement de référence enregistré.\n");
 8000cd8:	4826      	ldr	r0, [pc, #152]	@ (8000d74 <MX_MEMS_Process+0xec>)
 8000cda:	f010 fee9 	bl	8011ab0 <puts>
 8000cde:	e7df      	b.n	8000ca0 <MX_MEMS_Process+0x18>
        } else {
            printf("Enregistrement d'une nouvelle répétition...\n");
 8000ce0:	4825      	ldr	r0, [pc, #148]	@ (8000d78 <MX_MEMS_Process+0xf0>)
 8000ce2:	f010 fee5 	bl	8011ab0 <puts>
            if (!recordBenchRep(&currentMovement)) {
 8000ce6:	4825      	ldr	r0, [pc, #148]	@ (8000d7c <MX_MEMS_Process+0xf4>)
 8000ce8:	f000 f938 	bl	8000f5c <recordBenchRep>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f083 0301 	eor.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <MX_MEMS_Process+0x78>
                printf("Fin de la série détectée après 5 secondes d'inactivité.\n");
 8000cf8:	4821      	ldr	r0, [pc, #132]	@ (8000d80 <MX_MEMS_Process+0xf8>)
 8000cfa:	f010 fed9 	bl	8011ab0 <puts>
                break; // Sortie si aucun nouveau mouvement n'est détecté dans le délai imparti
 8000cfe:	e021      	b.n	8000d44 <MX_MEMS_Process+0xbc>
            }

            if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000d00:	4d1a      	ldr	r5, [pc, #104]	@ (8000d6c <MX_MEMS_Process+0xe4>)
 8000d02:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d06:	9304      	str	r3, [sp, #16]
 8000d08:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_MEMS_Process+0xf4>)
 8000d0a:	466c      	mov	r4, sp
 8000d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d16:	f000 f9e1 	bl	80010dc <compareBenchReps>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <MX_MEMS_Process+0xaa>
                validMovements++;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_MEMS_Process+0xd4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <MX_MEMS_Process+0xd4>)
 8000d28:	6013      	str	r3, [r2, #0]
                printf("Répétition valide.\n");
 8000d2a:	4816      	ldr	r0, [pc, #88]	@ (8000d84 <MX_MEMS_Process+0xfc>)
 8000d2c:	f010 fec0 	bl	8011ab0 <puts>
 8000d30:	e7b6      	b.n	8000ca0 <MX_MEMS_Process+0x18>
            } else {
                invalidMovements++;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <MX_MEMS_Process+0xd8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a09      	ldr	r2, [pc, #36]	@ (8000d60 <MX_MEMS_Process+0xd8>)
 8000d3a:	6013      	str	r3, [r2, #0]
                printf("Répétition non valide.\n");
 8000d3c:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <MX_MEMS_Process+0x100>)
 8000d3e:	f010 feb7 	bl	8011ab0 <puts>
        if (!isReferenceMovementRecorded) {
 8000d42:	e7ad      	b.n	8000ca0 <MX_MEMS_Process+0x18>
            }
        }
    }

    // Affichage des résultats à la fin de la série
    printf("Mouvements valides: %d, Mouvements non valides: %d\n", validMovements, invalidMovements);
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <MX_MEMS_Process+0xd4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <MX_MEMS_Process+0xd8>)
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480f      	ldr	r0, [pc, #60]	@ (8000d8c <MX_MEMS_Process+0x104>)
 8000d50:	f010 fe3e 	bl	80119d0 <iprintf>
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000224 	.word	0x20000224
 8000d60:	20000228 	.word	0x20000228
 8000d64:	20000200 	.word	0x20000200
 8000d68:	08012958 	.word	0x08012958
 8000d6c:	20000204 	.word	0x20000204
 8000d70:	08012988 	.word	0x08012988
 8000d74:	080129c4 	.word	0x080129c4
 8000d78:	080129ec 	.word	0x080129ec
 8000d7c:	20000214 	.word	0x20000214
 8000d80:	08012a1c 	.word	0x08012a1c
 8000d84:	08012a5c 	.word	0x08012a5c
 8000d88:	08012a74 	.word	0x08012a74
 8000d8c:	08012a90 	.word	0x08012a90

08000d90 <Init_Sensors>:





void Init_Sensors(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    BSP_SENSOR_ACC_Init();
 8000d94:	f001 fd18 	bl	80027c8 <BSP_SENSOR_ACC_Init>
    BSP_SENSOR_GYR_Init();
 8000d98:	f001 fd1e 	bl	80027d8 <BSP_SENSOR_GYR_Init>

    BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8000d9c:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8000db0 <Init_Sensors+0x20>
 8000da0:	f001 fd3c 	bl	800281c <BSP_SENSOR_ACC_SetOutputDataRate>
    BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8000da4:	2004      	movs	r0, #4
 8000da6:	f001 fd48 	bl	800283a <BSP_SENSOR_ACC_SetFullScale>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	42480000 	.word	0x42480000

08000db4 <ReadSensorData>:

void ReadSensorData(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    BSP_SENSOR_ACC_GetAxes(&AccValue);
 8000db8:	4818      	ldr	r0, [pc, #96]	@ (8000e1c <ReadSensorData+0x68>)
 8000dba:	f001 fd15 	bl	80027e8 <BSP_SENSOR_ACC_GetAxes>
    BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8000dbe:	4818      	ldr	r0, [pc, #96]	@ (8000e20 <ReadSensorData+0x6c>)
 8000dc0:	f001 fd1f 	bl	8002802 <BSP_SENSOR_GYR_GetAxes>

    // Appliquer le décalage après la calibration
    AccValue.x -= AccOffset.x;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <ReadSensorData+0x68>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <ReadSensorData+0x70>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	4a13      	ldr	r2, [pc, #76]	@ (8000e1c <ReadSensorData+0x68>)
 8000dd0:	6013      	str	r3, [r2, #0]
    AccValue.y -= AccOffset.y;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <ReadSensorData+0x68>)
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <ReadSensorData+0x70>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8000e1c <ReadSensorData+0x68>)
 8000dde:	6053      	str	r3, [r2, #4]
    AccValue.z -= AccOffset.z;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <ReadSensorData+0x68>)
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <ReadSensorData+0x70>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	4a0c      	ldr	r2, [pc, #48]	@ (8000e1c <ReadSensorData+0x68>)
 8000dec:	6093      	str	r3, [r2, #8]

    GyrValue.x -= GyrOffset.x;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <ReadSensorData+0x6c>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <ReadSensorData+0x74>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <ReadSensorData+0x6c>)
 8000dfa:	6013      	str	r3, [r2, #0]
    GyrValue.y -= GyrOffset.y;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <ReadSensorData+0x6c>)
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <ReadSensorData+0x74>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	4a06      	ldr	r2, [pc, #24]	@ (8000e20 <ReadSensorData+0x6c>)
 8000e08:	6053      	str	r3, [r2, #4]
    GyrValue.z -= GyrOffset.z;
 8000e0a:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <ReadSensorData+0x6c>)
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <ReadSensorData+0x74>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	4a02      	ldr	r2, [pc, #8]	@ (8000e20 <ReadSensorData+0x6c>)
 8000e16:	6093      	str	r3, [r2, #8]
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200001d0 	.word	0x200001d0
 8000e20:	200001dc 	.word	0x200001dc
 8000e24:	200001e8 	.word	0x200001e8
 8000e28:	200001f4 	.word	0x200001f4

08000e2c <CalibrateSensors>:
    printf("Accéléromètre [X: %ld, Y: %ld, Z: %ld]\n", (long)AccValue.x, (long)AccValue.y, (long)AccValue.z);
    printf("Gyroscope [X: %ld, Y: %ld, Z: %ld]\n", (long)GyrValue.x, (long)GyrValue.y, (long)GyrValue.z);
    HAL_Delay(2000);
}

void CalibrateSensors(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
    CalibrateAccelerometer();
 8000e30:	f000 f804 	bl	8000e3c <CalibrateAccelerometer>
    CalibrateGyroscope();
 8000e34:	f000 f84a 	bl	8000ecc <CalibrateGyroscope>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <CalibrateAccelerometer>:

void CalibrateAccelerometer(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
    int sumX = 0, sumY = 0, sumZ = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
    MOTION_SENSOR_Axes_t tempVal;

    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	e015      	b.n	8000e80 <CalibrateAccelerometer+0x44>
        BSP_SENSOR_ACC_GetAxes(&tempVal);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fcc6 	bl	80027e8 <BSP_SENSOR_ACC_GetAxes>
        sumX += tempVal.x;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	4413      	add	r3, r2
 8000e62:	61fb      	str	r3, [r7, #28]
        sumY += tempVal.y;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4413      	add	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        sumZ += tempVal.z;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
        HAL_Delay(10);
 8000e74:	200a      	movs	r0, #10
 8000e76:	f000 fdd9 	bl	8001a2c <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	2b63      	cmp	r3, #99	@ 0x63
 8000e84:	dde6      	ble.n	8000e54 <CalibrateAccelerometer+0x18>
    }

    AccOffset.x = sumX / CALIBRATION_SAMPLES;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <CalibrateAccelerometer+0x88>)
 8000e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8e:	1152      	asrs	r2, r2, #5
 8000e90:	17db      	asrs	r3, r3, #31
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <CalibrateAccelerometer+0x8c>)
 8000e96:	6013      	str	r3, [r2, #0]
    AccOffset.y = sumY / CALIBRATION_SAMPLES;
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <CalibrateAccelerometer+0x88>)
 8000e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea0:	1152      	asrs	r2, r2, #5
 8000ea2:	17db      	asrs	r3, r3, #31
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	4a08      	ldr	r2, [pc, #32]	@ (8000ec8 <CalibrateAccelerometer+0x8c>)
 8000ea8:	6053      	str	r3, [r2, #4]
    AccOffset.z = sumZ / CALIBRATION_SAMPLES;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <CalibrateAccelerometer+0x88>)
 8000eae:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb2:	1152      	asrs	r2, r2, #5
 8000eb4:	17db      	asrs	r3, r3, #31
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	4a03      	ldr	r2, [pc, #12]	@ (8000ec8 <CalibrateAccelerometer+0x8c>)
 8000eba:	6093      	str	r3, [r2, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	51eb851f 	.word	0x51eb851f
 8000ec8:	200001e8 	.word	0x200001e8

08000ecc <CalibrateGyroscope>:

void CalibrateGyroscope(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
    int sumX = 0, sumY = 0, sumZ = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
    MOTION_SENSOR_Axes_t tempVal;

    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	e015      	b.n	8000f10 <CalibrateGyroscope+0x44>
        BSP_SENSOR_GYR_GetAxes(&tempVal);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fc8b 	bl	8002802 <BSP_SENSOR_GYR_GetAxes>
        sumX += tempVal.x;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	61fb      	str	r3, [r7, #28]
        sumY += tempVal.y;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4413      	add	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        sumZ += tempVal.z;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4413      	add	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
        HAL_Delay(10);
 8000f04:	200a      	movs	r0, #10
 8000f06:	f000 fd91 	bl	8001a2c <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	2b63      	cmp	r3, #99	@ 0x63
 8000f14:	dde6      	ble.n	8000ee4 <CalibrateGyroscope+0x18>
    }

    GyrOffset.x = sumX / CALIBRATION_SAMPLES;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	4a0e      	ldr	r2, [pc, #56]	@ (8000f54 <CalibrateGyroscope+0x88>)
 8000f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1e:	1152      	asrs	r2, r2, #5
 8000f20:	17db      	asrs	r3, r3, #31
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	4a0c      	ldr	r2, [pc, #48]	@ (8000f58 <CalibrateGyroscope+0x8c>)
 8000f26:	6013      	str	r3, [r2, #0]
    GyrOffset.y = sumY / CALIBRATION_SAMPLES;
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <CalibrateGyroscope+0x88>)
 8000f2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f30:	1152      	asrs	r2, r2, #5
 8000f32:	17db      	asrs	r3, r3, #31
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <CalibrateGyroscope+0x8c>)
 8000f38:	6053      	str	r3, [r2, #4]
    GyrOffset.z = sumZ / CALIBRATION_SAMPLES;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <CalibrateGyroscope+0x88>)
 8000f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f42:	1152      	asrs	r2, r2, #5
 8000f44:	17db      	asrs	r3, r3, #31
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	4a03      	ldr	r2, [pc, #12]	@ (8000f58 <CalibrateGyroscope+0x8c>)
 8000f4a:	6093      	str	r3, [r2, #8]
}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	51eb851f 	.word	0x51eb851f
 8000f58:	200001f4 	.word	0x200001f4

08000f5c <recordBenchRep>:

bool recordBenchRep(BenchRep *rep) {
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    int maxValueZ = INT_MIN;
 8000f64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int minValueZ = INT_MAX;
 8000f6a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t startTime = HAL_GetTick();
 8000f70:	f007 fa0c 	bl	800838c <HAL_GetTick>
 8000f74:	6278      	str	r0, [r7, #36]	@ 0x24
    uint32_t lastMovementTime = startTime;
 8000f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f78:	623b      	str	r3, [r7, #32]
    uint32_t currentTime;
    bool movementDetected = false;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	77fb      	strb	r3, [r7, #31]
    bool isAscending = false; // Initialisation différée
 8000f7e:	2300      	movs	r3, #0
 8000f80:	77bb      	strb	r3, [r7, #30]
    int changeOfDirectionCount = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
    bool directionDetermined = false;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]
    uint32_t inactivityStartTime = HAL_GetTick(); // Pour détecter l'inactivité initiale
 8000f8a:	f007 f9ff 	bl	800838c <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

    while (true) {
        ReadSensorData();
 8000f90:	f7ff ff10 	bl	8000db4 <ReadSensorData>

        // Détecter l'inactivité initiale
        if (!movementDetected && (HAL_GetTick() - inactivityStartTime > 5000)) {
 8000f94:	7ffb      	ldrb	r3, [r7, #31]
 8000f96:	f083 0301 	eor.w	r3, r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00a      	beq.n	8000fb6 <recordBenchRep+0x5a>
 8000fa0:	f007 f9f4 	bl	800838c <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d901      	bls.n	8000fb6 <recordBenchRep+0x5a>
            return false; // Aucun mouvement détecté dans les 5 premières secondes
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e08c      	b.n	80010d0 <recordBenchRep+0x174>
        }

        if (abs(AccValue.z) > MOVEMENT_THRESHOLD) {
 8000fb6:	4b48      	ldr	r3, [pc, #288]	@ (80010d8 <recordBenchRep+0x17c>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bfb8      	it	lt
 8000fbe:	425b      	neglt	r3, r3
 8000fc0:	2b64      	cmp	r3, #100	@ 0x64
 8000fc2:	dd66      	ble.n	8001092 <recordBenchRep+0x136>
            if (!movementDetected) {
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	f083 0301 	eor.w	r3, r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d009      	beq.n	8000fe4 <recordBenchRep+0x88>
                movementDetected = true;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	77fb      	strb	r3, [r7, #31]
                startTime = HAL_GetTick();
 8000fd4:	f007 f9da 	bl	800838c <HAL_GetTick>
 8000fd8:	6278      	str	r0, [r7, #36]	@ 0x24
                lastMovementTime = startTime;
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	623b      	str	r3, [r7, #32]
                inactivityStartTime = 0; // Réinitialiser puisqu'un mouvement a été détecté
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	e002      	b.n	8000fea <recordBenchRep+0x8e>
            } else {
                lastMovementTime = HAL_GetTick();
 8000fe4:	f007 f9d2 	bl	800838c <HAL_GetTick>
 8000fe8:	6238      	str	r0, [r7, #32]
            }
            maxValueZ = fmax(maxValueZ, AccValue.z);
 8000fea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000fec:	f7ff fb9c 	bl	8000728 <__aeabi_i2d>
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	460d      	mov	r5, r1
 8000ff4:	4b38      	ldr	r3, [pc, #224]	@ (80010d8 <recordBenchRep+0x17c>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fb95 	bl	8000728 <__aeabi_i2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	ec43 2b11 	vmov	d1, r2, r3
 8001006:	ec45 4b10 	vmov	d0, r4, r5
 800100a:	f011 fc1b 	bl	8012844 <fmax>
 800100e:	ec53 2b10 	vmov	r2, r3, d0
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fc79 	bl	800090c <__aeabi_d2iz>
 800101a:	4603      	mov	r3, r0
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            minValueZ = fmin(minValueZ, AccValue.z);
 800101e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001020:	f7ff fb82 	bl	8000728 <__aeabi_i2d>
 8001024:	4604      	mov	r4, r0
 8001026:	460d      	mov	r5, r1
 8001028:	4b2b      	ldr	r3, [pc, #172]	@ (80010d8 <recordBenchRep+0x17c>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb7b 	bl	8000728 <__aeabi_i2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	ec43 2b11 	vmov	d1, r2, r3
 800103a:	ec45 4b10 	vmov	d0, r4, r5
 800103e:	f011 fc2b 	bl	8012898 <fmin>
 8001042:	ec53 2b10 	vmov	r2, r3, d0
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fc5f 	bl	800090c <__aeabi_d2iz>
 800104e:	4603      	mov	r3, r0
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28

            if (!directionDetermined) {
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d009      	beq.n	8001072 <recordBenchRep+0x116>
                isAscending = AccValue.z > 0;
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <recordBenchRep+0x17c>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	bfcc      	ite	gt
 8001066:	2301      	movgt	r3, #1
 8001068:	2300      	movle	r3, #0
 800106a:	77bb      	strb	r3, [r7, #30]
                directionDetermined = true;
 800106c:	2301      	movs	r3, #1
 800106e:	75fb      	strb	r3, [r7, #23]
 8001070:	e00f      	b.n	8001092 <recordBenchRep+0x136>
            } else {
                bool currentAscending = AccValue.z > 0;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <recordBenchRep+0x17c>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	bfcc      	ite	gt
 800107a:	2301      	movgt	r3, #1
 800107c:	2300      	movle	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
                if (currentAscending != isAscending) {
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	7fbb      	ldrb	r3, [r7, #30]
 8001084:	429a      	cmp	r2, r3
 8001086:	d004      	beq.n	8001092 <recordBenchRep+0x136>
                    changeOfDirectionCount++;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	3301      	adds	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
                    isAscending = currentAscending;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	77bb      	strb	r3, [r7, #30]
                }
            }
        }

        currentTime = HAL_GetTick();
 8001092:	f007 f97b 	bl	800838c <HAL_GetTick>
 8001096:	60b8      	str	r0, [r7, #8]
        if (movementDetected && (currentTime - lastMovementTime > REPETITION_TIME_OUT)) {
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f43f af78 	beq.w	8000f90 <recordBenchRep+0x34>
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010aa:	d800      	bhi.n	80010ae <recordBenchRep+0x152>
        ReadSensorData();
 80010ac:	e770      	b.n	8000f90 <recordBenchRep+0x34>
            break; // Fin de l'enregistrement d'un mouvement
 80010ae:	bf00      	nop
        }
    }

    // Enregistrement des données du mouvement
    rep->maxAmplitudeZ = maxValueZ;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010b4:	601a      	str	r2, [r3, #0]
    rep->minAmplitudeZ = minValueZ;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010ba:	605a      	str	r2, [r3, #4]
    rep->duration = currentTime - startTime;
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
    rep->changeOfDirectionCount = changeOfDirectionCount;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	60da      	str	r2, [r3, #12]

    return true; // Mouvement détecté et enregistré
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3730      	adds	r7, #48	@ 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bdb0      	pop	{r4, r5, r7, pc}
 80010d8:	200001d0 	.word	0x200001d0

080010dc <compareBenchReps>:



bool compareBenchReps(BenchRep refRep, BenchRep newRep, int tolerance) {
 80010dc:	b490      	push	{r4, r7}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	463c      	mov	r4, r7
 80010e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance &&
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bfb8      	it	lt
 80010f2:	425b      	neglt	r3, r3
 80010f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010f6:	429a      	cmp	r2, r3
 80010f8:	db17      	blt.n	800112a <compareBenchReps+0x4e>
        abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance &&
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	bfb8      	it	lt
 8001104:	425b      	neglt	r3, r3
    if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance &&
 8001106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001108:	429a      	cmp	r2, r3
 800110a:	db0e      	blt.n	800112a <compareBenchReps+0x4e>
        abs(refRep.duration - newRep.duration) <= tolerance &&
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	bfb8      	it	lt
 8001116:	425b      	neglt	r3, r3
        abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance &&
 8001118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800111a:	429a      	cmp	r2, r3
 800111c:	db05      	blt.n	800112a <compareBenchReps+0x4e>
        refRep.changeOfDirectionCount == newRep.changeOfDirectionCount) {
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        abs(refRep.duration - newRep.duration) <= tolerance &&
 8001122:	429a      	cmp	r2, r3
 8001124:	d101      	bne.n	800112a <compareBenchReps+0x4e>
        return true;
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <compareBenchReps+0x50>
    }
    return false;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bc90      	pop	{r4, r7}
 8001134:	4770      	bx	lr
	...

08001138 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <APPD_EnableCPU2+0x34>)
 8001140:	1d3c      	adds	r4, r7, #4
 8001142:	461d      	mov	r5, r3
 8001144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001148:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800114c:	c403      	stmia	r4!, {r0, r1}
 800114e:	8022      	strh	r2, [r4, #0]
 8001150:	3402      	adds	r4, #2
 8001152:	0c13      	lsrs	r3, r2, #16
 8001154:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001156:	f00d febd 	bl	800eed4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f00d f94e 	bl	800e3fe <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001162:	bf00      	nop
}
 8001164:	3720      	adds	r7, #32
 8001166:	46bd      	mov	sp, r7
 8001168:	bdb0      	pop	{r4, r5, r7, pc}
 800116a:	bf00      	nop
 800116c:	08012b14 	.word	0x08012b14

08001170 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	460b      	mov	r3, r1
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800117e:	897a      	ldrh	r2, [r7, #10]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68f9      	ldr	r1, [r7, #12]
 8001184:	2000      	movs	r0, #0
 8001186:	f001 fabb 	bl	8002700 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 800118a:	bf00      	nop
}
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800119c:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <LL_C2_PWR_SetPowerMode+0x28>)
 800119e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a2:	f023 0207 	bic.w	r2, r3, #7
 80011a6:	4905      	ldr	r1, [pc, #20]	@ (80011bc <LL_C2_PWR_SetPowerMode+0x28>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	58000400 	.word	0x58000400

080011c0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80011ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80011ce:	4905      	ldr	r1, [pc, #20]	@ (80011e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58000800 	.word	0x58000800

080011e8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80011f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001202:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800120e:	4313      	orrs	r3, r2
 8001210:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	cafecafe 	.word	0xcafecafe

08001224 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4313      	orrs	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001258:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800125c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800127a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800127e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001282:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800129c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80012a4:	d101      	bne.n	80012aa <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80012ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012ca:	d101      	bne.n	80012d0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001300:	68fb      	ldr	r3, [r7, #12]
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <LL_DBGMCU_GetDeviceID+0x18>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e0042000 	.word	0xe0042000

0800132c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <LL_DBGMCU_GetRevisionID+0x18>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0c1b      	lsrs	r3, r3, #16
 8001336:	b29b      	uxth	r3, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e0042000 	.word	0xe0042000

08001348 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	605a      	str	r2, [r3, #4]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	041b      	lsls	r3, r3, #16
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	615a      	str	r2, [r3, #20]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	615a      	str	r2, [r3, #20]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	609a      	str	r2, [r3, #8]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	619a      	str	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <LL_LPM_EnableSleep+0x1c>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <LL_LPM_EnableSleep+0x1c>)
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	6113      	str	r3, [r2, #16]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	22ff      	movs	r2, #255	@ 0xff
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	22ca      	movs	r2, #202	@ 0xca
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2253      	movs	r2, #83	@ 0x53
 8001458:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 0207 	bic.w	r2, r3, #7
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <MX_APPE_Config+0x18>)
 8001492:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001496:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001498:	f000 f824 	bl	80014e4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800149c:	f000 f864 	bl	8001568 <Config_HSE>

  return;
 80014a0:	bf00      	nop
}
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	58004000 	.word	0x58004000

080014a8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014ac:	f000 f870 	bl	8001590 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014b0:	f000 f888 	bl	80015c4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014b4:	4903      	ldr	r1, [pc, #12]	@ (80014c4 <MX_APPE_Init+0x1c>)
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 ff30 	bl	800231c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014bc:	f000 f890 	bl	80015e0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014c0:	bf00      	nop
}
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000030c 	.word	0x2000030c

080014c8 <Init_Smps>:

void Init_Smps(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014cc:	bf00      	nop
}
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <Init_Exti>:

void Init_Exti(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80014da:	2050      	movs	r0, #80	@ 0x50
 80014dc:	f7ff fe70 	bl	80011c0 <LL_EXTI_EnableIT_32_63>

  return;
 80014e0:	bf00      	nop
}
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80014e8:	f000 f804 	bl	80014f4 <Reset_BackupDomain>

  Reset_IPCC();
 80014ec:	f000 f81a 	bl	8001524 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80014f0:	bf00      	nop
}
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80014f8:	f7ff feca 	bl	8001290 <LL_RCC_IsActiveFlag_PINRST>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00d      	beq.n	800151e <Reset_BackupDomain+0x2a>
 8001502:	f7ff fed8 	bl	80012b6 <LL_RCC_IsActiveFlag_SFTRST>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d108      	bne.n	800151e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800150c:	f008 fdf8 	bl	800a100 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001510:	f008 fdf6 	bl	800a100 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001514:	f7ff fe9a 	bl	800124c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001518:	f7ff fea9 	bl	800126e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800151c:	bf00      	nop
 800151e:	bf00      	nop
}
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001528:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800152c:	f7ff fed6 	bl	80012dc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001530:	213f      	movs	r1, #63	@ 0x3f
 8001532:	480c      	ldr	r0, [pc, #48]	@ (8001564 <Reset_IPCC+0x40>)
 8001534:	f7ff ff4e 	bl	80013d4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001538:	213f      	movs	r1, #63	@ 0x3f
 800153a:	480a      	ldr	r0, [pc, #40]	@ (8001564 <Reset_IPCC+0x40>)
 800153c:	f7ff ff58 	bl	80013f0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001540:	213f      	movs	r1, #63	@ 0x3f
 8001542:	4808      	ldr	r0, [pc, #32]	@ (8001564 <Reset_IPCC+0x40>)
 8001544:	f7ff ff00 	bl	8001348 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001548:	213f      	movs	r1, #63	@ 0x3f
 800154a:	4806      	ldr	r0, [pc, #24]	@ (8001564 <Reset_IPCC+0x40>)
 800154c:	f7ff ff1f 	bl	800138e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001550:	213f      	movs	r1, #63	@ 0x3f
 8001552:	4804      	ldr	r0, [pc, #16]	@ (8001564 <Reset_IPCC+0x40>)
 8001554:	f7ff ff0a 	bl	800136c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001558:	213f      	movs	r1, #63	@ 0x3f
 800155a:	4802      	ldr	r0, [pc, #8]	@ (8001564 <Reset_IPCC+0x40>)
 800155c:	f7ff ff29 	bl	80013b2 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001560:	bf00      	nop
}
 8001562:	bd80      	pop	{r7, pc}
 8001564:	58000c00 	.word	0x58000c00

08001568 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800156e:	2000      	movs	r0, #0
 8001570:	f00d fe04 	bl	800f17c <OTP_Read>
 8001574:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	799b      	ldrb	r3, [r3, #6]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fe31 	bl	80011e8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001586:	bf00      	nop
 8001588:	bf00      	nop
}
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <System_Init>:

static void System_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  Init_Smps();
 8001594:	f7ff ff98 	bl	80014c8 <Init_Smps>

  Init_Exti();
 8001598:	f7ff ff9d 	bl	80014d6 <Init_Exti>

  Init_Rtc();
 800159c:	f000 f802 	bl	80015a4 <Init_Rtc>

  return;
 80015a0:	bf00      	nop
}
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <Init_Rtc+0x1c>)
 80015aa:	f7ff ff4c 	bl	8001446 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80015ae:	2100      	movs	r1, #0
 80015b0:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <Init_Rtc+0x1c>)
 80015b2:	f7ff ff58 	bl	8001466 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80015b6:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <Init_Rtc+0x1c>)
 80015b8:	f7ff ff38 	bl	800142c <LL_RTC_EnableWriteProtection>

  return;
 80015bc:	bf00      	nop
}
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40002800 	.word	0x40002800

080015c4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80015c8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80015cc:	f7ff fe2a 	bl	8001224 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80015d0:	f00f fec0 	bl	8011354 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80015d4:	2004      	movs	r0, #4
 80015d6:	f7ff fddd 	bl	8001194 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80015da:	bf00      	nop
}
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80015e6:	f00d fabf 	bl	800eb68 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80015ea:	4a11      	ldr	r2, [pc, #68]	@ (8001630 <appe_Tl_Init+0x50>)
 80015ec:	2100      	movs	r1, #0
 80015ee:	2008      	movs	r0, #8
 80015f0:	f00f ffee 	bl	80115d0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <appe_Tl_Init+0x54>)
 80015f6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <appe_Tl_Init+0x58>)
 80015fa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80015fc:	463b      	mov	r3, r7
 80015fe:	4619      	mov	r1, r3
 8001600:	480e      	ldr	r0, [pc, #56]	@ (800163c <appe_Tl_Init+0x5c>)
 8001602:	f00d f973 	bl	800e8ec <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <appe_Tl_Init+0x60>)
 8001608:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <appe_Tl_Init+0x64>)
 800160c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <appe_Tl_Init+0x68>)
 8001610:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001612:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001616:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	4618      	mov	r0, r3
 800161e:	f00d fbe5 	bl	800edec <TL_MM_Init>

  TL_Enable();
 8001622:	f00d fa9b 	bl	800eb5c <TL_Enable>

  return;
 8001626:	bf00      	nop
}
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	0800e925 	.word	0x0800e925
 8001634:	20030734 	.word	0x20030734
 8001638:	0800164d 	.word	0x0800164d
 800163c:	08001665 	.word	0x08001665
 8001640:	2003094c 	.word	0x2003094c
 8001644:	20030840 	.word	0x20030840
 8001648:	200301f8 	.word	0x200301f8

0800164c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001656:	bf00      	nop
}
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	330b      	adds	r3, #11
 8001672:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800167e:	2b07      	cmp	r3, #7
 8001680:	f200 80d0 	bhi.w	8001824 <APPE_SysUserEvtRx+0x1c0>
 8001684:	a201      	add	r2, pc, #4	@ (adr r2, 800168c <APPE_SysUserEvtRx+0x28>)
 8001686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168a:	bf00      	nop
 800168c:	080016ad 	.word	0x080016ad
 8001690:	0800173f 	.word	0x0800173f
 8001694:	08001761 	.word	0x08001761
 8001698:	08001825 	.word	0x08001825
 800169c:	080017a5 	.word	0x080017a5
 80016a0:	080017c9 	.word	0x080017c9
 80016a4:	080017e5 	.word	0x080017e5
 80016a8:	08001809 	.word	0x08001809
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00c fed1 	bl	800e458 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80016b6:	485e      	ldr	r0, [pc, #376]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 80016b8:	f00d fc98 	bl	800efec <DbgTraceGetFileName>
 80016bc:	4601      	mov	r1, r0
 80016be:	f240 136b 	movw	r3, #363	@ 0x16b
 80016c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 80016c4:	485c      	ldr	r0, [pc, #368]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 80016c6:	f010 f983 	bl	80119d0 <iprintf>
 80016ca:	7b3b      	ldrb	r3, [r7, #12]
 80016cc:	4619      	mov	r1, r3
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
 80016d0:	461a      	mov	r2, r3
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	4859      	ldr	r0, [pc, #356]	@ (800183c <APPE_SysUserEvtRx+0x1d8>)
 80016d6:	f010 f97b 	bl	80119d0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80016da:	4855      	ldr	r0, [pc, #340]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 80016dc:	f00d fc86 	bl	800efec <DbgTraceGetFileName>
 80016e0:	4601      	mov	r1, r0
 80016e2:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80016e6:	4a53      	ldr	r2, [pc, #332]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 80016e8:	4853      	ldr	r0, [pc, #332]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 80016ea:	f010 f971 	bl	80119d0 <iprintf>
 80016ee:	7c3b      	ldrb	r3, [r7, #16]
 80016f0:	4619      	mov	r1, r3
 80016f2:	4853      	ldr	r0, [pc, #332]	@ (8001840 <APPE_SysUserEvtRx+0x1dc>)
 80016f4:	f010 f96c 	bl	80119d0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80016f8:	484d      	ldr	r0, [pc, #308]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 80016fa:	f00d fc77 	bl	800efec <DbgTraceGetFileName>
 80016fe:	4601      	mov	r1, r0
 8001700:	f240 136d 	movw	r3, #365	@ 0x16d
 8001704:	4a4b      	ldr	r2, [pc, #300]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 8001706:	484c      	ldr	r0, [pc, #304]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 8001708:	f010 f962 	bl	80119d0 <iprintf>
 800170c:	7dbb      	ldrb	r3, [r7, #22]
 800170e:	4619      	mov	r1, r3
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	461a      	mov	r2, r3
 8001714:	7e3b      	ldrb	r3, [r7, #24]
 8001716:	484b      	ldr	r0, [pc, #300]	@ (8001844 <APPE_SysUserEvtRx+0x1e0>)
 8001718:	f010 f95a 	bl	80119d0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800171c:	4844      	ldr	r0, [pc, #272]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 800171e:	f00d fc65 	bl	800efec <DbgTraceGetFileName>
 8001722:	4601      	mov	r1, r0
 8001724:	f240 136f 	movw	r3, #367	@ 0x16f
 8001728:	4a42      	ldr	r2, [pc, #264]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 800172a:	4843      	ldr	r0, [pc, #268]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 800172c:	f010 f950 	bl	80119d0 <iprintf>
 8001730:	4845      	ldr	r0, [pc, #276]	@ (8001848 <APPE_SysUserEvtRx+0x1e4>)
 8001732:	f010 f94d 	bl	80119d0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8e0 	bl	80018fc <APPE_SysEvtReadyProcessing>
    break;
 800173c:	e073      	b.n	8001826 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800173e:	483c      	ldr	r0, [pc, #240]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 8001740:	f00d fc54 	bl	800efec <DbgTraceGetFileName>
 8001744:	4601      	mov	r1, r0
 8001746:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 800174a:	4a3a      	ldr	r2, [pc, #232]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 800174c:	483a      	ldr	r0, [pc, #232]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 800174e:	f010 f93f 	bl	80119d0 <iprintf>
 8001752:	483e      	ldr	r0, [pc, #248]	@ (800184c <APPE_SysUserEvtRx+0x1e8>)
 8001754:	f010 f93c 	bl	80119d0 <iprintf>
    APPE_SysEvtError(pPayload);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f885 	bl	8001868 <APPE_SysEvtError>
    break;
 800175e:	e062      	b.n	8001826 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001760:	4833      	ldr	r0, [pc, #204]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 8001762:	f00d fc43 	bl	800efec <DbgTraceGetFileName>
 8001766:	4601      	mov	r1, r0
 8001768:	f240 1379 	movw	r3, #377	@ 0x179
 800176c:	4a31      	ldr	r2, [pc, #196]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 800176e:	4832      	ldr	r0, [pc, #200]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 8001770:	f010 f92e 	bl	80119d0 <iprintf>
 8001774:	4836      	ldr	r0, [pc, #216]	@ (8001850 <APPE_SysUserEvtRx+0x1ec>)
 8001776:	f010 f99b 	bl	8011ab0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800177a:	482d      	ldr	r0, [pc, #180]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 800177c:	f00d fc36 	bl	800efec <DbgTraceGetFileName>
 8001780:	4601      	mov	r1, r0
 8001782:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
 8001786:	4a2b      	ldr	r2, [pc, #172]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 8001788:	482b      	ldr	r0, [pc, #172]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 800178a:	f010 f921 	bl	80119d0 <iprintf>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3302      	adds	r3, #2
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3302      	adds	r3, #2
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	461a      	mov	r2, r3
 800179c:	482d      	ldr	r0, [pc, #180]	@ (8001854 <APPE_SysUserEvtRx+0x1f0>)
 800179e:	f010 f917 	bl	80119d0 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80017a2:	e040      	b.n	8001826 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80017a4:	4822      	ldr	r0, [pc, #136]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 80017a6:	f00d fc21 	bl	800efec <DbgTraceGetFileName>
 80017aa:	4601      	mov	r1, r0
 80017ac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017b0:	4a20      	ldr	r2, [pc, #128]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 80017b2:	4821      	ldr	r0, [pc, #132]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 80017b4:	f010 f90c 	bl	80119d0 <iprintf>
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	3302      	adds	r3, #2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	4825      	ldr	r0, [pc, #148]	@ (8001858 <APPE_SysUserEvtRx+0x1f4>)
 80017c2:	f010 f905 	bl	80119d0 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80017c6:	e02e      	b.n	8001826 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80017c8:	4819      	ldr	r0, [pc, #100]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 80017ca:	f00d fc0f 	bl	800efec <DbgTraceGetFileName>
 80017ce:	4601      	mov	r1, r0
 80017d0:	f240 1385 	movw	r3, #389	@ 0x185
 80017d4:	4a17      	ldr	r2, [pc, #92]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 80017d6:	4818      	ldr	r0, [pc, #96]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 80017d8:	f010 f8fa 	bl	80119d0 <iprintf>
 80017dc:	481f      	ldr	r0, [pc, #124]	@ (800185c <APPE_SysUserEvtRx+0x1f8>)
 80017de:	f010 f8f7 	bl	80119d0 <iprintf>
    break;
 80017e2:	e020      	b.n	8001826 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80017e4:	4812      	ldr	r0, [pc, #72]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 80017e6:	f00d fc01 	bl	800efec <DbgTraceGetFileName>
 80017ea:	4601      	mov	r1, r0
 80017ec:	f240 1389 	movw	r3, #393	@ 0x189
 80017f0:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 80017f2:	4811      	ldr	r0, [pc, #68]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 80017f4:	f010 f8ec 	bl	80119d0 <iprintf>
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3302      	adds	r3, #2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	4817      	ldr	r0, [pc, #92]	@ (8001860 <APPE_SysUserEvtRx+0x1fc>)
 8001802:	f010 f8e5 	bl	80119d0 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001806:	e00e      	b.n	8001826 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001808:	4809      	ldr	r0, [pc, #36]	@ (8001830 <APPE_SysUserEvtRx+0x1cc>)
 800180a:	f00d fbef 	bl	800efec <DbgTraceGetFileName>
 800180e:	4601      	mov	r1, r0
 8001810:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001814:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <APPE_SysUserEvtRx+0x1d0>)
 8001816:	4808      	ldr	r0, [pc, #32]	@ (8001838 <APPE_SysUserEvtRx+0x1d4>)
 8001818:	f010 f8da 	bl	80119d0 <iprintf>
 800181c:	4811      	ldr	r0, [pc, #68]	@ (8001864 <APPE_SysUserEvtRx+0x200>)
 800181e:	f010 f8d7 	bl	80119d0 <iprintf>
    break;
 8001822:	e000      	b.n	8001826 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001824:	bf00      	nop
  }

  return;
 8001826:	bf00      	nop
}
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	08012b30 	.word	0x08012b30
 8001834:	08013eac 	.word	0x08013eac
 8001838:	08012b48 	.word	0x08012b48
 800183c:	08012b5c 	.word	0x08012b5c
 8001840:	08012b80 	.word	0x08012b80
 8001844:	08012b9c 	.word	0x08012b9c
 8001848:	08012bb4 	.word	0x08012bb4
 800184c:	08012bd4 	.word	0x08012bd4
 8001850:	08012bf8 	.word	0x08012bf8
 8001854:	08012c48 	.word	0x08012c48
 8001858:	08012c70 	.word	0x08012c70
 800185c:	08012cac 	.word	0x08012cac
 8001860:	08012cd0 	.word	0x08012cd0
 8001864:	08012d0c 	.word	0x08012d0c

08001868 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	330b      	adds	r3, #11
 8001876:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3302      	adds	r3, #2
 800187c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800187e:	4819      	ldr	r0, [pc, #100]	@ (80018e4 <APPE_SysEvtError+0x7c>)
 8001880:	f00d fbb4 	bl	800efec <DbgTraceGetFileName>
 8001884:	4601      	mov	r1, r0
 8001886:	f44f 73d3 	mov.w	r3, #422	@ 0x1a6
 800188a:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <APPE_SysEvtError+0x80>)
 800188c:	4817      	ldr	r0, [pc, #92]	@ (80018ec <APPE_SysEvtError+0x84>)
 800188e:	f010 f89f 	bl	80119d0 <iprintf>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4619      	mov	r1, r3
 8001898:	4815      	ldr	r0, [pc, #84]	@ (80018f0 <APPE_SysEvtError+0x88>)
 800189a:	f010 f899 	bl	80119d0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10d      	bne.n	80018c2 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80018a6:	480f      	ldr	r0, [pc, #60]	@ (80018e4 <APPE_SysEvtError+0x7c>)
 80018a8:	f00d fba0 	bl	800efec <DbgTraceGetFileName>
 80018ac:	4601      	mov	r1, r0
 80018ae:	f240 13ab 	movw	r3, #427	@ 0x1ab
 80018b2:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <APPE_SysEvtError+0x80>)
 80018b4:	480d      	ldr	r0, [pc, #52]	@ (80018ec <APPE_SysEvtError+0x84>)
 80018b6:	f010 f88b 	bl	80119d0 <iprintf>
 80018ba:	480e      	ldr	r0, [pc, #56]	@ (80018f4 <APPE_SysEvtError+0x8c>)
 80018bc:	f010 f8f8 	bl	8011ab0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80018c0:	e00d      	b.n	80018de <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80018c2:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <APPE_SysEvtError+0x7c>)
 80018c4:	f00d fb92 	bl	800efec <DbgTraceGetFileName>
 80018c8:	4601      	mov	r1, r0
 80018ca:	f240 13af 	movw	r3, #431	@ 0x1af
 80018ce:	4a06      	ldr	r2, [pc, #24]	@ (80018e8 <APPE_SysEvtError+0x80>)
 80018d0:	4806      	ldr	r0, [pc, #24]	@ (80018ec <APPE_SysEvtError+0x84>)
 80018d2:	f010 f87d 	bl	80119d0 <iprintf>
 80018d6:	4808      	ldr	r0, [pc, #32]	@ (80018f8 <APPE_SysEvtError+0x90>)
 80018d8:	f010 f8ea 	bl	8011ab0 <puts>
  return;
 80018dc:	bf00      	nop
}
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	08012b30 	.word	0x08012b30
 80018e8:	08013ec0 	.word	0x08013ec0
 80018ec:	08012b48 	.word	0x08012b48
 80018f0:	08012d30 	.word	0x08012d30
 80018f4:	08012d60 	.word	0x08012d60
 80018f8:	08012d9c 	.word	0x08012d9c

080018fc <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	330b      	adds	r3, #11
 8001920:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3302      	adds	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d146      	bne.n	80019be <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001930:	4836      	ldr	r0, [pc, #216]	@ (8001a0c <APPE_SysEvtReadyProcessing+0x110>)
 8001932:	f00d fb5b 	bl	800efec <DbgTraceGetFileName>
 8001936:	4601      	mov	r1, r0
 8001938:	f240 13c5 	movw	r3, #453	@ 0x1c5
 800193c:	4a34      	ldr	r2, [pc, #208]	@ (8001a10 <APPE_SysEvtReadyProcessing+0x114>)
 800193e:	4835      	ldr	r0, [pc, #212]	@ (8001a14 <APPE_SysEvtReadyProcessing+0x118>)
 8001940:	f010 f846 	bl	80119d0 <iprintf>
 8001944:	4834      	ldr	r0, [pc, #208]	@ (8001a18 <APPE_SysEvtReadyProcessing+0x11c>)
 8001946:	f010 f8b3 	bl	8011ab0 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800194a:	f7ff fbf5 	bl	8001138 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800194e:	230f      	movs	r3, #15
 8001950:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001952:	237f      	movs	r3, #127	@ 0x7f
 8001954:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001956:	f7ff fce9 	bl	800132c <LL_DBGMCU_GetRevisionID>
 800195a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 800195c:	482b      	ldr	r0, [pc, #172]	@ (8001a0c <APPE_SysEvtReadyProcessing+0x110>)
 800195e:	f00d fb45 	bl	800efec <DbgTraceGetFileName>
 8001962:	4601      	mov	r1, r0
 8001964:	f240 13dd 	movw	r3, #477	@ 0x1dd
 8001968:	4a29      	ldr	r2, [pc, #164]	@ (8001a10 <APPE_SysEvtReadyProcessing+0x114>)
 800196a:	482a      	ldr	r0, [pc, #168]	@ (8001a14 <APPE_SysEvtReadyProcessing+0x118>)
 800196c:	f010 f830 	bl	80119d0 <iprintf>
 8001970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001972:	482a      	ldr	r0, [pc, #168]	@ (8001a1c <APPE_SysEvtReadyProcessing+0x120>)
 8001974:	f010 f82c 	bl	80119d0 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	b29b      	uxth	r3, r3
 800197c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800197e:	f7ff fcc7 	bl	8001310 <LL_DBGMCU_GetDeviceID>
 8001982:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001984:	4821      	ldr	r0, [pc, #132]	@ (8001a0c <APPE_SysEvtReadyProcessing+0x110>)
 8001986:	f00d fb31 	bl	800efec <DbgTraceGetFileName>
 800198a:	4601      	mov	r1, r0
 800198c:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 8001990:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <APPE_SysEvtReadyProcessing+0x114>)
 8001992:	4820      	ldr	r0, [pc, #128]	@ (8001a14 <APPE_SysEvtReadyProcessing+0x118>)
 8001994:	f010 f81c 	bl	80119d0 <iprintf>
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	4821      	ldr	r0, [pc, #132]	@ (8001a20 <APPE_SysEvtReadyProcessing+0x124>)
 800199c:	f010 f818 	bl	80119d0 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00c fd3e 	bl	800e42c <SHCI_C2_Config>

    APP_BLE_Init();
 80019b0:	f00e f8b8 	bl	800fb24 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80019b4:	2100      	movs	r1, #0
 80019b6:	2001      	movs	r0, #1
 80019b8:	f00f fcde 	bl	8011378 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80019bc:	e022      	b.n	8001a04 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d110      	bne.n	80019e8 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80019c6:	4811      	ldr	r0, [pc, #68]	@ (8001a0c <APPE_SysEvtReadyProcessing+0x110>)
 80019c8:	f00d fb10 	bl	800efec <DbgTraceGetFileName>
 80019cc:	4601      	mov	r1, r0
 80019ce:	f240 13ef 	movw	r3, #495	@ 0x1ef
 80019d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <APPE_SysEvtReadyProcessing+0x114>)
 80019d4:	480f      	ldr	r0, [pc, #60]	@ (8001a14 <APPE_SysEvtReadyProcessing+0x118>)
 80019d6:	f00f fffb 	bl	80119d0 <iprintf>
 80019da:	4812      	ldr	r0, [pc, #72]	@ (8001a24 <APPE_SysEvtReadyProcessing+0x128>)
 80019dc:	f00f fff8 	bl	80119d0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
  return;
 80019e6:	e00d      	b.n	8001a04 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80019e8:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <APPE_SysEvtReadyProcessing+0x110>)
 80019ea:	f00d faff 	bl	800efec <DbgTraceGetFileName>
 80019ee:	4601      	mov	r1, r0
 80019f0:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 80019f4:	4a06      	ldr	r2, [pc, #24]	@ (8001a10 <APPE_SysEvtReadyProcessing+0x114>)
 80019f6:	4807      	ldr	r0, [pc, #28]	@ (8001a14 <APPE_SysEvtReadyProcessing+0x118>)
 80019f8:	f00f ffea 	bl	80119d0 <iprintf>
 80019fc:	480a      	ldr	r0, [pc, #40]	@ (8001a28 <APPE_SysEvtReadyProcessing+0x12c>)
 80019fe:	f00f ffe7 	bl	80119d0 <iprintf>
  return;
 8001a02:	bf00      	nop
}
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	08012b30 	.word	0x08012b30
 8001a10:	08013ed4 	.word	0x08013ed4
 8001a14:	08012b48 	.word	0x08012b48
 8001a18:	08012dd4 	.word	0x08012dd4
 8001a1c:	08012df0 	.word	0x08012df0
 8001a20:	08012e14 	.word	0x08012e14
 8001a24:	08012e34 	.word	0x08012e34
 8001a28:	08012e68 	.word	0x08012e68

08001a2c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f006 fcaa 	bl	800838c <HAL_GetTick>
 8001a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d00a      	beq.n	8001a5c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001a46:	f006 fcb9 	bl	80083bc <HAL_GetTickFreq>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a54:	e002      	b.n	8001a5c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001a56:	f7ff fcd9 	bl	800140c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001a5a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001a5c:	f006 fc96 	bl	800838c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f4      	bhi.n	8001a56 <HAL_Delay+0x2a>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7e:	f00f fcab 	bl	80113d8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001a8a:	bf00      	nop
}
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa2:	f00f fc99 	bl	80113d8 <UTIL_SEQ_Run>
  return;
 8001aa6:	bf00      	nop
}
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2008      	movs	r0, #8
 8001aba:	f00f fdab 	bl	8011614 <UTIL_SEQ_SetTask>
  return;
 8001abe:	bf00      	nop
}
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f00f fe0c 	bl	80116ec <UTIL_SEQ_SetEvt>
  return;
 8001ad4:	bf00      	nop
}
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f00f fe21 	bl	801172c <UTIL_SEQ_WaitEvt>
  return;
 8001aea:	bf00      	nop
}
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <LL_EXTI_EnableIT_0_31>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <LL_EXTI_EnableIT_0_31+0x24>)
 8001afe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001b02:	4905      	ldr	r1, [pc, #20]	@ (8001b18 <LL_EXTI_EnableIT_0_31+0x24>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	58000800 	.word	0x58000800

08001b1c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4904      	ldr	r1, [pc, #16]	@ (8001b3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]

}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	58000800 	.word	0x58000800

08001b40 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <ReadRtcSsrValue+0x3c>)
 8001b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <ReadRtcSsrValue+0x3c>)
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001b56:	e005      	b.n	8001b64 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b5c:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <ReadRtcSsrValue+0x3c>)
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1f5      	bne.n	8001b58 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001b6c:	683b      	ldr	r3, [r7, #0]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40002800 	.word	0x40002800

08001b80 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	460a      	mov	r2, r1
 8001b8a:	71fb      	strb	r3, [r7, #7]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001b90:	79ba      	ldrb	r2, [r7, #6]
 8001b92:	491d      	ldr	r1, [pc, #116]	@ (8001c08 <LinkTimerAfter+0x88>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3315      	adds	r3, #21
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d009      	beq.n	8001bbe <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	4916      	ldr	r1, [pc, #88]	@ (8001c08 <LinkTimerAfter+0x88>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3314      	adds	r3, #20
 8001bba:	79fa      	ldrb	r2, [r7, #7]
 8001bbc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	4911      	ldr	r1, [pc, #68]	@ (8001c08 <LinkTimerAfter+0x88>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3315      	adds	r3, #21
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	490c      	ldr	r1, [pc, #48]	@ (8001c08 <LinkTimerAfter+0x88>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3314      	adds	r3, #20
 8001be2:	79ba      	ldrb	r2, [r7, #6]
 8001be4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001be6:	79ba      	ldrb	r2, [r7, #6]
 8001be8:	4907      	ldr	r1, [pc, #28]	@ (8001c08 <LinkTimerAfter+0x88>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3315      	adds	r3, #21
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	701a      	strb	r2, [r3, #0]

  return;
 8001bfa:	bf00      	nop
}
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	2000022c 	.word	0x2000022c

08001c0c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	460a      	mov	r2, r1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001c1c:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <LinkTimerBefore+0xb8>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	79ba      	ldrb	r2, [r7, #6]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d032      	beq.n	8001c8e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001c28:	79ba      	ldrb	r2, [r7, #6]
 8001c2a:	4927      	ldr	r1, [pc, #156]	@ (8001cc8 <LinkTimerBefore+0xbc>)
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	3314      	adds	r3, #20
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	4922      	ldr	r1, [pc, #136]	@ (8001cc8 <LinkTimerBefore+0xbc>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3315      	adds	r3, #21
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	491d      	ldr	r1, [pc, #116]	@ (8001cc8 <LinkTimerBefore+0xbc>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3315      	adds	r3, #21
 8001c60:	79ba      	ldrb	r2, [r7, #6]
 8001c62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	4918      	ldr	r1, [pc, #96]	@ (8001cc8 <LinkTimerBefore+0xbc>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	3314      	adds	r3, #20
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001c78:	79ba      	ldrb	r2, [r7, #6]
 8001c7a:	4913      	ldr	r1, [pc, #76]	@ (8001cc8 <LinkTimerBefore+0xbc>)
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	3314      	adds	r3, #20
 8001c88:	79fa      	ldrb	r2, [r7, #7]
 8001c8a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001c8c:	e014      	b.n	8001cb8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001c8e:	79fa      	ldrb	r2, [r7, #7]
 8001c90:	490d      	ldr	r1, [pc, #52]	@ (8001cc8 <LinkTimerBefore+0xbc>)
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3315      	adds	r3, #21
 8001c9e:	79ba      	ldrb	r2, [r7, #6]
 8001ca0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ca2:	79ba      	ldrb	r2, [r7, #6]
 8001ca4:	4908      	ldr	r1, [pc, #32]	@ (8001cc8 <LinkTimerBefore+0xbc>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	701a      	strb	r2, [r3, #0]
  return;
 8001cb6:	bf00      	nop
}
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200002bc 	.word	0x200002bc
 8001cc8:	2000022c 	.word	0x2000022c

08001ccc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e10 <linkTimer+0x144>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b06      	cmp	r3, #6
 8001cde:	d118      	bne.n	8001d12 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8001e10 <linkTimer+0x144>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8001e14 <linkTimer+0x148>)
 8001ce8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001cea:	4a49      	ldr	r2, [pc, #292]	@ (8001e10 <linkTimer+0x144>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	4949      	ldr	r1, [pc, #292]	@ (8001e18 <linkTimer+0x14c>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3315      	adds	r3, #21
 8001d00:	2206      	movs	r2, #6
 8001d02:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d04:	4b45      	ldr	r3, [pc, #276]	@ (8001e1c <linkTimer+0x150>)
 8001d06:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	81fb      	strh	r3, [r7, #14]
 8001d10:	e078      	b.n	8001e04 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001d12:	f000 f909 	bl	8001f28 <ReturnTimeElapsed>
 8001d16:	4603      	mov	r3, r0
 8001d18:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	493e      	ldr	r1, [pc, #248]	@ (8001e18 <linkTimer+0x14c>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	3308      	adds	r3, #8
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	89fb      	ldrh	r3, [r7, #14]
 8001d2e:	79fa      	ldrb	r2, [r7, #7]
 8001d30:	4419      	add	r1, r3
 8001d32:	4839      	ldr	r0, [pc, #228]	@ (8001e18 <linkTimer+0x14c>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4403      	add	r3, r0
 8001d3e:	3308      	adds	r3, #8
 8001d40:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	4934      	ldr	r1, [pc, #208]	@ (8001e18 <linkTimer+0x14c>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	3308      	adds	r3, #8
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001d56:	4b2e      	ldr	r3, [pc, #184]	@ (8001e10 <linkTimer+0x144>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	@ (8001e18 <linkTimer+0x14c>)
 8001d60:	460b      	mov	r3, r1
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	440b      	add	r3, r1
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d337      	bcc.n	8001de4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001d74:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <linkTimer+0x144>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001d7a:	7b7a      	ldrb	r2, [r7, #13]
 8001d7c:	4926      	ldr	r1, [pc, #152]	@ (8001e18 <linkTimer+0x14c>)
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	3315      	adds	r3, #21
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001d8e:	e013      	b.n	8001db8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001d90:	7b7a      	ldrb	r2, [r7, #13]
 8001d92:	4921      	ldr	r1, [pc, #132]	@ (8001e18 <linkTimer+0x14c>)
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3315      	adds	r3, #21
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001da4:	7b7a      	ldrb	r2, [r7, #13]
 8001da6:	491c      	ldr	r1, [pc, #112]	@ (8001e18 <linkTimer+0x14c>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	3315      	adds	r3, #21
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001db8:	7b3b      	ldrb	r3, [r7, #12]
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d00b      	beq.n	8001dd6 <linkTimer+0x10a>
 8001dbe:	7b3a      	ldrb	r2, [r7, #12]
 8001dc0:	4915      	ldr	r1, [pc, #84]	@ (8001e18 <linkTimer+0x14c>)
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	3308      	adds	r3, #8
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d2dc      	bcs.n	8001d90 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001dd6:	7b7a      	ldrb	r2, [r7, #13]
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fecf 	bl	8001b80 <LinkTimerAfter>
 8001de2:	e00f      	b.n	8001e04 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <linkTimer+0x144>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff0c 	bl	8001c0c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <linkTimer+0x144>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <linkTimer+0x148>)
 8001dfc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <linkTimer+0x144>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001e04:	89fb      	ldrh	r3, [r7, #14]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200002bc 	.word	0x200002bc
 8001e14:	200002bd 	.word	0x200002bd
 8001e18:	2000022c 	.word	0x2000022c
 8001e1c:	200002c0 	.word	0x200002c0

08001e20 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	460a      	mov	r2, r1
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001e30:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <UnlinkTimer+0xf8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d111      	bne.n	8001e60 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e3c:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <UnlinkTimer+0xf8>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <UnlinkTimer+0xfc>)
 8001e44:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001e46:	79fa      	ldrb	r2, [r7, #7]
 8001e48:	4935      	ldr	r1, [pc, #212]	@ (8001f20 <UnlinkTimer+0x100>)
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3315      	adds	r3, #21
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <UnlinkTimer+0xf8>)
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e03e      	b.n	8001ede <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001e60:	79fa      	ldrb	r2, [r7, #7]
 8001e62:	492f      	ldr	r1, [pc, #188]	@ (8001f20 <UnlinkTimer+0x100>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3314      	adds	r3, #20
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001e74:	79fa      	ldrb	r2, [r7, #7]
 8001e76:	492a      	ldr	r1, [pc, #168]	@ (8001f20 <UnlinkTimer+0x100>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	3315      	adds	r3, #21
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001e88:	79f9      	ldrb	r1, [r7, #7]
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	4824      	ldr	r0, [pc, #144]	@ (8001f20 <UnlinkTimer+0x100>)
 8001e8e:	460b      	mov	r3, r1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	440b      	add	r3, r1
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4403      	add	r3, r0
 8001e98:	3315      	adds	r3, #21
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b2d8      	uxtb	r0, r3
 8001e9e:	4920      	ldr	r1, [pc, #128]	@ (8001f20 <UnlinkTimer+0x100>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3315      	adds	r3, #21
 8001eac:	4602      	mov	r2, r0
 8001eae:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d013      	beq.n	8001ede <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001eb6:	79f9      	ldrb	r1, [r7, #7]
 8001eb8:	7bba      	ldrb	r2, [r7, #14]
 8001eba:	4819      	ldr	r0, [pc, #100]	@ (8001f20 <UnlinkTimer+0x100>)
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	440b      	add	r3, r1
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4403      	add	r3, r0
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b2d8      	uxtb	r0, r3
 8001ecc:	4914      	ldr	r1, [pc, #80]	@ (8001f20 <UnlinkTimer+0x100>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3314      	adds	r3, #20
 8001eda:	4602      	mov	r2, r0
 8001edc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001ede:	79fa      	ldrb	r2, [r7, #7]
 8001ee0:	490f      	ldr	r1, [pc, #60]	@ (8001f20 <UnlinkTimer+0x100>)
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	330c      	adds	r3, #12
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <UnlinkTimer+0xf8>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b06      	cmp	r3, #6
 8001efa:	d107      	bne.n	8001f0c <UnlinkTimer+0xec>
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <UnlinkTimer+0x104>)
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	601a      	str	r2, [r3, #0]
  }

  return;
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
}
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	200002bc 	.word	0x200002bc
 8001f1c:	200002bd 	.word	0x200002bd
 8001f20:	2000022c 	.word	0x2000022c
 8001f24:	200002c0 	.word	0x200002c0

08001f28 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <ReturnTimeElapsed+0x70>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f36:	d026      	beq.n	8001f86 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001f38:	f7ff fe02 	bl	8001b40 <ReadRtcSsrValue>
 8001f3c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <ReturnTimeElapsed+0x70>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d805      	bhi.n	8001f54 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <ReturnTimeElapsed+0x70>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	e00a      	b.n	8001f6a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <ReturnTimeElapsed+0x74>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <ReturnTimeElapsed+0x70>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <ReturnTimeElapsed+0x78>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <ReturnTimeElapsed+0x7c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	40d3      	lsrs	r3, r2
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	e001      	b.n	8001f8a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	b29b      	uxth	r3, r3
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200002c0 	.word	0x200002c0
 8001f9c:	200002c8 	.word	0x200002c8
 8001fa0:	200002c6 	.word	0x200002c6
 8001fa4:	200002c5 	.word	0x200002c5

08001fa8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d108      	bne.n	8001fca <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001fb8:	f7ff fdc2 	bl	8001b40 <ReadRtcSsrValue>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a21      	ldr	r2, [pc, #132]	@ (8002044 <RestartWakeupCounter+0x9c>)
 8001fc0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001fc2:	2003      	movs	r0, #3
 8001fc4:	f006 fb83 	bl	80086ce <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001fc8:	e039      	b.n	800203e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d803      	bhi.n	8001fd8 <RestartWakeupCounter+0x30>
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <RestartWakeupCounter+0xa0>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d002      	beq.n	8001fde <RestartWakeupCounter+0x36>
      Value -= 1;
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001fde:	bf00      	nop
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <RestartWakeupCounter+0xa4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f8      	beq.n	8001fe0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001fee:	4b17      	ldr	r3, [pc, #92]	@ (800204c <RestartWakeupCounter+0xa4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <RestartWakeupCounter+0xa4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ffe:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002000:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <RestartWakeupCounter+0xa8>)
 8002002:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002006:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002008:	2003      	movs	r0, #3
 800200a:	f006 fb6e 	bl	80086ea <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800200e:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <RestartWakeupCounter+0xac>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	490e      	ldr	r1, [pc, #56]	@ (8002054 <RestartWakeupCounter+0xac>)
 800201a:	4313      	orrs	r3, r2
 800201c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800201e:	f7ff fd8f 	bl	8001b40 <ReadRtcSsrValue>
 8002022:	4603      	mov	r3, r0
 8002024:	4a07      	ldr	r2, [pc, #28]	@ (8002044 <RestartWakeupCounter+0x9c>)
 8002026:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <RestartWakeupCounter+0xa4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <RestartWakeupCounter+0xa4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002036:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002038:	f3af 8000 	nop.w
  return ;
 800203c:	bf00      	nop
}
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200002c0 	.word	0x200002c0
 8002048:	200002c5 	.word	0x200002c5
 800204c:	2000030c 	.word	0x2000030c
 8002050:	58000800 	.word	0x58000800
 8002054:	40002800 	.word	0x40002800

08002058 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800205e:	4b45      	ldr	r3, [pc, #276]	@ (8002174 <RescheduleTimerList+0x11c>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206a:	d107      	bne.n	800207c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800206c:	bf00      	nop
 800206e:	4b42      	ldr	r3, [pc, #264]	@ (8002178 <RescheduleTimerList+0x120>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f8      	bne.n	800206e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800207c:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <RescheduleTimerList+0x120>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	4b3d      	ldr	r3, [pc, #244]	@ (8002178 <RescheduleTimerList+0x120>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800208a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800208c:	4b3b      	ldr	r3, [pc, #236]	@ (800217c <RescheduleTimerList+0x124>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	493a      	ldr	r1, [pc, #232]	@ (8002180 <RescheduleTimerList+0x128>)
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3308      	adds	r3, #8
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80020a6:	f7ff ff3f 	bl	8001f28 <ReturnTimeElapsed>
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d205      	bcs.n	80020c2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020ba:	4b32      	ldr	r3, [pc, #200]	@ (8002184 <RescheduleTimerList+0x12c>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e04d      	b.n	800215e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	4a30      	ldr	r2, [pc, #192]	@ (8002188 <RescheduleTimerList+0x130>)
 80020c6:	8812      	ldrh	r2, [r2, #0]
 80020c8:	b292      	uxth	r2, r2
 80020ca:	4413      	add	r3, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d906      	bls.n	80020e2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80020d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002188 <RescheduleTimerList+0x130>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80020da:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <RescheduleTimerList+0x12c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e03d      	b.n	800215e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020ec:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <RescheduleTimerList+0x12c>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020f2:	e034      	b.n	800215e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	4922      	ldr	r1, [pc, #136]	@ (8002180 <RescheduleTimerList+0x128>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3308      	adds	r3, #8
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	429a      	cmp	r2, r3
 800210a:	d20a      	bcs.n	8002122 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	491c      	ldr	r1, [pc, #112]	@ (8002180 <RescheduleTimerList+0x128>)
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3308      	adds	r3, #8
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e013      	b.n	800214a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	4916      	ldr	r1, [pc, #88]	@ (8002180 <RescheduleTimerList+0x128>)
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	3308      	adds	r3, #8
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	1ac9      	subs	r1, r1, r3
 800213a:	4811      	ldr	r0, [pc, #68]	@ (8002180 <RescheduleTimerList+0x128>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4403      	add	r3, r0
 8002146:	3308      	adds	r3, #8
 8002148:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	490c      	ldr	r1, [pc, #48]	@ (8002180 <RescheduleTimerList+0x128>)
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3315      	adds	r3, #21
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b06      	cmp	r3, #6
 8002162:	d1c7      	bne.n	80020f4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002164:	89bb      	ldrh	r3, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff1e 	bl	8001fa8 <RestartWakeupCounter>

  return ;
 800216c:	bf00      	nop
}
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40002800 	.word	0x40002800
 8002178:	2000030c 	.word	0x2000030c
 800217c:	200002bc 	.word	0x200002bc
 8002180:	2000022c 	.word	0x2000022c
 8002184:	200002c4 	.word	0x200002c4
 8002188:	200002ca 	.word	0x200002ca

0800218c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	@ 0x28
 8002190:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002192:	f3ef 8310 	mrs	r3, PRIMASK
 8002196:	617b      	str	r3, [r7, #20]
  return(result);
 8002198:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800219c:	b672      	cpsid	i
}
 800219e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021a0:	4b59      	ldr	r3, [pc, #356]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	22ca      	movs	r2, #202	@ 0xca
 80021a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80021a8:	4b57      	ldr	r3, [pc, #348]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2253      	movs	r2, #83	@ 0x53
 80021ae:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80021b0:	4b55      	ldr	r3, [pc, #340]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	4b54      	ldr	r3, [pc, #336]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021be:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80021c0:	4b52      	ldr	r3, [pc, #328]	@ (800230c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80021c8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80021cc:	4950      	ldr	r1, [pc, #320]	@ (8002310 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	330c      	adds	r3, #12
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d16e      	bne.n	80022c0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80021e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80021e6:	494a      	ldr	r1, [pc, #296]	@ (8002310 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80021f6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80021fa:	4945      	ldr	r1, [pc, #276]	@ (8002310 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	3310      	adds	r3, #16
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800220c:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d04c      	beq.n	80022b0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002216:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800221a:	493d      	ldr	r1, [pc, #244]	@ (8002310 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	330d      	adds	r3, #13
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d124      	bne.n	800227a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002230:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002234:	2101      	movs	r1, #1
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fdf2 	bl	8001e20 <UnlinkTimer>
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f383 8810 	msr	PRIMASK, r3
}
 8002246:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002248:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800224c:	4930      	ldr	r1, [pc, #192]	@ (8002310 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	3304      	adds	r3, #4
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f9b8 	bl	80025d8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002268:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	22ca      	movs	r2, #202	@ 0xca
 800226e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002270:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2253      	movs	r2, #83	@ 0x53
 8002276:	625a      	str	r2, [r3, #36]	@ 0x24
 8002278:	e012      	b.n	80022a0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f383 8810 	msr	PRIMASK, r3
}
 8002284:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002286:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f920 	bl	80024d0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	22ca      	movs	r2, #202	@ 0xca
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24
 8002298:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2253      	movs	r2, #83	@ 0x53
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80022a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	4619      	mov	r1, r3
 80022a8:	69b8      	ldr	r0, [r7, #24]
 80022aa:	f000 fa1b 	bl	80026e4 <HW_TS_RTC_Int_AppNot>
 80022ae:	e022      	b.n	80022f6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80022b0:	f7ff fed2 	bl	8002058 <RescheduleTimerList>
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f383 8810 	msr	PRIMASK, r3
}
 80022be:	e01a      	b.n	80022f6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80022c0:	bf00      	nop
 80022c2:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f8      	beq.n	80022c2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80022d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022e0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80022e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f383 8810 	msr	PRIMASK, r3
}
 80022f4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022f6:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	22ff      	movs	r2, #255	@ 0xff
 80022fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80022fe:	bf00      	nop
}
 8002300:	3728      	adds	r7, #40	@ 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000030c 	.word	0x2000030c
 800230c:	200002bc 	.word	0x200002bc
 8002310:	2000022c 	.word	0x2000022c
 8002314:	200002c4 	.word	0x200002c4
 8002318:	58000800 	.word	0x58000800

0800231c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002328:	4b5e      	ldr	r3, [pc, #376]	@ (80024a4 <HW_TS_Init+0x188>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	22ca      	movs	r2, #202	@ 0xca
 800232e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002330:	4b5c      	ldr	r3, [pc, #368]	@ (80024a4 <HW_TS_Init+0x188>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2253      	movs	r2, #83	@ 0x53
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002338:	4b5b      	ldr	r3, [pc, #364]	@ (80024a8 <HW_TS_Init+0x18c>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a5a      	ldr	r2, [pc, #360]	@ (80024a8 <HW_TS_Init+0x18c>)
 800233e:	f043 0320 	orr.w	r3, r3, #32
 8002342:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002344:	4b58      	ldr	r3, [pc, #352]	@ (80024a8 <HW_TS_Init+0x18c>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f1c3 0304 	rsb	r3, r3, #4
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4b55      	ldr	r3, [pc, #340]	@ (80024ac <HW_TS_Init+0x190>)
 8002358:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800235a:	4b53      	ldr	r3, [pc, #332]	@ (80024a8 <HW_TS_Init+0x18c>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002362:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002366:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	fa92 f2a2 	rbit	r2, r2
 800236e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	2a00      	cmp	r2, #0
 8002378:	d101      	bne.n	800237e <HW_TS_Init+0x62>
  {
    return 32U;
 800237a:	2220      	movs	r2, #32
 800237c:	e003      	b.n	8002386 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	fab2 f282 	clz	r2, r2
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	40d3      	lsrs	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3301      	adds	r3, #1
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b48      	ldr	r3, [pc, #288]	@ (80024b0 <HW_TS_Init+0x194>)
 8002390:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002392:	4b45      	ldr	r3, [pc, #276]	@ (80024a8 <HW_TS_Init+0x18c>)
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800239c:	b29b      	uxth	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <HW_TS_Init+0x198>)
 80023a4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80023a6:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <HW_TS_Init+0x198>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	4a40      	ldr	r2, [pc, #256]	@ (80024b0 <HW_TS_Init+0x194>)
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023b8:	4a3c      	ldr	r2, [pc, #240]	@ (80024ac <HW_TS_Init+0x190>)
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	40d3      	lsrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d904      	bls.n	80023d4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <HW_TS_Init+0x19c>)
 80023cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023d0:	801a      	strh	r2, [r3, #0]
 80023d2:	e003      	b.n	80023dc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <HW_TS_Init+0x19c>)
 80023da:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80023dc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80023e0:	f7ff fb9c 	bl	8001b1c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80023e4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80023e8:	f7ff fb84 	bl	8001af4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d13d      	bne.n	800246e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80023f2:	4b32      	ldr	r3, [pc, #200]	@ (80024bc <HW_TS_Init+0x1a0>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80023f8:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <HW_TS_Init+0x1a4>)
 80023fa:	f04f 32ff 	mov.w	r2, #4294967295
 80023fe:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002400:	2300      	movs	r3, #0
 8002402:	77fb      	strb	r3, [r7, #31]
 8002404:	e00c      	b.n	8002420 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002406:	7ffa      	ldrb	r2, [r7, #31]
 8002408:	492e      	ldr	r1, [pc, #184]	@ (80024c4 <HW_TS_Init+0x1a8>)
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	330c      	adds	r3, #12
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800241a:	7ffb      	ldrb	r3, [r7, #31]
 800241c:	3301      	adds	r3, #1
 800241e:	77fb      	strb	r3, [r7, #31]
 8002420:	7ffb      	ldrb	r3, [r7, #31]
 8002422:	2b05      	cmp	r3, #5
 8002424:	d9ef      	bls.n	8002406 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002426:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <HW_TS_Init+0x1ac>)
 8002428:	2206      	movs	r2, #6
 800242a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800242c:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <HW_TS_Init+0x188>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <HW_TS_Init+0x188>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HW_TS_Init+0x188>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <HW_TS_Init+0x188>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800244c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800244e:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <HW_TS_Init+0x1b0>)
 8002450:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002454:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002456:	2003      	movs	r0, #3
 8002458:	f006 f947 	bl	80086ea <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800245c:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HW_TS_Init+0x188>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <HW_TS_Init+0x188>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	e009      	b.n	8002482 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800246e:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <HW_TS_Init+0x188>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800247c:	2003      	movs	r0, #3
 800247e:	f006 f926 	bl	80086ce <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <HW_TS_Init+0x188>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	22ff      	movs	r2, #255	@ 0xff
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800248a:	2200      	movs	r2, #0
 800248c:	2103      	movs	r1, #3
 800248e:	2003      	movs	r0, #3
 8002490:	f006 f8db 	bl	800864a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002494:	2003      	movs	r0, #3
 8002496:	f006 f8f2 	bl	800867e <HAL_NVIC_EnableIRQ>

  return;
 800249a:	bf00      	nop
}
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000030c 	.word	0x2000030c
 80024a8:	40002800 	.word	0x40002800
 80024ac:	200002c5 	.word	0x200002c5
 80024b0:	200002c6 	.word	0x200002c6
 80024b4:	200002c8 	.word	0x200002c8
 80024b8:	200002ca 	.word	0x200002ca
 80024bc:	200002c4 	.word	0x200002c4
 80024c0:	200002c0 	.word	0x200002c0
 80024c4:	2000022c 	.word	0x2000022c
 80024c8:	200002bc 	.word	0x200002bc
 80024cc:	58000800 	.word	0x58000800

080024d0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024da:	f3ef 8310 	mrs	r3, PRIMASK
 80024de:	60fb      	str	r3, [r7, #12]
  return(result);
 80024e0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80024e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80024e4:	b672      	cpsid	i
}
 80024e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80024e8:	2003      	movs	r0, #3
 80024ea:	f006 f8d6 	bl	800869a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024ee:	4b34      	ldr	r3, [pc, #208]	@ (80025c0 <HW_TS_Stop+0xf0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	22ca      	movs	r2, #202	@ 0xca
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80024f6:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <HW_TS_Stop+0xf0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2253      	movs	r2, #83	@ 0x53
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	4930      	ldr	r1, [pc, #192]	@ (80025c4 <HW_TS_Stop+0xf4>)
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	330c      	adds	r3, #12
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d142      	bne.n	800259c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fc80 	bl	8001e20 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002520:	4b29      	ldr	r3, [pc, #164]	@ (80025c8 <HW_TS_Stop+0xf8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d12f      	bne.n	800258c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800252c:	4b27      	ldr	r3, [pc, #156]	@ (80025cc <HW_TS_Stop+0xfc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002538:	d107      	bne.n	800254a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800253a:	bf00      	nop
 800253c:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HW_TS_Stop+0xf0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f8      	bne.n	800253c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <HW_TS_Stop+0xf0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <HW_TS_Stop+0xf0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002558:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800255a:	bf00      	nop
 800255c:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <HW_TS_Stop+0xf0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f8      	beq.n	800255c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HW_TS_Stop+0xf0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HW_TS_Stop+0xf0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800257a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800257c:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <HW_TS_Stop+0x100>)
 800257e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002582:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002584:	2003      	movs	r0, #3
 8002586:	f006 f8b0 	bl	80086ea <HAL_NVIC_ClearPendingIRQ>
 800258a:	e007      	b.n	800259c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <HW_TS_Stop+0x104>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	7cfa      	ldrb	r2, [r7, #19]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002598:	f7ff fd5e 	bl	8002058 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800259c:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HW_TS_Stop+0xf0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	22ff      	movs	r2, #255	@ 0xff
 80025a2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80025a4:	2003      	movs	r0, #3
 80025a6:	f006 f86a 	bl	800867e <HAL_NVIC_EnableIRQ>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f383 8810 	msr	PRIMASK, r3
}
 80025b4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80025b6:	bf00      	nop
}
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000030c 	.word	0x2000030c
 80025c4:	2000022c 	.word	0x2000022c
 80025c8:	200002bc 	.word	0x200002bc
 80025cc:	40002800 	.word	0x40002800
 80025d0:	58000800 	.word	0x58000800
 80025d4:	200002bd 	.word	0x200002bd

080025d8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80025e4:	79fa      	ldrb	r2, [r7, #7]
 80025e6:	493b      	ldr	r1, [pc, #236]	@ (80026d4 <HW_TS_Start+0xfc>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	330c      	adds	r3, #12
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d103      	bne.n	8002604 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff66 	bl	80024d0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002604:	f3ef 8310 	mrs	r3, PRIMASK
 8002608:	60fb      	str	r3, [r7, #12]
  return(result);
 800260a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800260c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800260e:	b672      	cpsid	i
}
 8002610:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002612:	2003      	movs	r0, #3
 8002614:	f006 f841 	bl	800869a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002618:	4b2f      	ldr	r3, [pc, #188]	@ (80026d8 <HW_TS_Start+0x100>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	22ca      	movs	r2, #202	@ 0xca
 800261e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002620:	4b2d      	ldr	r3, [pc, #180]	@ (80026d8 <HW_TS_Start+0x100>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2253      	movs	r2, #83	@ 0x53
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	492a      	ldr	r1, [pc, #168]	@ (80026d4 <HW_TS_Start+0xfc>)
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	330c      	adds	r3, #12
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	4925      	ldr	r1, [pc, #148]	@ (80026d4 <HW_TS_Start+0xfc>)
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	3308      	adds	r3, #8
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002650:	79fa      	ldrb	r2, [r7, #7]
 8002652:	4920      	ldr	r1, [pc, #128]	@ (80026d4 <HW_TS_Start+0xfc>)
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	3304      	adds	r3, #4
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fb30 	bl	8001ccc <linkTimer>
 800266c:	4603      	mov	r3, r0
 800266e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002670:	4b1a      	ldr	r3, [pc, #104]	@ (80026dc <HW_TS_Start+0x104>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002676:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <HW_TS_Start+0x108>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	7c7a      	ldrb	r2, [r7, #17]
 800267e:	429a      	cmp	r2, r3
 8002680:	d002      	beq.n	8002688 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002682:	f7ff fce9 	bl	8002058 <RescheduleTimerList>
 8002686:	e013      	b.n	80026b0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002688:	79fa      	ldrb	r2, [r7, #7]
 800268a:	4912      	ldr	r1, [pc, #72]	@ (80026d4 <HW_TS_Start+0xfc>)
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	3308      	adds	r3, #8
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	8a7b      	ldrh	r3, [r7, #18]
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	1ac9      	subs	r1, r1, r3
 80026a0:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <HW_TS_Start+0xfc>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4403      	add	r3, r0
 80026ac:	3308      	adds	r3, #8
 80026ae:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HW_TS_Start+0x100>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	22ff      	movs	r2, #255	@ 0xff
 80026b6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80026b8:	2003      	movs	r0, #3
 80026ba:	f005 ffe0 	bl	800867e <HAL_NVIC_EnableIRQ>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f383 8810 	msr	PRIMASK, r3
}
 80026c8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80026ca:	bf00      	nop
}
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000022c 	.word	0x2000022c
 80026d8:	2000030c 	.word	0x2000030c
 80026dc:	200002bc 	.word	0x200002bc
 80026e0:	200002bd 	.word	0x200002bd

080026e4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	460b      	mov	r3, r1
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4798      	blx	r3

  return;
 80026f6:	bf00      	nop
}
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	4603      	mov	r3, r0
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	4613      	mov	r3, r2
 8002710:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002716:	2300      	movs	r3, #0
 8002718:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10e      	bne.n	800273e <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002720:	4a17      	ldr	r2, [pc, #92]	@ (8002780 <HW_UART_Transmit_DMA+0x80>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002726:	4b17      	ldr	r3, [pc, #92]	@ (8002784 <HW_UART_Transmit_DMA+0x84>)
 8002728:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <HW_UART_Transmit_DMA+0x88>)
 800272a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800272c:	89bb      	ldrh	r3, [r7, #12]
 800272e:	461a      	mov	r2, r3
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	4814      	ldr	r0, [pc, #80]	@ (8002784 <HW_UART_Transmit_DMA+0x84>)
 8002734:	f009 fcf2 	bl	800c11c <HAL_UART_Transmit_DMA>
 8002738:	4603      	mov	r3, r0
 800273a:	75fb      	strb	r3, [r7, #23]
            break;
 800273c:	e000      	b.n	8002740 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800273e:	bf00      	nop
    }

    switch (hal_status)
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d816      	bhi.n	8002774 <HW_UART_Transmit_DMA+0x74>
 8002746:	a201      	add	r2, pc, #4	@ (adr r2, 800274c <HW_UART_Transmit_DMA+0x4c>)
 8002748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274c:	0800275d 	.word	0x0800275d
 8002750:	08002763 	.word	0x08002763
 8002754:	08002769 	.word	0x08002769
 8002758:	0800276f 	.word	0x0800276f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 800275c:	2300      	movs	r3, #0
 800275e:	75bb      	strb	r3, [r7, #22]
            break;
 8002760:	e009      	b.n	8002776 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002762:	2301      	movs	r3, #1
 8002764:	75bb      	strb	r3, [r7, #22]
            break;
 8002766:	e006      	b.n	8002776 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002768:	2302      	movs	r3, #2
 800276a:	75bb      	strb	r3, [r7, #22]
            break;
 800276c:	e003      	b.n	8002776 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800276e:	2303      	movs	r3, #3
 8002770:	75bb      	strb	r3, [r7, #22]
            break;
 8002772:	e000      	b.n	8002776 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002774:	bf00      	nop
    }

    return hw_status;
 8002776:	7dbb      	ldrb	r3, [r7, #22]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200002cc 	.word	0x200002cc
 8002784:	20000330 	.word	0x20000330
 8002788:	40013800 	.word	0x40013800

0800278c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_UART_TxCpltCallback+0x34>)
 800279c:	429a      	cmp	r2, r3
 800279e:	d107      	bne.n	80027b0 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_UART_TxCpltCallback+0x38>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_UART_TxCpltCallback+0x38>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4798      	blx	r3
            }
            break;
 80027ae:	e001      	b.n	80027b4 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80027b0:	bf00      	nop
 80027b2:	e000      	b.n	80027b6 <HAL_UART_TxCpltCallback+0x2a>
            break;
 80027b4:	bf00      	nop
    }

    return;
 80027b6:	bf00      	nop
}
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40013800 	.word	0x40013800
 80027c4:	200002cc 	.word	0x200002cc

080027c8 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 80027cc:	2102      	movs	r1, #2
 80027ce:	2000      	movs	r0, #0
 80027d0:	f005 f994 	bl	8007afc <IKS01A3_MOTION_SENSOR_Init>
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 80027dc:	2101      	movs	r1, #1
 80027de:	2000      	movs	r0, #0
 80027e0:	f005 f98c 	bl	8007afc <IKS01A3_MOTION_SENSOR_Init>
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	2102      	movs	r1, #2
 80027f4:	2000      	movs	r0, #0
 80027f6:	f005 fa7d 	bl	8007cf4 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	2101      	movs	r1, #1
 800280e:	2000      	movs	r0, #0
 8002810:	f005 fa70 	bl	8007cf4 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 8002826:	ed97 0a01 	vldr	s0, [r7, #4]
 800282a:	2102      	movs	r1, #2
 800282c:	2000      	movs	r0, #0
 800282e:	f005 faa5 	bl	8007d7c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	2102      	movs	r1, #2
 8002846:	2000      	movs	r0, #0
 8002848:	f005 fade 	bl	8007e08 <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <LL_RCC_LSE_SetDriveCapability>:
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002864:	f023 0218 	bic.w	r2, r3, #24
 8002868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_AHB1_GRP1_EnableClock>:
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800288e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4313      	orrs	r3, r2
 8002896:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028a4:	68fb      	ldr	r3, [r7, #12]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_AHB2_GRP1_EnableClock>:
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4013      	ands	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e8:	f005 fce2 	bl	80082b0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80028ec:	f7fe fdce 	bl	800148c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028f0:	f000 f81a 	bl	8002928 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80028f4:	f000 f890 	bl	8002a18 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80028f8:	f000 f8ae 	bl	8002a58 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028fc:	f000 f984 	bl	8002c08 <MX_GPIO_Init>
  MX_DMA_Init();
 8002900:	f000 f970 	bl	8002be4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002904:	f000 f8f8 	bl	8002af8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002908:	f000 f944 	bl	8002b94 <MX_USB_PCD_Init>
  MX_RTC_Init();
 800290c:	f000 f8c0 	bl	8002a90 <MX_RTC_Init>
  MX_RF_Init();
 8002910:	f000 f8b6 	bl	8002a80 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 8002914:	f7fe f99a 	bl	8000c4c <MX_MEMS_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002918:	f7fe fdc6 	bl	80014a8 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_APPE_Process();
 800291c:	f7ff f8ab 	bl	8001a76 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    MX_MEMS_Process();
 8002920:	f7fe f9b2 	bl	8000c88 <MX_MEMS_Process>
    MX_APPE_Process();
 8002924:	bf00      	nop
 8002926:	e7f9      	b.n	800291c <main+0x38>

08002928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b09a      	sub	sp, #104	@ 0x68
 800292c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2248      	movs	r2, #72	@ 0x48
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f00f f99a 	bl	8011c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800295c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f023 0303 	bic.w	r3, r3, #3
 8002968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002972:	f007 fbc5 	bl	800a100 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002976:	2000      	movs	r0, #0
 8002978:	f7ff ff6c 	bl	8002854 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800297c:	4b25      	ldr	r3, [pc, #148]	@ (8002a14 <SystemClock_Config+0xec>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002984:	4a23      	ldr	r2, [pc, #140]	@ (8002a14 <SystemClock_Config+0xec>)
 8002986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b21      	ldr	r3, [pc, #132]	@ (8002a14 <SystemClock_Config+0xec>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002998:	232f      	movs	r3, #47	@ 0x2f
 800299a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800299c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029a2:	2301      	movs	r3, #1
 80029a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029ac:	2301      	movs	r3, #1
 80029ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029b0:	2340      	movs	r3, #64	@ 0x40
 80029b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80029b4:	2300      	movs	r3, #0
 80029b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80029b8:	2360      	movs	r3, #96	@ 0x60
 80029ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029bc:	2305      	movs	r3, #5
 80029be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c4:	f107 0320 	add.w	r3, r7, #32
 80029c8:	4618      	mov	r0, r3
 80029ca:	f007 ff2d 	bl	800a828 <HAL_RCC_OscConfig>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80029d4:	f000 f960 	bl	8002c98 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80029d8:	236f      	movs	r3, #111	@ 0x6f
 80029da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80029dc:	2302      	movs	r3, #2
 80029de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	2101      	movs	r1, #1
 80029f8:	4618      	mov	r0, r3
 80029fa:	f008 fa89 	bl	800af10 <HAL_RCC_ClockConfig>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002a04:	f000 f948 	bl	8002c98 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002a08:	f009 f844 	bl	800ba94 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002a0c:	bf00      	nop
 8002a0e:	3768      	adds	r7, #104	@ 0x68
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	58000400 	.word	0x58000400

08002a18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b094      	sub	sp, #80	@ 0x50
 8002a1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a1e:	463b      	mov	r3, r7
 8002a20:	2250      	movs	r2, #80	@ 0x50
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00f f923 	bl	8011c70 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002a2a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002a2e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002a30:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002a36:	2300      	movs	r3, #0
 8002a38:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3e:	463b      	mov	r3, r7
 8002a40:	4618      	mov	r0, r3
 8002a42:	f008 feb1 	bl	800b7a8 <HAL_RCCEx_PeriphCLKConfig>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002a4c:	f000 f924 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002a50:	bf00      	nop
 8002a52:	3750      	adds	r7, #80	@ 0x50
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <MX_IPCC_Init+0x20>)
 8002a5e:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <MX_IPCC_Init+0x24>)
 8002a60:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002a62:	4805      	ldr	r0, [pc, #20]	@ (8002a78 <MX_IPCC_Init+0x20>)
 8002a64:	f007 f9ce 	bl	8009e04 <HAL_IPCC_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002a6e:	f000 f913 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200002d0 	.word	0x200002d0
 8002a7c:	58000c00 	.word	0x58000c00

08002a80 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a94:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002a96:	4a17      	ldr	r2, [pc, #92]	@ (8002af4 <MX_RTC_Init+0x64>)
 8002a98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002aa0:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002aa6:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002aa8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002aac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002aba:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ac6:	480a      	ldr	r0, [pc, #40]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002ac8:	f009 f8fc 	bl	800bcc4 <HAL_RTC_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002ad2:	f000 f8e1 	bl	8002c98 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4805      	ldr	r0, [pc, #20]	@ (8002af0 <MX_RTC_Init+0x60>)
 8002adc:	f009 f9f2 	bl	800bec4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002ae6:	f000 f8d7 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000030c 	.word	0x2000030c
 8002af4:	40002800 	.word	0x40002800

08002af8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002afc:	4b23      	ldr	r3, [pc, #140]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002afe:	4a24      	ldr	r2, [pc, #144]	@ (8002b90 <MX_USART1_UART_Init+0x98>)
 8002b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b02:	4b22      	ldr	r3, [pc, #136]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0a:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b10:	4b1e      	ldr	r3, [pc, #120]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b1e:	220c      	movs	r2, #12
 8002b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002b28:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b2a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b2e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b30:	4b16      	ldr	r3, [pc, #88]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b42:	4812      	ldr	r0, [pc, #72]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b44:	f009 fa9a 	bl	800c07c <HAL_UART_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002b4e:	f000 f8a3 	bl	8002c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b52:	2100      	movs	r1, #0
 8002b54:	480d      	ldr	r0, [pc, #52]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b56:	f00a f8d1 	bl	800ccfc <HAL_UARTEx_SetTxFifoThreshold>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002b60:	f000 f89a 	bl	8002c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b64:	2100      	movs	r1, #0
 8002b66:	4809      	ldr	r0, [pc, #36]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b68:	f00a f906 	bl	800cd78 <HAL_UARTEx_SetRxFifoThreshold>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002b72:	f000 f891 	bl	8002c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b76:	4805      	ldr	r0, [pc, #20]	@ (8002b8c <MX_USART1_UART_Init+0x94>)
 8002b78:	f00a f887 	bl	800cc8a <HAL_UARTEx_DisableFifoMode>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002b82:	f000 f889 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000330 	.word	0x20000330
 8002b90:	40013800 	.word	0x40013800

08002b94 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002b98:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <MX_USB_PCD_Init+0x48>)
 8002b9a:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <MX_USB_PCD_Init+0x4c>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <MX_USB_PCD_Init+0x48>)
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <MX_USB_PCD_Init+0x48>)
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <MX_USB_PCD_Init+0x48>)
 8002bac:	2202      	movs	r2, #2
 8002bae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <MX_USB_PCD_Init+0x48>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <MX_USB_PCD_Init+0x48>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002bbc:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <MX_USB_PCD_Init+0x48>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <MX_USB_PCD_Init+0x48>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002bc8:	4804      	ldr	r0, [pc, #16]	@ (8002bdc <MX_USB_PCD_Init+0x48>)
 8002bca:	f007 f9a1 	bl	8009f10 <HAL_PCD_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002bd4:	f000 f860 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000424 	.word	0x20000424
 8002be0:	40006800 	.word	0x40006800

08002be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002be8:	2004      	movs	r0, #4
 8002bea:	f7ff fe49 	bl	8002880 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f7ff fe46 	bl	8002880 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	203a      	movs	r0, #58	@ 0x3a
 8002bfa:	f005 fd26 	bl	800864a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002bfe:	203a      	movs	r0, #58	@ 0x3a
 8002c00:	f005 fd3d 	bl	800867e <HAL_NVIC_EnableIRQ>

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1c:	2004      	movs	r0, #4
 8002c1e:	f7ff fe48 	bl	80028b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	2002      	movs	r0, #2
 8002c24:	f7ff fe45 	bl	80028b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f7ff fe42 	bl	80028b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2e:	2008      	movs	r0, #8
 8002c30:	f7ff fe3f 	bl	80028b2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2123      	movs	r1, #35	@ 0x23
 8002c38:	4814      	ldr	r0, [pc, #80]	@ (8002c8c <MX_GPIO_Init+0x84>)
 8002c3a:	f006 fa27 	bl	800908c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c3e:	2310      	movs	r3, #16
 8002c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4810      	ldr	r0, [pc, #64]	@ (8002c90 <MX_GPIO_Init+0x88>)
 8002c50:	f005 ffce 	bl	8008bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002c54:	2323      	movs	r3, #35	@ 0x23
 8002c56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4808      	ldr	r0, [pc, #32]	@ (8002c8c <MX_GPIO_Init+0x84>)
 8002c6a:	f005 ffc1 	bl	8008bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <MX_GPIO_Init+0x8c>)
 8002c80:	f005 ffb6 	bl	8008bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c84:	bf00      	nop
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000800 	.word	0x48000800
 8002c94:	48000c00 	.word	0x48000c00

08002c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9c:	b672      	cpsid	i
}
 8002c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <Error_Handler+0x8>

08002ca4 <LL_RCC_EnableRTC>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_AHB2_GRP1_EnableClock>:
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_AHB3_GRP1_EnableClock>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d36:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d80:	68fb      	ldr	r3, [r7, #12]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002d92:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002d96:	f7ff ffaf 	bl	8002cf8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	202e      	movs	r0, #46	@ 0x2e
 8002da0:	f005 fc53 	bl	800864a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002da4:	202e      	movs	r0, #46	@ 0x2e
 8002da6:	f005 fc6a 	bl	800867e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <HAL_IPCC_MspInit+0x44>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d113      	bne.n	8002dea <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002dc2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002dc6:	f7ff ff97 	bl	8002cf8 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	202c      	movs	r0, #44	@ 0x2c
 8002dd0:	f005 fc3b 	bl	800864a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002dd4:	202c      	movs	r0, #44	@ 0x2c
 8002dd6:	f005 fc52 	bl	800867e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	202d      	movs	r0, #45	@ 0x2d
 8002de0:	f005 fc33 	bl	800864a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002de4:	202d      	movs	r0, #45	@ 0x2d
 8002de6:	f005 fc4a 	bl	800867e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	58000c00 	.word	0x58000c00

08002df8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b096      	sub	sp, #88	@ 0x58
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e00:	f107 0308 	add.w	r3, r7, #8
 8002e04:	2250      	movs	r2, #80	@ 0x50
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f00e ff31 	bl	8011c70 <memset>
  if(hrtc->Instance==RTC)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a13      	ldr	r2, [pc, #76]	@ (8002e60 <HAL_RTC_MspInit+0x68>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d11f      	bne.n	8002e58 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8002e18:	f007 f972 	bl	800a100 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e20:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e26:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e28:	f107 0308 	add.w	r3, r7, #8
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f008 fcbb 	bl	800b7a8 <HAL_RCCEx_PeriphCLKConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8002e38:	f7ff ff2e 	bl	8002c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e3c:	f7ff ff32 	bl	8002ca4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e40:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002e44:	f7ff ff71 	bl	8002d2a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	2003      	movs	r0, #3
 8002e4e:	f005 fbfc 	bl	800864a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002e52:	2003      	movs	r0, #3
 8002e54:	f005 fc13 	bl	800867e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e58:	bf00      	nop
 8002e5a:	3758      	adds	r7, #88	@ 0x58
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40002800 	.word	0x40002800

08002e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b09c      	sub	sp, #112	@ 0x70
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e7c:	f107 030c 	add.w	r3, r7, #12
 8002e80:	2250      	movs	r2, #80	@ 0x50
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f00e fef3 	bl	8011c70 <memset>
  if(huart->Instance==USART1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f38 <HAL_UART_MspInit+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d14d      	bne.n	8002f30 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e94:	2301      	movs	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e9c:	f107 030c 	add.w	r3, r7, #12
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f008 fc81 	bl	800b7a8 <HAL_RCCEx_PeriphCLKConfig>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002eac:	f7ff fef4 	bl	8002c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eb0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002eb4:	f7ff ff52 	bl	8002d5c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f7ff ff04 	bl	8002cc6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002ebe:	23c0      	movs	r3, #192	@ 0xc0
 8002ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ece:	2307      	movs	r3, #7
 8002ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4818      	ldr	r0, [pc, #96]	@ (8002f3c <HAL_UART_MspInit+0xd8>)
 8002eda:	f005 fe89 	bl	8008bf0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002ede:	4b18      	ldr	r3, [pc, #96]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002ee0:	4a18      	ldr	r2, [pc, #96]	@ (8002f44 <HAL_UART_MspInit+0xe0>)
 8002ee2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ee4:	4b16      	ldr	r3, [pc, #88]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eea:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002eec:	2210      	movs	r2, #16
 8002eee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002ef8:	2280      	movs	r2, #128	@ 0x80
 8002efa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002efc:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f02:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f08:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f14:	480a      	ldr	r0, [pc, #40]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002f16:	f005 fbf7 	bl	8008708 <HAL_DMA_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002f20:	f7ff feba 	bl	8002c98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002f28:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f2a:	4a05      	ldr	r2, [pc, #20]	@ (8002f40 <HAL_UART_MspInit+0xdc>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f30:	bf00      	nop
 8002f32:	3770      	adds	r7, #112	@ 0x70
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40013800 	.word	0x40013800
 8002f3c:	48000400 	.word	0x48000400
 8002f40:	200003c4 	.word	0x200003c4
 8002f44:	40020444 	.word	0x40020444

08002f48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b09c      	sub	sp, #112	@ 0x70
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	2250      	movs	r2, #80	@ 0x50
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f00e fe81 	bl	8011c70 <memset>
  if(hpcd->Instance==USB)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff0 <HAL_PCD_MspInit+0xa8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d136      	bne.n	8002fe6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f7c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002f7e:	2318      	movs	r3, #24
 8002f80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002f82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002f88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002f8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002f92:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002f94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f98:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002f9a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f9e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f008 fbff 	bl	800b7a8 <HAL_RCCEx_PeriphCLKConfig>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002fb0:	f7ff fe72 	bl	8002c98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7ff fe86 	bl	8002cc6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002fba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002fcc:	230a      	movs	r3, #10
 8002fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fda:	f005 fe09 	bl	8008bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002fde:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002fe2:	f7ff fea2 	bl	8002d2a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002fe6:	bf00      	nop
 8002fe8:	3770      	adds	r7, #112	@ 0x70
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40006800 	.word	0x40006800

08002ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <NMI_Handler+0x4>

08002ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <HardFault_Handler+0x4>

08003004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <MemManage_Handler+0x4>

0800300c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <BusFault_Handler+0x4>

08003014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <UsageFault_Handler+0x4>

0800301c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800304a:	f005 f98b 	bl	8008364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}

08003052 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003056:	f7ff f899 	bl	800218c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}

0800305e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003062:	f00e f839 	bl	80110d8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}

0800306a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800306e:	f00e f869 	bl	8011144 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}

08003076 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800307a:	f006 f81f 	bl	80090bc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003088:	4802      	ldr	r0, [pc, #8]	@ (8003094 <DMA2_Channel4_IRQHandler+0x10>)
 800308a:	f005 fc60 	bl	800894e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200003c4 	.word	0x200003c4

08003098 <LL_AHB2_GRP1_EnableClock>:
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4013      	ands	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030bc:	68fb      	ldr	r3, [r7, #12]
}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_APB1_GRP1_EnableClock>:
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4313      	orrs	r3, r2
 80030e0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4013      	ands	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030ee:	68fb      	ldr	r3, [r7, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_APB1_GRP1_DisableClock>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003108:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	43db      	mvns	r3, r3
 800310e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003112:	4013      	ands	r3, r2
 8003114:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800312e:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <BSP_I2C1_Init+0x70>)
 8003130:	4a19      	ldr	r2, [pc, #100]	@ (8003198 <BSP_I2C1_Init+0x74>)
 8003132:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003134:	4b19      	ldr	r3, [pc, #100]	@ (800319c <BSP_I2C1_Init+0x78>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	4918      	ldr	r1, [pc, #96]	@ (800319c <BSP_I2C1_Init+0x78>)
 800313c:	600a      	str	r2, [r1, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d122      	bne.n	8003188 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003142:	4814      	ldr	r0, [pc, #80]	@ (8003194 <BSP_I2C1_Init+0x70>)
 8003144:	f006 faea 	bl	800971c <HAL_I2C_GetState>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d11c      	bne.n	8003188 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800314e:	4811      	ldr	r0, [pc, #68]	@ (8003194 <BSP_I2C1_Init+0x70>)
 8003150:	f000 f8fe 	bl	8003350 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800315a:	480e      	ldr	r0, [pc, #56]	@ (8003194 <BSP_I2C1_Init+0x70>)
 800315c:	f000 f8b4 	bl	80032c8 <MX_I2C1_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003166:	f06f 0307 	mvn.w	r3, #7
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	e00c      	b.n	8003188 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800316e:	2100      	movs	r1, #0
 8003170:	4808      	ldr	r0, [pc, #32]	@ (8003194 <BSP_I2C1_Init+0x70>)
 8003172:	f006 fdaf 	bl	8009cd4 <HAL_I2CEx_ConfigAnalogFilter>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800317c:	f06f 0307 	mvn.w	r3, #7
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	e001      	b.n	8003188 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003184:	2300      	movs	r3, #0
 8003186:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8003188:	687b      	ldr	r3, [r7, #4]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000700 	.word	0x20000700
 8003198:	40005400 	.word	0x40005400
 800319c:	20000754 	.word	0x20000754

080031a0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80031aa:	4b0f      	ldr	r3, [pc, #60]	@ (80031e8 <BSP_I2C1_DeInit+0x48>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d014      	beq.n	80031dc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80031b2:	4b0d      	ldr	r3, [pc, #52]	@ (80031e8 <BSP_I2C1_DeInit+0x48>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	4a0b      	ldr	r2, [pc, #44]	@ (80031e8 <BSP_I2C1_DeInit+0x48>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b0a      	ldr	r3, [pc, #40]	@ (80031e8 <BSP_I2C1_DeInit+0x48>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10b      	bne.n	80031dc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80031c4:	4809      	ldr	r0, [pc, #36]	@ (80031ec <BSP_I2C1_DeInit+0x4c>)
 80031c6:	f000 f907 	bl	80033d8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80031ca:	4808      	ldr	r0, [pc, #32]	@ (80031ec <BSP_I2C1_DeInit+0x4c>)
 80031cc:	f006 f835 	bl	800923a <HAL_I2C_DeInit>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80031d6:	f06f 0307 	mvn.w	r3, #7
 80031da:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80031dc:	687b      	ldr	r3, [r7, #4]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000754 	.word	0x20000754
 80031ec:	20000700 	.word	0x20000700

080031f0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	@ 0x28
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	60ba      	str	r2, [r7, #8]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	81fb      	strh	r3, [r7, #14]
 80031fe:	460b      	mov	r3, r1
 8003200:	81bb      	strh	r3, [r7, #12]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800320a:	89ba      	ldrh	r2, [r7, #12]
 800320c:	89f9      	ldrh	r1, [r7, #14]
 800320e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003212:	9302      	str	r3, [sp, #8]
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2301      	movs	r3, #1
 800321e:	480c      	ldr	r0, [pc, #48]	@ (8003250 <BSP_I2C1_WriteReg+0x60>)
 8003220:	f006 f84e 	bl	80092c0 <HAL_I2C_Mem_Write>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800322a:	4809      	ldr	r0, [pc, #36]	@ (8003250 <BSP_I2C1_WriteReg+0x60>)
 800322c:	f006 fa84 	bl	8009738 <HAL_I2C_GetError>
 8003230:	4603      	mov	r3, r0
 8003232:	2b04      	cmp	r3, #4
 8003234:	d103      	bne.n	800323e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003236:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e002      	b.n	8003244 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800323e:	f06f 0303 	mvn.w	r3, #3
 8003242:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003244:	697b      	ldr	r3, [r7, #20]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000700 	.word	0x20000700

08003254 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af04      	add	r7, sp, #16
 800325a:	60ba      	str	r2, [r7, #8]
 800325c:	461a      	mov	r2, r3
 800325e:	4603      	mov	r3, r0
 8003260:	81fb      	strh	r3, [r7, #14]
 8003262:	460b      	mov	r3, r1
 8003264:	81bb      	strh	r3, [r7, #12]
 8003266:	4613      	mov	r3, r2
 8003268:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800326e:	89ba      	ldrh	r2, [r7, #12]
 8003270:	89f9      	ldrh	r1, [r7, #14]
 8003272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003276:	9302      	str	r3, [sp, #8]
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2301      	movs	r3, #1
 8003282:	480c      	ldr	r0, [pc, #48]	@ (80032b4 <BSP_I2C1_ReadReg+0x60>)
 8003284:	f006 f930 	bl	80094e8 <HAL_I2C_Mem_Read>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00c      	beq.n	80032a8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800328e:	4809      	ldr	r0, [pc, #36]	@ (80032b4 <BSP_I2C1_ReadReg+0x60>)
 8003290:	f006 fa52 	bl	8009738 <HAL_I2C_GetError>
 8003294:	4603      	mov	r3, r0
 8003296:	2b04      	cmp	r3, #4
 8003298:	d103      	bne.n	80032a2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800329a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e002      	b.n	80032a8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80032a2:	f06f 0303 	mvn.w	r3, #3
 80032a6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80032a8:	697b      	ldr	r3, [r7, #20]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000700 	.word	0x20000700

080032b8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80032bc:	f005 f866 	bl	800838c <HAL_GetTick>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <MX_I2C1_Init+0x80>)
 80032d8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1b      	ldr	r2, [pc, #108]	@ (800334c <MX_I2C1_Init+0x84>)
 80032de:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f005 fefa 	bl	8009104 <HAL_I2C_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800331a:	2100      	movs	r1, #0
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f006 fcd9 	bl	8009cd4 <HAL_I2CEx_ConfigAnalogFilter>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800332c:	2100      	movs	r1, #0
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f006 fd1b 	bl	8009d6a <HAL_I2CEx_ConfigDigitalFilter>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40005400 	.word	0x40005400
 800334c:	00707cbb 	.word	0x00707cbb

08003350 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b09c      	sub	sp, #112	@ 0x70
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	2250      	movs	r2, #80	@ 0x50
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f00e fc85 	bl	8011c70 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003366:	2304      	movs	r3, #4
 8003368:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800336a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800336e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003370:	f107 030c 	add.w	r3, r7, #12
 8003374:	4618      	mov	r0, r3
 8003376:	f008 fa17 	bl	800b7a8 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	2002      	movs	r0, #2
 800337c:	f7ff fe8c 	bl	8003098 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003384:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003386:	2312      	movs	r3, #18
 8003388:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003392:	2304      	movs	r3, #4
 8003394:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003396:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800339a:	4619      	mov	r1, r3
 800339c:	480d      	ldr	r0, [pc, #52]	@ (80033d4 <I2C1_MspInit+0x84>)
 800339e:	f005 fc27 	bl	8008bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80033a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a8:	2312      	movs	r3, #18
 80033aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b0:	2300      	movs	r3, #0
 80033b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80033b4:	2304      	movs	r3, #4
 80033b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80033b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80033bc:	4619      	mov	r1, r3
 80033be:	4805      	ldr	r0, [pc, #20]	@ (80033d4 <I2C1_MspInit+0x84>)
 80033c0:	f005 fc16 	bl	8008bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033c4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80033c8:	f7ff fe7f 	bl	80030ca <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80033cc:	bf00      	nop
 80033ce:	3770      	adds	r7, #112	@ 0x70
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	48000400 	.word	0x48000400

080033d8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80033e0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80033e4:	f7ff fe8a 	bl	80030fc <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80033e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033ec:	4805      	ldr	r0, [pc, #20]	@ (8003404 <I2C1_MspDeInit+0x2c>)
 80033ee:	f005 fd6f 	bl	8008ed0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80033f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033f6:	4803      	ldr	r0, [pc, #12]	@ (8003404 <I2C1_MspDeInit+0x2c>)
 80033f8:	f005 fd6a 	bl	8008ed0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	48000400 	.word	0x48000400

08003408 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e00a      	b.n	8003430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800341a:	f3af 8000 	nop.w
 800341e:	4601      	mov	r1, r0
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	60ba      	str	r2, [r7, #8]
 8003426:	b2ca      	uxtb	r2, r1
 8003428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3301      	adds	r3, #1
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	dbf0      	blt.n	800341a <_read+0x12>
  }

  return len;
 8003438:	687b      	ldr	r3, [r7, #4]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800344a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800346a:	605a      	str	r2, [r3, #4]
  return 0;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <_isatty>:

int _isatty(int file)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003482:	2301      	movs	r3, #1
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b4:	4a14      	ldr	r2, [pc, #80]	@ (8003508 <_sbrk+0x5c>)
 80034b6:	4b15      	ldr	r3, [pc, #84]	@ (800350c <_sbrk+0x60>)
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c0:	4b13      	ldr	r3, [pc, #76]	@ (8003510 <_sbrk+0x64>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c8:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <_sbrk+0x64>)
 80034ca:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <_sbrk+0x68>)
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <_sbrk+0x64>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d207      	bcs.n	80034ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034dc:	f00e fc2c 	bl	8011d38 <__errno>
 80034e0:	4603      	mov	r3, r0
 80034e2:	220c      	movs	r2, #12
 80034e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	e009      	b.n	8003500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034ec:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <_sbrk+0x64>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f2:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <_sbrk+0x64>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	4a05      	ldr	r2, [pc, #20]	@ (8003510 <_sbrk+0x64>)
 80034fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20030000 	.word	0x20030000
 800350c:	00000400 	.word	0x00000400
 8003510:	20000758 	.word	0x20000758
 8003514:	20000d68 	.word	0x20000d68

08003518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800351c:	4b24      	ldr	r3, [pc, #144]	@ (80035b0 <SystemInit+0x98>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	4a23      	ldr	r2, [pc, #140]	@ (80035b0 <SystemInit+0x98>)
 8003524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800352c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800353c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003540:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003544:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003550:	4b18      	ldr	r3, [pc, #96]	@ (80035b4 <SystemInit+0x9c>)
 8003552:	4013      	ands	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800355e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003562:	f023 0305 	bic.w	r3, r3, #5
 8003566:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800356a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800356e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800357e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003582:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <SystemInit+0xa0>)
 8003584:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800358a:	4a0b      	ldr	r2, [pc, #44]	@ (80035b8 <SystemInit+0xa0>)
 800358c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800358e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003598:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a2:	2200      	movs	r2, #0
 80035a4:	619a      	str	r2, [r3, #24]
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00
 80035b4:	faf6fefb 	.word	0xfaf6fefb
 80035b8:	22041000 	.word	0x22041000

080035bc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80035bc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035be:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035c0:	3304      	adds	r3, #4

080035c2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035c2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035c4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80035c6:	d3f9      	bcc.n	80035bc <CopyDataInit>
  bx lr
 80035c8:	4770      	bx	lr

080035ca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80035ca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80035cc:	3004      	adds	r0, #4

080035ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80035ce:	4288      	cmp	r0, r1
  bcc FillZerobss
 80035d0:	d3fb      	bcc.n	80035ca <FillZerobss>
  bx lr
 80035d2:	4770      	bx	lr

080035d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035d4:	480c      	ldr	r0, [pc, #48]	@ (8003608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80035d8:	f7ff ff9e 	bl	8003518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80035dc:	480b      	ldr	r0, [pc, #44]	@ (800360c <LoopForever+0x6>)
 80035de:	490c      	ldr	r1, [pc, #48]	@ (8003610 <LoopForever+0xa>)
 80035e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003614 <LoopForever+0xe>)
 80035e2:	2300      	movs	r3, #0
 80035e4:	f7ff ffed 	bl	80035c2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80035e8:	480b      	ldr	r0, [pc, #44]	@ (8003618 <LoopForever+0x12>)
 80035ea:	490c      	ldr	r1, [pc, #48]	@ (800361c <LoopForever+0x16>)
 80035ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003620 <LoopForever+0x1a>)
 80035ee:	2300      	movs	r3, #0
 80035f0:	f7ff ffe7 	bl	80035c2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80035f4:	480b      	ldr	r0, [pc, #44]	@ (8003624 <LoopForever+0x1e>)
 80035f6:	490c      	ldr	r1, [pc, #48]	@ (8003628 <LoopForever+0x22>)
 80035f8:	2300      	movs	r3, #0
 80035fa:	f7ff ffe8 	bl	80035ce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035fe:	f00e fba1 	bl	8011d44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003602:	f7ff f96f 	bl	80028e4 <main>

08003606 <LoopForever>:

LoopForever:
  b LoopForever
 8003606:	e7fe      	b.n	8003606 <LoopForever>
  ldr   r0, =_estack
 8003608:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800360c:	20000008 	.word	0x20000008
 8003610:	20000168 	.word	0x20000168
 8003614:	080140ec 	.word	0x080140ec
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003618:	200301e4 	.word	0x200301e4
 800361c:	20030a67 	.word	0x20030a67
 8003620:	08014292 	.word	0x08014292
  INIT_BSS _sbss, _ebss
 8003624:	200001b4 	.word	0x200001b4
 8003628:	20000d64 	.word	0x20000d64

0800362c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800362c:	e7fe      	b.n	800362c <ADC1_IRQHandler>
	...

08003630 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e051      	b.n	80036f0 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	7b1a      	ldrb	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a1d      	ldr	r2, [pc, #116]	@ (80036fc <LIS2DW12_RegisterBusIO+0xcc>)
 8003688:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1c      	ldr	r2, [pc, #112]	@ (8003700 <LIS2DW12_RegisterBusIO+0xd0>)
 800368e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e020      	b.n	80036f0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4798      	blx	r3
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e016      	b.n	80036f0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d112      	bne.n	80036f0 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10d      	bne.n	80036f0 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80036d4:	2305      	movs	r3, #5
 80036d6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80036d8:	7afb      	ldrb	r3, [r7, #11]
 80036da:	461a      	mov	r2, r3
 80036dc:	2121      	movs	r1, #33	@ 0x21
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fcc1 	bl	8004066 <LIS2DW12_Write_Reg>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80036f0:	68fb      	ldr	r3, [r7, #12]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	080043f9 	.word	0x080043f9
 8003700:	0800442f 	.word	0x0800442f

08003704 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3320      	adds	r3, #32
 8003710:	2101      	movs	r1, #1
 8003712:	4618      	mov	r0, r3
 8003714:	f001 f9cb 	bl	8004aae <lis2dw12_auto_increment_set>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	e04b      	b.n	80037bc <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3320      	adds	r3, #32
 8003728:	2101      	movs	r1, #1
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f8e2 	bl	80048f4 <lis2dw12_block_data_update_set>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	e03f      	b.n	80037bc <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3320      	adds	r3, #32
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f9d9 	bl	8004afa <lis2dw12_fifo_mode_set>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
 8003752:	e033      	b.n	80037bc <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3320      	adds	r3, #32
 8003758:	2104      	movs	r1, #4
 800375a:	4618      	mov	r0, r3
 800375c:	f000 feb2 	bl	80044c4 <lis2dw12_power_mode_set>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	e027      	b.n	80037bc <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a15      	ldr	r2, [pc, #84]	@ (80037c4 <LIS2DW12_Init+0xc0>)
 8003770:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3320      	adds	r3, #32
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f000 ffa3 	bl	80046d4 <lis2dw12_data_rate_set>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	e010      	b.n	80037bc <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3320      	adds	r3, #32
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 f8cd 	bl	8004940 <lis2dw12_full_scale_set>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
 80037b0:	e004      	b.n	80037bc <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	42c80000 	.word	0x42c80000

080037c8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f888 	bl	80038e6 <LIS2DW12_ACC_Disable>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
 80037e0:	e010      	b.n	8003804 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3320      	adds	r3, #32
 800381a:	6839      	ldr	r1, [r7, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f001 f935 	bl	8004a8c <lis2dw12_device_id_get>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	e000      	b.n	8003830 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2200      	movs	r2, #0
 8003852:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2200      	movs	r2, #0
 800385e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2210      	movs	r2, #16
 8003864:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2200      	movs	r2, #0
 800386a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4a06      	ldr	r2, [pc, #24]	@ (8003890 <LIS2DW12_GetCapabilities+0x58>)
 8003878:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	44c80000 	.word	0x44c80000

08003894 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e019      	b.n	80038de <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80038bc:	461a      	mov	r2, r3
 80038be:	eeb0 0a67 	vmov.f32	s0, s15
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fbea 	bl	800409c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	e004      	b.n	80038de <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e010      	b.n	800391e <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3320      	adds	r3, #32
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fee6 	bl	80046d4 <lis2dw12_data_rate_set>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	e004      	b.n	800391e <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3320      	adds	r3, #32
 800393a:	f107 020b 	add.w	r2, r7, #11
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f001 f823 	bl	800498c <lis2dw12_full_scale_get>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	e080      	b.n	8003a54 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3320      	adds	r3, #32
 8003956:	f107 020a 	add.w	r2, r7, #10
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fdff 	bl	8004560 <lis2dw12_power_mode_get>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003968:	f04f 33ff 	mov.w	r3, #4294967295
 800396c:	e072      	b.n	8003a54 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 800396e:	7abb      	ldrb	r3, [r7, #10]
 8003970:	2b1b      	cmp	r3, #27
 8003972:	bf8c      	ite	hi
 8003974:	2201      	movhi	r2, #1
 8003976:	2200      	movls	r2, #0
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	2a00      	cmp	r2, #0
 800397c:	d162      	bne.n	8003a44 <LIS2DW12_ACC_GetSensitivity+0x11c>
 800397e:	2201      	movs	r2, #1
 8003980:	409a      	lsls	r2, r3
 8003982:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003986:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d12f      	bne.n	80039f8 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003998:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d04c      	beq.n	8003a44 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80039aa:	7afb      	ldrb	r3, [r7, #11]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d81b      	bhi.n	80039e8 <LIS2DW12_ACC_GetSensitivity+0xc0>
 80039b0:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <LIS2DW12_ACC_GetSensitivity+0x90>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039d1 	.word	0x080039d1
 80039c0:	080039d9 	.word	0x080039d9
 80039c4:	080039e1 	.word	0x080039e1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4a24      	ldr	r2, [pc, #144]	@ (8003a5c <LIS2DW12_ACC_GetSensitivity+0x134>)
 80039cc:	601a      	str	r2, [r3, #0]
          break;
 80039ce:	e012      	b.n	80039f6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	4a23      	ldr	r2, [pc, #140]	@ (8003a60 <LIS2DW12_ACC_GetSensitivity+0x138>)
 80039d4:	601a      	str	r2, [r3, #0]
          break;
 80039d6:	e00e      	b.n	80039f6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4a22      	ldr	r2, [pc, #136]	@ (8003a64 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 80039dc:	601a      	str	r2, [r3, #0]
          break;
 80039de:	e00a      	b.n	80039f6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4a21      	ldr	r2, [pc, #132]	@ (8003a68 <LIS2DW12_ACC_GetSensitivity+0x140>)
 80039e4:	601a      	str	r2, [r3, #0]
          break;
 80039e6:	e006      	b.n	80039f6 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	4a20      	ldr	r2, [pc, #128]	@ (8003a6c <LIS2DW12_ACC_GetSensitivity+0x144>)
 80039ec:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295
 80039f2:	60fb      	str	r3, [r7, #12]
          break;
 80039f4:	bf00      	nop
      }
      break;
 80039f6:	e02c      	b.n	8003a52 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80039f8:	7afb      	ldrb	r3, [r7, #11]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d81a      	bhi.n	8003a34 <LIS2DW12_ACC_GetSensitivity+0x10c>
 80039fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003a04 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a1d 	.word	0x08003a1d
 8003a0c:	08003a25 	.word	0x08003a25
 8003a10:	08003a2d 	.word	0x08003a2d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4a16      	ldr	r2, [pc, #88]	@ (8003a70 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003a18:	601a      	str	r2, [r3, #0]
          break;
 8003a1a:	e012      	b.n	8003a42 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4a15      	ldr	r2, [pc, #84]	@ (8003a74 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003a20:	601a      	str	r2, [r3, #0]
          break;
 8003a22:	e00e      	b.n	8003a42 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4a0d      	ldr	r2, [pc, #52]	@ (8003a5c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003a28:	601a      	str	r2, [r3, #0]
          break;
 8003a2a:	e00a      	b.n	8003a42 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a60 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003a30:	601a      	str	r2, [r3, #0]
          break;
 8003a32:	e006      	b.n	8003a42 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4a0d      	ldr	r2, [pc, #52]	@ (8003a6c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003a38:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	60fb      	str	r3, [r7, #12]
          break;
 8003a40:	bf00      	nop
      }
      break;
 8003a42:	e006      	b.n	8003a52 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003a48:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	60fb      	str	r3, [r7, #12]
      break;
 8003a50:	bf00      	nop
  }

  return ret;
 8003a52:	68fb      	ldr	r3, [r7, #12]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	3f79db23 	.word	0x3f79db23
 8003a60:	3ff9db23 	.word	0x3ff9db23
 8003a64:	4079db23 	.word	0x4079db23
 8003a68:	40f9db23 	.word	0x40f9db23
 8003a6c:	bf800000 	.word	0xbf800000
 8003a70:	3e79db23 	.word	0x3e79db23
 8003a74:	3ef9db23 	.word	0x3ef9db23

08003a78 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3320      	adds	r3, #32
 8003a8a:	f107 020b 	add.w	r2, r7, #11
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fe65 	bl	8004760 <lis2dw12_data_rate_get>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	e14f      	b.n	8003d42 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3320      	adds	r3, #32
 8003aa6:	f107 020a 	add.w	r2, r7, #10
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fd57 	bl	8004560 <lis2dw12_power_mode_get>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	e141      	b.n	8003d42 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003abe:	7afb      	ldrb	r3, [r7, #11]
 8003ac0:	2b32      	cmp	r3, #50	@ 0x32
 8003ac2:	f200 8136 	bhi.w	8003d32 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8003acc <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b99 	.word	0x08003b99
 8003ad0:	08003ba3 	.word	0x08003ba3
 8003ad4:	08003bfd 	.word	0x08003bfd
 8003ad8:	08003c05 	.word	0x08003c05
 8003adc:	08003c0d 	.word	0x08003c0d
 8003ae0:	08003c15 	.word	0x08003c15
 8003ae4:	08003c1d 	.word	0x08003c1d
 8003ae8:	08003c25 	.word	0x08003c25
 8003aec:	08003c7f 	.word	0x08003c7f
 8003af0:	08003cd9 	.word	0x08003cd9
 8003af4:	08003d33 	.word	0x08003d33
 8003af8:	08003d33 	.word	0x08003d33
 8003afc:	08003d33 	.word	0x08003d33
 8003b00:	08003d33 	.word	0x08003d33
 8003b04:	08003d33 	.word	0x08003d33
 8003b08:	08003d33 	.word	0x08003d33
 8003b0c:	08003d33 	.word	0x08003d33
 8003b10:	08003d33 	.word	0x08003d33
 8003b14:	08003b99 	.word	0x08003b99
 8003b18:	08003d33 	.word	0x08003d33
 8003b1c:	08003d33 	.word	0x08003d33
 8003b20:	08003d33 	.word	0x08003d33
 8003b24:	08003d33 	.word	0x08003d33
 8003b28:	08003d33 	.word	0x08003d33
 8003b2c:	08003d33 	.word	0x08003d33
 8003b30:	08003d33 	.word	0x08003d33
 8003b34:	08003d33 	.word	0x08003d33
 8003b38:	08003d33 	.word	0x08003d33
 8003b3c:	08003d33 	.word	0x08003d33
 8003b40:	08003d33 	.word	0x08003d33
 8003b44:	08003d33 	.word	0x08003d33
 8003b48:	08003d33 	.word	0x08003d33
 8003b4c:	08003d33 	.word	0x08003d33
 8003b50:	08003d33 	.word	0x08003d33
 8003b54:	08003d33 	.word	0x08003d33
 8003b58:	08003d33 	.word	0x08003d33
 8003b5c:	08003d33 	.word	0x08003d33
 8003b60:	08003d33 	.word	0x08003d33
 8003b64:	08003d33 	.word	0x08003d33
 8003b68:	08003d33 	.word	0x08003d33
 8003b6c:	08003d33 	.word	0x08003d33
 8003b70:	08003d33 	.word	0x08003d33
 8003b74:	08003d33 	.word	0x08003d33
 8003b78:	08003d33 	.word	0x08003d33
 8003b7c:	08003d33 	.word	0x08003d33
 8003b80:	08003d33 	.word	0x08003d33
 8003b84:	08003d33 	.word	0x08003d33
 8003b88:	08003d33 	.word	0x08003d33
 8003b8c:	08003d33 	.word	0x08003d33
 8003b90:	08003d33 	.word	0x08003d33
 8003b94:	08003b99 	.word	0x08003b99
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
      break;
 8003ba0:	e0ce      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003ba2:	7abb      	ldrb	r3, [r7, #10]
 8003ba4:	2b1b      	cmp	r3, #27
 8003ba6:	bf8c      	ite	hi
 8003ba8:	2201      	movhi	r2, #1
 8003baa:	2200      	movls	r2, #0
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	d11c      	bne.n	8003bec <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	bf14      	ite	ne
 8003bc0:	2201      	movne	r2, #1
 8003bc2:	2200      	moveq	r2, #0
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d10c      	bne.n	8003be4 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003bca:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bf14      	ite	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	2300      	moveq	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4a5b      	ldr	r2, [pc, #364]	@ (8003d4c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003be0:	601a      	str	r2, [r3, #0]
          break;
 8003be2:	e00a      	b.n	8003bfa <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4a5a      	ldr	r2, [pc, #360]	@ (8003d50 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003be8:	601a      	str	r2, [r3, #0]
          break;
 8003bea:	e006      	b.n	8003bfa <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4a59      	ldr	r2, [pc, #356]	@ (8003d54 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003bf0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	60fb      	str	r3, [r7, #12]
          break;
 8003bf8:	bf00      	nop
      }
      break;
 8003bfa:	e0a1      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	4a53      	ldr	r2, [pc, #332]	@ (8003d4c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003c00:	601a      	str	r2, [r3, #0]
      break;
 8003c02:	e09d      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4a54      	ldr	r2, [pc, #336]	@ (8003d58 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003c08:	601a      	str	r2, [r3, #0]
      break;
 8003c0a:	e099      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4a53      	ldr	r2, [pc, #332]	@ (8003d5c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003c10:	601a      	str	r2, [r3, #0]
      break;
 8003c12:	e095      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	4a52      	ldr	r2, [pc, #328]	@ (8003d60 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003c18:	601a      	str	r2, [r3, #0]
      break;
 8003c1a:	e091      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4a51      	ldr	r2, [pc, #324]	@ (8003d64 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003c20:	601a      	str	r2, [r3, #0]
      break;
 8003c22:	e08d      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003c24:	7abb      	ldrb	r3, [r7, #10]
 8003c26:	2b1b      	cmp	r3, #27
 8003c28:	bf8c      	ite	hi
 8003c2a:	2201      	movhi	r2, #1
 8003c2c:	2200      	movls	r2, #0
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	2a00      	cmp	r2, #0
 8003c32:	d11c      	bne.n	8003c6e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8003c34:	2201      	movs	r2, #1
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	bf14      	ite	ne
 8003c42:	2201      	movne	r2, #1
 8003c44:	2200      	moveq	r2, #0
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	2a00      	cmp	r2, #0
 8003c4a:	d10c      	bne.n	8003c66 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003c4c:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	4a41      	ldr	r2, [pc, #260]	@ (8003d68 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8003c62:	601a      	str	r2, [r3, #0]
          break;
 8003c64:	e00a      	b.n	8003c7c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	4a3e      	ldr	r2, [pc, #248]	@ (8003d64 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003c6a:	601a      	str	r2, [r3, #0]
          break;
 8003c6c:	e006      	b.n	8003c7c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	4a38      	ldr	r2, [pc, #224]	@ (8003d54 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003c72:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	60fb      	str	r3, [r7, #12]
          break;
 8003c7a:	bf00      	nop
      }
      break;
 8003c7c:	e060      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003c7e:	7abb      	ldrb	r3, [r7, #10]
 8003c80:	2b1b      	cmp	r3, #27
 8003c82:	bf8c      	ite	hi
 8003c84:	2201      	movhi	r2, #1
 8003c86:	2200      	movls	r2, #0
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	d11c      	bne.n	8003cc8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8003c8e:	2201      	movs	r2, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2201      	movne	r2, #1
 8003c9e:	2200      	moveq	r2, #0
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	2a00      	cmp	r2, #0
 8003ca4:	d10c      	bne.n	8003cc0 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8003ca6:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4a2c      	ldr	r2, [pc, #176]	@ (8003d6c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8003cbc:	601a      	str	r2, [r3, #0]
          break;
 8003cbe:	e00a      	b.n	8003cd6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4a28      	ldr	r2, [pc, #160]	@ (8003d64 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003cc4:	601a      	str	r2, [r3, #0]
          break;
 8003cc6:	e006      	b.n	8003cd6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4a22      	ldr	r2, [pc, #136]	@ (8003d54 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003ccc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd2:	60fb      	str	r3, [r7, #12]
          break;
 8003cd4:	bf00      	nop
      }
      break;
 8003cd6:	e033      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003cd8:	7abb      	ldrb	r3, [r7, #10]
 8003cda:	2b1b      	cmp	r3, #27
 8003cdc:	bf8c      	ite	hi
 8003cde:	2201      	movhi	r2, #1
 8003ce0:	2200      	movls	r2, #0
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	2a00      	cmp	r2, #0
 8003ce6:	d11c      	bne.n	8003d22 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8003ce8:	2201      	movs	r2, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	bf14      	ite	ne
 8003cf6:	2201      	movne	r2, #1
 8003cf8:	2200      	moveq	r2, #0
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	2a00      	cmp	r2, #0
 8003cfe:	d10c      	bne.n	8003d1a <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8003d00:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	4a16      	ldr	r2, [pc, #88]	@ (8003d70 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8003d16:	601a      	str	r2, [r3, #0]
          break;
 8003d18:	e00a      	b.n	8003d30 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4a11      	ldr	r2, [pc, #68]	@ (8003d64 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003d1e:	601a      	str	r2, [r3, #0]
          break;
 8003d20:	e006      	b.n	8003d30 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	4a0b      	ldr	r2, [pc, #44]	@ (8003d54 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003d26:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	60fb      	str	r3, [r7, #12]
          break;
 8003d2e:	bf00      	nop
      }
      break;
 8003d30:	e006      	b.n	8003d40 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	4a07      	ldr	r2, [pc, #28]	@ (8003d54 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003d36:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3c:	60fb      	str	r3, [r7, #12]
      break;
 8003d3e:	bf00      	nop
  }

  return ret;
 8003d40:	68fb      	ldr	r3, [r7, #12]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	41480000 	.word	0x41480000
 8003d50:	3fcccccd 	.word	0x3fcccccd
 8003d54:	bf800000 	.word	0xbf800000
 8003d58:	41c80000 	.word	0x41c80000
 8003d5c:	42480000 	.word	0x42480000
 8003d60:	42c80000 	.word	0x42c80000
 8003d64:	43480000 	.word	0x43480000
 8003d68:	43c80000 	.word	0x43c80000
 8003d6c:	44480000 	.word	0x44480000
 8003d70:	44c80000 	.word	0x44c80000

08003d74 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003d80:	2200      	movs	r2, #0
 8003d82:	2100      	movs	r1, #0
 8003d84:	ed97 0a00 	vldr	s0, [r7]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f805 	bl	8003d98 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003d8e:	4603      	mov	r3, r0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003da4:	460b      	mov	r3, r1
 8003da6:	71fb      	strb	r3, [r7, #7]
 8003da8:	4613      	mov	r3, r2
 8003daa:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d109      	bne.n	8003dca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003db6:	79ba      	ldrb	r2, [r7, #6]
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	ed97 0a02 	vldr	s0, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f96b 	bl	800409c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	e008      	b.n	8003ddc <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003dca:	79ba      	ldrb	r2, [r7, #6]
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	ed97 0a02 	vldr	s0, [r7, #8]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fa7d 	bl	80042d4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003dda:	4603      	mov	r3, r0
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3320      	adds	r3, #32
 8003df6:	f107 020b 	add.w	r2, r7, #11
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fdc5 	bl	800498c <lis2dw12_full_scale_get>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0c:	e027      	b.n	8003e5e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8003e0e:	7afb      	ldrb	r3, [r7, #11]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d81b      	bhi.n	8003e4c <LIS2DW12_ACC_GetFullScale+0x68>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <LIS2DW12_ACC_GetFullScale+0x38>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e2d 	.word	0x08003e2d
 8003e20:	08003e35 	.word	0x08003e35
 8003e24:	08003e3d 	.word	0x08003e3d
 8003e28:	08003e45 	.word	0x08003e45
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	601a      	str	r2, [r3, #0]
      break;
 8003e32:	e013      	b.n	8003e5c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2204      	movs	r2, #4
 8003e38:	601a      	str	r2, [r3, #0]
      break;
 8003e3a:	e00f      	b.n	8003e5c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2208      	movs	r2, #8
 8003e40:	601a      	str	r2, [r3, #0]
      break;
 8003e42:	e00b      	b.n	8003e5c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2210      	movs	r2, #16
 8003e48:	601a      	str	r2, [r3, #0]
      break;
 8003e4a:	e007      	b.n	8003e5c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e52:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	60fb      	str	r3, [r7, #12]
      break;
 8003e5a:	bf00      	nop
  }

  return ret;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop

08003e68 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	dd0b      	ble.n	8003e90 <LIS2DW12_ACC_SetFullScale+0x28>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	dd06      	ble.n	8003e8c <LIS2DW12_ACC_SetFullScale+0x24>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	dc01      	bgt.n	8003e88 <LIS2DW12_ACC_SetFullScale+0x20>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e004      	b.n	8003e92 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e002      	b.n	8003e92 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003e90:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003e92:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3320      	adds	r3, #32
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fd4f 	bl	8004940 <lis2dw12_full_scale_set>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eac:	e000      	b.n	8003eb0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3320      	adds	r3, #32
 8003eca:	f107 020b 	add.w	r2, r7, #11
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fb45 	bl	8004560 <lis2dw12_power_mode_get>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	e068      	b.n	8003fb4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3320      	adds	r3, #32
 8003ee6:	f107 020c 	add.w	r2, r7, #12
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd85 	bl	80049fc <lis2dw12_acceleration_raw_get>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	e05a      	b.n	8003fb4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 8003efe:	7afb      	ldrb	r3, [r7, #11]
 8003f00:	2b1b      	cmp	r3, #27
 8003f02:	bf8c      	ite	hi
 8003f04:	2201      	movhi	r2, #1
 8003f06:	2200      	movls	r2, #0
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	d14d      	bne.n	8003faa <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003f0e:	2201      	movs	r2, #1
 8003f10:	409a      	lsls	r2, r3
 8003f12:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003f16:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf14      	ite	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	2300      	moveq	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d124      	bne.n	8003f72 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8003f28:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d037      	beq.n	8003faa <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003f3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	da00      	bge.n	8003f44 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8003f42:	330f      	adds	r3, #15
 8003f44:	111b      	asrs	r3, r3, #4
 8003f46:	b21a      	sxth	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8003f4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da00      	bge.n	8003f56 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8003f54:	330f      	adds	r3, #15
 8003f56:	111b      	asrs	r3, r3, #4
 8003f58:	b21a      	sxth	r2, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003f5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	da00      	bge.n	8003f68 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8003f66:	330f      	adds	r3, #15
 8003f68:	111b      	asrs	r3, r3, #4
 8003f6a:	b21a      	sxth	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	809a      	strh	r2, [r3, #4]
      break;
 8003f70:	e01f      	b.n	8003fb2 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003f72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da00      	bge.n	8003f7c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 8003f7a:	3303      	adds	r3, #3
 8003f7c:	109b      	asrs	r3, r3, #2
 8003f7e:	b21a      	sxth	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da00      	bge.n	8003f8e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 8003f8c:	3303      	adds	r3, #3
 8003f8e:	109b      	asrs	r3, r3, #2
 8003f90:	b21a      	sxth	r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003f96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	da00      	bge.n	8003fa0 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 8003f9e:	3303      	adds	r3, #3
 8003fa0:	109b      	asrs	r3, r3, #2
 8003fa2:	b21a      	sxth	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	809a      	strh	r2, [r3, #4]
      break;
 8003fa8:	e003      	b.n	8003fb2 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
 8003fae:	617b      	str	r3, [r7, #20]
      break;
 8003fb0:	bf00      	nop
  }

  return ret;
 8003fb2:	697b      	ldr	r3, [r7, #20]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8003fcc:	f107 0310 	add.w	r3, r7, #16
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff70 	bl	8003eb8 <LIS2DW12_ACC_GetAxesRaw>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	e03c      	b.n	800405e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fc9c 	bl	8003928 <LIS2DW12_ACC_GetSensitivity>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	e030      	b.n	800405e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003ffc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004000:	ee07 3a90 	vmov	s15, r3
 8004004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004008:	edd7 7a03 	vldr	s15, [r7, #12]
 800400c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004014:	ee17 2a90 	vmov	r2, s15
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800401c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004020:	ee07 3a90 	vmov	s15, r3
 8004024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004028:	edd7 7a03 	vldr	s15, [r7, #12]
 800402c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004034:	ee17 2a90 	vmov	r2, s15
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800403c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004048:	edd7 7a03 	vldr	s15, [r7, #12]
 800404c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004054:	ee17 2a90 	vmov	r2, s15
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	70fb      	strb	r3, [r7, #3]
 8004072:	4613      	mov	r3, r2
 8004074:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f103 0020 	add.w	r0, r3, #32
 800407c:	1cba      	adds	r2, r7, #2
 800407e:	78f9      	ldrb	r1, [r7, #3]
 8004080:	2301      	movs	r3, #1
 8004082:	f000 fa07 	bl	8004494 <lis2dw12_write_reg>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	e000      	b.n	8004094 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80040a8:	460b      	mov	r3, r1
 80040aa:	71fb      	strb	r3, [r7, #7]
 80040ac:	4613      	mov	r3, r2
 80040ae:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d80b      	bhi.n	80040d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80040b8:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040fd 	.word	0x080040fd
 80040c4:	08004129 	.word	0x08004129
 80040c8:	08004155 	.word	0x08004155
 80040cc:	08004181 	.word	0x08004181
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80040d0:	79bb      	ldrb	r3, [r7, #6]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d002      	beq.n	80040dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80040d6:	2304      	movs	r3, #4
 80040d8:	75fb      	strb	r3, [r7, #23]
          break;
 80040da:	e002      	b.n	80040e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80040dc:	2314      	movs	r3, #20
 80040de:	75fb      	strb	r3, [r7, #23]
          break;
 80040e0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80040e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040e6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80040ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f2:	d400      	bmi.n	80040f6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80040f4:	e05a      	b.n	80041ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80040f6:	4b6f      	ldr	r3, [pc, #444]	@ (80042b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80040f8:	60bb      	str	r3, [r7, #8]
      break;
 80040fa:	e057      	b.n	80041ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80040fc:	79bb      	ldrb	r3, [r7, #6]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d002      	beq.n	8004108 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8004102:	2303      	movs	r3, #3
 8004104:	75fb      	strb	r3, [r7, #23]
          break;
 8004106:	e002      	b.n	800410e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004108:	2313      	movs	r3, #19
 800410a:	75fb      	strb	r3, [r7, #23]
          break;
 800410c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800410e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004112:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80042b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	dc00      	bgt.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8004120:	e044      	b.n	80041ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004122:	4b66      	ldr	r3, [pc, #408]	@ (80042bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004124:	60bb      	str	r3, [r7, #8]
      break;
 8004126:	e041      	b.n	80041ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004128:	79bb      	ldrb	r3, [r7, #6]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d002      	beq.n	8004134 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800412e:	2302      	movs	r3, #2
 8004130:	75fb      	strb	r3, [r7, #23]
          break;
 8004132:	e002      	b.n	800413a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004134:	2312      	movs	r3, #18
 8004136:	75fb      	strb	r3, [r7, #23]
          break;
 8004138:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800413a:	edd7 7a02 	vldr	s15, [r7, #8]
 800413e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80042b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414a:	dc00      	bgt.n	800414e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800414c:	e02e      	b.n	80041ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800414e:	4b5b      	ldr	r3, [pc, #364]	@ (80042bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004150:	60bb      	str	r3, [r7, #8]
      break;
 8004152:	e02b      	b.n	80041ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004154:	79bb      	ldrb	r3, [r7, #6]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d002      	beq.n	8004160 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
          break;
 800415e:	e002      	b.n	8004166 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004160:	2311      	movs	r3, #17
 8004162:	75fb      	strb	r3, [r7, #23]
          break;
 8004164:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004166:	edd7 7a02 	vldr	s15, [r7, #8]
 800416a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80042b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800416e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	dc00      	bgt.n	800417a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8004178:	e018      	b.n	80041ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800417a:	4b50      	ldr	r3, [pc, #320]	@ (80042bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800417c:	60bb      	str	r3, [r7, #8]
      break;
 800417e:	e015      	b.n	80041ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8004180:	79bb      	ldrb	r3, [r7, #6]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d002      	beq.n	800418c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]
          break;
 800418a:	e002      	b.n	8004192 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800418c:	2310      	movs	r3, #16
 800418e:	75fb      	strb	r3, [r7, #23]
          break;
 8004190:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004192:	edd7 7a02 	vldr	s15, [r7, #8]
 8004196:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80042b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800419a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	dc00      	bgt.n	80041a6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80041a4:	e001      	b.n	80041aa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80041a6:	4b45      	ldr	r3, [pc, #276]	@ (80042bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80041a8:	60bb      	str	r3, [r7, #8]
      break;
 80041aa:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80041ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80041b0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80042c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80041b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041bc:	d801      	bhi.n	80041c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80041be:	2301      	movs	r3, #1
 80041c0:	e04d      	b.n	800425e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80041c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80041c6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80041ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d2:	d801      	bhi.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e042      	b.n	800425e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80041d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80041dc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80041e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e8:	d801      	bhi.n	80041ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80041ea:	2303      	movs	r3, #3
 80041ec:	e037      	b.n	800425e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80041ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80041f2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80041f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	d801      	bhi.n	8004204 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8004200:	2304      	movs	r3, #4
 8004202:	e02c      	b.n	800425e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004204:	edd7 7a02 	vldr	s15, [r7, #8]
 8004208:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80042c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 800420c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004214:	d801      	bhi.n	800421a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8004216:	2305      	movs	r3, #5
 8004218:	e021      	b.n	800425e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800421a:	edd7 7a02 	vldr	s15, [r7, #8]
 800421e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80042b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422a:	d801      	bhi.n	8004230 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 800422c:	2306      	movs	r3, #6
 800422e:	e016      	b.n	800425e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004230:	edd7 7a02 	vldr	s15, [r7, #8]
 8004234:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80042cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8004238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	d801      	bhi.n	8004246 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8004242:	2307      	movs	r3, #7
 8004244:	e00b      	b.n	800425e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004246:	edd7 7a02 	vldr	s15, [r7, #8]
 800424a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80042d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800424e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	d801      	bhi.n	800425c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004258:	2308      	movs	r3, #8
 800425a:	e000      	b.n	800425e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800425c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800425e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3320      	adds	r3, #32
 8004264:	7dba      	ldrb	r2, [r7, #22]
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fa33 	bl	80046d4 <lis2dw12_data_rate_set>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
 8004278:	e018      	b.n	80042ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3320      	adds	r3, #32
 800427e:	7dfa      	ldrb	r2, [r7, #23]
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f91e 	bl	80044c4 <lis2dw12_power_mode_set>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	e00b      	b.n	80042ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	79fa      	ldrb	r2, [r7, #7]
 800429e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	79ba      	ldrb	r2, [r7, #6]
 80042a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	41480000 	.word	0x41480000
 80042b8:	43480000 	.word	0x43480000
 80042bc:	43480000 	.word	0x43480000
 80042c0:	3fcccccd 	.word	0x3fcccccd
 80042c4:	42480000 	.word	0x42480000
 80042c8:	42c80000 	.word	0x42c80000
 80042cc:	43c80000 	.word	0x43c80000
 80042d0:	44480000 	.word	0x44480000

080042d4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80042e0:	460b      	mov	r3, r1
 80042e2:	71fb      	strb	r3, [r7, #7]
 80042e4:	4613      	mov	r3, r2
 80042e6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	79fa      	ldrb	r2, [r7, #7]
 80042ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	79ba      	ldrb	r2, [r7, #6]
 80042f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80042f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80042fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80043bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004308:	d801      	bhi.n	800430e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 800430a:	4b2d      	ldr	r3, [pc, #180]	@ (80043c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 800430c:	e04d      	b.n	80043aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 800430e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004312:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431e:	d801      	bhi.n	8004324 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8004320:	4b28      	ldr	r3, [pc, #160]	@ (80043c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8004322:	e042      	b.n	80043aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8004324:	edd7 7a02 	vldr	s15, [r7, #8]
 8004328:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800432c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004334:	d801      	bhi.n	800433a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8004336:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8004338:	e037      	b.n	80043aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 800433a:	edd7 7a02 	vldr	s15, [r7, #8]
 800433e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80043cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434a:	d801      	bhi.n	8004350 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800434c:	4b20      	ldr	r3, [pc, #128]	@ (80043d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800434e:	e02c      	b.n	80043aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8004350:	edd7 7a02 	vldr	s15, [r7, #8]
 8004354:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80043d4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	d801      	bhi.n	8004366 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004362:	4b1d      	ldr	r3, [pc, #116]	@ (80043d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8004364:	e021      	b.n	80043aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8004366:	edd7 7a02 	vldr	s15, [r7, #8]
 800436a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80043dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800436e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004376:	d801      	bhi.n	800437c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004378:	4b19      	ldr	r3, [pc, #100]	@ (80043e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800437a:	e016      	b.n	80043aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 800437c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004380:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80043e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438c:	d801      	bhi.n	8004392 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800438e:	4b16      	ldr	r3, [pc, #88]	@ (80043e8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8004390:	e00b      	b.n	80043aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8004392:	edd7 7a02 	vldr	s15, [r7, #8]
 8004396:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80043ec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800439a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	d801      	bhi.n	80043a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80043a4:	4b12      	ldr	r3, [pc, #72]	@ (80043f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80043a6:	e000      	b.n	80043aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80043a8:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	3fcccccd 	.word	0x3fcccccd
 80043c0:	3fcccccd 	.word	0x3fcccccd
 80043c4:	41480000 	.word	0x41480000
 80043c8:	41c80000 	.word	0x41c80000
 80043cc:	42480000 	.word	0x42480000
 80043d0:	42480000 	.word	0x42480000
 80043d4:	42c80000 	.word	0x42c80000
 80043d8:	42c80000 	.word	0x42c80000
 80043dc:	43480000 	.word	0x43480000
 80043e0:	43480000 	.word	0x43480000
 80043e4:	43c80000 	.word	0x43c80000
 80043e8:	43c80000 	.word	0x43c80000
 80043ec:	44480000 	.word	0x44480000
 80043f0:	44480000 	.word	0x44480000
 80043f4:	44c80000 	.word	0x44c80000

080043f8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	461a      	mov	r2, r3
 8004404:	460b      	mov	r3, r1
 8004406:	72fb      	strb	r3, [r7, #11]
 8004408:	4613      	mov	r3, r2
 800440a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	695c      	ldr	r4, [r3, #20]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	7b1b      	ldrb	r3, [r3, #12]
 8004418:	4618      	mov	r0, r3
 800441a:	7afb      	ldrb	r3, [r7, #11]
 800441c:	b299      	uxth	r1, r3
 800441e:	893b      	ldrh	r3, [r7, #8]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	47a0      	blx	r4
 8004424:	4603      	mov	r3, r0
}
 8004426:	4618      	mov	r0, r3
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	bd90      	pop	{r4, r7, pc}

0800442e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800442e:	b590      	push	{r4, r7, lr}
 8004430:	b087      	sub	sp, #28
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	461a      	mov	r2, r3
 800443a:	460b      	mov	r3, r1
 800443c:	72fb      	strb	r3, [r7, #11]
 800443e:	4613      	mov	r3, r2
 8004440:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	691c      	ldr	r4, [r3, #16]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	7b1b      	ldrb	r3, [r3, #12]
 800444e:	4618      	mov	r0, r3
 8004450:	7afb      	ldrb	r3, [r7, #11]
 8004452:	b299      	uxth	r1, r3
 8004454:	893b      	ldrh	r3, [r7, #8]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	47a0      	blx	r4
 800445a:	4603      	mov	r3, r0
}
 800445c:	4618      	mov	r0, r3
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	bd90      	pop	{r4, r7, pc}

08004464 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	461a      	mov	r2, r3
 8004470:	460b      	mov	r3, r1
 8004472:	72fb      	strb	r3, [r7, #11]
 8004474:	4613      	mov	r3, r2
 8004476:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685c      	ldr	r4, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68d8      	ldr	r0, [r3, #12]
 8004480:	893b      	ldrh	r3, [r7, #8]
 8004482:	7af9      	ldrb	r1, [r7, #11]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	47a0      	blx	r4
 8004488:	6178      	str	r0, [r7, #20]

  return ret;
 800448a:	697b      	ldr	r3, [r7, #20]
}
 800448c:	4618      	mov	r0, r3
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	bd90      	pop	{r4, r7, pc}

08004494 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	461a      	mov	r2, r3
 80044a0:	460b      	mov	r3, r1
 80044a2:	72fb      	strb	r3, [r7, #11]
 80044a4:	4613      	mov	r3, r2
 80044a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681c      	ldr	r4, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68d8      	ldr	r0, [r3, #12]
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	7af9      	ldrb	r1, [r7, #11]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	47a0      	blx	r4
 80044b8:	6178      	str	r0, [r7, #20]

  return ret;
 80044ba:	697b      	ldr	r3, [r7, #20]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd90      	pop	{r4, r7, pc}

080044c4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80044d0:	f107 0210 	add.w	r2, r7, #16
 80044d4:	2301      	movs	r3, #1
 80044d6:	2120      	movs	r1, #32
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ffc3 	bl	8004464 <lis2dw12_read_reg>
 80044de:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d118      	bne.n	8004518 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	7c3b      	ldrb	r3, [r7, #16]
 80044f2:	f362 0383 	bfi	r3, r2, #2, #2
 80044f6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	7c3b      	ldrb	r3, [r7, #16]
 8004502:	f362 0301 	bfi	r3, r2, #0, #2
 8004506:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004508:	f107 0210 	add.w	r2, r7, #16
 800450c:	2301      	movs	r3, #1
 800450e:	2120      	movs	r1, #32
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ffbf 	bl	8004494 <lis2dw12_write_reg>
 8004516:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d107      	bne.n	800452e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800451e:	f107 020c 	add.w	r2, r7, #12
 8004522:	2301      	movs	r3, #1
 8004524:	2125      	movs	r1, #37	@ 0x25
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ff9c 	bl	8004464 <lis2dw12_read_reg>
 800452c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d110      	bne.n	8004556 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	b2da      	uxtb	r2, r3
 800453e:	7b3b      	ldrb	r3, [r7, #12]
 8004540:	f362 0382 	bfi	r3, r2, #2, #1
 8004544:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004546:	f107 020c 	add.w	r2, r7, #12
 800454a:	2301      	movs	r3, #1
 800454c:	2125      	movs	r1, #37	@ 0x25
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ffa0 	bl	8004494 <lis2dw12_write_reg>
 8004554:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004556:	697b      	ldr	r3, [r7, #20]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800456a:	f107 0210 	add.w	r2, r7, #16
 800456e:	2301      	movs	r3, #1
 8004570:	2120      	movs	r1, #32
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ff76 	bl	8004464 <lis2dw12_read_reg>
 8004578:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 80a3 	bne.w	80046c8 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004582:	f107 020c 	add.w	r2, r7, #12
 8004586:	2301      	movs	r3, #1
 8004588:	2125      	movs	r1, #37	@ 0x25
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ff6a 	bl	8004464 <lis2dw12_read_reg>
 8004590:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004592:	7b3b      	ldrb	r3, [r7, #12]
 8004594:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	011a      	lsls	r2, r3, #4
 800459c:	7c3b      	ldrb	r3, [r7, #16]
 800459e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80045a8:	7c3a      	ldrb	r2, [r7, #16]
 80045aa:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80045ae:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80045b0:	4413      	add	r3, r2
 80045b2:	2b1b      	cmp	r3, #27
 80045b4:	f200 8084 	bhi.w	80046c0 <lis2dw12_power_mode_get+0x160>
 80045b8:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <lis2dw12_power_mode_get+0x60>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	08004651 	.word	0x08004651
 80045c4:	08004649 	.word	0x08004649
 80045c8:	08004641 	.word	0x08004641
 80045cc:	08004639 	.word	0x08004639
 80045d0:	08004631 	.word	0x08004631
 80045d4:	080046c1 	.word	0x080046c1
 80045d8:	080046c1 	.word	0x080046c1
 80045dc:	080046c1 	.word	0x080046c1
 80045e0:	08004671 	.word	0x08004671
 80045e4:	08004669 	.word	0x08004669
 80045e8:	08004661 	.word	0x08004661
 80045ec:	08004659 	.word	0x08004659
 80045f0:	080046c1 	.word	0x080046c1
 80045f4:	080046c1 	.word	0x080046c1
 80045f8:	080046c1 	.word	0x080046c1
 80045fc:	080046c1 	.word	0x080046c1
 8004600:	08004699 	.word	0x08004699
 8004604:	08004691 	.word	0x08004691
 8004608:	08004689 	.word	0x08004689
 800460c:	08004681 	.word	0x08004681
 8004610:	08004679 	.word	0x08004679
 8004614:	080046c1 	.word	0x080046c1
 8004618:	080046c1 	.word	0x080046c1
 800461c:	080046c1 	.word	0x080046c1
 8004620:	080046b9 	.word	0x080046b9
 8004624:	080046b1 	.word	0x080046b1
 8004628:	080046a9 	.word	0x080046a9
 800462c:	080046a1 	.word	0x080046a1
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2204      	movs	r2, #4
 8004634:	701a      	strb	r2, [r3, #0]
        break;
 8004636:	e047      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2203      	movs	r2, #3
 800463c:	701a      	strb	r2, [r3, #0]
        break;
 800463e:	e043      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2202      	movs	r2, #2
 8004644:	701a      	strb	r2, [r3, #0]
        break;
 8004646:	e03f      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
        break;
 800464e:	e03b      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
        break;
 8004656:	e037      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	220b      	movs	r2, #11
 800465c:	701a      	strb	r2, [r3, #0]
        break;
 800465e:	e033      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	220a      	movs	r2, #10
 8004664:	701a      	strb	r2, [r3, #0]
        break;
 8004666:	e02f      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2209      	movs	r2, #9
 800466c:	701a      	strb	r2, [r3, #0]
        break;
 800466e:	e02b      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2208      	movs	r2, #8
 8004674:	701a      	strb	r2, [r3, #0]
        break;
 8004676:	e027      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2214      	movs	r2, #20
 800467c:	701a      	strb	r2, [r3, #0]
        break;
 800467e:	e023      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2213      	movs	r2, #19
 8004684:	701a      	strb	r2, [r3, #0]
        break;
 8004686:	e01f      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2212      	movs	r2, #18
 800468c:	701a      	strb	r2, [r3, #0]
        break;
 800468e:	e01b      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2211      	movs	r2, #17
 8004694:	701a      	strb	r2, [r3, #0]
        break;
 8004696:	e017      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2210      	movs	r2, #16
 800469c:	701a      	strb	r2, [r3, #0]
        break;
 800469e:	e013      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	221b      	movs	r2, #27
 80046a4:	701a      	strb	r2, [r3, #0]
        break;
 80046a6:	e00f      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	221a      	movs	r2, #26
 80046ac:	701a      	strb	r2, [r3, #0]
        break;
 80046ae:	e00b      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2219      	movs	r2, #25
 80046b4:	701a      	strb	r2, [r3, #0]
        break;
 80046b6:	e007      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2218      	movs	r2, #24
 80046bc:	701a      	strb	r2, [r3, #0]
        break;
 80046be:	e003      	b.n	80046c8 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2204      	movs	r2, #4
 80046c4:	701a      	strb	r2, [r3, #0]
        break;
 80046c6:	bf00      	nop
    }
  }

  return ret;
 80046c8:	697b      	ldr	r3, [r7, #20]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop

080046d4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80046e0:	f107 0210 	add.w	r2, r7, #16
 80046e4:	2301      	movs	r3, #1
 80046e6:	2120      	movs	r1, #32
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff febb 	bl	8004464 <lis2dw12_read_reg>
 80046ee:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	7c3b      	ldrb	r3, [r7, #16]
 8004700:	f362 1307 	bfi	r3, r2, #4, #4
 8004704:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004706:	f107 0210 	add.w	r2, r7, #16
 800470a:	2301      	movs	r3, #1
 800470c:	2120      	movs	r1, #32
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fec0 	bl	8004494 <lis2dw12_write_reg>
 8004714:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800471c:	f107 020c 	add.w	r2, r7, #12
 8004720:	2301      	movs	r3, #1
 8004722:	2122      	movs	r1, #34	@ 0x22
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fe9d 	bl	8004464 <lis2dw12_read_reg>
 800472a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d110      	bne.n	8004754 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	b2da      	uxtb	r2, r3
 800473c:	7b3b      	ldrb	r3, [r7, #12]
 800473e:	f362 0301 	bfi	r3, r2, #0, #2
 8004742:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004744:	f107 020c 	add.w	r2, r7, #12
 8004748:	2301      	movs	r3, #1
 800474a:	2122      	movs	r1, #34	@ 0x22
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff fea1 	bl	8004494 <lis2dw12_write_reg>
 8004752:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004754:	697b      	ldr	r3, [r7, #20]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800476a:	f107 0210 	add.w	r2, r7, #16
 800476e:	2301      	movs	r3, #1
 8004770:	2120      	movs	r1, #32
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fe76 	bl	8004464 <lis2dw12_read_reg>
 8004778:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 80b3 	bne.w	80048e8 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004782:	f107 020c 	add.w	r2, r7, #12
 8004786:	2301      	movs	r3, #1
 8004788:	2122      	movs	r1, #34	@ 0x22
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fe6a 	bl	8004464 <lis2dw12_read_reg>
 8004790:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004792:	7b3b      	ldrb	r3, [r7, #12]
 8004794:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004798:	b2db      	uxtb	r3, r3
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	7c3a      	ldrb	r2, [r7, #16]
 800479e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	4413      	add	r3, r2
 80047a6:	2b32      	cmp	r3, #50	@ 0x32
 80047a8:	f200 809a 	bhi.w	80048e0 <lis2dw12_data_rate_get+0x180>
 80047ac:	a201      	add	r2, pc, #4	@ (adr r2, 80047b4 <lis2dw12_data_rate_get+0x54>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	08004881 	.word	0x08004881
 80047b8:	08004889 	.word	0x08004889
 80047bc:	08004891 	.word	0x08004891
 80047c0:	08004899 	.word	0x08004899
 80047c4:	080048a1 	.word	0x080048a1
 80047c8:	080048a9 	.word	0x080048a9
 80047cc:	080048b1 	.word	0x080048b1
 80047d0:	080048b9 	.word	0x080048b9
 80047d4:	080048c1 	.word	0x080048c1
 80047d8:	080048c9 	.word	0x080048c9
 80047dc:	080048e1 	.word	0x080048e1
 80047e0:	080048e1 	.word	0x080048e1
 80047e4:	080048e1 	.word	0x080048e1
 80047e8:	080048e1 	.word	0x080048e1
 80047ec:	080048e1 	.word	0x080048e1
 80047f0:	080048e1 	.word	0x080048e1
 80047f4:	080048e1 	.word	0x080048e1
 80047f8:	080048e1 	.word	0x080048e1
 80047fc:	080048d9 	.word	0x080048d9
 8004800:	080048e1 	.word	0x080048e1
 8004804:	080048e1 	.word	0x080048e1
 8004808:	080048e1 	.word	0x080048e1
 800480c:	080048e1 	.word	0x080048e1
 8004810:	080048e1 	.word	0x080048e1
 8004814:	080048e1 	.word	0x080048e1
 8004818:	080048e1 	.word	0x080048e1
 800481c:	080048e1 	.word	0x080048e1
 8004820:	080048e1 	.word	0x080048e1
 8004824:	080048e1 	.word	0x080048e1
 8004828:	080048e1 	.word	0x080048e1
 800482c:	080048e1 	.word	0x080048e1
 8004830:	080048e1 	.word	0x080048e1
 8004834:	080048e1 	.word	0x080048e1
 8004838:	080048e1 	.word	0x080048e1
 800483c:	080048e1 	.word	0x080048e1
 8004840:	080048e1 	.word	0x080048e1
 8004844:	080048e1 	.word	0x080048e1
 8004848:	080048e1 	.word	0x080048e1
 800484c:	080048e1 	.word	0x080048e1
 8004850:	080048e1 	.word	0x080048e1
 8004854:	080048e1 	.word	0x080048e1
 8004858:	080048e1 	.word	0x080048e1
 800485c:	080048e1 	.word	0x080048e1
 8004860:	080048e1 	.word	0x080048e1
 8004864:	080048e1 	.word	0x080048e1
 8004868:	080048e1 	.word	0x080048e1
 800486c:	080048e1 	.word	0x080048e1
 8004870:	080048e1 	.word	0x080048e1
 8004874:	080048e1 	.word	0x080048e1
 8004878:	080048e1 	.word	0x080048e1
 800487c:	080048d1 	.word	0x080048d1
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
        break;
 8004886:	e02f      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
        break;
 800488e:	e02b      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2202      	movs	r2, #2
 8004894:	701a      	strb	r2, [r3, #0]
        break;
 8004896:	e027      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2203      	movs	r2, #3
 800489c:	701a      	strb	r2, [r3, #0]
        break;
 800489e:	e023      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2204      	movs	r2, #4
 80048a4:	701a      	strb	r2, [r3, #0]
        break;
 80048a6:	e01f      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2205      	movs	r2, #5
 80048ac:	701a      	strb	r2, [r3, #0]
        break;
 80048ae:	e01b      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2206      	movs	r2, #6
 80048b4:	701a      	strb	r2, [r3, #0]
        break;
 80048b6:	e017      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2207      	movs	r2, #7
 80048bc:	701a      	strb	r2, [r3, #0]
        break;
 80048be:	e013      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2208      	movs	r2, #8
 80048c4:	701a      	strb	r2, [r3, #0]
        break;
 80048c6:	e00f      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2209      	movs	r2, #9
 80048cc:	701a      	strb	r2, [r3, #0]
        break;
 80048ce:	e00b      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2232      	movs	r2, #50	@ 0x32
 80048d4:	701a      	strb	r2, [r3, #0]
        break;
 80048d6:	e007      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2212      	movs	r2, #18
 80048dc:	701a      	strb	r2, [r3, #0]
        break;
 80048de:	e003      	b.n	80048e8 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
        break;
 80048e6:	bf00      	nop
    }
  }

  return ret;
 80048e8:	697b      	ldr	r3, [r7, #20]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop

080048f4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004900:	f107 0208 	add.w	r2, r7, #8
 8004904:	2301      	movs	r3, #1
 8004906:	2121      	movs	r1, #33	@ 0x21
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fdab 	bl	8004464 <lis2dw12_read_reg>
 800490e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	b2da      	uxtb	r2, r3
 800491e:	7a3b      	ldrb	r3, [r7, #8]
 8004920:	f362 03c3 	bfi	r3, r2, #3, #1
 8004924:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004926:	f107 0208 	add.w	r2, r7, #8
 800492a:	2301      	movs	r3, #1
 800492c:	2121      	movs	r1, #33	@ 0x21
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff fdb0 	bl	8004494 <lis2dw12_write_reg>
 8004934:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004936:	68fb      	ldr	r3, [r7, #12]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800494c:	f107 0208 	add.w	r2, r7, #8
 8004950:	2301      	movs	r3, #1
 8004952:	2125      	movs	r1, #37	@ 0x25
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fd85 	bl	8004464 <lis2dw12_read_reg>
 800495a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	b2da      	uxtb	r2, r3
 800496a:	7a3b      	ldrb	r3, [r7, #8]
 800496c:	f362 1305 	bfi	r3, r2, #4, #2
 8004970:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004972:	f107 0208 	add.w	r2, r7, #8
 8004976:	2301      	movs	r3, #1
 8004978:	2125      	movs	r1, #37	@ 0x25
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fd8a 	bl	8004494 <lis2dw12_write_reg>
 8004980:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004996:	f107 0208 	add.w	r2, r7, #8
 800499a:	2301      	movs	r3, #1
 800499c:	2125      	movs	r1, #37	@ 0x25
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff fd60 	bl	8004464 <lis2dw12_read_reg>
 80049a4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80049a6:	7a3b      	ldrb	r3, [r7, #8]
 80049a8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d81a      	bhi.n	80049e8 <lis2dw12_full_scale_get+0x5c>
 80049b2:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <lis2dw12_full_scale_get+0x2c>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049c9 	.word	0x080049c9
 80049bc:	080049d1 	.word	0x080049d1
 80049c0:	080049d9 	.word	0x080049d9
 80049c4:	080049e1 	.word	0x080049e1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
      break;
 80049ce:	e00f      	b.n	80049f0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
      break;
 80049d6:	e00b      	b.n	80049f0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]
      break;
 80049de:	e007      	b.n	80049f0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2203      	movs	r2, #3
 80049e4:	701a      	strb	r2, [r3, #0]
      break;
 80049e6:	e003      	b.n	80049f0 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
      break;
 80049ee:	bf00      	nop
  }

  return ret;
 80049f0:	68fb      	ldr	r3, [r7, #12]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop

080049fc <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004a06:	f107 020c 	add.w	r2, r7, #12
 8004a0a:	2306      	movs	r3, #6
 8004a0c:	2128      	movs	r1, #40	@ 0x28
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fd28 	bl	8004464 <lis2dw12_read_reg>
 8004a14:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004a16:	7b7b      	ldrb	r3, [r7, #13]
 8004a18:	b21a      	sxth	r2, r3
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	7b3a      	ldrb	r2, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	b21a      	sxth	r2, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004a36:	7bfa      	ldrb	r2, [r7, #15]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	b212      	sxth	r2, r2
 8004a3e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	3302      	adds	r3, #2
 8004a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	7bba      	ldrb	r2, [r7, #14]
 8004a50:	4413      	add	r3, r2
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	3302      	adds	r3, #2
 8004a58:	b212      	sxth	r2, r2
 8004a5a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004a5c:	7c7a      	ldrb	r2, [r7, #17]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	3304      	adds	r3, #4
 8004a62:	b212      	sxth	r2, r2
 8004a64:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	7c3a      	ldrb	r2, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	b212      	sxth	r2, r2
 8004a80:	801a      	strh	r2, [r3, #0]

  return ret;
 8004a82:	697b      	ldr	r3, [r7, #20]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004a96:	2301      	movs	r3, #1
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	210f      	movs	r1, #15
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fce1 	bl	8004464 <lis2dw12_read_reg>
 8004aa2:	60f8      	str	r0, [r7, #12]

  return ret;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004aba:	f107 0208 	add.w	r2, r7, #8
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2121      	movs	r1, #33	@ 0x21
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff fcce 	bl	8004464 <lis2dw12_read_reg>
 8004ac8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10f      	bne.n	8004af0 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	7a3b      	ldrb	r3, [r7, #8]
 8004ada:	f362 0382 	bfi	r3, r2, #2, #1
 8004ade:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004ae0:	f107 0208 	add.w	r2, r7, #8
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	2121      	movs	r1, #33	@ 0x21
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff fcd3 	bl	8004494 <lis2dw12_write_reg>
 8004aee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004af0:	68fb      	ldr	r3, [r7, #12]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004b06:	f107 0208 	add.w	r2, r7, #8
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	212e      	movs	r1, #46	@ 0x2e
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff fca8 	bl	8004464 <lis2dw12_read_reg>
 8004b14:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10f      	bne.n	8004b3c <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	7a3b      	ldrb	r3, [r7, #8]
 8004b26:	f362 1347 	bfi	r3, r2, #5, #3
 8004b2a:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004b2c:	f107 0208 	add.w	r2, r7, #8
 8004b30:	2301      	movs	r3, #1
 8004b32:	212e      	movs	r1, #46	@ 0x2e
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fcad 	bl	8004494 <lis2dw12_write_reg>
 8004b3a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	e067      	b.n	8004c34 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	7b1a      	ldrb	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a28      	ldr	r2, [pc, #160]	@ (8004c40 <LIS2MDL_RegisterBusIO+0xf8>)
 8004ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a27      	ldr	r2, [pc, #156]	@ (8004c44 <LIS2MDL_RegisterBusIO+0xfc>)
 8004ba6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e036      	b.n	8004c34 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4798      	blx	r3
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e02c      	b.n	8004c34 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d028      	beq.n	8004c34 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d123      	bne.n	8004c34 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d10d      	bne.n	8004c10 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004bf4:	2334      	movs	r3, #52	@ 0x34
 8004bf6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2162      	movs	r1, #98	@ 0x62
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fb18 	bl	8005234 <LIS2MDL_Write_Reg>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d014      	beq.n	8004c34 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0e:	e012      	b.n	8004c36 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d101      	bne.n	8004c1c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	e00c      	b.n	8004c36 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3320      	adds	r3, #32
 8004c20:	2101      	movs	r1, #1
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 ff69 	bl	8005afa <lis2mdl_i2c_interface_set>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c32:	e000      	b.n	8004c36 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004c34:	68fb      	ldr	r3, [r7, #12]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	0800528b 	.word	0x0800528b
 8004c44:	0800530d 	.word	0x0800530d

08004c48 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d144      	bne.n	8004ce2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004c58:	f107 0208 	add.w	r2, r7, #8
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	2162      	movs	r1, #98	@ 0x62
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fb94 	bl	800538e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c70:	e06c      	b.n	8004d4c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004c72:	f107 020c 	add.w	r2, r7, #12
 8004c76:	2301      	movs	r3, #1
 8004c78:	2160      	movs	r1, #96	@ 0x60
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fb87 	bl	800538e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8a:	e05f      	b.n	8004d4c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004c8c:	7a3b      	ldrb	r3, [r7, #8]
 8004c8e:	f043 0310 	orr.w	r3, r3, #16
 8004c92:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004c94:	7a3b      	ldrb	r3, [r7, #8]
 8004c96:	f36f 0341 	bfc	r3, #1, #1
 8004c9a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004c9c:	7b3b      	ldrb	r3, [r7, #12]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f362 0301 	bfi	r3, r2, #0, #2
 8004ca4:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004ca6:	7b3b      	ldrb	r3, [r7, #12]
 8004ca8:	f043 030c 	orr.w	r3, r3, #12
 8004cac:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004cae:	f107 0208 	add.w	r2, r7, #8
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2162      	movs	r1, #98	@ 0x62
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fca8 	bl	800560c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	e041      	b.n	8004d4c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004cc8:	f107 020c 	add.w	r2, r7, #12
 8004ccc:	2301      	movs	r3, #1
 8004cce:	2160      	movs	r1, #96	@ 0x60
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fc9b 	bl	800560c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d032      	beq.n	8004d42 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce0:	e034      	b.n	8004d4c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3320      	adds	r3, #32
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fe61 	bl	80059b0 <lis2mdl_block_data_update_set>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf8:	e028      	b.n	8004d4c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3320      	adds	r3, #32
 8004cfe:	2102      	movs	r1, #2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fdd1 	bl	80058a8 <lis2mdl_operating_mode_set>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d10:	e01c      	b.n	8004d4c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3320      	adds	r3, #32
 8004d16:	2103      	movs	r1, #3
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fdeb 	bl	80058f4 <lis2mdl_data_rate_set>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295
 8004d28:	e010      	b.n	8004d4c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3320      	adds	r3, #32
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 febc 	bl	8005aae <lis2mdl_self_test_set>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d40:	e004      	b.n	8004d4c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f8a5 	bl	8004eac <LIS2MDL_MAG_Disable>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004d68:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6c:	e004      	b.n	8004d78 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d10b      	bne.n	8004daa <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004d92:	2301      	movs	r3, #1
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	214f      	movs	r1, #79	@ 0x4f
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 faf8 	bl	800538e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00e      	beq.n	8004dc2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	e00c      	b.n	8004dc4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3320      	adds	r3, #32
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fe6b 	bl	8005a8c <lis2mdl_device_id_get>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc0:	e000      	b.n	8004dc4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2200      	movs	r2, #0
 8004de0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2201      	movs	r2, #1
 8004de6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2200      	movs	r2, #0
 8004df2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2232      	movs	r2, #50	@ 0x32
 8004dfe:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4a04      	ldr	r2, [pc, #16]	@ (8004e24 <LIS2MDL_GetCapabilities+0x58>)
 8004e14:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	42c80000 	.word	0x42c80000

08004e28 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e032      	b.n	8004ea4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d11d      	bne.n	8004e82 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004e46:	f107 020c 	add.w	r2, r7, #12
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	2160      	movs	r1, #96	@ 0x60
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa9d 	bl	800538e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5e:	e021      	b.n	8004ea4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004e60:	7b3b      	ldrb	r3, [r7, #12]
 8004e62:	f36f 0301 	bfc	r3, #0, #2
 8004e66:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004e68:	f107 020c 	add.w	r2, r7, #12
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	2160      	movs	r1, #96	@ 0x60
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fbcb 	bl	800560c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00e      	beq.n	8004e9a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e80:	e010      	b.n	8004ea4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3320      	adds	r3, #32
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fd0d 	bl	80058a8 <lis2mdl_operating_mode_set>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004e94:	f04f 33ff 	mov.w	r3, #4294967295
 8004e98:	e004      	b.n	8004ea4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e033      	b.n	8004f2a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d11e      	bne.n	8004f08 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004eca:	f107 020c 	add.w	r2, r7, #12
 8004ece:	2301      	movs	r3, #1
 8004ed0:	2160      	movs	r1, #96	@ 0x60
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa5b 	bl	800538e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	e022      	b.n	8004f2a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004ee4:	7b3b      	ldrb	r3, [r7, #12]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f362 0301 	bfi	r3, r2, #0, #2
 8004eec:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004eee:	f107 020c 	add.w	r2, r7, #12
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	2160      	movs	r1, #96	@ 0x60
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fb88 	bl	800560c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00e      	beq.n	8004f20 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004f02:	f04f 33ff 	mov.w	r3, #4294967295
 8004f06:	e010      	b.n	8004f2a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3320      	adds	r3, #32
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fcca 	bl	80058a8 <lis2mdl_operating_mode_set>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1e:	e004      	b.n	8004f2a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004f42:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3320      	adds	r3, #32
 8004f66:	f107 020b 	add.w	r2, r7, #11
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fce7 	bl	8005940 <lis2mdl_data_rate_get>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7c:	e023      	b.n	8004fc6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004f7e:	7afb      	ldrb	r3, [r7, #11]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d81b      	bhi.n	8004fbc <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004f84:	a201      	add	r2, pc, #4	@ (adr r2, 8004f8c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004fa5 	.word	0x08004fa5
 8004f94:	08004fad 	.word	0x08004fad
 8004f98:	08004fb5 	.word	0x08004fb5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fd0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004fa0:	601a      	str	r2, [r3, #0]
      break;
 8004fa2:	e00f      	b.n	8004fc4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004fa8:	601a      	str	r2, [r3, #0]
      break;
 8004faa:	e00b      	b.n	8004fc4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004fb0:	601a      	str	r2, [r3, #0]
      break;
 8004fb2:	e007      	b.n	8004fc4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	4a09      	ldr	r2, [pc, #36]	@ (8004fdc <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004fb8:	601a      	str	r2, [r3, #0]
      break;
 8004fba:	e003      	b.n	8004fc4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc0:	60fb      	str	r3, [r7, #12]
      break;
 8004fc2:	bf00      	nop
  }

  return ret;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	41200000 	.word	0x41200000
 8004fd4:	41a00000 	.word	0x41a00000
 8004fd8:	42480000 	.word	0x42480000
 8004fdc:	42c80000 	.word	0x42c80000

08004fe0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004fec:	edd7 7a00 	vldr	s15, [r7]
 8004ff0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffc:	d801      	bhi.n	8005002 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004ffe:	2300      	movs	r3, #0
 8005000:	e016      	b.n	8005030 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005002:	edd7 7a00 	vldr	s15, [r7]
 8005006:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800500a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800500e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005012:	d801      	bhi.n	8005018 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005014:	2301      	movs	r3, #1
 8005016:	e00b      	b.n	8005030 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005018:	edd7 7a00 	vldr	s15, [r7]
 800501c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80050a4 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8005020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005028:	d801      	bhi.n	800502e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800502a:	2302      	movs	r3, #2
 800502c:	e000      	b.n	8005030 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800502e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8005030:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b03      	cmp	r3, #3
 8005038:	d121      	bne.n	800507e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800503a:	f107 020c 	add.w	r2, r7, #12
 800503e:	2301      	movs	r3, #1
 8005040:	2160      	movs	r1, #96	@ 0x60
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9a3 	bl	800538e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800504e:	f04f 33ff 	mov.w	r3, #4294967295
 8005052:	e022      	b.n	800509a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	b2da      	uxtb	r2, r3
 800505c:	7b3b      	ldrb	r3, [r7, #12]
 800505e:	f362 0383 	bfi	r3, r2, #2, #2
 8005062:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005064:	f107 020c 	add.w	r2, r7, #12
 8005068:	2301      	movs	r3, #1
 800506a:	2160      	movs	r1, #96	@ 0x60
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 facd 	bl	800560c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00f      	beq.n	8005098 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005078:	f04f 33ff 	mov.w	r3, #4294967295
 800507c:	e00d      	b.n	800509a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3320      	adds	r3, #32
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fc34 	bl	80058f4 <lis2mdl_data_rate_set>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005092:	f04f 33ff 	mov.w	r3, #4294967295
 8005096:	e000      	b.n	800509a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	42480000 	.word	0x42480000

080050a8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2232      	movs	r2, #50	@ 0x32
 80050b6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3320      	adds	r3, #32
 80050ec:	f107 0208 	add.w	r2, r7, #8
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fc82 	bl	80059fc <lis2mdl_magnetic_raw_get>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005102:	e00c      	b.n	800511e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005104:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800510c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005114:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b088      	sub	sp, #32
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d134      	bne.n	80051a2 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005138:	f107 0218 	add.w	r2, r7, #24
 800513c:	2306      	movs	r3, #6
 800513e:	2168      	movs	r1, #104	@ 0x68
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f924 	bl	800538e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800514c:	f04f 33ff 	mov.w	r3, #4294967295
 8005150:	e06c      	b.n	800522c <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005152:	7e7b      	ldrb	r3, [r7, #25]
 8005154:	b21b      	sxth	r3, r3
 8005156:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005158:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800515c:	b29b      	uxth	r3, r3
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	b29b      	uxth	r3, r3
 8005162:	7e3a      	ldrb	r2, [r7, #24]
 8005164:	4413      	add	r3, r2
 8005166:	b29b      	uxth	r3, r3
 8005168:	b21b      	sxth	r3, r3
 800516a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800516c:	7efb      	ldrb	r3, [r7, #27]
 800516e:	b21b      	sxth	r3, r3
 8005170:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8005172:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005176:	b29b      	uxth	r3, r3
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	b29b      	uxth	r3, r3
 800517c:	7eba      	ldrb	r2, [r7, #26]
 800517e:	4413      	add	r3, r2
 8005180:	b29b      	uxth	r3, r3
 8005182:	b21b      	sxth	r3, r3
 8005184:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8005186:	7f7b      	ldrb	r3, [r7, #29]
 8005188:	b21b      	sxth	r3, r3
 800518a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800518c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005190:	b29b      	uxth	r3, r3
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	b29b      	uxth	r3, r3
 8005196:	7f3a      	ldrb	r2, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	b29b      	uxth	r3, r3
 800519c:	b21b      	sxth	r3, r3
 800519e:	82bb      	strh	r3, [r7, #20]
 80051a0:	e00d      	b.n	80051be <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3320      	adds	r3, #32
 80051a6:	f107 0210 	add.w	r2, r7, #16
 80051aa:	4611      	mov	r1, r2
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fc25 	bl	80059fc <lis2mdl_magnetic_raw_get>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	e036      	b.n	800522c <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80051be:	f107 030c 	add.w	r3, r7, #12
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff feb4 	bl	8004f32 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80051ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80051da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051e2:	ee17 2a90 	vmov	r2, s15
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80051ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005202:	ee17 2a90 	vmov	r2, s15
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800520a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005216:	edd7 7a03 	vldr	s15, [r7, #12]
 800521a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005222:	ee17 2a90 	vmov	r2, s15
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
 8005240:	4613      	mov	r3, r2
 8005242:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b03      	cmp	r3, #3
 800524a:	d10b      	bne.n	8005264 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800524c:	1cba      	adds	r2, r7, #2
 800524e:	78f9      	ldrb	r1, [r7, #3]
 8005250:	2301      	movs	r3, #1
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9da 	bl	800560c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d010      	beq.n	8005280 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	e00e      	b.n	8005282 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f103 0020 	add.w	r0, r3, #32
 800526a:	1cba      	adds	r2, r7, #2
 800526c:	78f9      	ldrb	r1, [r7, #3]
 800526e:	2301      	movs	r3, #1
 8005270:	f000 fb02 	bl	8005878 <lis2mdl_write_reg>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800527a:	f04f 33ff 	mov.w	r3, #4294967295
 800527e:	e000      	b.n	8005282 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800528a:	b590      	push	{r4, r7, lr}
 800528c:	b087      	sub	sp, #28
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	461a      	mov	r2, r3
 8005296:	460b      	mov	r3, r1
 8005298:	72fb      	strb	r3, [r7, #11]
 800529a:	4613      	mov	r3, r2
 800529c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10e      	bne.n	80052c8 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	695c      	ldr	r4, [r3, #20]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	7b1b      	ldrb	r3, [r3, #12]
 80052b2:	4618      	mov	r0, r3
 80052b4:	7afb      	ldrb	r3, [r7, #11]
 80052b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	4619      	mov	r1, r3
 80052be:	893b      	ldrh	r3, [r7, #8]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	47a0      	blx	r4
 80052c4:	4603      	mov	r3, r0
 80052c6:	e01d      	b.n	8005304 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d10b      	bne.n	80052e8 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	695c      	ldr	r4, [r3, #20]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	7b1b      	ldrb	r3, [r3, #12]
 80052d8:	4618      	mov	r0, r3
 80052da:	7afb      	ldrb	r3, [r7, #11]
 80052dc:	b299      	uxth	r1, r3
 80052de:	893b      	ldrh	r3, [r7, #8]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	47a0      	blx	r4
 80052e4:	4603      	mov	r3, r0
 80052e6:	e00d      	b.n	8005304 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	695c      	ldr	r4, [r3, #20]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	7b1b      	ldrb	r3, [r3, #12]
 80052f0:	4618      	mov	r0, r3
 80052f2:	7afb      	ldrb	r3, [r7, #11]
 80052f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	4619      	mov	r1, r3
 80052fc:	893b      	ldrh	r3, [r7, #8]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	47a0      	blx	r4
 8005302:	4603      	mov	r3, r0
  }
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	bd90      	pop	{r4, r7, pc}

0800530c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	461a      	mov	r2, r3
 8005318:	460b      	mov	r3, r1
 800531a:	72fb      	strb	r3, [r7, #11]
 800531c:	4613      	mov	r3, r2
 800531e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10e      	bne.n	800534a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	691c      	ldr	r4, [r3, #16]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	7b1b      	ldrb	r3, [r3, #12]
 8005334:	4618      	mov	r0, r3
 8005336:	7afb      	ldrb	r3, [r7, #11]
 8005338:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800533c:	b2db      	uxtb	r3, r3
 800533e:	4619      	mov	r1, r3
 8005340:	893b      	ldrh	r3, [r7, #8]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	47a0      	blx	r4
 8005346:	4603      	mov	r3, r0
 8005348:	e01d      	b.n	8005386 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b03      	cmp	r3, #3
 8005350:	d10b      	bne.n	800536a <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	691c      	ldr	r4, [r3, #16]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	7b1b      	ldrb	r3, [r3, #12]
 800535a:	4618      	mov	r0, r3
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	b299      	uxth	r1, r3
 8005360:	893b      	ldrh	r3, [r7, #8]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	47a0      	blx	r4
 8005366:	4603      	mov	r3, r0
 8005368:	e00d      	b.n	8005386 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	691c      	ldr	r4, [r3, #16]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	7b1b      	ldrb	r3, [r3, #12]
 8005372:	4618      	mov	r0, r3
 8005374:	7afb      	ldrb	r3, [r7, #11]
 8005376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800537a:	b2db      	uxtb	r3, r3
 800537c:	4619      	mov	r1, r3
 800537e:	893b      	ldrh	r3, [r7, #8]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	47a0      	blx	r4
 8005384:	4603      	mov	r3, r0
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	bd90      	pop	{r4, r7, pc}

0800538e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b08c      	sub	sp, #48	@ 0x30
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	461a      	mov	r2, r3
 800539a:	460b      	mov	r3, r1
 800539c:	72fb      	strb	r3, [r7, #11]
 800539e:	4613      	mov	r3, r2
 80053a0:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80053a8:	2340      	movs	r3, #64	@ 0x40
 80053aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80053b4:	233d      	movs	r3, #61	@ 0x3d
 80053b6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80053b8:	2315      	movs	r3, #21
 80053ba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80053be:	2316      	movs	r3, #22
 80053c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80053c4:	2317      	movs	r3, #23
 80053c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 80053ca:	2314      	movs	r3, #20
 80053cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80053d0:	2344      	movs	r3, #68	@ 0x44
 80053d2:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80053d4:	2302      	movs	r3, #2
 80053d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80053da:	2339      	movs	r3, #57	@ 0x39
 80053dc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80053e6:	2329      	movs	r3, #41	@ 0x29
 80053e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80053ec:	231e      	movs	r3, #30
 80053ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 80053f8:	893b      	ldrh	r3, [r7, #8]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80053fe:	2310      	movs	r3, #16
 8005400:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005404:	2300      	movs	r3, #0
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800540a:	2340      	movs	r3, #64	@ 0x40
 800540c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f103 0020 	add.w	r0, r3, #32
 8005416:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800541a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800541e:	2301      	movs	r3, #1
 8005420:	f000 fa2a 	bl	8005878 <lis2mdl_write_reg>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 800542a:	f04f 33ff 	mov.w	r3, #4294967295
 800542e:	e0e9      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f103 0020 	add.w	r0, r3, #32
 8005436:	f107 021f 	add.w	r2, r7, #31
 800543a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800543e:	2301      	movs	r3, #1
 8005440:	f000 fa1a 	bl	8005878 <lis2mdl_write_reg>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800544a:	f04f 33ff 	mov.w	r3, #4294967295
 800544e:	e0d9      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f103 0020 	add.w	r0, r3, #32
 8005456:	f107 020b 	add.w	r2, r7, #11
 800545a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800545e:	2301      	movs	r3, #1
 8005460:	f000 fa0a 	bl	8005878 <lis2mdl_write_reg>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800546a:	f04f 33ff 	mov.w	r3, #4294967295
 800546e:	e0c9      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f103 0020 	add.w	r0, r3, #32
 8005476:	f107 021d 	add.w	r2, r7, #29
 800547a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800547e:	2301      	movs	r3, #1
 8005480:	f000 f9fa 	bl	8005878 <lis2mdl_write_reg>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	e0b9      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f103 0020 	add.w	r0, r3, #32
 8005496:	f107 021e 	add.w	r2, r7, #30
 800549a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800549e:	2301      	movs	r3, #1
 80054a0:	f000 f9ea 	bl	8005878 <lis2mdl_write_reg>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	e0a9      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f103 0020 	add.w	r0, r3, #32
 80054b6:	f107 0220 	add.w	r2, r7, #32
 80054ba:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80054be:	2301      	movs	r3, #1
 80054c0:	f000 f9da 	bl	8005878 <lis2mdl_write_reg>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80054ca:	f04f 33ff 	mov.w	r3, #4294967295
 80054ce:	e099      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f103 0020 	add.w	r0, r3, #32
 80054d6:	f107 021c 	add.w	r2, r7, #28
 80054da:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80054de:	2301      	movs	r3, #1
 80054e0:	f000 f9b2 	bl	8005848 <lis2mdl_read_reg>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80054ea:	f04f 33ff 	mov.w	r3, #4294967295
 80054ee:	e089      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80054f0:	7f3b      	ldrb	r3, [r7, #28]
 80054f2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d102      	bne.n	8005500 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80054fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80054fe:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f103 0020 	add.w	r0, r3, #32
 8005506:	f107 021c 	add.w	r2, r7, #28
 800550a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800550e:	2301      	movs	r3, #1
 8005510:	f000 f9b2 	bl	8005878 <lis2mdl_write_reg>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 800551a:	f04f 33ff 	mov.w	r3, #4294967295
 800551e:	e071      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f103 0020 	add.w	r0, r3, #32
 8005526:	f107 0214 	add.w	r2, r7, #20
 800552a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800552e:	2306      	movs	r3, #6
 8005530:	f000 f98a 	bl	8005848 <lis2mdl_read_reg>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
 800553e:	e061      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f103 0020 	add.w	r0, r3, #32
 8005546:	f107 021b 	add.w	r2, r7, #27
 800554a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800554e:	2301      	movs	r3, #1
 8005550:	f000 f97a 	bl	8005848 <lis2mdl_read_reg>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	e051      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005560:	7efa      	ldrb	r2, [r7, #27]
 8005562:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005566:	4013      	ands	r3, r2
 8005568:	b2db      	uxtb	r3, r3
 800556a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800556e:	429a      	cmp	r2, r3
 8005570:	d1e6      	bne.n	8005540 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f103 0020 	add.w	r0, r3, #32
 8005578:	f107 021b 	add.w	r2, r7, #27
 800557c:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8005580:	2301      	movs	r3, #1
 8005582:	f000 f961 	bl	8005848 <lis2mdl_read_reg>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800558c:	f04f 33ff 	mov.w	r3, #4294967295
 8005590:	e038      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005592:	7efa      	ldrb	r2, [r7, #27]
 8005594:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005598:	4013      	ands	r3, r2
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1e6      	bne.n	8005572 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f103 0020 	add.w	r0, r3, #32
 80055aa:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80055ae:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80055b2:	2301      	movs	r3, #1
 80055b4:	f000 f960 	bl	8005878 <lis2mdl_write_reg>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80055be:	f04f 33ff 	mov.w	r3, #4294967295
 80055c2:	e01f      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f103 0020 	add.w	r0, r3, #32
 80055ca:	893b      	ldrh	r3, [r7, #8]
 80055cc:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	f000 f939 	bl	8005848 <lis2mdl_read_reg>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295
 80055e0:	e010      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f103 0020 	add.w	r0, r3, #32
 80055e8:	f107 0220 	add.w	r2, r7, #32
 80055ec:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80055f0:	2301      	movs	r3, #1
 80055f2:	f000 f941 	bl	8005878 <lis2mdl_write_reg>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80055fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005600:	e000      	b.n	8005604 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3730      	adds	r7, #48	@ 0x30
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08c      	sub	sp, #48	@ 0x30
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	461a      	mov	r2, r3
 8005618:	460b      	mov	r3, r1
 800561a:	72fb      	strb	r3, [r7, #11]
 800561c:	4613      	mov	r3, r2
 800561e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005626:	2340      	movs	r3, #64	@ 0x40
 8005628:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800562c:	2300      	movs	r3, #0
 800562e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005632:	233c      	movs	r3, #60	@ 0x3c
 8005634:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005636:	2315      	movs	r3, #21
 8005638:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800563c:	2316      	movs	r3, #22
 800563e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005642:	2317      	movs	r3, #23
 8005644:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005648:	2300      	movs	r3, #0
 800564a:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800564c:	2314      	movs	r3, #20
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005652:	2344      	movs	r3, #68	@ 0x44
 8005654:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005656:	2339      	movs	r3, #57	@ 0x39
 8005658:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 800565c:	2380      	movs	r3, #128	@ 0x80
 800565e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005662:	2329      	movs	r3, #41	@ 0x29
 8005664:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005668:	231e      	movs	r3, #30
 800566a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005674:	2310      	movs	r3, #16
 8005676:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800567a:	2300      	movs	r3, #0
 800567c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005680:	2340      	movs	r3, #64	@ 0x40
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005686:	230e      	movs	r3, #14
 8005688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f103 0020 	add.w	r0, r3, #32
 8005692:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005696:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800569a:	2301      	movs	r3, #1
 800569c:	f000 f8ec 	bl	8005878 <lis2mdl_write_reg>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295
 80056aa:	e0c9      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f103 0020 	add.w	r0, r3, #32
 80056b2:	f107 021f 	add.w	r2, r7, #31
 80056b6:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80056ba:	2301      	movs	r3, #1
 80056bc:	f000 f8dc 	bl	8005878 <lis2mdl_write_reg>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ca:	e0b9      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f103 0020 	add.w	r0, r3, #32
 80056d2:	f107 020b 	add.w	r2, r7, #11
 80056d6:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80056da:	2301      	movs	r3, #1
 80056dc:	f000 f8cc 	bl	8005878 <lis2mdl_write_reg>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ea:	e0a9      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f103 0020 	add.w	r0, r3, #32
 80056f2:	f107 021e 	add.w	r2, r7, #30
 80056f6:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80056fa:	2301      	movs	r3, #1
 80056fc:	f000 f8bc 	bl	8005878 <lis2mdl_write_reg>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	e099      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f103 0020 	add.w	r0, r3, #32
 8005712:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005716:	2301      	movs	r3, #1
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	f000 f8ad 	bl	8005878 <lis2mdl_write_reg>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005724:	f04f 33ff 	mov.w	r3, #4294967295
 8005728:	e08a      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f103 0020 	add.w	r0, r3, #32
 8005730:	f107 021d 	add.w	r2, r7, #29
 8005734:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005738:	2301      	movs	r3, #1
 800573a:	f000 f89d 	bl	8005878 <lis2mdl_write_reg>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005744:	f04f 33ff 	mov.w	r3, #4294967295
 8005748:	e07a      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f103 0020 	add.w	r0, r3, #32
 8005750:	f107 0220 	add.w	r2, r7, #32
 8005754:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005758:	2301      	movs	r3, #1
 800575a:	f000 f88d 	bl	8005878 <lis2mdl_write_reg>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005764:	f04f 33ff 	mov.w	r3, #4294967295
 8005768:	e06a      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f103 0020 	add.w	r0, r3, #32
 8005770:	f107 021c 	add.w	r2, r7, #28
 8005774:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005778:	2301      	movs	r3, #1
 800577a:	f000 f865 	bl	8005848 <lis2mdl_read_reg>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005784:	f04f 33ff 	mov.w	r3, #4294967295
 8005788:	e05a      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800578a:	7f3b      	ldrb	r3, [r7, #28]
 800578c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005790:	429a      	cmp	r2, r3
 8005792:	d102      	bne.n	800579a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005794:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005798:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f103 0020 	add.w	r0, r3, #32
 80057a0:	f107 021c 	add.w	r2, r7, #28
 80057a4:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80057a8:	2301      	movs	r3, #1
 80057aa:	f000 f865 	bl	8005878 <lis2mdl_write_reg>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295
 80057b8:	e042      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f103 0020 	add.w	r0, r3, #32
 80057c0:	f107 0214 	add.w	r2, r7, #20
 80057c4:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80057c8:	2306      	movs	r3, #6
 80057ca:	f000 f83d 	bl	8005848 <lis2mdl_read_reg>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80057d4:	f04f 33ff 	mov.w	r3, #4294967295
 80057d8:	e032      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f103 0020 	add.w	r0, r3, #32
 80057e0:	f107 021b 	add.w	r2, r7, #27
 80057e4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80057e8:	2301      	movs	r3, #1
 80057ea:	f000 f82d 	bl	8005848 <lis2mdl_read_reg>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295
 80057f8:	e022      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80057fa:	7efa      	ldrb	r2, [r7, #27]
 80057fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005800:	4013      	ands	r3, r2
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005808:	429a      	cmp	r2, r3
 800580a:	d1e6      	bne.n	80057da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f103 0020 	add.w	r0, r3, #32
 8005812:	f107 021b 	add.w	r2, r7, #27
 8005816:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800581a:	2301      	movs	r3, #1
 800581c:	f000 f814 	bl	8005848 <lis2mdl_read_reg>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
 800582a:	e009      	b.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 800582c:	7efa      	ldrb	r2, [r7, #27]
 800582e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005832:	4013      	ands	r3, r2
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800583a:	429a      	cmp	r2, r3
 800583c:	d1e6      	bne.n	800580c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3730      	adds	r7, #48	@ 0x30
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	607a      	str	r2, [r7, #4]
 8005852:	461a      	mov	r2, r3
 8005854:	460b      	mov	r3, r1
 8005856:	72fb      	strb	r3, [r7, #11]
 8005858:	4613      	mov	r3, r2
 800585a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685c      	ldr	r4, [r3, #4]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68d8      	ldr	r0, [r3, #12]
 8005864:	893b      	ldrh	r3, [r7, #8]
 8005866:	7af9      	ldrb	r1, [r7, #11]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	47a0      	blx	r4
 800586c:	6178      	str	r0, [r7, #20]

  return ret;
 800586e:	697b      	ldr	r3, [r7, #20]
}
 8005870:	4618      	mov	r0, r3
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	bd90      	pop	{r4, r7, pc}

08005878 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005878:	b590      	push	{r4, r7, lr}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	607a      	str	r2, [r7, #4]
 8005882:	461a      	mov	r2, r3
 8005884:	460b      	mov	r3, r1
 8005886:	72fb      	strb	r3, [r7, #11]
 8005888:	4613      	mov	r3, r2
 800588a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681c      	ldr	r4, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68d8      	ldr	r0, [r3, #12]
 8005894:	893b      	ldrh	r3, [r7, #8]
 8005896:	7af9      	ldrb	r1, [r7, #11]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	47a0      	blx	r4
 800589c:	6178      	str	r0, [r7, #20]

  return ret;
 800589e:	697b      	ldr	r3, [r7, #20]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd90      	pop	{r4, r7, pc}

080058a8 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80058b4:	f107 0208 	add.w	r2, r7, #8
 80058b8:	2301      	movs	r3, #1
 80058ba:	2160      	movs	r1, #96	@ 0x60
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff ffc3 	bl	8005848 <lis2mdl_read_reg>
 80058c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10f      	bne.n	80058ea <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	7a3b      	ldrb	r3, [r7, #8]
 80058d4:	f362 0301 	bfi	r3, r2, #0, #2
 80058d8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80058da:	f107 0208 	add.w	r2, r7, #8
 80058de:	2301      	movs	r3, #1
 80058e0:	2160      	movs	r1, #96	@ 0x60
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff ffc8 	bl	8005878 <lis2mdl_write_reg>
 80058e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058ea:	68fb      	ldr	r3, [r7, #12]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005900:	f107 0208 	add.w	r2, r7, #8
 8005904:	2301      	movs	r3, #1
 8005906:	2160      	movs	r1, #96	@ 0x60
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ff9d 	bl	8005848 <lis2mdl_read_reg>
 800590e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	b2da      	uxtb	r2, r3
 800591e:	7a3b      	ldrb	r3, [r7, #8]
 8005920:	f362 0383 	bfi	r3, r2, #2, #2
 8005924:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005926:	f107 0208 	add.w	r2, r7, #8
 800592a:	2301      	movs	r3, #1
 800592c:	2160      	movs	r1, #96	@ 0x60
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff ffa2 	bl	8005878 <lis2mdl_write_reg>
 8005934:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005936:	68fb      	ldr	r3, [r7, #12]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800594a:	f107 0208 	add.w	r2, r7, #8
 800594e:	2301      	movs	r3, #1
 8005950:	2160      	movs	r1, #96	@ 0x60
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff ff78 	bl	8005848 <lis2mdl_read_reg>
 8005958:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800595a:	7a3b      	ldrb	r3, [r7, #8]
 800595c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b03      	cmp	r3, #3
 8005964:	d81a      	bhi.n	800599c <lis2mdl_data_rate_get+0x5c>
 8005966:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <lis2mdl_data_rate_get+0x2c>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	0800597d 	.word	0x0800597d
 8005970:	08005985 	.word	0x08005985
 8005974:	0800598d 	.word	0x0800598d
 8005978:	08005995 	.word	0x08005995
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
      break;
 8005982:	e00f      	b.n	80059a4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2201      	movs	r2, #1
 8005988:	701a      	strb	r2, [r3, #0]
      break;
 800598a:	e00b      	b.n	80059a4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2202      	movs	r2, #2
 8005990:	701a      	strb	r2, [r3, #0]
      break;
 8005992:	e007      	b.n	80059a4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2203      	movs	r2, #3
 8005998:	701a      	strb	r2, [r3, #0]
      break;
 800599a:	e003      	b.n	80059a4 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
      break;
 80059a2:	bf00      	nop
  }

  return ret;
 80059a4:	68fb      	ldr	r3, [r7, #12]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop

080059b0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80059bc:	f107 0208 	add.w	r2, r7, #8
 80059c0:	2301      	movs	r3, #1
 80059c2:	2162      	movs	r1, #98	@ 0x62
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff ff3f 	bl	8005848 <lis2mdl_read_reg>
 80059ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10f      	bne.n	80059f2 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	7a3b      	ldrb	r3, [r7, #8]
 80059dc:	f362 1304 	bfi	r3, r2, #4, #1
 80059e0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80059e2:	f107 0208 	add.w	r2, r7, #8
 80059e6:	2301      	movs	r3, #1
 80059e8:	2162      	movs	r1, #98	@ 0x62
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff ff44 	bl	8005878 <lis2mdl_write_reg>
 80059f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059f2:	68fb      	ldr	r3, [r7, #12]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005a06:	f107 020c 	add.w	r2, r7, #12
 8005a0a:	2306      	movs	r3, #6
 8005a0c:	2168      	movs	r1, #104	@ 0x68
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ff1a 	bl	8005848 <lis2mdl_read_reg>
 8005a14:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005a16:	7b7b      	ldrb	r3, [r7, #13]
 8005a18:	b21a      	sxth	r2, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	7b3a      	ldrb	r2, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	b21a      	sxth	r2, r3
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005a36:	7bfa      	ldrb	r2, [r7, #15]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	3302      	adds	r3, #2
 8005a3c:	b212      	sxth	r2, r2
 8005a3e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	3302      	adds	r3, #2
 8005a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	7bba      	ldrb	r2, [r7, #14]
 8005a50:	4413      	add	r3, r2
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	3302      	adds	r3, #2
 8005a58:	b212      	sxth	r2, r2
 8005a5a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005a5c:	7c7a      	ldrb	r2, [r7, #17]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	3304      	adds	r3, #4
 8005a62:	b212      	sxth	r2, r2
 8005a64:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	7c3a      	ldrb	r2, [r7, #16]
 8005a76:	4413      	add	r3, r2
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	b212      	sxth	r2, r2
 8005a80:	801a      	strh	r2, [r3, #0]

  return ret;
 8005a82:	697b      	ldr	r3, [r7, #20]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005a96:	2301      	movs	r3, #1
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	214f      	movs	r1, #79	@ 0x4f
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fed3 	bl	8005848 <lis2mdl_read_reg>
 8005aa2:	60f8      	str	r0, [r7, #12]

  return ret;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005aba:	f107 0208 	add.w	r2, r7, #8
 8005abe:	2301      	movs	r3, #1
 8005ac0:	2162      	movs	r1, #98	@ 0x62
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff fec0 	bl	8005848 <lis2mdl_read_reg>
 8005ac8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10f      	bne.n	8005af0 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	7a3b      	ldrb	r3, [r7, #8]
 8005ada:	f362 0341 	bfi	r3, r2, #1, #1
 8005ade:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ae0:	f107 0208 	add.w	r2, r7, #8
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	2162      	movs	r1, #98	@ 0x62
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fec5 	bl	8005878 <lis2mdl_write_reg>
 8005aee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005af0:	68fb      	ldr	r3, [r7, #12]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b06:	f107 0208 	add.w	r2, r7, #8
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	2162      	movs	r1, #98	@ 0x62
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff fe9a 	bl	8005848 <lis2mdl_read_reg>
 8005b14:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10f      	bne.n	8005b3c <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	7a3b      	ldrb	r3, [r7, #8]
 8005b26:	f362 1345 	bfi	r3, r2, #5, #1
 8005b2a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b2c:	f107 0208 	add.w	r2, r7, #8
 8005b30:	2301      	movs	r3, #1
 8005b32:	2162      	movs	r1, #98	@ 0x62
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff fe9f 	bl	8005878 <lis2mdl_write_reg>
 8005b3a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d103      	bne.n	8005b64 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e051      	b.n	8005c08 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	7b1a      	ldrb	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695a      	ldr	r2, [r3, #20]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <LSM6DSO_RegisterBusIO+0xcc>)
 8005ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <LSM6DSO_RegisterBusIO+0xd0>)
 8005ba6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d103      	bne.n	8005bc6 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e020      	b.n	8005c08 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4798      	blx	r3
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	e016      	b.n	8005c08 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d112      	bne.n	8005c08 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10d      	bne.n	8005c08 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005bec:	230c      	movs	r3, #12
 8005bee:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005bf0:	7afb      	ldrb	r3, [r7, #11]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2112      	movs	r1, #18
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 ff5d 	bl	8006ab6 <LSM6DSO_Write_Reg>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005c08:	68fb      	ldr	r3, [r7, #12]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	08006f59 	.word	0x08006f59
 8005c18:	08006f8f 	.word	0x08006f8f

08005c1c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d00b      	beq.n	8005c44 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3320      	adds	r3, #32
 8005c30:	2180      	movs	r1, #128	@ 0x80
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 fe84 	bl	8007940 <lsm6dso_i3c_disable_set>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8005c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c42:	e060      	b.n	8005d06 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3320      	adds	r3, #32
 8005c48:	2101      	movs	r1, #1
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 fe52 	bl	80078f4 <lsm6dso_auto_increment_set>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8005c56:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5a:	e054      	b.n	8005d06 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3320      	adds	r3, #32
 8005c60:	2101      	movs	r1, #1
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 fd62 	bl	800772c <lsm6dso_block_data_update_set>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c72:	e048      	b.n	8005d06 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3320      	adds	r3, #32
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 fea8 	bl	80079d0 <lsm6dso_fifo_mode_set>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	e03c      	b.n	8005d06 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2204      	movs	r2, #4
 8005c90:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3320      	adds	r3, #32
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 fa20 	bl	80070e0 <lsm6dso_xl_data_rate_set>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8005caa:	e02c      	b.n	8005d06 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3320      	adds	r3, #32
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 f9b6 	bl	8007024 <lsm6dso_xl_full_scale_set>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc2:	e020      	b.n	8005d06 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3320      	adds	r3, #32
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fbce 	bl	8007474 <lsm6dso_gy_data_rate_set>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8005cde:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce2:	e010      	b.n	8005d06 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3320      	adds	r3, #32
 8005ce8:	2106      	movs	r1, #6
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 fb5a 	bl	80073a4 <lsm6dso_gy_full_scale_set>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfa:	e004      	b.n	8005d06 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f888 	bl	8005e2c <LSM6DSO_ACC_Disable>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	e015      	b.n	8005d54 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fc2e 	bl	800658a <LSM6DSO_GYRO_Disable>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295
 8005d38:	e00c      	b.n	8005d54 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3320      	adds	r3, #32
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 fdb0 	bl	80078d2 <lsm6dso_device_id_get>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7c:	e000      	b.n	8005d80 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2201      	movs	r2, #1
 8005d96:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2200      	movs	r2, #0
 8005da2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005db0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2210      	movs	r2, #16
 8005db6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	4a07      	ldr	r2, [pc, #28]	@ (8005de0 <LSM6DSO_GetCapabilities+0x58>)
 8005dc2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	4a06      	ldr	r2, [pc, #24]	@ (8005de0 <LSM6DSO_GetCapabilities+0x58>)
 8005dc8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	45d02000 	.word	0x45d02000

08005de4 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e014      	b.n	8005e24 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f103 0220 	add.w	r2, r3, #32
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f001 f969 	bl	80070e0 <lsm6dso_xl_data_rate_set>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005e14:	f04f 33ff 	mov.w	r3, #4294967295
 8005e18:	e004      	b.n	8005e24 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e01f      	b.n	8005e82 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f103 0220 	add.w	r2, r3, #32
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3333      	adds	r3, #51	@ 0x33
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f001 fa40 	bl	80072d4 <lsm6dso_xl_data_rate_get>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5e:	e010      	b.n	8005e82 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3320      	adds	r3, #32
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 f93a 	bl	80070e0 <lsm6dso_xl_data_rate_set>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	e004      	b.n	8005e82 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3320      	adds	r3, #32
 8005e9e:	f107 020b 	add.w	r2, r7, #11
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 f8e3 	bl	8007070 <lsm6dso_xl_full_scale_get>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	e023      	b.n	8005efe <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d81b      	bhi.n	8005ef4 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005eed 	.word	0x08005eed
 8005ecc:	08005edd 	.word	0x08005edd
 8005ed0:	08005ee5 	.word	0x08005ee5
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8005f08 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005ed8:	601a      	str	r2, [r3, #0]
      break;
 8005eda:	e00f      	b.n	8005efc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	4a0b      	ldr	r2, [pc, #44]	@ (8005f0c <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005ee0:	601a      	str	r2, [r3, #0]
      break;
 8005ee2:	e00b      	b.n	8005efc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8005f10 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005ee8:	601a      	str	r2, [r3, #0]
      break;
 8005eea:	e007      	b.n	8005efc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	4a09      	ldr	r2, [pc, #36]	@ (8005f14 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005ef0:	601a      	str	r2, [r3, #0]
      break;
 8005ef2:	e003      	b.n	8005efc <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef8:	60fb      	str	r3, [r7, #12]
      break;
 8005efa:	bf00      	nop
  }

  return ret;
 8005efc:	68fb      	ldr	r3, [r7, #12]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	3d79db23 	.word	0x3d79db23
 8005f0c:	3df9db23 	.word	0x3df9db23
 8005f10:	3e79db23 	.word	0x3e79db23
 8005f14:	3ef9db23 	.word	0x3ef9db23

08005f18 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3320      	adds	r3, #32
 8005f2a:	f107 020b 	add.w	r2, r7, #11
 8005f2e:	4611      	mov	r1, r2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 f9cf 	bl	80072d4 <lsm6dso_xl_data_rate_get>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f40:	e054      	b.n	8005fec <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8005f42:	7afb      	ldrb	r3, [r7, #11]
 8005f44:	2b0b      	cmp	r3, #11
 8005f46:	d84c      	bhi.n	8005fe2 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8005f48:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f81 	.word	0x08005f81
 8005f54:	08005f93 	.word	0x08005f93
 8005f58:	08005f9b 	.word	0x08005f9b
 8005f5c:	08005fa3 	.word	0x08005fa3
 8005f60:	08005fab 	.word	0x08005fab
 8005f64:	08005fb3 	.word	0x08005fb3
 8005f68:	08005fbb 	.word	0x08005fbb
 8005f6c:	08005fc3 	.word	0x08005fc3
 8005f70:	08005fcb 	.word	0x08005fcb
 8005f74:	08005fd3 	.word	0x08005fd3
 8005f78:	08005fdb 	.word	0x08005fdb
 8005f7c:	08005f8b 	.word	0x08005f8b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
      break;
 8005f88:	e02f      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	4a19      	ldr	r2, [pc, #100]	@ (8005ff4 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8005f8e:	601a      	str	r2, [r3, #0]
      break;
 8005f90:	e02b      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	4a18      	ldr	r2, [pc, #96]	@ (8005ff8 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8005f96:	601a      	str	r2, [r3, #0]
      break;
 8005f98:	e027      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	4a17      	ldr	r2, [pc, #92]	@ (8005ffc <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8005f9e:	601a      	str	r2, [r3, #0]
      break;
 8005fa0:	e023      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	@ (8006000 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8005fa6:	601a      	str	r2, [r3, #0]
      break;
 8005fa8:	e01f      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8005fae:	601a      	str	r2, [r3, #0]
      break;
 8005fb0:	e01b      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	4a14      	ldr	r2, [pc, #80]	@ (8006008 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8005fb6:	601a      	str	r2, [r3, #0]
      break;
 8005fb8:	e017      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	4a13      	ldr	r2, [pc, #76]	@ (800600c <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8005fbe:	601a      	str	r2, [r3, #0]
      break;
 8005fc0:	e013      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	4a12      	ldr	r2, [pc, #72]	@ (8006010 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8005fc6:	601a      	str	r2, [r3, #0]
      break;
 8005fc8:	e00f      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	4a11      	ldr	r2, [pc, #68]	@ (8006014 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8005fce:	601a      	str	r2, [r3, #0]
      break;
 8005fd0:	e00b      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	4a10      	ldr	r2, [pc, #64]	@ (8006018 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8005fd6:	601a      	str	r2, [r3, #0]
      break;
 8005fd8:	e007      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	4a0f      	ldr	r2, [pc, #60]	@ (800601c <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8005fde:	601a      	str	r2, [r3, #0]
      break;
 8005fe0:	e003      	b.n	8005fea <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe6:	60fb      	str	r3, [r7, #12]
      break;
 8005fe8:	bf00      	nop
  }

  return ret;
 8005fea:	68fb      	ldr	r3, [r7, #12]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	3fcccccd 	.word	0x3fcccccd
 8005ff8:	41480000 	.word	0x41480000
 8005ffc:	41d00000 	.word	0x41d00000
 8006000:	42500000 	.word	0x42500000
 8006004:	42d00000 	.word	0x42d00000
 8006008:	43500000 	.word	0x43500000
 800600c:	43d08000 	.word	0x43d08000
 8006010:	44504000 	.word	0x44504000
 8006014:	44d06000 	.word	0x44d06000
 8006018:	45505000 	.word	0x45505000
 800601c:	45d05800 	.word	0x45d05800

08006020 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 800602c:	2100      	movs	r1, #0
 800602e:	ed97 0a00 	vldr	s0, [r7]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f806 	bl	8006044 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8006038:	4603      	mov	r3, r0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	@ 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006050:	460b      	mov	r3, r1
 8006052:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	2b02      	cmp	r3, #2
 8006060:	f000 80ea 	beq.w	8006238 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006064:	2b02      	cmp	r3, #2
 8006066:	f300 8163 	bgt.w	8006330 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800606e:	2b01      	cmp	r3, #1
 8006070:	d074      	beq.n	800615c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8006072:	e15d      	b.n	8006330 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f103 0020 	add.w	r0, r3, #32
 800607a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800607e:	2301      	movs	r3, #1
 8006080:	2114      	movs	r1, #20
 8006082:	f000 ff9f 	bl	8006fc4 <lsm6dso_read_reg>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 800608c:	f04f 33ff 	mov.w	r3, #4294967295
 8006090:	e16c      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006092:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006096:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d025      	beq.n	80060ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10b      	bne.n	80060c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3320      	adds	r3, #32
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 f815 	bl	80070e0 <lsm6dso_xl_data_rate_set>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80060bc:	f04f 33ff 	mov.w	r3, #4294967295
 80060c0:	e154      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80060c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80060c6:	f36f 13c7 	bfc	r3, #7, #1
 80060ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f103 0020 	add.w	r0, r3, #32
 80060d4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80060d8:	2301      	movs	r3, #1
 80060da:	2114      	movs	r1, #20
 80060dc:	f000 ff8a 	bl	8006ff4 <lsm6dso_write_reg>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ea:	e13f      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f103 0020 	add.w	r0, r3, #32
 80060f2:	f107 0220 	add.w	r2, r7, #32
 80060f6:	2301      	movs	r3, #1
 80060f8:	2115      	movs	r1, #21
 80060fa:	f000 ff63 	bl	8006fc4 <lsm6dso_read_reg>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8006104:	f04f 33ff 	mov.w	r3, #4294967295
 8006108:	e130      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800610a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d014      	beq.n	8006142 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8006118:	f897 3020 	ldrb.w	r3, [r7, #32]
 800611c:	f36f 1304 	bfc	r3, #4, #1
 8006120:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f103 0020 	add.w	r0, r3, #32
 800612a:	f107 0220 	add.w	r2, r7, #32
 800612e:	2301      	movs	r3, #1
 8006130:	2115      	movs	r1, #21
 8006132:	f000 ff5f 	bl	8006ff4 <lsm6dso_write_reg>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 800613c:	f04f 33ff 	mov.w	r3, #4294967295
 8006140:	e114      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006142:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006146:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800614a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006152:	d400      	bmi.n	8006156 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006154:	e0f0      	b.n	8006338 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8006156:	4b87      	ldr	r3, [pc, #540]	@ (8006374 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8006158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800615a:	e0ed      	b.n	8006338 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f103 0020 	add.w	r0, r3, #32
 8006162:	f107 021c 	add.w	r2, r7, #28
 8006166:	2301      	movs	r3, #1
 8006168:	2114      	movs	r1, #20
 800616a:	f000 ff2b 	bl	8006fc4 <lsm6dso_read_reg>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006174:	f04f 33ff 	mov.w	r3, #4294967295
 8006178:	e0f8      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800617a:	7f3b      	ldrb	r3, [r7, #28]
 800617c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d023      	beq.n	80061ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800618c:	2b01      	cmp	r3, #1
 800618e:	d10b      	bne.n	80061a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3320      	adds	r3, #32
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f000 ffa2 	bl	80070e0 <lsm6dso_xl_data_rate_set>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295
 80061a6:	e0e1      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80061a8:	7f3b      	ldrb	r3, [r7, #28]
 80061aa:	f36f 13c7 	bfc	r3, #7, #1
 80061ae:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f103 0020 	add.w	r0, r3, #32
 80061b6:	f107 021c 	add.w	r2, r7, #28
 80061ba:	2301      	movs	r3, #1
 80061bc:	2114      	movs	r1, #20
 80061be:	f000 ff19 	bl	8006ff4 <lsm6dso_write_reg>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80061c8:	f04f 33ff 	mov.w	r3, #4294967295
 80061cc:	e0ce      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f103 0020 	add.w	r0, r3, #32
 80061d4:	f107 0218 	add.w	r2, r7, #24
 80061d8:	2301      	movs	r3, #1
 80061da:	2115      	movs	r1, #21
 80061dc:	f000 fef2 	bl	8006fc4 <lsm6dso_read_reg>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ea:	e0bf      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80061ec:	7e3b      	ldrb	r3, [r7, #24]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d112      	bne.n	800621e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80061f8:	7e3b      	ldrb	r3, [r7, #24]
 80061fa:	f043 0310 	orr.w	r3, r3, #16
 80061fe:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f103 0020 	add.w	r0, r3, #32
 8006206:	f107 0218 	add.w	r2, r7, #24
 800620a:	2301      	movs	r3, #1
 800620c:	2115      	movs	r1, #21
 800620e:	f000 fef1 	bl	8006ff4 <lsm6dso_write_reg>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8006218:	f04f 33ff 	mov.w	r3, #4294967295
 800621c:	e0a6      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800621e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006222:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006378 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622e:	dc00      	bgt.n	8006232 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8006230:	e082      	b.n	8006338 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006232:	4b52      	ldr	r3, [pc, #328]	@ (800637c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006236:	e07f      	b.n	8006338 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f103 0020 	add.w	r0, r3, #32
 800623e:	f107 0210 	add.w	r2, r7, #16
 8006242:	2301      	movs	r3, #1
 8006244:	2115      	movs	r1, #21
 8006246:	f000 febd 	bl	8006fc4 <lsm6dso_read_reg>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006250:	f04f 33ff 	mov.w	r3, #4294967295
 8006254:	e08a      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006256:	7c3b      	ldrb	r3, [r7, #16]
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d012      	beq.n	8006288 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006262:	7c3b      	ldrb	r3, [r7, #16]
 8006264:	f36f 1304 	bfc	r3, #4, #1
 8006268:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f103 0020 	add.w	r0, r3, #32
 8006270:	f107 0210 	add.w	r2, r7, #16
 8006274:	2301      	movs	r3, #1
 8006276:	2115      	movs	r1, #21
 8006278:	f000 febc 	bl	8006ff4 <lsm6dso_write_reg>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8006282:	f04f 33ff 	mov.w	r3, #4294967295
 8006286:	e071      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800628e:	2b01      	cmp	r3, #1
 8006290:	d108      	bne.n	80062a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f979 	bl	800658a <LSM6DSO_GYRO_Disable>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 800629e:	f04f 33ff 	mov.w	r3, #4294967295
 80062a2:	e063      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f103 0020 	add.w	r0, r3, #32
 80062aa:	f107 0214 	add.w	r2, r7, #20
 80062ae:	2301      	movs	r3, #1
 80062b0:	2114      	movs	r1, #20
 80062b2:	f000 fe87 	bl	8006fc4 <lsm6dso_read_reg>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 80062bc:	f04f 33ff 	mov.w	r3, #4294967295
 80062c0:	e054      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 80062c2:	7d3b      	ldrb	r3, [r7, #20]
 80062c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d123      	bne.n	8006316 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d10b      	bne.n	80062f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3320      	adds	r3, #32
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fefe 	bl	80070e0 <lsm6dso_xl_data_rate_set>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295
 80062ee:	e03d      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80062f0:	7d3b      	ldrb	r3, [r7, #20]
 80062f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f6:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f103 0020 	add.w	r0, r3, #32
 80062fe:	f107 0214 	add.w	r2, r7, #20
 8006302:	2301      	movs	r3, #1
 8006304:	2114      	movs	r1, #20
 8006306:	f000 fe75 	bl	8006ff4 <lsm6dso_write_reg>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006310:	f04f 33ff 	mov.w	r3, #4294967295
 8006314:	e02a      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006316:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800631a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006378 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800631e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006326:	dc00      	bgt.n	800632a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8006328:	e006      	b.n	8006338 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800632a:	4b14      	ldr	r3, [pc, #80]	@ (800637c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 800632c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800632e:	e003      	b.n	8006338 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006336:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d102      	bne.n	8006346 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006340:	f04f 33ff 	mov.w	r3, #4294967295
 8006344:	e012      	b.n	800636c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800634c:	2b01      	cmp	r3, #1
 800634e:	d106      	bne.n	800635e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006350:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fbc9 	bl	8006aec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800635a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800635c:	e005      	b.n	800636a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800635e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fc5a 	bl	8006c1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006368:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 800636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800636c:	4618      	mov	r0, r3
 800636e:	3730      	adds	r7, #48	@ 0x30
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	41480000 	.word	0x41480000
 8006378:	43500000 	.word	0x43500000
 800637c:	43500000 	.word	0x43500000

08006380 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3320      	adds	r3, #32
 8006392:	f107 020b 	add.w	r2, r7, #11
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fe69 	bl	8007070 <lsm6dso_xl_full_scale_get>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295
 80063a8:	e023      	b.n	80063f2 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d81b      	bhi.n	80063e8 <LSM6DSO_ACC_GetFullScale+0x68>
 80063b0:	a201      	add	r2, pc, #4	@ (adr r2, 80063b8 <LSM6DSO_ACC_GetFullScale+0x38>)
 80063b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b6:	bf00      	nop
 80063b8:	080063c9 	.word	0x080063c9
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	080063d9 	.word	0x080063d9
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2202      	movs	r2, #2
 80063cc:	601a      	str	r2, [r3, #0]
      break;
 80063ce:	e00f      	b.n	80063f0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2204      	movs	r2, #4
 80063d4:	601a      	str	r2, [r3, #0]
      break;
 80063d6:	e00b      	b.n	80063f0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2208      	movs	r2, #8
 80063dc:	601a      	str	r2, [r3, #0]
      break;
 80063de:	e007      	b.n	80063f0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2210      	movs	r2, #16
 80063e4:	601a      	str	r2, [r3, #0]
      break;
 80063e6:	e003      	b.n	80063f0 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80063e8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ec:	60fb      	str	r3, [r7, #12]
      break;
 80063ee:	bf00      	nop
  }

  return ret;
 80063f0:	68fb      	ldr	r3, [r7, #12]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop

080063fc <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b02      	cmp	r3, #2
 800640a:	dd0b      	ble.n	8006424 <LSM6DSO_ACC_SetFullScale+0x28>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b04      	cmp	r3, #4
 8006410:	dd06      	ble.n	8006420 <LSM6DSO_ACC_SetFullScale+0x24>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b08      	cmp	r3, #8
 8006416:	dc01      	bgt.n	800641c <LSM6DSO_ACC_SetFullScale+0x20>
 8006418:	2303      	movs	r3, #3
 800641a:	e004      	b.n	8006426 <LSM6DSO_ACC_SetFullScale+0x2a>
 800641c:	2301      	movs	r3, #1
 800641e:	e002      	b.n	8006426 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006420:	2302      	movs	r3, #2
 8006422:	e000      	b.n	8006426 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006424:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8006426:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3320      	adds	r3, #32
 800642c:	7bfa      	ldrb	r2, [r7, #15]
 800642e:	4611      	mov	r1, r2
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fdf7 	bl	8007024 <lsm6dso_xl_full_scale_set>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 800643c:	f04f 33ff 	mov.w	r3, #4294967295
 8006440:	e000      	b.n	8006444 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3320      	adds	r3, #32
 800645a:	f107 0208 	add.w	r2, r7, #8
 800645e:	4611      	mov	r1, r2
 8006460:	4618      	mov	r0, r3
 8006462:	f001 f9d1 	bl	8007808 <lsm6dso_acceleration_raw_get>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800646c:	f04f 33ff 	mov.w	r3, #4294967295
 8006470:	e00c      	b.n	800648c <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006472:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800647a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006482:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3320      	adds	r3, #32
 80064a8:	f107 0210 	add.w	r2, r7, #16
 80064ac:	4611      	mov	r1, r2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f9aa 	bl	8007808 <lsm6dso_acceleration_raw_get>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	e03c      	b.n	800653a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fce0 	bl	8005e8c <LSM6DSO_ACC_GetSensitivity>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80064d2:	f04f 33ff 	mov.w	r3, #4294967295
 80064d6:	e030      	b.n	800653a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80064d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80064e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064f0:	ee17 2a90 	vmov	r2, s15
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80064f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006504:	edd7 7a03 	vldr	s15, [r7, #12]
 8006508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006510:	ee17 2a90 	vmov	r2, s15
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006518:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800651c:	ee07 3a90 	vmov	s15, r3
 8006520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006524:	edd7 7a03 	vldr	s15, [r7, #12]
 8006528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006530:	ee17 2a90 	vmov	r2, s15
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e014      	b.n	8006582 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0220 	add.w	r2, r3, #32
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f000 ff84 	bl	8007474 <lsm6dso_gy_data_rate_set>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006572:	f04f 33ff 	mov.w	r3, #4294967295
 8006576:	e004      	b.n	8006582 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	e01f      	b.n	80065e0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f103 0220 	add.w	r2, r3, #32
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3334      	adds	r3, #52	@ 0x34
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f001 f85b 	bl	8007668 <lsm6dso_gy_data_rate_get>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	e010      	b.n	80065e0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3320      	adds	r3, #32
 80065c2:	2100      	movs	r1, #0
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 ff55 	bl	8007474 <lsm6dso_gy_data_rate_set>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80065d0:	f04f 33ff 	mov.w	r3, #4294967295
 80065d4:	e004      	b.n	80065e0 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3320      	adds	r3, #32
 80065fa:	f107 020b 	add.w	r2, r7, #11
 80065fe:	4611      	mov	r1, r2
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fef5 	bl	80073f0 <lsm6dso_gy_full_scale_get>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800660c:	f04f 33ff 	mov.w	r3, #4294967295
 8006610:	e02d      	b.n	800666e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006612:	7afb      	ldrb	r3, [r7, #11]
 8006614:	2b06      	cmp	r3, #6
 8006616:	d825      	bhi.n	8006664 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8006618:	a201      	add	r2, pc, #4	@ (adr r2, 8006620 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006645 	.word	0x08006645
 8006624:	0800663d 	.word	0x0800663d
 8006628:	0800664d 	.word	0x0800664d
 800662c:	08006665 	.word	0x08006665
 8006630:	08006655 	.word	0x08006655
 8006634:	08006665 	.word	0x08006665
 8006638:	0800665d 	.word	0x0800665d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	4a0e      	ldr	r2, [pc, #56]	@ (8006678 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8006640:	601a      	str	r2, [r3, #0]
      break;
 8006642:	e013      	b.n	800666c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	4a0d      	ldr	r2, [pc, #52]	@ (800667c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8006648:	601a      	str	r2, [r3, #0]
      break;
 800664a:	e00f      	b.n	800666c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	4a0c      	ldr	r2, [pc, #48]	@ (8006680 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006650:	601a      	str	r2, [r3, #0]
      break;
 8006652:	e00b      	b.n	800666c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	4a0b      	ldr	r2, [pc, #44]	@ (8006684 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006658:	601a      	str	r2, [r3, #0]
      break;
 800665a:	e007      	b.n	800666c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	4a0a      	ldr	r2, [pc, #40]	@ (8006688 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8006660:	601a      	str	r2, [r3, #0]
      break;
 8006662:	e003      	b.n	800666c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
 8006668:	60fb      	str	r3, [r7, #12]
      break;
 800666a:	bf00      	nop
  }

  return ret;
 800666c:	68fb      	ldr	r3, [r7, #12]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	408c0000 	.word	0x408c0000
 800667c:	410c0000 	.word	0x410c0000
 8006680:	418c0000 	.word	0x418c0000
 8006684:	420c0000 	.word	0x420c0000
 8006688:	428c0000 	.word	0x428c0000

0800668c <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3320      	adds	r3, #32
 800669e:	f107 020b 	add.w	r2, r7, #11
 80066a2:	4611      	mov	r1, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 ffdf 	bl	8007668 <lsm6dso_gy_data_rate_get>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80066b0:	f04f 33ff 	mov.w	r3, #4294967295
 80066b4:	e04e      	b.n	8006754 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80066b6:	7afb      	ldrb	r3, [r7, #11]
 80066b8:	2b0a      	cmp	r3, #10
 80066ba:	d846      	bhi.n	800674a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80066bc:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066f1 	.word	0x080066f1
 80066c8:	080066fb 	.word	0x080066fb
 80066cc:	08006703 	.word	0x08006703
 80066d0:	0800670b 	.word	0x0800670b
 80066d4:	08006713 	.word	0x08006713
 80066d8:	0800671b 	.word	0x0800671b
 80066dc:	08006723 	.word	0x08006723
 80066e0:	0800672b 	.word	0x0800672b
 80066e4:	08006733 	.word	0x08006733
 80066e8:	0800673b 	.word	0x0800673b
 80066ec:	08006743 	.word	0x08006743
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
      break;
 80066f8:	e02b      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	4a17      	ldr	r2, [pc, #92]	@ (800675c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80066fe:	601a      	str	r2, [r3, #0]
      break;
 8006700:	e027      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	4a16      	ldr	r2, [pc, #88]	@ (8006760 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8006706:	601a      	str	r2, [r3, #0]
      break;
 8006708:	e023      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	4a15      	ldr	r2, [pc, #84]	@ (8006764 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800670e:	601a      	str	r2, [r3, #0]
      break;
 8006710:	e01f      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	4a14      	ldr	r2, [pc, #80]	@ (8006768 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8006716:	601a      	str	r2, [r3, #0]
      break;
 8006718:	e01b      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	4a13      	ldr	r2, [pc, #76]	@ (800676c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800671e:	601a      	str	r2, [r3, #0]
      break;
 8006720:	e017      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	4a12      	ldr	r2, [pc, #72]	@ (8006770 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8006726:	601a      	str	r2, [r3, #0]
      break;
 8006728:	e013      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	4a11      	ldr	r2, [pc, #68]	@ (8006774 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800672e:	601a      	str	r2, [r3, #0]
      break;
 8006730:	e00f      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	4a10      	ldr	r2, [pc, #64]	@ (8006778 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8006736:	601a      	str	r2, [r3, #0]
      break;
 8006738:	e00b      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	4a0f      	ldr	r2, [pc, #60]	@ (800677c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800673e:	601a      	str	r2, [r3, #0]
      break;
 8006740:	e007      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	4a0e      	ldr	r2, [pc, #56]	@ (8006780 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8006746:	601a      	str	r2, [r3, #0]
      break;
 8006748:	e003      	b.n	8006752 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	60fb      	str	r3, [r7, #12]
      break;
 8006750:	bf00      	nop
  }

  return ret;
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	41480000 	.word	0x41480000
 8006760:	41d00000 	.word	0x41d00000
 8006764:	42500000 	.word	0x42500000
 8006768:	42d00000 	.word	0x42d00000
 800676c:	43500000 	.word	0x43500000
 8006770:	43d08000 	.word	0x43d08000
 8006774:	44504000 	.word	0x44504000
 8006778:	44d06000 	.word	0x44d06000
 800677c:	45505000 	.word	0x45505000
 8006780:	45d05800 	.word	0x45d05800

08006784 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8006790:	2100      	movs	r1, #0
 8006792:	ed97 0a00 	vldr	s0, [r7]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f806 	bl	80067a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 800679c:	4603      	mov	r3, r0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80067b4:	460b      	mov	r3, r1
 80067b6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d028      	beq.n	800681c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80067ca:	e05c      	b.n	8006886 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f103 0020 	add.w	r0, r3, #32
 80067d2:	f107 0214 	add.w	r2, r7, #20
 80067d6:	2301      	movs	r3, #1
 80067d8:	2116      	movs	r1, #22
 80067da:	f000 fbf3 	bl	8006fc4 <lsm6dso_read_reg>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295
 80067e8:	e06c      	b.n	80068c4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80067ea:	7d3b      	ldrb	r3, [r7, #20]
 80067ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d04b      	beq.n	800688e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80067f6:	7d3b      	ldrb	r3, [r7, #20]
 80067f8:	f36f 13c7 	bfc	r3, #7, #1
 80067fc:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f103 0020 	add.w	r0, r3, #32
 8006804:	f107 0214 	add.w	r2, r7, #20
 8006808:	2301      	movs	r3, #1
 800680a:	2116      	movs	r1, #22
 800680c:	f000 fbf2 	bl	8006ff4 <lsm6dso_write_reg>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d03b      	beq.n	800688e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8006816:	f04f 33ff 	mov.w	r3, #4294967295
 800681a:	e053      	b.n	80068c4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f103 0020 	add.w	r0, r3, #32
 8006822:	f107 0210 	add.w	r2, r7, #16
 8006826:	2301      	movs	r3, #1
 8006828:	2116      	movs	r1, #22
 800682a:	f000 fbcb 	bl	8006fc4 <lsm6dso_read_reg>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006834:	f04f 33ff 	mov.w	r3, #4294967295
 8006838:	e044      	b.n	80068c4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800683a:	7c3b      	ldrb	r3, [r7, #16]
 800683c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d112      	bne.n	800686c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006846:	7c3b      	ldrb	r3, [r7, #16]
 8006848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f103 0020 	add.w	r0, r3, #32
 8006854:	f107 0210 	add.w	r2, r7, #16
 8006858:	2301      	movs	r3, #1
 800685a:	2116      	movs	r1, #22
 800685c:	f000 fbca 	bl	8006ff4 <lsm6dso_write_reg>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006866:	f04f 33ff 	mov.w	r3, #4294967295
 800686a:	e02b      	b.n	80068c4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800686c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006870:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80068cc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687c:	dc00      	bgt.n	8006880 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800687e:	e007      	b.n	8006890 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8006880:	4b13      	ldr	r3, [pc, #76]	@ (80068d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	e004      	b.n	8006890 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006886:	f04f 33ff 	mov.w	r3, #4294967295
 800688a:	61fb      	str	r3, [r7, #28]
      break;
 800688c:	e000      	b.n	8006890 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800688e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d102      	bne.n	800689e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006898:	f04f 33ff 	mov.w	r3, #4294967295
 800689c:	e012      	b.n	80068c4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d106      	bne.n	80068b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80068a8:	ed97 0a06 	vldr	s0, [r7, #24]
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fa45 	bl	8006d3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80068b2:	61f8      	str	r0, [r7, #28]
 80068b4:	e005      	b.n	80068c2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80068b6:	ed97 0a06 	vldr	s0, [r7, #24]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 faca 	bl	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80068c0:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80068c2:	69fb      	ldr	r3, [r7, #28]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	43500000 	.word	0x43500000
 80068d0:	43500000 	.word	0x43500000

080068d4 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3320      	adds	r3, #32
 80068e6:	f107 020b 	add.w	r2, r7, #11
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fd7f 	bl	80073f0 <lsm6dso_gy_full_scale_get>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80068f8:	f04f 33ff 	mov.w	r3, #4294967295
 80068fc:	e030      	b.n	8006960 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80068fe:	7afb      	ldrb	r3, [r7, #11]
 8006900:	2b06      	cmp	r3, #6
 8006902:	d828      	bhi.n	8006956 <LSM6DSO_GYRO_GetFullScale+0x82>
 8006904:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006931 	.word	0x08006931
 8006910:	08006929 	.word	0x08006929
 8006914:	08006939 	.word	0x08006939
 8006918:	08006957 	.word	0x08006957
 800691c:	08006943 	.word	0x08006943
 8006920:	08006957 	.word	0x08006957
 8006924:	0800694d 	.word	0x0800694d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	227d      	movs	r2, #125	@ 0x7d
 800692c:	601a      	str	r2, [r3, #0]
      break;
 800692e:	e016      	b.n	800695e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	22fa      	movs	r2, #250	@ 0xfa
 8006934:	601a      	str	r2, [r3, #0]
      break;
 8006936:	e012      	b.n	800695e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800693e:	601a      	str	r2, [r3, #0]
      break;
 8006940:	e00d      	b.n	800695e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006948:	601a      	str	r2, [r3, #0]
      break;
 800694a:	e008      	b.n	800695e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006952:	601a      	str	r2, [r3, #0]
      break;
 8006954:	e003      	b.n	800695e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006956:	f04f 33ff 	mov.w	r3, #4294967295
 800695a:	60fb      	str	r3, [r7, #12]
      break;
 800695c:	bf00      	nop
  }

  return ret;
 800695e:	68fb      	ldr	r3, [r7, #12]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b7d      	cmp	r3, #125	@ 0x7d
 8006976:	dd12      	ble.n	800699e <LSM6DSO_GYRO_SetFullScale+0x36>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2bfa      	cmp	r3, #250	@ 0xfa
 800697c:	dd0d      	ble.n	800699a <LSM6DSO_GYRO_SetFullScale+0x32>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006984:	dd07      	ble.n	8006996 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800698c:	dc01      	bgt.n	8006992 <LSM6DSO_GYRO_SetFullScale+0x2a>
 800698e:	2304      	movs	r3, #4
 8006990:	e006      	b.n	80069a0 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006992:	2306      	movs	r3, #6
 8006994:	e004      	b.n	80069a0 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006996:	2302      	movs	r3, #2
 8006998:	e002      	b.n	80069a0 <LSM6DSO_GYRO_SetFullScale+0x38>
 800699a:	2300      	movs	r3, #0
 800699c:	e000      	b.n	80069a0 <LSM6DSO_GYRO_SetFullScale+0x38>
 800699e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80069a0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3320      	adds	r3, #32
 80069a6:	7bfa      	ldrb	r2, [r7, #15]
 80069a8:	4611      	mov	r1, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fcfa 	bl	80073a4 <lsm6dso_gy_full_scale_set>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80069b6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ba:	e000      	b.n	80069be <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3320      	adds	r3, #32
 80069d4:	f107 0208 	add.w	r2, r7, #8
 80069d8:	4611      	mov	r1, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fecc 	bl	8007778 <lsm6dso_angular_rate_raw_get>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	e00c      	b.n	8006a06 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80069ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80069f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80069fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b086      	sub	sp, #24
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3320      	adds	r3, #32
 8006a1c:	f107 0210 	add.w	r2, r7, #16
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fea8 	bl	8007778 <lsm6dso_angular_rate_raw_get>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a32:	e03c      	b.n	8006aae <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006a34:	f107 030c 	add.w	r3, r7, #12
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff fdd4 	bl	80065e8 <LSM6DSO_GYRO_GetSensitivity>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006a46:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4a:	e030      	b.n	8006aae <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006a4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a58:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a64:	ee17 2a90 	vmov	r2, s15
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006a6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a84:	ee17 2a90 	vmov	r2, s15
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006a8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa4:	ee17 2a90 	vmov	r2, s15
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f103 0020 	add.w	r0, r3, #32
 8006acc:	1cba      	adds	r2, r7, #2
 8006ace:	78f9      	ldrb	r1, [r7, #3]
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f000 fa8f 	bl	8006ff4 <lsm6dso_write_reg>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006adc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae0:	e000      	b.n	8006ae4 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006af8:	edd7 7a00 	vldr	s15, [r7]
 8006afc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006bfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b08:	d801      	bhi.n	8006b0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006b0a:	230b      	movs	r3, #11
 8006b0c:	e063      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b0e:	edd7 7a00 	vldr	s15, [r7]
 8006b12:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	d801      	bhi.n	8006b24 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e058      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b24:	edd7 7a00 	vldr	s15, [r7]
 8006b28:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b34:	d801      	bhi.n	8006b3a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e04d      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b3a:	edd7 7a00 	vldr	s15, [r7]
 8006b3e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006c00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4a:	d801      	bhi.n	8006b50 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e042      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b50:	edd7 7a00 	vldr	s15, [r7]
 8006b54:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006c04 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b60:	d801      	bhi.n	8006b66 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006b62:	2304      	movs	r3, #4
 8006b64:	e037      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b66:	edd7 7a00 	vldr	s15, [r7]
 8006b6a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006c08 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b76:	d801      	bhi.n	8006b7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006b78:	2305      	movs	r3, #5
 8006b7a:	e02c      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b7c:	edd7 7a00 	vldr	s15, [r7]
 8006b80:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8c:	d801      	bhi.n	8006b92 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006b8e:	2306      	movs	r3, #6
 8006b90:	e021      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b92:	edd7 7a00 	vldr	s15, [r7]
 8006b96:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006c10 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba2:	d801      	bhi.n	8006ba8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006ba4:	2307      	movs	r3, #7
 8006ba6:	e016      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006ba8:	edd7 7a00 	vldr	s15, [r7]
 8006bac:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006c14 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb8:	d801      	bhi.n	8006bbe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006bba:	2308      	movs	r3, #8
 8006bbc:	e00b      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006bbe:	edd7 7a00 	vldr	s15, [r7]
 8006bc2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006c18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bce:	d801      	bhi.n	8006bd4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006bd0:	2309      	movs	r3, #9
 8006bd2:	e000      	b.n	8006bd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006bd4:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006bd6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3320      	adds	r3, #32
 8006bdc:	7bfa      	ldrb	r2, [r7, #15]
 8006bde:	4611      	mov	r1, r2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fa7d 	bl	80070e0 <lsm6dso_xl_data_rate_set>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006bec:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf0:	e000      	b.n	8006bf4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	3fcccccd 	.word	0x3fcccccd
 8006c00:	42500000 	.word	0x42500000
 8006c04:	42d00000 	.word	0x42d00000
 8006c08:	43500000 	.word	0x43500000
 8006c0c:	43d08000 	.word	0x43d08000
 8006c10:	44504000 	.word	0x44504000
 8006c14:	44d06000 	.word	0x44d06000
 8006c18:	45505000 	.word	0x45505000

08006c1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006c28:	edd7 7a00 	vldr	s15, [r7]
 8006c2c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006d1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c38:	d801      	bhi.n	8006c3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006c3a:	230b      	movs	r3, #11
 8006c3c:	e063      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c3e:	edd7 7a00 	vldr	s15, [r7]
 8006c42:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4e:	d801      	bhi.n	8006c54 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e058      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c54:	edd7 7a00 	vldr	s15, [r7]
 8006c58:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c64:	d801      	bhi.n	8006c6a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e04d      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c6a:	edd7 7a00 	vldr	s15, [r7]
 8006c6e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006d20 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7a:	d801      	bhi.n	8006c80 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e042      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c80:	edd7 7a00 	vldr	s15, [r7]
 8006c84:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006d24 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c90:	d801      	bhi.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006c92:	2304      	movs	r3, #4
 8006c94:	e037      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c96:	edd7 7a00 	vldr	s15, [r7]
 8006c9a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006d28 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca6:	d801      	bhi.n	8006cac <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006ca8:	2305      	movs	r3, #5
 8006caa:	e02c      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006cac:	edd7 7a00 	vldr	s15, [r7]
 8006cb0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006d2c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cbc:	d801      	bhi.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006cbe:	2306      	movs	r3, #6
 8006cc0:	e021      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006cc2:	edd7 7a00 	vldr	s15, [r7]
 8006cc6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006d30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd2:	d801      	bhi.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006cd4:	2307      	movs	r3, #7
 8006cd6:	e016      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006cd8:	edd7 7a00 	vldr	s15, [r7]
 8006cdc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006d34 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce8:	d801      	bhi.n	8006cee <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006cea:	2308      	movs	r3, #8
 8006cec:	e00b      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006cee:	edd7 7a00 	vldr	s15, [r7]
 8006cf2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8006d38 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8006cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfe:	d801      	bhi.n	8006d04 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006d00:	2309      	movs	r3, #9
 8006d02:	e000      	b.n	8006d06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d04:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	3fcccccd 	.word	0x3fcccccd
 8006d20:	42500000 	.word	0x42500000
 8006d24:	42d00000 	.word	0x42d00000
 8006d28:	43500000 	.word	0x43500000
 8006d2c:	43d08000 	.word	0x43d08000
 8006d30:	44504000 	.word	0x44504000
 8006d34:	44d06000 	.word	0x44d06000
 8006d38:	45505000 	.word	0x45505000

08006d3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006d48:	edd7 7a00 	vldr	s15, [r7]
 8006d4c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d58:	d801      	bhi.n	8006d5e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e058      	b.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d5e:	edd7 7a00 	vldr	s15, [r7]
 8006d62:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6e:	d801      	bhi.n	8006d74 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e04d      	b.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d74:	edd7 7a00 	vldr	s15, [r7]
 8006d78:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006e38 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d84:	d801      	bhi.n	8006d8a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006d86:	2303      	movs	r3, #3
 8006d88:	e042      	b.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d8a:	edd7 7a00 	vldr	s15, [r7]
 8006d8e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006e3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9a:	d801      	bhi.n	8006da0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	e037      	b.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006da0:	edd7 7a00 	vldr	s15, [r7]
 8006da4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006e40 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db0:	d801      	bhi.n	8006db6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006db2:	2305      	movs	r3, #5
 8006db4:	e02c      	b.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006db6:	edd7 7a00 	vldr	s15, [r7]
 8006dba:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006e44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc6:	d801      	bhi.n	8006dcc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006dc8:	2306      	movs	r3, #6
 8006dca:	e021      	b.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006dcc:	edd7 7a00 	vldr	s15, [r7]
 8006dd0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006e48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ddc:	d801      	bhi.n	8006de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006dde:	2307      	movs	r3, #7
 8006de0:	e016      	b.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006de2:	edd7 7a00 	vldr	s15, [r7]
 8006de6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006e4c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df2:	d801      	bhi.n	8006df8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006df4:	2308      	movs	r3, #8
 8006df6:	e00b      	b.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006df8:	edd7 7a00 	vldr	s15, [r7]
 8006dfc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006e50 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e08:	d801      	bhi.n	8006e0e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006e0a:	2309      	movs	r3, #9
 8006e0c:	e000      	b.n	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e0e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006e10:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3320      	adds	r3, #32
 8006e16:	7bfa      	ldrb	r2, [r7, #15]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fb2a 	bl	8007474 <lsm6dso_gy_data_rate_set>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	e000      	b.n	8006e2e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	42500000 	.word	0x42500000
 8006e3c:	42d00000 	.word	0x42d00000
 8006e40:	43500000 	.word	0x43500000
 8006e44:	43d08000 	.word	0x43d08000
 8006e48:	44504000 	.word	0x44504000
 8006e4c:	44d06000 	.word	0x44d06000
 8006e50:	45505000 	.word	0x45505000

08006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006e60:	edd7 7a00 	vldr	s15, [r7]
 8006e64:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e70:	d801      	bhi.n	8006e76 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e058      	b.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006e76:	edd7 7a00 	vldr	s15, [r7]
 8006e7a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e86:	d801      	bhi.n	8006e8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e04d      	b.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006e8c:	edd7 7a00 	vldr	s15, [r7]
 8006e90:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006f3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9c:	d801      	bhi.n	8006ea2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e042      	b.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006ea2:	edd7 7a00 	vldr	s15, [r7]
 8006ea6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006f40 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb2:	d801      	bhi.n	8006eb8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	e037      	b.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006eb8:	edd7 7a00 	vldr	s15, [r7]
 8006ebc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006f44 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec8:	d801      	bhi.n	8006ece <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006eca:	2305      	movs	r3, #5
 8006ecc:	e02c      	b.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006ece:	edd7 7a00 	vldr	s15, [r7]
 8006ed2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006f48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ede:	d801      	bhi.n	8006ee4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8006ee0:	2306      	movs	r3, #6
 8006ee2:	e021      	b.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006ee4:	edd7 7a00 	vldr	s15, [r7]
 8006ee8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006f4c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef4:	d801      	bhi.n	8006efa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8006ef6:	2307      	movs	r3, #7
 8006ef8:	e016      	b.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006efa:	edd7 7a00 	vldr	s15, [r7]
 8006efe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006f50 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0a:	d801      	bhi.n	8006f10 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	e00b      	b.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f10:	edd7 7a00 	vldr	s15, [r7]
 8006f14:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006f54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f20:	d801      	bhi.n	8006f26 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006f22:	2309      	movs	r3, #9
 8006f24:	e000      	b.n	8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f26:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	42500000 	.word	0x42500000
 8006f40:	42d00000 	.word	0x42d00000
 8006f44:	43500000 	.word	0x43500000
 8006f48:	43d08000 	.word	0x43d08000
 8006f4c:	44504000 	.word	0x44504000
 8006f50:	44d06000 	.word	0x44d06000
 8006f54:	45505000 	.word	0x45505000

08006f58 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f58:	b590      	push	{r4, r7, lr}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	461a      	mov	r2, r3
 8006f64:	460b      	mov	r3, r1
 8006f66:	72fb      	strb	r3, [r7, #11]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	695c      	ldr	r4, [r3, #20]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	7b1b      	ldrb	r3, [r3, #12]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	7afb      	ldrb	r3, [r7, #11]
 8006f7c:	b299      	uxth	r1, r3
 8006f7e:	893b      	ldrh	r3, [r7, #8]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	47a0      	blx	r4
 8006f84:	4603      	mov	r3, r0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd90      	pop	{r4, r7, pc}

08006f8e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f8e:	b590      	push	{r4, r7, lr}
 8006f90:	b087      	sub	sp, #28
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	72fb      	strb	r3, [r7, #11]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	691c      	ldr	r4, [r3, #16]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	7b1b      	ldrb	r3, [r3, #12]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	7afb      	ldrb	r3, [r7, #11]
 8006fb2:	b299      	uxth	r1, r3
 8006fb4:	893b      	ldrh	r3, [r7, #8]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	47a0      	blx	r4
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd90      	pop	{r4, r7, pc}

08006fc4 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006fc4:	b590      	push	{r4, r7, lr}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	72fb      	strb	r3, [r7, #11]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685c      	ldr	r4, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68d8      	ldr	r0, [r3, #12]
 8006fe0:	893b      	ldrh	r3, [r7, #8]
 8006fe2:	7af9      	ldrb	r1, [r7, #11]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	47a0      	blx	r4
 8006fe8:	6178      	str	r0, [r7, #20]

  return ret;
 8006fea:	697b      	ldr	r3, [r7, #20]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	371c      	adds	r7, #28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd90      	pop	{r4, r7, pc}

08006ff4 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006ff4:	b590      	push	{r4, r7, lr}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	461a      	mov	r2, r3
 8007000:	460b      	mov	r3, r1
 8007002:	72fb      	strb	r3, [r7, #11]
 8007004:	4613      	mov	r3, r2
 8007006:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681c      	ldr	r4, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68d8      	ldr	r0, [r3, #12]
 8007010:	893b      	ldrh	r3, [r7, #8]
 8007012:	7af9      	ldrb	r1, [r7, #11]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	47a0      	blx	r4
 8007018:	6178      	str	r0, [r7, #20]

  return ret;
 800701a:	697b      	ldr	r3, [r7, #20]
}
 800701c:	4618      	mov	r0, r3
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	bd90      	pop	{r4, r7, pc}

08007024 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007030:	f107 0208 	add.w	r2, r7, #8
 8007034:	2301      	movs	r3, #1
 8007036:	2110      	movs	r1, #16
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff ffc3 	bl	8006fc4 <lsm6dso_read_reg>
 800703e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10f      	bne.n	8007066 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8007046:	78fb      	ldrb	r3, [r7, #3]
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	b2da      	uxtb	r2, r3
 800704e:	7a3b      	ldrb	r3, [r7, #8]
 8007050:	f362 0383 	bfi	r3, r2, #2, #2
 8007054:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007056:	f107 0208 	add.w	r2, r7, #8
 800705a:	2301      	movs	r3, #1
 800705c:	2110      	movs	r1, #16
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff ffc8 	bl	8006ff4 <lsm6dso_write_reg>
 8007064:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800707a:	f107 0208 	add.w	r2, r7, #8
 800707e:	2301      	movs	r3, #1
 8007080:	2110      	movs	r1, #16
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ff9e 	bl	8006fc4 <lsm6dso_read_reg>
 8007088:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800708a:	7a3b      	ldrb	r3, [r7, #8]
 800708c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b03      	cmp	r3, #3
 8007094:	d81a      	bhi.n	80070cc <lsm6dso_xl_full_scale_get+0x5c>
 8007096:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <lsm6dso_xl_full_scale_get+0x2c>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070ad 	.word	0x080070ad
 80070a0:	080070b5 	.word	0x080070b5
 80070a4:	080070bd 	.word	0x080070bd
 80070a8:	080070c5 	.word	0x080070c5
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	701a      	strb	r2, [r3, #0]
      break;
 80070b2:	e00f      	b.n	80070d4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2201      	movs	r2, #1
 80070b8:	701a      	strb	r2, [r3, #0]
      break;
 80070ba:	e00b      	b.n	80070d4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2202      	movs	r2, #2
 80070c0:	701a      	strb	r2, [r3, #0]
      break;
 80070c2:	e007      	b.n	80070d4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2203      	movs	r2, #3
 80070c8:	701a      	strb	r2, [r3, #0]
      break;
 80070ca:	e003      	b.n	80070d4 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
      break;
 80070d2:	bf00      	nop
  }

  return ret;
 80070d4:	68fb      	ldr	r3, [r7, #12]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop

080070e0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80070f0:	f107 030c 	add.w	r3, r7, #12
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fc90 	bl	8007a1c <lsm6dso_fsm_enable_get>
 80070fc:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <lsm6dso_xl_data_rate_set+0x28>
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	e0e0      	b.n	80072ca <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007108:	7b3b      	ldrb	r3, [r7, #12]
 800710a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800710e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007110:	7b3b      	ldrb	r3, [r7, #12]
 8007112:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007116:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007118:	4313      	orrs	r3, r2
 800711a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800711c:	7b3b      	ldrb	r3, [r7, #12]
 800711e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007122:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007124:	4313      	orrs	r3, r2
 8007126:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007128:	7b3b      	ldrb	r3, [r7, #12]
 800712a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800712e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007130:	4313      	orrs	r3, r2
 8007132:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007134:	7b3b      	ldrb	r3, [r7, #12]
 8007136:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800713a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800713c:	4313      	orrs	r3, r2
 800713e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007140:	7b3b      	ldrb	r3, [r7, #12]
 8007142:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007146:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007148:	4313      	orrs	r3, r2
 800714a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800714c:	7b3b      	ldrb	r3, [r7, #12]
 800714e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007152:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007154:	4313      	orrs	r3, r2
 8007156:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007158:	7b3b      	ldrb	r3, [r7, #12]
 800715a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800715e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007160:	4313      	orrs	r3, r2
 8007162:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007164:	7b7b      	ldrb	r3, [r7, #13]
 8007166:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800716a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800716c:	4313      	orrs	r3, r2
 800716e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007170:	7b7b      	ldrb	r3, [r7, #13]
 8007172:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007176:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007178:	4313      	orrs	r3, r2
 800717a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800717c:	7b7b      	ldrb	r3, [r7, #13]
 800717e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007182:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007184:	4313      	orrs	r3, r2
 8007186:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007188:	7b7b      	ldrb	r3, [r7, #13]
 800718a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800718e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007190:	4313      	orrs	r3, r2
 8007192:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007194:	7b7b      	ldrb	r3, [r7, #13]
 8007196:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800719a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800719c:	4313      	orrs	r3, r2
 800719e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80071a0:	7b7b      	ldrb	r3, [r7, #13]
 80071a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80071a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80071a8:	4313      	orrs	r3, r2
 80071aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80071ac:	7b7b      	ldrb	r3, [r7, #13]
 80071ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80071b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80071b4:	4313      	orrs	r3, r2
 80071b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80071b8:	7b7b      	ldrb	r3, [r7, #13]
 80071ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80071be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80071c0:	4313      	orrs	r3, r2
 80071c2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d164      	bne.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80071c8:	f107 030b 	add.w	r3, r7, #11
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fc46 	bl	8007a60 <lsm6dso_fsm_data_rate_get>
 80071d4:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <lsm6dso_xl_data_rate_set+0x100>
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	e074      	b.n	80072ca <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d852      	bhi.n	800728c <lsm6dso_xl_data_rate_set+0x1ac>
 80071e6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ec <lsm6dso_xl_data_rate_set+0x10c>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	080071fd 	.word	0x080071fd
 80071f0:	0800720f 	.word	0x0800720f
 80071f4:	0800722d 	.word	0x0800722d
 80071f8:	08007257 	.word	0x08007257
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d102      	bne.n	8007208 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007202:	2301      	movs	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007206:	e044      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	75fb      	strb	r3, [r7, #23]
        break;
 800720c:	e041      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800720e:	78fb      	ldrb	r3, [r7, #3]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007214:	2302      	movs	r3, #2
 8007216:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007218:	e03b      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d102      	bne.n	8007226 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007220:	2302      	movs	r3, #2
 8007222:	75fb      	strb	r3, [r7, #23]
        break;
 8007224:	e035      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	75fb      	strb	r3, [r7, #23]
        break;
 800722a:	e032      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007232:	2303      	movs	r3, #3
 8007234:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007236:	e02c      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d102      	bne.n	8007244 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800723e:	2303      	movs	r3, #3
 8007240:	75fb      	strb	r3, [r7, #23]
        break;
 8007242:	e026      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	2b02      	cmp	r3, #2
 8007248:	d102      	bne.n	8007250 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800724a:	2303      	movs	r3, #3
 800724c:	75fb      	strb	r3, [r7, #23]
        break;
 800724e:	e020      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	75fb      	strb	r3, [r7, #23]
        break;
 8007254:	e01d      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d102      	bne.n	8007262 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800725c:	2304      	movs	r3, #4
 800725e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007260:	e017      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d102      	bne.n	800726e <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007268:	2304      	movs	r3, #4
 800726a:	75fb      	strb	r3, [r7, #23]
        break;
 800726c:	e011      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	2b02      	cmp	r3, #2
 8007272:	d102      	bne.n	800727a <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007274:	2304      	movs	r3, #4
 8007276:	75fb      	strb	r3, [r7, #23]
        break;
 8007278:	e00b      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	2b03      	cmp	r3, #3
 800727e:	d102      	bne.n	8007286 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007280:	2304      	movs	r3, #4
 8007282:	75fb      	strb	r3, [r7, #23]
        break;
 8007284:	e005      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	75fb      	strb	r3, [r7, #23]
        break;
 800728a:	e002      	b.n	8007292 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	75fb      	strb	r3, [r7, #23]
        break;
 8007290:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007292:	f107 0208 	add.w	r2, r7, #8
 8007296:	2301      	movs	r3, #1
 8007298:	2110      	movs	r1, #16
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff fe92 	bl	8006fc4 <lsm6dso_read_reg>
 80072a0:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	7a3b      	ldrb	r3, [r7, #8]
 80072ac:	f362 1307 	bfi	r3, r2, #4, #4
 80072b0:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80072b2:	f107 0208 	add.w	r2, r7, #8
 80072b6:	2301      	movs	r3, #1
 80072b8:	2110      	movs	r1, #16
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fe9a 	bl	8006ff4 <lsm6dso_write_reg>
 80072c0:	4602      	mov	r2, r0
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4413      	add	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]

  return ret;
 80072c8:	693b      	ldr	r3, [r7, #16]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop

080072d4 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80072de:	f107 0208 	add.w	r2, r7, #8
 80072e2:	2301      	movs	r3, #1
 80072e4:	2110      	movs	r1, #16
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff fe6c 	bl	8006fc4 <lsm6dso_read_reg>
 80072ec:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80072ee:	7a3b      	ldrb	r3, [r7, #8]
 80072f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b0b      	cmp	r3, #11
 80072f8:	d84a      	bhi.n	8007390 <lsm6dso_xl_data_rate_get+0xbc>
 80072fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007300 <lsm6dso_xl_data_rate_get+0x2c>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007331 	.word	0x08007331
 8007304:	08007339 	.word	0x08007339
 8007308:	08007341 	.word	0x08007341
 800730c:	08007349 	.word	0x08007349
 8007310:	08007351 	.word	0x08007351
 8007314:	08007359 	.word	0x08007359
 8007318:	08007361 	.word	0x08007361
 800731c:	08007369 	.word	0x08007369
 8007320:	08007371 	.word	0x08007371
 8007324:	08007379 	.word	0x08007379
 8007328:	08007381 	.word	0x08007381
 800732c:	08007389 	.word	0x08007389
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2200      	movs	r2, #0
 8007334:	701a      	strb	r2, [r3, #0]
      break;
 8007336:	e02f      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2201      	movs	r2, #1
 800733c:	701a      	strb	r2, [r3, #0]
      break;
 800733e:	e02b      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2202      	movs	r2, #2
 8007344:	701a      	strb	r2, [r3, #0]
      break;
 8007346:	e027      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2203      	movs	r2, #3
 800734c:	701a      	strb	r2, [r3, #0]
      break;
 800734e:	e023      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2204      	movs	r2, #4
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	e01f      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2205      	movs	r2, #5
 800735c:	701a      	strb	r2, [r3, #0]
      break;
 800735e:	e01b      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2206      	movs	r2, #6
 8007364:	701a      	strb	r2, [r3, #0]
      break;
 8007366:	e017      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2207      	movs	r2, #7
 800736c:	701a      	strb	r2, [r3, #0]
      break;
 800736e:	e013      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2208      	movs	r2, #8
 8007374:	701a      	strb	r2, [r3, #0]
      break;
 8007376:	e00f      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2209      	movs	r2, #9
 800737c:	701a      	strb	r2, [r3, #0]
      break;
 800737e:	e00b      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	220a      	movs	r2, #10
 8007384:	701a      	strb	r2, [r3, #0]
      break;
 8007386:	e007      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	220b      	movs	r2, #11
 800738c:	701a      	strb	r2, [r3, #0]
      break;
 800738e:	e003      	b.n	8007398 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
      break;
 8007396:	bf00      	nop
  }

  return ret;
 8007398:	68fb      	ldr	r3, [r7, #12]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop

080073a4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80073b0:	f107 0208 	add.w	r2, r7, #8
 80073b4:	2301      	movs	r3, #1
 80073b6:	2111      	movs	r1, #17
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fe03 	bl	8006fc4 <lsm6dso_read_reg>
 80073be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10f      	bne.n	80073e6 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	7a3b      	ldrb	r3, [r7, #8]
 80073d0:	f362 0343 	bfi	r3, r2, #1, #3
 80073d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80073d6:	f107 0208 	add.w	r2, r7, #8
 80073da:	2301      	movs	r3, #1
 80073dc:	2111      	movs	r1, #17
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff fe08 	bl	8006ff4 <lsm6dso_write_reg>
 80073e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80073e6:	68fb      	ldr	r3, [r7, #12]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80073fa:	f107 0208 	add.w	r2, r7, #8
 80073fe:	2301      	movs	r3, #1
 8007400:	2111      	movs	r1, #17
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff fdde 	bl	8006fc4 <lsm6dso_read_reg>
 8007408:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800740a:	7a3b      	ldrb	r3, [r7, #8]
 800740c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b06      	cmp	r3, #6
 8007414:	d824      	bhi.n	8007460 <lsm6dso_gy_full_scale_get+0x70>
 8007416:	a201      	add	r2, pc, #4	@ (adr r2, 800741c <lsm6dso_gy_full_scale_get+0x2c>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007439 	.word	0x08007439
 8007420:	08007441 	.word	0x08007441
 8007424:	08007449 	.word	0x08007449
 8007428:	08007461 	.word	0x08007461
 800742c:	08007451 	.word	0x08007451
 8007430:	08007461 	.word	0x08007461
 8007434:	08007459 	.word	0x08007459
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
      break;
 800743e:	e013      	b.n	8007468 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2201      	movs	r2, #1
 8007444:	701a      	strb	r2, [r3, #0]
      break;
 8007446:	e00f      	b.n	8007468 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2202      	movs	r2, #2
 800744c:	701a      	strb	r2, [r3, #0]
      break;
 800744e:	e00b      	b.n	8007468 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2204      	movs	r2, #4
 8007454:	701a      	strb	r2, [r3, #0]
      break;
 8007456:	e007      	b.n	8007468 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2206      	movs	r2, #6
 800745c:	701a      	strb	r2, [r3, #0]
      break;
 800745e:	e003      	b.n	8007468 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
      break;
 8007466:	bf00      	nop
  }

  return ret;
 8007468:	68fb      	ldr	r3, [r7, #12]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop

08007474 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007484:	f107 030c 	add.w	r3, r7, #12
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fac6 	bl	8007a1c <lsm6dso_fsm_enable_get>
 8007490:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <lsm6dso_gy_data_rate_set+0x28>
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	e0e0      	b.n	800765e <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800749c:	7b3b      	ldrb	r3, [r7, #12]
 800749e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80074a4:	7b3b      	ldrb	r3, [r7, #12]
 80074a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80074aa:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80074b0:	7b3b      	ldrb	r3, [r7, #12]
 80074b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074b6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80074b8:	4313      	orrs	r3, r2
 80074ba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80074bc:	7b3b      	ldrb	r3, [r7, #12]
 80074be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074c2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80074c4:	4313      	orrs	r3, r2
 80074c6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80074c8:	7b3b      	ldrb	r3, [r7, #12]
 80074ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80074ce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80074d0:	4313      	orrs	r3, r2
 80074d2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80074d4:	7b3b      	ldrb	r3, [r7, #12]
 80074d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80074da:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80074dc:	4313      	orrs	r3, r2
 80074de:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80074e0:	7b3b      	ldrb	r3, [r7, #12]
 80074e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80074e6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80074e8:	4313      	orrs	r3, r2
 80074ea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80074ec:	7b3b      	ldrb	r3, [r7, #12]
 80074ee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80074f2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80074f4:	4313      	orrs	r3, r2
 80074f6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80074f8:	7b7b      	ldrb	r3, [r7, #13]
 80074fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074fe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007500:	4313      	orrs	r3, r2
 8007502:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007504:	7b7b      	ldrb	r3, [r7, #13]
 8007506:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800750a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800750c:	4313      	orrs	r3, r2
 800750e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007510:	7b7b      	ldrb	r3, [r7, #13]
 8007512:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007516:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007518:	4313      	orrs	r3, r2
 800751a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800751c:	7b7b      	ldrb	r3, [r7, #13]
 800751e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007522:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007524:	4313      	orrs	r3, r2
 8007526:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007528:	7b7b      	ldrb	r3, [r7, #13]
 800752a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800752e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007530:	4313      	orrs	r3, r2
 8007532:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007534:	7b7b      	ldrb	r3, [r7, #13]
 8007536:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800753a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800753c:	4313      	orrs	r3, r2
 800753e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007540:	7b7b      	ldrb	r3, [r7, #13]
 8007542:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007546:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007548:	4313      	orrs	r3, r2
 800754a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800754c:	7b7b      	ldrb	r3, [r7, #13]
 800754e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007552:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007554:	4313      	orrs	r3, r2
 8007556:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007558:	2b01      	cmp	r3, #1
 800755a:	d164      	bne.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800755c:	f107 030b 	add.w	r3, r7, #11
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa7c 	bl	8007a60 <lsm6dso_fsm_data_rate_get>
 8007568:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <lsm6dso_gy_data_rate_set+0x100>
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	e074      	b.n	800765e <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	2b03      	cmp	r3, #3
 8007578:	d852      	bhi.n	8007620 <lsm6dso_gy_data_rate_set+0x1ac>
 800757a:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <lsm6dso_gy_data_rate_set+0x10c>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	08007591 	.word	0x08007591
 8007584:	080075a3 	.word	0x080075a3
 8007588:	080075c1 	.word	0x080075c1
 800758c:	080075eb 	.word	0x080075eb
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d102      	bne.n	800759c <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8007596:	2301      	movs	r3, #1
 8007598:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800759a:	e044      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	75fb      	strb	r3, [r7, #23]
        break;
 80075a0:	e041      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d102      	bne.n	80075ae <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80075a8:	2302      	movs	r3, #2
 80075aa:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80075ac:	e03b      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d102      	bne.n	80075ba <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80075b4:	2302      	movs	r3, #2
 80075b6:	75fb      	strb	r3, [r7, #23]
        break;
 80075b8:	e035      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80075ba:	78fb      	ldrb	r3, [r7, #3]
 80075bc:	75fb      	strb	r3, [r7, #23]
        break;
 80075be:	e032      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80075c6:	2303      	movs	r3, #3
 80075c8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80075ca:	e02c      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80075cc:	78fb      	ldrb	r3, [r7, #3]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d102      	bne.n	80075d8 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80075d2:	2303      	movs	r3, #3
 80075d4:	75fb      	strb	r3, [r7, #23]
        break;
 80075d6:	e026      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d102      	bne.n	80075e4 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80075de:	2303      	movs	r3, #3
 80075e0:	75fb      	strb	r3, [r7, #23]
        break;
 80075e2:	e020      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	75fb      	strb	r3, [r7, #23]
        break;
 80075e8:	e01d      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80075f0:	2304      	movs	r3, #4
 80075f2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80075f4:	e017      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d102      	bne.n	8007602 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80075fc:	2304      	movs	r3, #4
 80075fe:	75fb      	strb	r3, [r7, #23]
        break;
 8007600:	e011      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8007602:	78fb      	ldrb	r3, [r7, #3]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d102      	bne.n	800760e <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007608:	2304      	movs	r3, #4
 800760a:	75fb      	strb	r3, [r7, #23]
        break;
 800760c:	e00b      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	2b03      	cmp	r3, #3
 8007612:	d102      	bne.n	800761a <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007614:	2304      	movs	r3, #4
 8007616:	75fb      	strb	r3, [r7, #23]
        break;
 8007618:	e005      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	75fb      	strb	r3, [r7, #23]
        break;
 800761e:	e002      	b.n	8007626 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	75fb      	strb	r3, [r7, #23]
        break;
 8007624:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007626:	f107 0208 	add.w	r2, r7, #8
 800762a:	2301      	movs	r3, #1
 800762c:	2111      	movs	r1, #17
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff fcc8 	bl	8006fc4 <lsm6dso_read_reg>
 8007634:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	b2da      	uxtb	r2, r3
 800763e:	7a3b      	ldrb	r3, [r7, #8]
 8007640:	f362 1307 	bfi	r3, r2, #4, #4
 8007644:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007646:	f107 0208 	add.w	r2, r7, #8
 800764a:	2301      	movs	r3, #1
 800764c:	2111      	movs	r1, #17
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fcd0 	bl	8006ff4 <lsm6dso_write_reg>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4413      	add	r3, r2
 800765a:	613b      	str	r3, [r7, #16]

  return ret;
 800765c:	693b      	ldr	r3, [r7, #16]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop

08007668 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007672:	f107 0208 	add.w	r2, r7, #8
 8007676:	2301      	movs	r3, #1
 8007678:	2111      	movs	r1, #17
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fca2 	bl	8006fc4 <lsm6dso_read_reg>
 8007680:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8007682:	7a3b      	ldrb	r3, [r7, #8]
 8007684:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b0a      	cmp	r3, #10
 800768c:	d844      	bhi.n	8007718 <lsm6dso_gy_data_rate_get+0xb0>
 800768e:	a201      	add	r2, pc, #4	@ (adr r2, 8007694 <lsm6dso_gy_data_rate_get+0x2c>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076c1 	.word	0x080076c1
 8007698:	080076c9 	.word	0x080076c9
 800769c:	080076d1 	.word	0x080076d1
 80076a0:	080076d9 	.word	0x080076d9
 80076a4:	080076e1 	.word	0x080076e1
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076f1 	.word	0x080076f1
 80076b0:	080076f9 	.word	0x080076f9
 80076b4:	08007701 	.word	0x08007701
 80076b8:	08007709 	.word	0x08007709
 80076bc:	08007711 	.word	0x08007711
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2200      	movs	r2, #0
 80076c4:	701a      	strb	r2, [r3, #0]
      break;
 80076c6:	e02b      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2201      	movs	r2, #1
 80076cc:	701a      	strb	r2, [r3, #0]
      break;
 80076ce:	e027      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2202      	movs	r2, #2
 80076d4:	701a      	strb	r2, [r3, #0]
      break;
 80076d6:	e023      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2203      	movs	r2, #3
 80076dc:	701a      	strb	r2, [r3, #0]
      break;
 80076de:	e01f      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2204      	movs	r2, #4
 80076e4:	701a      	strb	r2, [r3, #0]
      break;
 80076e6:	e01b      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2205      	movs	r2, #5
 80076ec:	701a      	strb	r2, [r3, #0]
      break;
 80076ee:	e017      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2206      	movs	r2, #6
 80076f4:	701a      	strb	r2, [r3, #0]
      break;
 80076f6:	e013      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2207      	movs	r2, #7
 80076fc:	701a      	strb	r2, [r3, #0]
      break;
 80076fe:	e00f      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2208      	movs	r2, #8
 8007704:	701a      	strb	r2, [r3, #0]
      break;
 8007706:	e00b      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2209      	movs	r2, #9
 800770c:	701a      	strb	r2, [r3, #0]
      break;
 800770e:	e007      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	220a      	movs	r2, #10
 8007714:	701a      	strb	r2, [r3, #0]
      break;
 8007716:	e003      	b.n	8007720 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
      break;
 800771e:	bf00      	nop
  }

  return ret;
 8007720:	68fb      	ldr	r3, [r7, #12]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop

0800772c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007738:	f107 0208 	add.w	r2, r7, #8
 800773c:	2301      	movs	r3, #1
 800773e:	2112      	movs	r1, #18
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff fc3f 	bl	8006fc4 <lsm6dso_read_reg>
 8007746:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10f      	bne.n	800776e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	b2da      	uxtb	r2, r3
 8007756:	7a3b      	ldrb	r3, [r7, #8]
 8007758:	f362 1386 	bfi	r3, r2, #6, #1
 800775c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800775e:	f107 0208 	add.w	r2, r7, #8
 8007762:	2301      	movs	r3, #1
 8007764:	2112      	movs	r1, #18
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff fc44 	bl	8006ff4 <lsm6dso_write_reg>
 800776c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800776e:	68fb      	ldr	r3, [r7, #12]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007782:	f107 020c 	add.w	r2, r7, #12
 8007786:	2306      	movs	r3, #6
 8007788:	2122      	movs	r1, #34	@ 0x22
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff fc1a 	bl	8006fc4 <lsm6dso_read_reg>
 8007790:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007792:	7b7b      	ldrb	r3, [r7, #13]
 8007794:	b21a      	sxth	r2, r3
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	7b3a      	ldrb	r2, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	b21a      	sxth	r2, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80077b2:	7bfa      	ldrb	r2, [r7, #15]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	3302      	adds	r3, #2
 80077b8:	b212      	sxth	r2, r2
 80077ba:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	3302      	adds	r3, #2
 80077c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	7bba      	ldrb	r2, [r7, #14]
 80077cc:	4413      	add	r3, r2
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	3302      	adds	r3, #2
 80077d4:	b212      	sxth	r2, r2
 80077d6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80077d8:	7c7a      	ldrb	r2, [r7, #17]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	3304      	adds	r3, #4
 80077de:	b212      	sxth	r2, r2
 80077e0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	3304      	adds	r3, #4
 80077e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	7c3a      	ldrb	r2, [r7, #16]
 80077f2:	4413      	add	r3, r2
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	3304      	adds	r3, #4
 80077fa:	b212      	sxth	r2, r2
 80077fc:	801a      	strh	r2, [r3, #0]

  return ret;
 80077fe:	697b      	ldr	r3, [r7, #20]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007812:	f107 020c 	add.w	r2, r7, #12
 8007816:	2306      	movs	r3, #6
 8007818:	2128      	movs	r1, #40	@ 0x28
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff fbd2 	bl	8006fc4 <lsm6dso_read_reg>
 8007820:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007822:	7b7b      	ldrb	r3, [r7, #13]
 8007824:	b21a      	sxth	r2, r3
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007830:	b29b      	uxth	r3, r3
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	b29b      	uxth	r3, r3
 8007836:	7b3a      	ldrb	r2, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	b29b      	uxth	r3, r3
 800783c:	b21a      	sxth	r2, r3
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007842:	7bfa      	ldrb	r2, [r7, #15]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	3302      	adds	r3, #2
 8007848:	b212      	sxth	r2, r2
 800784a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	3302      	adds	r3, #2
 8007850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007854:	b29b      	uxth	r3, r3
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	b29b      	uxth	r3, r3
 800785a:	7bba      	ldrb	r2, [r7, #14]
 800785c:	4413      	add	r3, r2
 800785e:	b29a      	uxth	r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	3302      	adds	r3, #2
 8007864:	b212      	sxth	r2, r2
 8007866:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007868:	7c7a      	ldrb	r2, [r7, #17]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	3304      	adds	r3, #4
 800786e:	b212      	sxth	r2, r2
 8007870:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	3304      	adds	r3, #4
 8007876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800787a:	b29b      	uxth	r3, r3
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	b29b      	uxth	r3, r3
 8007880:	7c3a      	ldrb	r2, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	b29a      	uxth	r2, r3
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	3304      	adds	r3, #4
 800788a:	b212      	sxth	r2, r2
 800788c:	801a      	strh	r2, [r3, #0]

  return ret;
 800788e:	697b      	ldr	r3, [r7, #20]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80078a4:	2300      	movs	r3, #0
 80078a6:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	7a3b      	ldrb	r3, [r7, #8]
 80078b2:	f362 1387 	bfi	r3, r2, #6, #2
 80078b6:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80078b8:	f107 0208 	add.w	r2, r7, #8
 80078bc:	2301      	movs	r3, #1
 80078be:	2101      	movs	r1, #1
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fb97 	bl	8006ff4 <lsm6dso_write_reg>
 80078c6:	60f8      	str	r0, [r7, #12]

  return ret;
 80078c8:	68fb      	ldr	r3, [r7, #12]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80078dc:	2301      	movs	r3, #1
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	210f      	movs	r1, #15
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff fb6e 	bl	8006fc4 <lsm6dso_read_reg>
 80078e8:	60f8      	str	r0, [r7, #12]

  return ret;
 80078ea:	68fb      	ldr	r3, [r7, #12]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007900:	f107 0208 	add.w	r2, r7, #8
 8007904:	2301      	movs	r3, #1
 8007906:	2112      	movs	r1, #18
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff fb5b 	bl	8006fc4 <lsm6dso_read_reg>
 800790e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10f      	bne.n	8007936 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	b2da      	uxtb	r2, r3
 800791e:	7a3b      	ldrb	r3, [r7, #8]
 8007920:	f362 0382 	bfi	r3, r2, #2, #1
 8007924:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007926:	f107 0208 	add.w	r2, r7, #8
 800792a:	2301      	movs	r3, #1
 800792c:	2112      	movs	r1, #18
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff fb60 	bl	8006ff4 <lsm6dso_write_reg>
 8007934:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007936:	68fb      	ldr	r3, [r7, #12]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800794c:	f107 020c 	add.w	r2, r7, #12
 8007950:	2301      	movs	r3, #1
 8007952:	2118      	movs	r1, #24
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fb35 	bl	8006fc4 <lsm6dso_read_reg>
 800795a:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800795c:	78fb      	ldrb	r3, [r7, #3]
 800795e:	09db      	lsrs	r3, r3, #7
 8007960:	b2db      	uxtb	r3, r3
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	b2da      	uxtb	r2, r3
 8007968:	7b3b      	ldrb	r3, [r7, #12]
 800796a:	f362 0341 	bfi	r3, r2, #1, #1
 800796e:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007970:	f107 020c 	add.w	r2, r7, #12
 8007974:	2301      	movs	r3, #1
 8007976:	2118      	movs	r1, #24
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff fb3b 	bl	8006ff4 <lsm6dso_write_reg>
 800797e:	4602      	mov	r2, r0
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4413      	add	r3, r2
 8007984:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <lsm6dso_i3c_disable_set+0x50>
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	e01b      	b.n	80079c8 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007990:	f107 0210 	add.w	r2, r7, #16
 8007994:	2301      	movs	r3, #1
 8007996:	2162      	movs	r1, #98	@ 0x62
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff fb13 	bl	8006fc4 <lsm6dso_read_reg>
 800799e:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	f003 0303 	and.w	r3, r3, #3
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	7c3b      	ldrb	r3, [r7, #16]
 80079aa:	f362 03c4 	bfi	r3, r2, #3, #2
 80079ae:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80079b0:	f107 0210 	add.w	r2, r7, #16
 80079b4:	2301      	movs	r3, #1
 80079b6:	2162      	movs	r1, #98	@ 0x62
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff fb1b 	bl	8006ff4 <lsm6dso_write_reg>
 80079be:	4602      	mov	r2, r0
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	4413      	add	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]

  return ret;
 80079c6:	697b      	ldr	r3, [r7, #20]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80079dc:	f107 0208 	add.w	r2, r7, #8
 80079e0:	2301      	movs	r3, #1
 80079e2:	210a      	movs	r1, #10
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff faed 	bl	8006fc4 <lsm6dso_read_reg>
 80079ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10f      	bne.n	8007a12 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	7a3b      	ldrb	r3, [r7, #8]
 80079fc:	f362 0302 	bfi	r3, r2, #0, #3
 8007a00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007a02:	f107 0208 	add.w	r2, r7, #8
 8007a06:	2301      	movs	r3, #1
 8007a08:	210a      	movs	r1, #10
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff faf2 	bl	8006ff4 <lsm6dso_write_reg>
 8007a10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a12:	68fb      	ldr	r3, [r7, #12]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007a26:	2102      	movs	r1, #2
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ff35 	bl	8007898 <lsm6dso_mem_bank_set>
 8007a2e:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007a30:	2302      	movs	r3, #2
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	2146      	movs	r1, #70	@ 0x46
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff fac4 	bl	8006fc4 <lsm6dso_read_reg>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff ff26 	bl	8007898 <lsm6dso_mem_bank_set>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]

  return ret;
 8007a54:	68fb      	ldr	r3, [r7, #12]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ff13 	bl	8007898 <lsm6dso_mem_bank_set>
 8007a72:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <lsm6dso_fsm_data_rate_get+0x1e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	e03a      	b.n	8007af4 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8007a7e:	f107 0208 	add.w	r2, r7, #8
 8007a82:	2301      	movs	r3, #1
 8007a84:	215f      	movs	r1, #95	@ 0x5f
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff fa9c 	bl	8006fc4 <lsm6dso_read_reg>
 8007a8c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d125      	bne.n	8007ae0 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8007a94:	7a3b      	ldrb	r3, [r7, #8]
 8007a96:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d81b      	bhi.n	8007ad8 <lsm6dso_fsm_data_rate_get+0x78>
 8007aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <lsm6dso_fsm_data_rate_get+0x48>)
 8007aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa6:	bf00      	nop
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007ac1 	.word	0x08007ac1
 8007ab0:	08007ac9 	.word	0x08007ac9
 8007ab4:	08007ad1 	.word	0x08007ad1
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
      break;
 8007abe:	e010      	b.n	8007ae2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	701a      	strb	r2, [r3, #0]
      break;
 8007ac6:	e00c      	b.n	8007ae2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2202      	movs	r2, #2
 8007acc:	701a      	strb	r2, [r3, #0]
      break;
 8007ace:	e008      	b.n	8007ae2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	701a      	strb	r2, [r3, #0]
      break;
 8007ad6:	e004      	b.n	8007ae2 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2200      	movs	r2, #0
 8007adc:	701a      	strb	r2, [r3, #0]
      break;
 8007ade:	e000      	b.n	8007ae2 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8007ae0:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fed7 	bl	8007898 <lsm6dso_mem_bank_set>
 8007aea:	4602      	mov	r2, r0
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]

  return ret;
 8007af2:	68fb      	ldr	r3, [r7, #12]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08e      	sub	sp, #56	@ 0x38
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d06e      	beq.n	8007bf6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	f200 809d 	bhi.w	8007c5a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <IKS01A3_MOTION_SENSOR_Init+0x32>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d032      	beq.n	8007b92 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8007b2c:	e095      	b.n	8007c5a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8007b2e:	6838      	ldr	r0, [r7, #0]
 8007b30:	f000 f9ae 	bl	8007e90 <LSM6DSO_0_Probe>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3e:	e0cc      	b.n	8007cda <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007b40:	4a68      	ldr	r2, [pc, #416]	@ (8007ce4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4967      	ldr	r1, [pc, #412]	@ (8007ce8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b52:	f107 010c 	add.w	r1, r7, #12
 8007b56:	4610      	mov	r0, r2
 8007b58:	4798      	blx	r3
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b60:	f06f 0306 	mvn.w	r3, #6
 8007b64:	e0b9      	b.n	8007cda <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007b66:	7b3b      	ldrb	r3, [r7, #12]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d103      	bne.n	8007b74 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8007b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6e:	f043 0302 	orr.w	r3, r3, #2
 8007b72:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007b74:	7b7b      	ldrb	r3, [r7, #13]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d103      	bne.n	8007b82 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8007b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d16c      	bne.n	8007c62 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8007b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8a:	f043 0304 	orr.w	r3, r3, #4
 8007b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007b90:	e067      	b.n	8007c62 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8007b92:	6838      	ldr	r0, [r7, #0]
 8007b94:	f000 fa3c 	bl	8008010 <LIS2DW12_0_Probe>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba2:	e09a      	b.n	8007cda <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8007ce4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	494e      	ldr	r1, [pc, #312]	@ (8007ce8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007bb6:	f107 010c 	add.w	r1, r7, #12
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4798      	blx	r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007bc4:	f06f 0306 	mvn.w	r3, #6
 8007bc8:	e087      	b.n	8007cda <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007bca:	7b3b      	ldrb	r3, [r7, #12]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d103      	bne.n	8007bd8 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8007bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd2:	f043 0302 	orr.w	r3, r3, #2
 8007bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007bd8:	7b7b      	ldrb	r3, [r7, #13]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d103      	bne.n	8007be6 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8007bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d13c      	bne.n	8007c66 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	f043 0304 	orr.w	r3, r3, #4
 8007bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007bf4:	e037      	b.n	8007c66 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8007bf6:	6838      	ldr	r0, [r7, #0]
 8007bf8:	f000 fab2 	bl	8008160 <LIS2MDL_0_Probe>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007c02:	f04f 33ff 	mov.w	r3, #4294967295
 8007c06:	e068      	b.n	8007cda <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c08:	4a36      	ldr	r2, [pc, #216]	@ (8007ce4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4935      	ldr	r1, [pc, #212]	@ (8007ce8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c1a:	f107 010c 	add.w	r1, r7, #12
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4798      	blx	r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c28:	f06f 0306 	mvn.w	r3, #6
 8007c2c:	e055      	b.n	8007cda <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007c2e:	7b3b      	ldrb	r3, [r7, #12]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d103      	bne.n	8007c3c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8007c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c36:	f043 0302 	orr.w	r3, r3, #2
 8007c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007c3c:	7b7b      	ldrb	r3, [r7, #13]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d103      	bne.n	8007c4a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8007c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c44:	f043 0301 	orr.w	r3, r3, #1
 8007c48:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d10c      	bne.n	8007c6a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8007c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c52:	f043 0304 	orr.w	r3, r3, #4
 8007c56:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007c58:	e007      	b.n	8007c6a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007c5a:	f06f 0301 	mvn.w	r3, #1
 8007c5e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8007c60:	e004      	b.n	8007c6c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007c62:	bf00      	nop
 8007c64:	e002      	b.n	8007c6c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007c66:	bf00      	nop
 8007c68:	e000      	b.n	8007c6c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007c6a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8007c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c74:	e031      	b.n	8007cda <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007c76:	2300      	movs	r3, #0
 8007c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c7a:	e02a      	b.n	8007cd2 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	4013      	ands	r3, r2
 8007c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d11e      	bne.n	8007cc6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8007c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d118      	bne.n	8007cc6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8007c94:	4a15      	ldr	r2, [pc, #84]	@ (8007cec <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c9c:	4814      	ldr	r0, [pc, #80]	@ (8007cf0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	4413      	add	r3, r2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	490e      	ldr	r1, [pc, #56]	@ (8007ce8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4798      	blx	r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007cc0:	f06f 0304 	mvn.w	r3, #4
 8007cc4:	e009      	b.n	8007cda <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cce:	3301      	adds	r3, #1
 8007cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d9d1      	bls.n	8007c7c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8007cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3738      	adds	r7, #56	@ 0x38
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	2000078c 	.word	0x2000078c
 8007ce8:	2000075c 	.word	0x2000075c
 8007cec:	200000cc 	.word	0x200000cc
 8007cf0:	20000768 	.word	0x20000768

08007cf4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d903      	bls.n	8007d0e <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d06:	f06f 0301 	mvn.w	r3, #1
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e029      	b.n	8007d62 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007d0e:	4a17      	ldr	r2, [pc, #92]	@ (8007d6c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d11d      	bne.n	8007d5c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8007d20:	4a13      	ldr	r2, [pc, #76]	@ (8007d70 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d28:	4812      	ldr	r0, [pc, #72]	@ (8007d74 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	4413      	add	r3, r2
 8007d32:	440b      	add	r3, r1
 8007d34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	490f      	ldr	r1, [pc, #60]	@ (8007d78 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d4e:	f06f 0304 	mvn.w	r3, #4
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	e005      	b.n	8007d62 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	e002      	b.n	8007d62 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007d5c:	f06f 0301 	mvn.w	r3, #1
 8007d60:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007d62:	697b      	ldr	r3, [r7, #20]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20000798 	.word	0x20000798
 8007d70:	200000cc 	.word	0x200000cc
 8007d74:	20000768 	.word	0x20000768
 8007d78:	2000075c 	.word	0x2000075c

08007d7c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d903      	bls.n	8007d98 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d90:	f06f 0301 	mvn.w	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e02a      	b.n	8007dee <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007d98:	4a17      	ldr	r2, [pc, #92]	@ (8007df8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	4013      	ands	r3, r2
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d11e      	bne.n	8007de8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8007daa:	4a14      	ldr	r2, [pc, #80]	@ (8007dfc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007db2:	4813      	ldr	r0, [pc, #76]	@ (8007e00 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	4613      	mov	r3, r2
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	4413      	add	r3, r2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	490f      	ldr	r1, [pc, #60]	@ (8007e04 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007dcc:	ed97 0a01 	vldr	s0, [r7, #4]
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	4798      	blx	r3
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007dda:	f06f 0304 	mvn.w	r3, #4
 8007dde:	617b      	str	r3, [r7, #20]
 8007de0:	e005      	b.n	8007dee <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007de2:	2300      	movs	r3, #0
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	e002      	b.n	8007dee <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007de8:	f06f 0301 	mvn.w	r3, #1
 8007dec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007dee:	697b      	ldr	r3, [r7, #20]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	20000798 	.word	0x20000798
 8007dfc:	200000cc 	.word	0x200000cc
 8007e00:	20000768 	.word	0x20000768
 8007e04:	2000075c 	.word	0x2000075c

08007e08 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d903      	bls.n	8007e22 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e1a:	f06f 0301 	mvn.w	r3, #1
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	e029      	b.n	8007e76 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007e22:	4a17      	ldr	r2, [pc, #92]	@ (8007e80 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d11d      	bne.n	8007e70 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8007e34:	4a13      	ldr	r2, [pc, #76]	@ (8007e84 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e3c:	4812      	ldr	r0, [pc, #72]	@ (8007e88 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	4613      	mov	r3, r2
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	4413      	add	r3, r2
 8007e46:	440b      	add	r3, r1
 8007e48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	490f      	ldr	r1, [pc, #60]	@ (8007e8c <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e62:	f06f 0304 	mvn.w	r3, #4
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	e005      	b.n	8007e76 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	e002      	b.n	8007e76 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007e70:	f06f 0301 	mvn.w	r3, #1
 8007e74:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007e76:	697b      	ldr	r3, [r7, #20]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000798 	.word	0x20000798
 8007e84:	200000cc 	.word	0x200000cc
 8007e88:	20000768 	.word	0x20000768
 8007e8c:	2000075c 	.word	0x2000075c

08007e90 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b094      	sub	sp, #80	@ 0x50
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8007ea0:	23d7      	movs	r3, #215	@ 0xd7
 8007ea2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8007fd4 <LSM6DSO_0_Probe+0x144>)
 8007ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007eaa:	4b4b      	ldr	r3, [pc, #300]	@ (8007fd8 <LSM6DSO_0_Probe+0x148>)
 8007eac:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007eae:	4b4b      	ldr	r3, [pc, #300]	@ (8007fdc <LSM6DSO_0_Probe+0x14c>)
 8007eb0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe0 <LSM6DSO_0_Probe+0x150>)
 8007eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe4 <LSM6DSO_0_Probe+0x154>)
 8007eb8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8007eba:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe8 <LSM6DSO_0_Probe+0x158>)
 8007ebc:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8007ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4849      	ldr	r0, [pc, #292]	@ (8007fec <LSM6DSO_0_Probe+0x15c>)
 8007ec6:	f7fd fe3f 	bl	8005b48 <LSM6DSO_RegisterBusIO>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ed0:	f06f 0306 	mvn.w	r3, #6
 8007ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ed6:	e077      	b.n	8007fc8 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8007ed8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8007edc:	4619      	mov	r1, r3
 8007ede:	4843      	ldr	r0, [pc, #268]	@ (8007fec <LSM6DSO_0_Probe+0x15c>)
 8007ee0:	f7fd ff3c 	bl	8005d5c <LSM6DSO_ReadID>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007eea:	f06f 0306 	mvn.w	r3, #6
 8007eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ef0:	e06a      	b.n	8007fc8 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8007ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ef6:	2b6c      	cmp	r3, #108	@ 0x6c
 8007ef8:	d003      	beq.n	8007f02 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007efa:	f06f 0306 	mvn.w	r3, #6
 8007efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f00:	e062      	b.n	8007fc8 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8007f02:	f107 030c 	add.w	r3, r7, #12
 8007f06:	4619      	mov	r1, r3
 8007f08:	4838      	ldr	r0, [pc, #224]	@ (8007fec <LSM6DSO_0_Probe+0x15c>)
 8007f0a:	f7fd ff3d 	bl	8005d88 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8007f0e:	7b7b      	ldrb	r3, [r7, #13]
 8007f10:	461a      	mov	r2, r3
 8007f12:	7b3b      	ldrb	r3, [r7, #12]
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	431a      	orrs	r2, r3
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	4a34      	ldr	r2, [pc, #208]	@ (8007ff0 <LSM6DSO_0_Probe+0x160>)
 8007f20:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8007f22:	4b34      	ldr	r3, [pc, #208]	@ (8007ff4 <LSM6DSO_0_Probe+0x164>)
 8007f24:	4a31      	ldr	r2, [pc, #196]	@ (8007fec <LSM6DSO_0_Probe+0x15c>)
 8007f26:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8007f28:	4b33      	ldr	r3, [pc, #204]	@ (8007ff8 <LSM6DSO_0_Probe+0x168>)
 8007f2a:	4a34      	ldr	r2, [pc, #208]	@ (8007ffc <LSM6DSO_0_Probe+0x16c>)
 8007f2c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8007f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d11d      	bne.n	8007f70 <LSM6DSO_0_Probe+0xe0>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d018      	beq.n	8007f70 <LSM6DSO_0_Probe+0xe0>
 8007f3e:	7b7b      	ldrb	r3, [r7, #13]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d115      	bne.n	8007f70 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8007f44:	4b2e      	ldr	r3, [pc, #184]	@ (8008000 <LSM6DSO_0_Probe+0x170>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	4a2e      	ldr	r2, [pc, #184]	@ (8008004 <LSM6DSO_0_Probe+0x174>)
 8007f4a:	492f      	ldr	r1, [pc, #188]	@ (8008008 <LSM6DSO_0_Probe+0x178>)
 8007f4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8007f50:	4b29      	ldr	r3, [pc, #164]	@ (8007ff8 <LSM6DSO_0_Probe+0x168>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a27      	ldr	r2, [pc, #156]	@ (8007ff4 <LSM6DSO_0_Probe+0x164>)
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	4798      	blx	r3
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f64:	f06f 0304 	mvn.w	r3, #4
 8007f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f6a:	e001      	b.n	8007f70 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8007f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d11d      	bne.n	8007fb2 <LSM6DSO_0_Probe+0x122>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d018      	beq.n	8007fb2 <LSM6DSO_0_Probe+0x122>
 8007f80:	7b3b      	ldrb	r3, [r7, #12]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d115      	bne.n	8007fb2 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8007f86:	4b1e      	ldr	r3, [pc, #120]	@ (8008000 <LSM6DSO_0_Probe+0x170>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008004 <LSM6DSO_0_Probe+0x174>)
 8007f8c:	491f      	ldr	r1, [pc, #124]	@ (800800c <LSM6DSO_0_Probe+0x17c>)
 8007f8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8007f92:	4b19      	ldr	r3, [pc, #100]	@ (8007ff8 <LSM6DSO_0_Probe+0x168>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a16      	ldr	r2, [pc, #88]	@ (8007ff4 <LSM6DSO_0_Probe+0x164>)
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fa6:	f06f 0304 	mvn.w	r3, #4
 8007faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fac:	e001      	b.n	8007fb2 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8007fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d107      	bne.n	8007fc8 <LSM6DSO_0_Probe+0x138>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fc2:	f06f 0304 	mvn.w	r3, #4
 8007fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8007fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3750      	adds	r7, #80	@ 0x50
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	08003125 	.word	0x08003125
 8007fd8:	080031a1 	.word	0x080031a1
 8007fdc:	08003255 	.word	0x08003255
 8007fe0:	080031f1 	.word	0x080031f1
 8007fe4:	080032b9 	.word	0x080032b9
 8007fe8:	08001a2d 	.word	0x08001a2d
 8007fec:	200007a4 	.word	0x200007a4
 8007ff0:	20000798 	.word	0x20000798
 8007ff4:	2000075c 	.word	0x2000075c
 8007ff8:	2000078c 	.word	0x2000078c
 8007ffc:	20000074 	.word	0x20000074
 8008000:	200000cc 	.word	0x200000cc
 8008004:	20000768 	.word	0x20000768
 8008008:	200000a8 	.word	0x200000a8
 800800c:	20000084 	.word	0x20000084

08008010 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b094      	sub	sp, #80	@ 0x50
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008018:	2300      	movs	r3, #0
 800801a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800801c:	2300      	movs	r3, #0
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008020:	2333      	movs	r3, #51	@ 0x33
 8008022:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008026:	4b40      	ldr	r3, [pc, #256]	@ (8008128 <LIS2DW12_0_Probe+0x118>)
 8008028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800802a:	4b40      	ldr	r3, [pc, #256]	@ (800812c <LIS2DW12_0_Probe+0x11c>)
 800802c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800802e:	4b40      	ldr	r3, [pc, #256]	@ (8008130 <LIS2DW12_0_Probe+0x120>)
 8008030:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008032:	4b40      	ldr	r3, [pc, #256]	@ (8008134 <LIS2DW12_0_Probe+0x124>)
 8008034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008036:	4b40      	ldr	r3, [pc, #256]	@ (8008138 <LIS2DW12_0_Probe+0x128>)
 8008038:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800803a:	4b40      	ldr	r3, [pc, #256]	@ (800813c <LIS2DW12_0_Probe+0x12c>)
 800803c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800803e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008042:	4619      	mov	r1, r3
 8008044:	483e      	ldr	r0, [pc, #248]	@ (8008140 <LIS2DW12_0_Probe+0x130>)
 8008046:	f7fb faf3 	bl	8003630 <LIS2DW12_RegisterBusIO>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008050:	f06f 0306 	mvn.w	r3, #6
 8008054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008056:	e062      	b.n	800811e <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8008058:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800805c:	4619      	mov	r1, r3
 800805e:	4838      	ldr	r0, [pc, #224]	@ (8008140 <LIS2DW12_0_Probe+0x130>)
 8008060:	f7fb fbd4 	bl	800380c <LIS2DW12_ReadID>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800806a:	f06f 0306 	mvn.w	r3, #6
 800806e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008070:	e055      	b.n	800811e <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8008072:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008076:	2b44      	cmp	r3, #68	@ 0x44
 8008078:	d003      	beq.n	8008082 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800807a:	f06f 0306 	mvn.w	r3, #6
 800807e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008080:	e04d      	b.n	800811e <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8008082:	f107 030c 	add.w	r3, r7, #12
 8008086:	4619      	mov	r1, r3
 8008088:	482d      	ldr	r0, [pc, #180]	@ (8008140 <LIS2DW12_0_Probe+0x130>)
 800808a:	f7fb fbd5 	bl	8003838 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800808e:	7b7b      	ldrb	r3, [r7, #13]
 8008090:	461a      	mov	r2, r3
 8008092:	7b3b      	ldrb	r3, [r7, #12]
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	431a      	orrs	r2, r3
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4313      	orrs	r3, r2
 800809e:	4a29      	ldr	r2, [pc, #164]	@ (8008144 <LIS2DW12_0_Probe+0x134>)
 80080a0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80080a2:	4b29      	ldr	r3, [pc, #164]	@ (8008148 <LIS2DW12_0_Probe+0x138>)
 80080a4:	4a26      	ldr	r2, [pc, #152]	@ (8008140 <LIS2DW12_0_Probe+0x130>)
 80080a6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80080a8:	4b28      	ldr	r3, [pc, #160]	@ (800814c <LIS2DW12_0_Probe+0x13c>)
 80080aa:	4a29      	ldr	r2, [pc, #164]	@ (8008150 <LIS2DW12_0_Probe+0x140>)
 80080ac:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80080ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d11e      	bne.n	80080f2 <LIS2DW12_0_Probe+0xe2>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d019      	beq.n	80080f2 <LIS2DW12_0_Probe+0xe2>
 80080be:	7b3b      	ldrb	r3, [r7, #12]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d116      	bne.n	80080f2 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80080c4:	4b23      	ldr	r3, [pc, #140]	@ (8008154 <LIS2DW12_0_Probe+0x144>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	4a23      	ldr	r2, [pc, #140]	@ (8008158 <LIS2DW12_0_Probe+0x148>)
 80080ca:	3303      	adds	r3, #3
 80080cc:	4923      	ldr	r1, [pc, #140]	@ (800815c <LIS2DW12_0_Probe+0x14c>)
 80080ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80080d2:	4b1e      	ldr	r3, [pc, #120]	@ (800814c <LIS2DW12_0_Probe+0x13c>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008148 <LIS2DW12_0_Probe+0x138>)
 80080da:	6852      	ldr	r2, [r2, #4]
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80080e6:	f06f 0304 	mvn.w	r3, #4
 80080ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ec:	e001      	b.n	80080f2 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80080f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d107      	bne.n	8008108 <LIS2DW12_0_Probe+0xf8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008102:	f06f 0304 	mvn.w	r3, #4
 8008106:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d107      	bne.n	800811e <LIS2DW12_0_Probe+0x10e>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008118:	f06f 0304 	mvn.w	r3, #4
 800811c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800811e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008120:	4618      	mov	r0, r3
 8008122:	3750      	adds	r7, #80	@ 0x50
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	08003125 	.word	0x08003125
 800812c:	080031a1 	.word	0x080031a1
 8008130:	08003255 	.word	0x08003255
 8008134:	080031f1 	.word	0x080031f1
 8008138:	080032b9 	.word	0x080032b9
 800813c:	08001a2d 	.word	0x08001a2d
 8008140:	200007dc 	.word	0x200007dc
 8008144:	20000798 	.word	0x20000798
 8008148:	2000075c 	.word	0x2000075c
 800814c:	2000078c 	.word	0x2000078c
 8008150:	2000000c 	.word	0x2000000c
 8008154:	200000cc 	.word	0x200000cc
 8008158:	20000768 	.word	0x20000768
 800815c:	2000001c 	.word	0x2000001c

08008160 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b094      	sub	sp, #80	@ 0x50
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008168:	2300      	movs	r3, #0
 800816a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800816c:	2300      	movs	r3, #0
 800816e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008170:	233d      	movs	r3, #61	@ 0x3d
 8008172:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008176:	4b40      	ldr	r3, [pc, #256]	@ (8008278 <LIS2MDL_0_Probe+0x118>)
 8008178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800817a:	4b40      	ldr	r3, [pc, #256]	@ (800827c <LIS2MDL_0_Probe+0x11c>)
 800817c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800817e:	4b40      	ldr	r3, [pc, #256]	@ (8008280 <LIS2MDL_0_Probe+0x120>)
 8008180:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008182:	4b40      	ldr	r3, [pc, #256]	@ (8008284 <LIS2MDL_0_Probe+0x124>)
 8008184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008186:	4b40      	ldr	r3, [pc, #256]	@ (8008288 <LIS2MDL_0_Probe+0x128>)
 8008188:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800818a:	4b40      	ldr	r3, [pc, #256]	@ (800828c <LIS2MDL_0_Probe+0x12c>)
 800818c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800818e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008192:	4619      	mov	r1, r3
 8008194:	483e      	ldr	r0, [pc, #248]	@ (8008290 <LIS2MDL_0_Probe+0x130>)
 8008196:	f7fc fcd7 	bl	8004b48 <LIS2MDL_RegisterBusIO>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081a0:	f06f 0306 	mvn.w	r3, #6
 80081a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081a6:	e062      	b.n	800826e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80081a8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80081ac:	4619      	mov	r1, r3
 80081ae:	4838      	ldr	r0, [pc, #224]	@ (8008290 <LIS2MDL_0_Probe+0x130>)
 80081b0:	f7fc fde6 	bl	8004d80 <LIS2MDL_ReadID>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081ba:	f06f 0306 	mvn.w	r3, #6
 80081be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081c0:	e055      	b.n	800826e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80081c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081c6:	2b40      	cmp	r3, #64	@ 0x40
 80081c8:	d003      	beq.n	80081d2 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081ca:	f06f 0306 	mvn.w	r3, #6
 80081ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081d0:	e04d      	b.n	800826e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80081d2:	f107 030c 	add.w	r3, r7, #12
 80081d6:	4619      	mov	r1, r3
 80081d8:	482d      	ldr	r0, [pc, #180]	@ (8008290 <LIS2MDL_0_Probe+0x130>)
 80081da:	f7fc fdf7 	bl	8004dcc <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80081de:	7b7b      	ldrb	r3, [r7, #13]
 80081e0:	461a      	mov	r2, r3
 80081e2:	7b3b      	ldrb	r3, [r7, #12]
 80081e4:	005b      	lsls	r3, r3, #1
 80081e6:	431a      	orrs	r2, r3
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4313      	orrs	r3, r2
 80081ee:	4a29      	ldr	r2, [pc, #164]	@ (8008294 <LIS2MDL_0_Probe+0x134>)
 80081f0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80081f2:	4b29      	ldr	r3, [pc, #164]	@ (8008298 <LIS2MDL_0_Probe+0x138>)
 80081f4:	4a26      	ldr	r2, [pc, #152]	@ (8008290 <LIS2MDL_0_Probe+0x130>)
 80081f6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80081f8:	4b28      	ldr	r3, [pc, #160]	@ (800829c <LIS2MDL_0_Probe+0x13c>)
 80081fa:	4a29      	ldr	r2, [pc, #164]	@ (80082a0 <LIS2MDL_0_Probe+0x140>)
 80081fc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80081fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d11e      	bne.n	8008242 <LIS2MDL_0_Probe+0xe2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d019      	beq.n	8008242 <LIS2MDL_0_Probe+0xe2>
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d116      	bne.n	8008242 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008214:	4b23      	ldr	r3, [pc, #140]	@ (80082a4 <LIS2MDL_0_Probe+0x144>)
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	4a23      	ldr	r2, [pc, #140]	@ (80082a8 <LIS2MDL_0_Probe+0x148>)
 800821a:	3306      	adds	r3, #6
 800821c:	4923      	ldr	r1, [pc, #140]	@ (80082ac <LIS2MDL_0_Probe+0x14c>)
 800821e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8008222:	4b1e      	ldr	r3, [pc, #120]	@ (800829c <LIS2MDL_0_Probe+0x13c>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1b      	ldr	r2, [pc, #108]	@ (8008298 <LIS2MDL_0_Probe+0x138>)
 800822a:	6892      	ldr	r2, [r2, #8]
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008236:	f06f 0304 	mvn.w	r3, #4
 800823a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800823c:	e001      	b.n	8008242 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800823e:	2300      	movs	r3, #0
 8008240:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d107      	bne.n	8008258 <LIS2MDL_0_Probe+0xf8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008252:	f06f 0304 	mvn.w	r3, #4
 8008256:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d107      	bne.n	800826e <LIS2MDL_0_Probe+0x10e>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008268:	f06f 0304 	mvn.w	r3, #4
 800826c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800826e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008270:	4618      	mov	r0, r3
 8008272:	3750      	adds	r7, #80	@ 0x50
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	08003125 	.word	0x08003125
 800827c:	080031a1 	.word	0x080031a1
 8008280:	08003255 	.word	0x08003255
 8008284:	080031f1 	.word	0x080031f1
 8008288:	080032b9 	.word	0x080032b9
 800828c:	08001a2d 	.word	0x08001a2d
 8008290:	20000818 	.word	0x20000818
 8008294:	20000798 	.word	0x20000798
 8008298:	2000075c 	.word	0x2000075c
 800829c:	2000078c 	.word	0x2000078c
 80082a0:	20000040 	.word	0x20000040
 80082a4:	200000cc 	.word	0x200000cc
 80082a8:	20000768 	.word	0x20000768
 80082ac:	20000050 	.word	0x20000050

080082b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80082ba:	4b0c      	ldr	r3, [pc, #48]	@ (80082ec <HAL_Init+0x3c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a0b      	ldr	r2, [pc, #44]	@ (80082ec <HAL_Init+0x3c>)
 80082c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082c6:	2003      	movs	r0, #3
 80082c8:	f000 f9b4 	bl	8008634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80082cc:	2000      	movs	r0, #0
 80082ce:	f000 f80f 	bl	80082f0 <HAL_InitTick>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	71fb      	strb	r3, [r7, #7]
 80082dc:	e001      	b.n	80082e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80082de:	f7fa fd56 	bl	8002d8e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80082e2:	79fb      	ldrb	r3, [r7, #7]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	58004000 	.word	0x58004000

080082f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80082fc:	4b17      	ldr	r3, [pc, #92]	@ (800835c <HAL_InitTick+0x6c>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d024      	beq.n	800834e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008304:	f002 ffb0 	bl	800b268 <HAL_RCC_GetHCLKFreq>
 8008308:	4602      	mov	r2, r0
 800830a:	4b14      	ldr	r3, [pc, #80]	@ (800835c <HAL_InitTick+0x6c>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	4619      	mov	r1, r3
 8008310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008314:	fbb3 f3f1 	udiv	r3, r3, r1
 8008318:	fbb2 f3f3 	udiv	r3, r2, r3
 800831c:	4618      	mov	r0, r3
 800831e:	f000 f9ca 	bl	80086b6 <HAL_SYSTICK_Config>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10f      	bne.n	8008348 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b0f      	cmp	r3, #15
 800832c:	d809      	bhi.n	8008342 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800832e:	2200      	movs	r2, #0
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	f000 f988 	bl	800864a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800833a:	4a09      	ldr	r2, [pc, #36]	@ (8008360 <HAL_InitTick+0x70>)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	e007      	b.n	8008352 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	73fb      	strb	r3, [r7, #15]
 8008346:	e004      	b.n	8008352 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	73fb      	strb	r3, [r7, #15]
 800834c:	e001      	b.n	8008352 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	200000e4 	.word	0x200000e4
 8008360:	200000e0 	.word	0x200000e0

08008364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008368:	4b06      	ldr	r3, [pc, #24]	@ (8008384 <HAL_IncTick+0x20>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	4b06      	ldr	r3, [pc, #24]	@ (8008388 <HAL_IncTick+0x24>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4413      	add	r3, r2
 8008374:	4a04      	ldr	r2, [pc, #16]	@ (8008388 <HAL_IncTick+0x24>)
 8008376:	6013      	str	r3, [r2, #0]
}
 8008378:	bf00      	nop
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	200000e4 	.word	0x200000e4
 8008388:	2000084c 	.word	0x2000084c

0800838c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  return uwTick;
 8008390:	4b03      	ldr	r3, [pc, #12]	@ (80083a0 <HAL_GetTick+0x14>)
 8008392:	681b      	ldr	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	2000084c 	.word	0x2000084c

080083a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80083a8:	4b03      	ldr	r3, [pc, #12]	@ (80083b8 <HAL_GetTickPrio+0x14>)
 80083aa:	681b      	ldr	r3, [r3, #0]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	200000e0 	.word	0x200000e0

080083bc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80083c0:	4b03      	ldr	r3, [pc, #12]	@ (80083d0 <HAL_GetTickFreq+0x14>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	200000e4 	.word	0x200000e4

080083d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008418 <__NVIC_SetPriorityGrouping+0x44>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80083f0:	4013      	ands	r3, r2
 80083f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008406:	4a04      	ldr	r2, [pc, #16]	@ (8008418 <__NVIC_SetPriorityGrouping+0x44>)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	60d3      	str	r3, [r2, #12]
}
 800840c:	bf00      	nop
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	e000ed00 	.word	0xe000ed00

0800841c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008420:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__NVIC_GetPriorityGrouping+0x18>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	0a1b      	lsrs	r3, r3, #8
 8008426:	f003 0307 	and.w	r3, r3, #7
}
 800842a:	4618      	mov	r0, r3
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	e000ed00 	.word	0xe000ed00

08008438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008446:	2b00      	cmp	r3, #0
 8008448:	db0b      	blt.n	8008462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	f003 021f 	and.w	r2, r3, #31
 8008450:	4907      	ldr	r1, [pc, #28]	@ (8008470 <__NVIC_EnableIRQ+0x38>)
 8008452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	2001      	movs	r0, #1
 800845a:	fa00 f202 	lsl.w	r2, r0, r2
 800845e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	e000e100 	.word	0xe000e100

08008474 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800847e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008482:	2b00      	cmp	r3, #0
 8008484:	db12      	blt.n	80084ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	f003 021f 	and.w	r2, r3, #31
 800848c:	490a      	ldr	r1, [pc, #40]	@ (80084b8 <__NVIC_DisableIRQ+0x44>)
 800848e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	2001      	movs	r0, #1
 8008496:	fa00 f202 	lsl.w	r2, r0, r2
 800849a:	3320      	adds	r3, #32
 800849c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80084a0:	f3bf 8f4f 	dsb	sy
}
 80084a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80084a6:	f3bf 8f6f 	isb	sy
}
 80084aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	e000e100 	.word	0xe000e100

080084bc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	db0c      	blt.n	80084e8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	f003 021f 	and.w	r2, r3, #31
 80084d4:	4907      	ldr	r1, [pc, #28]	@ (80084f4 <__NVIC_SetPendingIRQ+0x38>)
 80084d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	2001      	movs	r0, #1
 80084de:	fa00 f202 	lsl.w	r2, r0, r2
 80084e2:	3340      	adds	r3, #64	@ 0x40
 80084e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	e000e100 	.word	0xe000e100

080084f8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008506:	2b00      	cmp	r3, #0
 8008508:	db0c      	blt.n	8008524 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	f003 021f 	and.w	r2, r3, #31
 8008510:	4907      	ldr	r1, [pc, #28]	@ (8008530 <__NVIC_ClearPendingIRQ+0x38>)
 8008512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	2001      	movs	r0, #1
 800851a:	fa00 f202 	lsl.w	r2, r0, r2
 800851e:	3360      	adds	r3, #96	@ 0x60
 8008520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	e000e100 	.word	0xe000e100

08008534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	6039      	str	r1, [r7, #0]
 800853e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008544:	2b00      	cmp	r3, #0
 8008546:	db0a      	blt.n	800855e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	b2da      	uxtb	r2, r3
 800854c:	490c      	ldr	r1, [pc, #48]	@ (8008580 <__NVIC_SetPriority+0x4c>)
 800854e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008552:	0112      	lsls	r2, r2, #4
 8008554:	b2d2      	uxtb	r2, r2
 8008556:	440b      	add	r3, r1
 8008558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800855c:	e00a      	b.n	8008574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	b2da      	uxtb	r2, r3
 8008562:	4908      	ldr	r1, [pc, #32]	@ (8008584 <__NVIC_SetPriority+0x50>)
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	3b04      	subs	r3, #4
 800856c:	0112      	lsls	r2, r2, #4
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	440b      	add	r3, r1
 8008572:	761a      	strb	r2, [r3, #24]
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	e000e100 	.word	0xe000e100
 8008584:	e000ed00 	.word	0xe000ed00

08008588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008588:	b480      	push	{r7}
 800858a:	b089      	sub	sp, #36	@ 0x24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f1c3 0307 	rsb	r3, r3, #7
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	bf28      	it	cs
 80085a6:	2304      	movcs	r3, #4
 80085a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	3304      	adds	r3, #4
 80085ae:	2b06      	cmp	r3, #6
 80085b0:	d902      	bls.n	80085b8 <NVIC_EncodePriority+0x30>
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	3b03      	subs	r3, #3
 80085b6:	e000      	b.n	80085ba <NVIC_EncodePriority+0x32>
 80085b8:	2300      	movs	r3, #0
 80085ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085bc:	f04f 32ff 	mov.w	r2, #4294967295
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	fa02 f303 	lsl.w	r3, r2, r3
 80085c6:	43da      	mvns	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	401a      	ands	r2, r3
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80085d0:	f04f 31ff 	mov.w	r1, #4294967295
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	fa01 f303 	lsl.w	r3, r1, r3
 80085da:	43d9      	mvns	r1, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085e0:	4313      	orrs	r3, r2
         );
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3724      	adds	r7, #36	@ 0x24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
	...

080085f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008600:	d301      	bcc.n	8008606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008602:	2301      	movs	r3, #1
 8008604:	e00f      	b.n	8008626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008606:	4a0a      	ldr	r2, [pc, #40]	@ (8008630 <SysTick_Config+0x40>)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3b01      	subs	r3, #1
 800860c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800860e:	210f      	movs	r1, #15
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
 8008614:	f7ff ff8e 	bl	8008534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008618:	4b05      	ldr	r3, [pc, #20]	@ (8008630 <SysTick_Config+0x40>)
 800861a:	2200      	movs	r2, #0
 800861c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800861e:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <SysTick_Config+0x40>)
 8008620:	2207      	movs	r2, #7
 8008622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	e000e010 	.word	0xe000e010

08008634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff fec9 	bl	80083d4 <__NVIC_SetPriorityGrouping>
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b086      	sub	sp, #24
 800864e:	af00      	add	r7, sp, #0
 8008650:	4603      	mov	r3, r0
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008658:	f7ff fee0 	bl	800841c <__NVIC_GetPriorityGrouping>
 800865c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	6978      	ldr	r0, [r7, #20]
 8008664:	f7ff ff90 	bl	8008588 <NVIC_EncodePriority>
 8008668:	4602      	mov	r2, r0
 800866a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800866e:	4611      	mov	r1, r2
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff ff5f 	bl	8008534 <__NVIC_SetPriority>
}
 8008676:	bf00      	nop
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	4603      	mov	r3, r0
 8008686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fed3 	bl	8008438 <__NVIC_EnableIRQ>
}
 8008692:	bf00      	nop
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	4603      	mov	r3, r0
 80086a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80086a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff fee3 	bl	8008474 <__NVIC_DisableIRQ>
}
 80086ae:	bf00      	nop
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff ff96 	bl	80085f0 <SysTick_Config>
 80086c4:	4603      	mov	r3, r0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	4603      	mov	r3, r0
 80086d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80086d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff feed 	bl	80084bc <__NVIC_SetPendingIRQ>
}
 80086e2:	bf00      	nop
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	4603      	mov	r3, r0
 80086f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80086f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff fefd 	bl	80084f8 <__NVIC_ClearPendingIRQ>
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e08e      	b.n	8008838 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	4b47      	ldr	r3, [pc, #284]	@ (8008840 <HAL_DMA_Init+0x138>)
 8008722:	429a      	cmp	r2, r3
 8008724:	d80f      	bhi.n	8008746 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	4b45      	ldr	r3, [pc, #276]	@ (8008844 <HAL_DMA_Init+0x13c>)
 800872e:	4413      	add	r3, r2
 8008730:	4a45      	ldr	r2, [pc, #276]	@ (8008848 <HAL_DMA_Init+0x140>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	091b      	lsrs	r3, r3, #4
 8008738:	009a      	lsls	r2, r3, #2
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a42      	ldr	r2, [pc, #264]	@ (800884c <HAL_DMA_Init+0x144>)
 8008742:	641a      	str	r2, [r3, #64]	@ 0x40
 8008744:	e00e      	b.n	8008764 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	4b40      	ldr	r3, [pc, #256]	@ (8008850 <HAL_DMA_Init+0x148>)
 800874e:	4413      	add	r3, r2
 8008750:	4a3d      	ldr	r2, [pc, #244]	@ (8008848 <HAL_DMA_Init+0x140>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	091b      	lsrs	r3, r3, #4
 8008758:	009a      	lsls	r2, r3, #2
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a3c      	ldr	r2, [pc, #240]	@ (8008854 <HAL_DMA_Init+0x14c>)
 8008762:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800877a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f9b6 	bl	8008b28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087c4:	d102      	bne.n	80087cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087d4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80087d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80087e2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d010      	beq.n	800880e <HAL_DMA_Init+0x106>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d80c      	bhi.n	800880e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f9d5 	bl	8008ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800880a:	605a      	str	r2, [r3, #4]
 800880c:	e008      	b.n	8008820 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40020407 	.word	0x40020407
 8008844:	bffdfff8 	.word	0xbffdfff8
 8008848:	cccccccd 	.word	0xcccccccd
 800884c:	40020000 	.word	0x40020000
 8008850:	bffdfbf8 	.word	0xbffdfbf8
 8008854:	40020400 	.word	0x40020400

08008858 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_DMA_Start_IT+0x20>
 8008874:	2302      	movs	r3, #2
 8008876:	e066      	b.n	8008946 <HAL_DMA_Start_IT+0xee>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b01      	cmp	r3, #1
 800888a:	d155      	bne.n	8008938 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2202      	movs	r2, #2
 8008890:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0201 	bic.w	r2, r2, #1
 80088a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f8fb 	bl	8008aac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d008      	beq.n	80088d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f042 020e 	orr.w	r2, r2, #14
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	e00f      	b.n	80088f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0204 	bic.w	r2, r2, #4
 80088de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 020a 	orr.w	r2, r2, #10
 80088ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d007      	beq.n	800890e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008908:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800890c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008912:	2b00      	cmp	r3, #0
 8008914:	d007      	beq.n	8008926 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008924:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f042 0201 	orr.w	r2, r2, #1
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	e005      	b.n	8008944 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008940:	2302      	movs	r3, #2
 8008942:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008944:	7dfb      	ldrb	r3, [r7, #23]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800896a:	f003 031c 	and.w	r3, r3, #28
 800896e:	2204      	movs	r2, #4
 8008970:	409a      	lsls	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4013      	ands	r3, r2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d026      	beq.n	80089c8 <HAL_DMA_IRQHandler+0x7a>
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f003 0304 	and.w	r3, r3, #4
 8008980:	2b00      	cmp	r3, #0
 8008982:	d021      	beq.n	80089c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b00      	cmp	r3, #0
 8008990:	d107      	bne.n	80089a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 0204 	bic.w	r2, r2, #4
 80089a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a6:	f003 021c 	and.w	r2, r3, #28
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ae:	2104      	movs	r1, #4
 80089b0:	fa01 f202 	lsl.w	r2, r1, r2
 80089b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d071      	beq.n	8008aa2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80089c6:	e06c      	b.n	8008aa2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089cc:	f003 031c 	and.w	r3, r3, #28
 80089d0:	2202      	movs	r2, #2
 80089d2:	409a      	lsls	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4013      	ands	r3, r2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d02e      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xec>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d029      	beq.n	8008a3a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10b      	bne.n	8008a0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 020a 	bic.w	r2, r2, #10
 8008a02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a10:	f003 021c 	and.w	r2, r3, #28
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a18:	2102      	movs	r1, #2
 8008a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d038      	beq.n	8008aa2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a38:	e033      	b.n	8008aa2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a3e:	f003 031c 	and.w	r3, r3, #28
 8008a42:	2208      	movs	r2, #8
 8008a44:	409a      	lsls	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d02a      	beq.n	8008aa4 <HAL_DMA_IRQHandler+0x156>
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d025      	beq.n	8008aa4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 020e 	bic.w	r2, r2, #14
 8008a66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6c:	f003 021c 	and.w	r2, r3, #28
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a74:	2101      	movs	r1, #1
 8008a76:	fa01 f202 	lsl.w	r2, r1, r2
 8008a7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d004      	beq.n	8008aa4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
}
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008ac2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d004      	beq.n	8008ad6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008ad4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ada:	f003 021c 	and.w	r2, r3, #28
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8008ae8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	2b10      	cmp	r3, #16
 8008af8:	d108      	bne.n	8008b0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008b0a:	e007      	b.n	8008b1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	60da      	str	r2, [r3, #12]
}
 8008b1c:	bf00      	nop
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	461a      	mov	r2, r3
 8008b36:	4b17      	ldr	r3, [pc, #92]	@ (8008b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d80a      	bhi.n	8008b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b40:	089b      	lsrs	r3, r3, #2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b48:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	6493      	str	r3, [r2, #72]	@ 0x48
 8008b50:	e007      	b.n	8008b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b56:	089b      	lsrs	r3, r3, #2
 8008b58:	009a      	lsls	r2, r3, #2
 8008b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8008b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008b5c:	4413      	add	r3, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	3b08      	subs	r3, #8
 8008b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b70:	091b      	lsrs	r3, r3, #4
 8008b72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a0a      	ldr	r2, [pc, #40]	@ (8008ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008b78:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f003 031f 	and.w	r3, r3, #31
 8008b80:	2201      	movs	r2, #1
 8008b82:	409a      	lsls	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008b88:	bf00      	nop
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	40020407 	.word	0x40020407
 8008b98:	4002081c 	.word	0x4002081c
 8008b9c:	cccccccd 	.word	0xcccccccd
 8008ba0:	40020880 	.word	0x40020880

08008ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bb4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8008be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a09      	ldr	r2, [pc, #36]	@ (8008bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008bc8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	409a      	lsls	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008bda:	bf00      	nop
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	1000823f 	.word	0x1000823f
 8008bec:	40020940 	.word	0x40020940

08008bf0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008bfe:	e14c      	b.n	8008e9a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	2101      	movs	r1, #1
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 813e 	beq.w	8008e94 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f003 0303 	and.w	r3, r3, #3
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d005      	beq.n	8008c30 <HAL_GPIO_Init+0x40>
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f003 0303 	and.w	r3, r3, #3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d130      	bne.n	8008c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	005b      	lsls	r3, r3, #1
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c40:	43db      	mvns	r3, r3
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4013      	ands	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c66:	2201      	movs	r2, #1
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	4013      	ands	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	091b      	lsrs	r3, r3, #4
 8008c7c:	f003 0201 	and.w	r2, r3, #1
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	fa02 f303 	lsl.w	r3, r2, r3
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d017      	beq.n	8008cce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	2203      	movs	r2, #3
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	689a      	ldr	r2, [r3, #8]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d123      	bne.n	8008d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	08da      	lsrs	r2, r3, #3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3208      	adds	r2, #8
 8008ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	220f      	movs	r2, #15
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	43db      	mvns	r3, r3
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	691a      	ldr	r2, [r3, #16]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	08da      	lsrs	r2, r3, #3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3208      	adds	r2, #8
 8008d1c:	6939      	ldr	r1, [r7, #16]
 8008d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d32:	43db      	mvns	r3, r3
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	4013      	ands	r3, r2
 8008d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f003 0203 	and.w	r2, r3, #3
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 8098 	beq.w	8008e94 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008d64:	4a54      	ldr	r2, [pc, #336]	@ (8008eb8 <HAL_GPIO_Init+0x2c8>)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	089b      	lsrs	r3, r3, #2
 8008d6a:	3302      	adds	r3, #2
 8008d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f003 0303 	and.w	r3, r3, #3
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	220f      	movs	r2, #15
 8008d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d80:	43db      	mvns	r3, r3
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4013      	ands	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008d8e:	d019      	beq.n	8008dc4 <HAL_GPIO_Init+0x1d4>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a4a      	ldr	r2, [pc, #296]	@ (8008ebc <HAL_GPIO_Init+0x2cc>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d013      	beq.n	8008dc0 <HAL_GPIO_Init+0x1d0>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a49      	ldr	r2, [pc, #292]	@ (8008ec0 <HAL_GPIO_Init+0x2d0>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00d      	beq.n	8008dbc <HAL_GPIO_Init+0x1cc>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a48      	ldr	r2, [pc, #288]	@ (8008ec4 <HAL_GPIO_Init+0x2d4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d007      	beq.n	8008db8 <HAL_GPIO_Init+0x1c8>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a47      	ldr	r2, [pc, #284]	@ (8008ec8 <HAL_GPIO_Init+0x2d8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d101      	bne.n	8008db4 <HAL_GPIO_Init+0x1c4>
 8008db0:	2304      	movs	r3, #4
 8008db2:	e008      	b.n	8008dc6 <HAL_GPIO_Init+0x1d6>
 8008db4:	2307      	movs	r3, #7
 8008db6:	e006      	b.n	8008dc6 <HAL_GPIO_Init+0x1d6>
 8008db8:	2303      	movs	r3, #3
 8008dba:	e004      	b.n	8008dc6 <HAL_GPIO_Init+0x1d6>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e002      	b.n	8008dc6 <HAL_GPIO_Init+0x1d6>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <HAL_GPIO_Init+0x1d6>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	f002 0203 	and.w	r2, r2, #3
 8008dcc:	0092      	lsls	r2, r2, #2
 8008dce:	4093      	lsls	r3, r2
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008dd6:	4938      	ldr	r1, [pc, #224]	@ (8008eb8 <HAL_GPIO_Init+0x2c8>)
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	089b      	lsrs	r3, r3, #2
 8008ddc:	3302      	adds	r3, #2
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008de4:	4b39      	ldr	r3, [pc, #228]	@ (8008ecc <HAL_GPIO_Init+0x2dc>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	43db      	mvns	r3, r3
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4013      	ands	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e08:	4a30      	ldr	r2, [pc, #192]	@ (8008ecc <HAL_GPIO_Init+0x2dc>)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008ecc <HAL_GPIO_Init+0x2dc>)
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	43db      	mvns	r3, r3
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008e32:	4a26      	ldr	r2, [pc, #152]	@ (8008ecc <HAL_GPIO_Init+0x2dc>)
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008e38:	4b24      	ldr	r3, [pc, #144]	@ (8008ecc <HAL_GPIO_Init+0x2dc>)
 8008e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	43db      	mvns	r3, r3
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	4013      	ands	r3, r2
 8008e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8008ecc <HAL_GPIO_Init+0x2dc>)
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8008e66:	4b19      	ldr	r3, [pc, #100]	@ (8008ecc <HAL_GPIO_Init+0x2dc>)
 8008e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	43db      	mvns	r3, r3
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4013      	ands	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8008ecc <HAL_GPIO_Init+0x2dc>)
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	3301      	adds	r3, #1
 8008e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f47f aeab 	bne.w	8008c00 <HAL_GPIO_Init+0x10>
  }
}
 8008eaa:	bf00      	nop
 8008eac:	bf00      	nop
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	40010000 	.word	0x40010000
 8008ebc:	48000400 	.word	0x48000400
 8008ec0:	48000800 	.word	0x48000800
 8008ec4:	48000c00 	.word	0x48000c00
 8008ec8:	48001000 	.word	0x48001000
 8008ecc:	58000800 	.word	0x58000800

08008ed0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008eda:	2300      	movs	r3, #0
 8008edc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008ede:	e0bb      	b.n	8009058 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	4013      	ands	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 80ae 	beq.w	8009052 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008ef6:	4a5f      	ldr	r2, [pc, #380]	@ (8009074 <HAL_GPIO_DeInit+0x1a4>)
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	089b      	lsrs	r3, r3, #2
 8008efc:	3302      	adds	r3, #2
 8008efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f02:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	220f      	movs	r2, #15
 8008f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	4013      	ands	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008f1e:	d019      	beq.n	8008f54 <HAL_GPIO_DeInit+0x84>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a55      	ldr	r2, [pc, #340]	@ (8009078 <HAL_GPIO_DeInit+0x1a8>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d013      	beq.n	8008f50 <HAL_GPIO_DeInit+0x80>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a54      	ldr	r2, [pc, #336]	@ (800907c <HAL_GPIO_DeInit+0x1ac>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00d      	beq.n	8008f4c <HAL_GPIO_DeInit+0x7c>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a53      	ldr	r2, [pc, #332]	@ (8009080 <HAL_GPIO_DeInit+0x1b0>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d007      	beq.n	8008f48 <HAL_GPIO_DeInit+0x78>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a52      	ldr	r2, [pc, #328]	@ (8009084 <HAL_GPIO_DeInit+0x1b4>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d101      	bne.n	8008f44 <HAL_GPIO_DeInit+0x74>
 8008f40:	2304      	movs	r3, #4
 8008f42:	e008      	b.n	8008f56 <HAL_GPIO_DeInit+0x86>
 8008f44:	2307      	movs	r3, #7
 8008f46:	e006      	b.n	8008f56 <HAL_GPIO_DeInit+0x86>
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e004      	b.n	8008f56 <HAL_GPIO_DeInit+0x86>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e002      	b.n	8008f56 <HAL_GPIO_DeInit+0x86>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <HAL_GPIO_DeInit+0x86>
 8008f54:	2300      	movs	r3, #0
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	f002 0203 	and.w	r2, r2, #3
 8008f5c:	0092      	lsls	r2, r2, #2
 8008f5e:	4093      	lsls	r3, r2
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d136      	bne.n	8008fd4 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008f66:	4b48      	ldr	r3, [pc, #288]	@ (8009088 <HAL_GPIO_DeInit+0x1b8>)
 8008f68:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	43db      	mvns	r3, r3
 8008f70:	4945      	ldr	r1, [pc, #276]	@ (8009088 <HAL_GPIO_DeInit+0x1b8>)
 8008f72:	4013      	ands	r3, r2
 8008f74:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8008f78:	4b43      	ldr	r3, [pc, #268]	@ (8009088 <HAL_GPIO_DeInit+0x1b8>)
 8008f7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	4941      	ldr	r1, [pc, #260]	@ (8009088 <HAL_GPIO_DeInit+0x1b8>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8008f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8009088 <HAL_GPIO_DeInit+0x1b8>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	493d      	ldr	r1, [pc, #244]	@ (8009088 <HAL_GPIO_DeInit+0x1b8>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8008f98:	4b3b      	ldr	r3, [pc, #236]	@ (8009088 <HAL_GPIO_DeInit+0x1b8>)
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	43db      	mvns	r3, r3
 8008fa0:	4939      	ldr	r1, [pc, #228]	@ (8009088 <HAL_GPIO_DeInit+0x1b8>)
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f003 0303 	and.w	r3, r3, #3
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	220f      	movs	r2, #15
 8008fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008fb6:	4a2f      	ldr	r2, [pc, #188]	@ (8009074 <HAL_GPIO_DeInit+0x1a4>)
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	089b      	lsrs	r3, r3, #2
 8008fbc:	3302      	adds	r3, #2
 8008fbe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	43da      	mvns	r2, r3
 8008fc6:	482b      	ldr	r0, [pc, #172]	@ (8009074 <HAL_GPIO_DeInit+0x1a4>)
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	089b      	lsrs	r3, r3, #2
 8008fcc:	400a      	ands	r2, r1
 8008fce:	3302      	adds	r3, #2
 8008fd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	2103      	movs	r1, #3
 8008fde:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	08da      	lsrs	r2, r3, #3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3208      	adds	r2, #8
 8008ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	220f      	movs	r2, #15
 8008ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8009002:	43db      	mvns	r3, r3
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	08d2      	lsrs	r2, r2, #3
 8009008:	4019      	ands	r1, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3208      	adds	r2, #8
 800900e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	2103      	movs	r1, #3
 800901c:	fa01 f303 	lsl.w	r3, r1, r3
 8009020:	43db      	mvns	r3, r3
 8009022:	401a      	ands	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	2101      	movs	r1, #1
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	fa01 f303 	lsl.w	r3, r1, r3
 8009034:	43db      	mvns	r3, r3
 8009036:	401a      	ands	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	2103      	movs	r1, #3
 8009046:	fa01 f303 	lsl.w	r3, r1, r3
 800904a:	43db      	mvns	r3, r3
 800904c:	401a      	ands	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	3301      	adds	r3, #1
 8009056:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	f47f af3d 	bne.w	8008ee0 <HAL_GPIO_DeInit+0x10>
  }
}
 8009066:	bf00      	nop
 8009068:	bf00      	nop
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	40010000 	.word	0x40010000
 8009078:	48000400 	.word	0x48000400
 800907c:	48000800 	.word	0x48000800
 8009080:	48000c00 	.word	0x48000c00
 8009084:	48001000 	.word	0x48001000
 8009088:	58000800 	.word	0x58000800

0800908c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	807b      	strh	r3, [r7, #2]
 8009098:	4613      	mov	r3, r2
 800909a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800909c:	787b      	ldrb	r3, [r7, #1]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80090a2:	887a      	ldrh	r2, [r7, #2]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80090a8:	e002      	b.n	80090b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80090aa:	887a      	ldrh	r2, [r7, #2]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80090c2:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <HAL_HSEM_IRQHandler+0x30>)
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80090c8:	4b08      	ldr	r3, [pc, #32]	@ (80090ec <HAL_HSEM_IRQHandler+0x30>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	43db      	mvns	r3, r3
 80090d0:	4906      	ldr	r1, [pc, #24]	@ (80090ec <HAL_HSEM_IRQHandler+0x30>)
 80090d2:	4013      	ands	r3, r2
 80090d4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80090d6:	4a05      	ldr	r2, [pc, #20]	@ (80090ec <HAL_HSEM_IRQHandler+0x30>)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f807 	bl	80090f0 <HAL_HSEM_FreeCallback>
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	58001500 	.word	0x58001500

080090f0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e08d      	b.n	8009232 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d106      	bne.n	8009130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f8b4 	bl	8009298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2224      	movs	r2, #36	@ 0x24
 8009134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f022 0201 	bic.w	r2, r2, #1
 8009146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009154:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009164:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d107      	bne.n	800917e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800917a:	609a      	str	r2, [r3, #8]
 800917c:	e006      	b.n	800918c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800918a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d108      	bne.n	80091a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091a2:	605a      	str	r2, [r3, #4]
 80091a4:	e007      	b.n	80091b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	6812      	ldr	r2, [r2, #0]
 80091c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80091c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68da      	ldr	r2, [r3, #12]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80091d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691a      	ldr	r2, [r3, #16]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	69d9      	ldr	r1, [r3, #28]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a1a      	ldr	r2, [r3, #32]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	430a      	orrs	r2, r1
 8009202:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 0201 	orr.w	r2, r2, #1
 8009212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e021      	b.n	8009290 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2224      	movs	r2, #36	@ 0x24
 8009250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0201 	bic.w	r2, r2, #1
 8009262:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f821 	bl	80092ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	4608      	mov	r0, r1
 80092ca:	4611      	mov	r1, r2
 80092cc:	461a      	mov	r2, r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	817b      	strh	r3, [r7, #10]
 80092d2:	460b      	mov	r3, r1
 80092d4:	813b      	strh	r3, [r7, #8]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	f040 80f9 	bne.w	80094da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <HAL_I2C_Mem_Write+0x34>
 80092ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d105      	bne.n	8009300 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e0ed      	b.n	80094dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009306:	2b01      	cmp	r3, #1
 8009308:	d101      	bne.n	800930e <HAL_I2C_Mem_Write+0x4e>
 800930a:	2302      	movs	r3, #2
 800930c:	e0e6      	b.n	80094dc <HAL_I2C_Mem_Write+0x21c>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009316:	f7ff f839 	bl	800838c <HAL_GetTick>
 800931a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	2319      	movs	r3, #25
 8009322:	2201      	movs	r2, #1
 8009324:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fadd 	bl	80098e8 <I2C_WaitOnFlagUntilTimeout>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e0d1      	b.n	80094dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2221      	movs	r2, #33	@ 0x21
 800933c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2240      	movs	r2, #64	@ 0x40
 8009344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a3a      	ldr	r2, [r7, #32]
 8009352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009360:	88f8      	ldrh	r0, [r7, #6]
 8009362:	893a      	ldrh	r2, [r7, #8]
 8009364:	8979      	ldrh	r1, [r7, #10]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	4603      	mov	r3, r0
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 f9ed 	bl	8009750 <I2C_RequestMemoryWrite>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d005      	beq.n	8009388 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e0a9      	b.n	80094dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800938c:	b29b      	uxth	r3, r3
 800938e:	2bff      	cmp	r3, #255	@ 0xff
 8009390:	d90e      	bls.n	80093b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	22ff      	movs	r2, #255	@ 0xff
 8009396:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800939c:	b2da      	uxtb	r2, r3
 800939e:	8979      	ldrh	r1, [r7, #10]
 80093a0:	2300      	movs	r3, #0
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fc61 	bl	8009c70 <I2C_TransferConfig>
 80093ae:	e00f      	b.n	80093d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	8979      	ldrh	r1, [r7, #10]
 80093c2:	2300      	movs	r3, #0
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 fc50 	bl	8009c70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 fae0 	bl	800999a <I2C_WaitOnTXISFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e07b      	b.n	80094dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e8:	781a      	ldrb	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093fe:	b29b      	uxth	r3, r3
 8009400:	3b01      	subs	r3, #1
 8009402:	b29a      	uxth	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009418:	b29b      	uxth	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d034      	beq.n	8009488 <HAL_I2C_Mem_Write+0x1c8>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009422:	2b00      	cmp	r3, #0
 8009424:	d130      	bne.n	8009488 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942c:	2200      	movs	r2, #0
 800942e:	2180      	movs	r1, #128	@ 0x80
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 fa59 	bl	80098e8 <I2C_WaitOnFlagUntilTimeout>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e04d      	b.n	80094dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009444:	b29b      	uxth	r3, r3
 8009446:	2bff      	cmp	r3, #255	@ 0xff
 8009448:	d90e      	bls.n	8009468 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	22ff      	movs	r2, #255	@ 0xff
 800944e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009454:	b2da      	uxtb	r2, r3
 8009456:	8979      	ldrh	r1, [r7, #10]
 8009458:	2300      	movs	r3, #0
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 fc05 	bl	8009c70 <I2C_TransferConfig>
 8009466:	e00f      	b.n	8009488 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800946c:	b29a      	uxth	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009476:	b2da      	uxtb	r2, r3
 8009478:	8979      	ldrh	r1, [r7, #10]
 800947a:	2300      	movs	r3, #0
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 fbf4 	bl	8009c70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800948c:	b29b      	uxth	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d19e      	bne.n	80093d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 fac6 	bl	8009a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e01a      	b.n	80094dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2220      	movs	r2, #32
 80094ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6859      	ldr	r1, [r3, #4]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	4b0a      	ldr	r3, [pc, #40]	@ (80094e4 <HAL_I2C_Mem_Write+0x224>)
 80094ba:	400b      	ands	r3, r1
 80094bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	e000      	b.n	80094dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80094da:	2302      	movs	r3, #2
  }
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	fe00e800 	.word	0xfe00e800

080094e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af02      	add	r7, sp, #8
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	461a      	mov	r2, r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	817b      	strh	r3, [r7, #10]
 80094fa:	460b      	mov	r3, r1
 80094fc:	813b      	strh	r3, [r7, #8]
 80094fe:	4613      	mov	r3, r2
 8009500:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b20      	cmp	r3, #32
 800950c:	f040 80fd 	bne.w	800970a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <HAL_I2C_Mem_Read+0x34>
 8009516:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	d105      	bne.n	8009528 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009522:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e0f1      	b.n	800970c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800952e:	2b01      	cmp	r3, #1
 8009530:	d101      	bne.n	8009536 <HAL_I2C_Mem_Read+0x4e>
 8009532:	2302      	movs	r3, #2
 8009534:	e0ea      	b.n	800970c <HAL_I2C_Mem_Read+0x224>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800953e:	f7fe ff25 	bl	800838c <HAL_GetTick>
 8009542:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	2319      	movs	r3, #25
 800954a:	2201      	movs	r2, #1
 800954c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 f9c9 	bl	80098e8 <I2C_WaitOnFlagUntilTimeout>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e0d5      	b.n	800970c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2222      	movs	r2, #34	@ 0x22
 8009564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2240      	movs	r2, #64	@ 0x40
 800956c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a3a      	ldr	r2, [r7, #32]
 800957a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009580:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009588:	88f8      	ldrh	r0, [r7, #6]
 800958a:	893a      	ldrh	r2, [r7, #8]
 800958c:	8979      	ldrh	r1, [r7, #10]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	4603      	mov	r3, r0
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 f92d 	bl	80097f8 <I2C_RequestMemoryRead>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d005      	beq.n	80095b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e0ad      	b.n	800970c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	2bff      	cmp	r3, #255	@ 0xff
 80095b8:	d90e      	bls.n	80095d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	22ff      	movs	r2, #255	@ 0xff
 80095be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	8979      	ldrh	r1, [r7, #10]
 80095c8:	4b52      	ldr	r3, [pc, #328]	@ (8009714 <HAL_I2C_Mem_Read+0x22c>)
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 fb4d 	bl	8009c70 <I2C_TransferConfig>
 80095d6:	e00f      	b.n	80095f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095dc:	b29a      	uxth	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	8979      	ldrh	r1, [r7, #10]
 80095ea:	4b4a      	ldr	r3, [pc, #296]	@ (8009714 <HAL_I2C_Mem_Read+0x22c>)
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 fb3c 	bl	8009c70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	2200      	movs	r2, #0
 8009600:	2104      	movs	r1, #4
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 f970 	bl	80098e8 <I2C_WaitOnFlagUntilTimeout>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e07c      	b.n	800970c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961c:	b2d2      	uxtb	r2, r2
 800961e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800962e:	3b01      	subs	r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800963a:	b29b      	uxth	r3, r3
 800963c:	3b01      	subs	r3, #1
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d034      	beq.n	80096b8 <HAL_I2C_Mem_Read+0x1d0>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009652:	2b00      	cmp	r3, #0
 8009654:	d130      	bne.n	80096b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965c:	2200      	movs	r2, #0
 800965e:	2180      	movs	r1, #128	@ 0x80
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f941 	bl	80098e8 <I2C_WaitOnFlagUntilTimeout>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e04d      	b.n	800970c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009674:	b29b      	uxth	r3, r3
 8009676:	2bff      	cmp	r3, #255	@ 0xff
 8009678:	d90e      	bls.n	8009698 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	22ff      	movs	r2, #255	@ 0xff
 800967e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009684:	b2da      	uxtb	r2, r3
 8009686:	8979      	ldrh	r1, [r7, #10]
 8009688:	2300      	movs	r3, #0
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 faed 	bl	8009c70 <I2C_TransferConfig>
 8009696:	e00f      	b.n	80096b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800969c:	b29a      	uxth	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	8979      	ldrh	r1, [r7, #10]
 80096aa:	2300      	movs	r3, #0
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 fadc 	bl	8009c70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096bc:	b29b      	uxth	r3, r3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d19a      	bne.n	80095f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 f9ae 	bl	8009a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e01a      	b.n	800970c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2220      	movs	r2, #32
 80096dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6859      	ldr	r1, [r3, #4]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009718 <HAL_I2C_Mem_Read+0x230>)
 80096ea:	400b      	ands	r3, r1
 80096ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	e000      	b.n	800970c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800970a:	2302      	movs	r3, #2
  }
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	80002400 	.word	0x80002400
 8009718:	fe00e800 	.word	0xfe00e800

0800971c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800972a:	b2db      	uxtb	r3, r3
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af02      	add	r7, sp, #8
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	4608      	mov	r0, r1
 800975a:	4611      	mov	r1, r2
 800975c:	461a      	mov	r2, r3
 800975e:	4603      	mov	r3, r0
 8009760:	817b      	strh	r3, [r7, #10]
 8009762:	460b      	mov	r3, r1
 8009764:	813b      	strh	r3, [r7, #8]
 8009766:	4613      	mov	r3, r2
 8009768:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800976a:	88fb      	ldrh	r3, [r7, #6]
 800976c:	b2da      	uxtb	r2, r3
 800976e:	8979      	ldrh	r1, [r7, #10]
 8009770:	4b20      	ldr	r3, [pc, #128]	@ (80097f4 <I2C_RequestMemoryWrite+0xa4>)
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f000 fa79 	bl	8009c70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800977e:	69fa      	ldr	r2, [r7, #28]
 8009780:	69b9      	ldr	r1, [r7, #24]
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 f909 	bl	800999a <I2C_WaitOnTXISFlagUntilTimeout>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e02c      	b.n	80097ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009792:	88fb      	ldrh	r3, [r7, #6]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d105      	bne.n	80097a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009798:	893b      	ldrh	r3, [r7, #8]
 800979a:	b2da      	uxtb	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80097a2:	e015      	b.n	80097d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80097a4:	893b      	ldrh	r3, [r7, #8]
 80097a6:	0a1b      	lsrs	r3, r3, #8
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	69b9      	ldr	r1, [r7, #24]
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 f8ef 	bl	800999a <I2C_WaitOnTXISFlagUntilTimeout>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e012      	b.n	80097ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097c6:	893b      	ldrh	r3, [r7, #8]
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	2200      	movs	r2, #0
 80097d8:	2180      	movs	r1, #128	@ 0x80
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 f884 	bl	80098e8 <I2C_WaitOnFlagUntilTimeout>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e000      	b.n	80097ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	80002000 	.word	0x80002000

080097f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	4608      	mov	r0, r1
 8009802:	4611      	mov	r1, r2
 8009804:	461a      	mov	r2, r3
 8009806:	4603      	mov	r3, r0
 8009808:	817b      	strh	r3, [r7, #10]
 800980a:	460b      	mov	r3, r1
 800980c:	813b      	strh	r3, [r7, #8]
 800980e:	4613      	mov	r3, r2
 8009810:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	b2da      	uxtb	r2, r3
 8009816:	8979      	ldrh	r1, [r7, #10]
 8009818:	4b20      	ldr	r3, [pc, #128]	@ (800989c <I2C_RequestMemoryRead+0xa4>)
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	2300      	movs	r3, #0
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fa26 	bl	8009c70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009824:	69fa      	ldr	r2, [r7, #28]
 8009826:	69b9      	ldr	r1, [r7, #24]
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 f8b6 	bl	800999a <I2C_WaitOnTXISFlagUntilTimeout>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e02c      	b.n	8009892 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009838:	88fb      	ldrh	r3, [r7, #6]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d105      	bne.n	800984a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800983e:	893b      	ldrh	r3, [r7, #8]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	629a      	str	r2, [r3, #40]	@ 0x28
 8009848:	e015      	b.n	8009876 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800984a:	893b      	ldrh	r3, [r7, #8]
 800984c:	0a1b      	lsrs	r3, r3, #8
 800984e:	b29b      	uxth	r3, r3
 8009850:	b2da      	uxtb	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	69b9      	ldr	r1, [r7, #24]
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f89c 	bl	800999a <I2C_WaitOnTXISFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e012      	b.n	8009892 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800986c:	893b      	ldrh	r3, [r7, #8]
 800986e:	b2da      	uxtb	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	2200      	movs	r2, #0
 800987e:	2140      	movs	r1, #64	@ 0x40
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 f831 	bl	80098e8 <I2C_WaitOnFlagUntilTimeout>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e000      	b.n	8009892 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	80002000 	.word	0x80002000

080098a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d103      	bne.n	80098be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2200      	movs	r2, #0
 80098bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d007      	beq.n	80098dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699a      	ldr	r2, [r3, #24]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f042 0201 	orr.w	r2, r2, #1
 80098da:	619a      	str	r2, [r3, #24]
  }
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	4613      	mov	r3, r2
 80098f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098f8:	e03b      	b.n	8009972 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 f8d6 	bl	8009ab0 <I2C_IsErrorOccurred>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e041      	b.n	8009992 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d02d      	beq.n	8009972 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009916:	f7fe fd39 	bl	800838c <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d302      	bcc.n	800992c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d122      	bne.n	8009972 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	699a      	ldr	r2, [r3, #24]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	4013      	ands	r3, r2
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	429a      	cmp	r2, r3
 800993a:	bf0c      	ite	eq
 800993c:	2301      	moveq	r3, #1
 800993e:	2300      	movne	r3, #0
 8009940:	b2db      	uxtb	r3, r3
 8009942:	461a      	mov	r2, r3
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	429a      	cmp	r2, r3
 8009948:	d113      	bne.n	8009972 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800994e:	f043 0220 	orr.w	r2, r3, #32
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2220      	movs	r2, #32
 800995a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e00f      	b.n	8009992 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	699a      	ldr	r2, [r3, #24]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4013      	ands	r3, r2
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	429a      	cmp	r2, r3
 8009980:	bf0c      	ite	eq
 8009982:	2301      	moveq	r3, #1
 8009984:	2300      	movne	r3, #0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	429a      	cmp	r2, r3
 800998e:	d0b4      	beq.n	80098fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099a6:	e033      	b.n	8009a10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 f87f 	bl	8009ab0 <I2C_IsErrorOccurred>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e031      	b.n	8009a20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d025      	beq.n	8009a10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c4:	f7fe fce2 	bl	800838c <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d302      	bcc.n	80099da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d11a      	bne.n	8009a10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	f003 0302 	and.w	r3, r3, #2
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d013      	beq.n	8009a10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ec:	f043 0220 	orr.w	r2, r3, #32
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e007      	b.n	8009a20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d1c4      	bne.n	80099a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a34:	e02f      	b.n	8009a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 f838 	bl	8009ab0 <I2C_IsErrorOccurred>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e02d      	b.n	8009aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a4a:	f7fe fc9f 	bl	800838c <HAL_GetTick>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d302      	bcc.n	8009a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d11a      	bne.n	8009a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b20      	cmp	r3, #32
 8009a6c:	d013      	beq.n	8009a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a72:	f043 0220 	orr.w	r2, r3, #32
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e007      	b.n	8009aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	f003 0320 	and.w	r3, r3, #32
 8009aa0:	2b20      	cmp	r3, #32
 8009aa2:	d1c8      	bne.n	8009a36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	@ 0x28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	f003 0310 	and.w	r3, r3, #16
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d068      	beq.n	8009bae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2210      	movs	r2, #16
 8009ae2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ae4:	e049      	b.n	8009b7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aec:	d045      	beq.n	8009b7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009aee:	f7fe fc4d 	bl	800838c <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d302      	bcc.n	8009b04 <I2C_IsErrorOccurred+0x54>
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d13a      	bne.n	8009b7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b26:	d121      	bne.n	8009b6c <I2C_IsErrorOccurred+0xbc>
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b2e:	d01d      	beq.n	8009b6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009b30:	7cfb      	ldrb	r3, [r7, #19]
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	d01a      	beq.n	8009b6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b46:	f7fe fc21 	bl	800838c <HAL_GetTick>
 8009b4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b4c:	e00e      	b.n	8009b6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b4e:	f7fe fc1d 	bl	800838c <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b19      	cmp	r3, #25
 8009b5a:	d907      	bls.n	8009b6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	f043 0320 	orr.w	r3, r3, #32
 8009b62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009b6a:	e006      	b.n	8009b7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d1e9      	bne.n	8009b4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b20      	cmp	r3, #32
 8009b86:	d003      	beq.n	8009b90 <I2C_IsErrorOccurred+0xe0>
 8009b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d0aa      	beq.n	8009ae6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d103      	bne.n	8009ba0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	f043 0304 	orr.w	r3, r3, #4
 8009ba6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00b      	beq.n	8009bd8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	f043 0301 	orr.w	r3, r3, #1
 8009bc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	f043 0308 	orr.w	r3, r3, #8
 8009be8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00b      	beq.n	8009c1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	f043 0302 	orr.w	r3, r3, #2
 8009c0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d01c      	beq.n	8009c5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7ff fe3b 	bl	80098a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6859      	ldr	r1, [r3, #4]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	4b0d      	ldr	r3, [pc, #52]	@ (8009c6c <I2C_IsErrorOccurred+0x1bc>)
 8009c36:	400b      	ands	r3, r1
 8009c38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	431a      	orrs	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3728      	adds	r7, #40	@ 0x28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	fe00e800 	.word	0xfe00e800

08009c70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	607b      	str	r3, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	817b      	strh	r3, [r7, #10]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c82:	897b      	ldrh	r3, [r7, #10]
 8009c84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c88:	7a7b      	ldrb	r3, [r7, #9]
 8009c8a:	041b      	lsls	r3, r3, #16
 8009c8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	0d5b      	lsrs	r3, r3, #21
 8009caa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009cae:	4b08      	ldr	r3, [pc, #32]	@ (8009cd0 <I2C_TransferConfig+0x60>)
 8009cb0:	430b      	orrs	r3, r1
 8009cb2:	43db      	mvns	r3, r3
 8009cb4:	ea02 0103 	and.w	r1, r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009cc2:	bf00      	nop
 8009cc4:	371c      	adds	r7, #28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	03ff63ff 	.word	0x03ff63ff

08009cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b20      	cmp	r3, #32
 8009ce8:	d138      	bne.n	8009d5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d101      	bne.n	8009cf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e032      	b.n	8009d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2224      	movs	r2, #36	@ 0x24
 8009d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f022 0201 	bic.w	r2, r2, #1
 8009d16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6819      	ldr	r1, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 0201 	orr.w	r2, r2, #1
 8009d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e000      	b.n	8009d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d5c:	2302      	movs	r3, #2
  }
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b20      	cmp	r3, #32
 8009d7e:	d139      	bne.n	8009df4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d101      	bne.n	8009d8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	e033      	b.n	8009df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2224      	movs	r2, #36	@ 0x24
 8009d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f022 0201 	bic.w	r2, r2, #1
 8009dac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009dbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	021b      	lsls	r3, r3, #8
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0201 	orr.w	r2, r2, #1
 8009dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	e000      	b.n	8009df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009df4:	2302      	movs	r3, #2
  }
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
	...

08009e04 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01e      	beq.n	8009e54 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009e16:	4b13      	ldr	r3, [pc, #76]	@ (8009e64 <HAL_IPCC_Init+0x60>)
 8009e18:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d102      	bne.n	8009e2c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7f8 ffc2 	bl	8002db0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009e2c:	68b8      	ldr	r0, [r7, #8]
 8009e2e:	f000 f85b 	bl	8009ee8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f82c 	bl	8009e9c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8009e52:	e001      	b.n	8009e58 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	58000c00 	.word	0x58000c00

08009e68 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	e00f      	b.n	8009eca <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8009ee0 <IPCC_SetDefaultCallbacks+0x44>)
 8009eb4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3306      	adds	r3, #6
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	4a08      	ldr	r2, [pc, #32]	@ (8009ee4 <IPCC_SetDefaultCallbacks+0x48>)
 8009ec2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	60fb      	str	r3, [r7, #12]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b05      	cmp	r3, #5
 8009ece:	d9ec      	bls.n	8009eaa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009ed0:	bf00      	nop
 8009ed2:	bf00      	nop
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	08009e69 	.word	0x08009e69
 8009ee4:	08009e83 	.word	0x08009e83

08009ee8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009efc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	223f      	movs	r2, #63	@ 0x3f
 8009f02:	609a      	str	r2, [r3, #8]
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d101      	bne.n	8009f22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e0c0      	b.n	800a0a4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d106      	bne.n	8009f3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7f9 f806 	bl	8002f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2203      	movs	r2, #3
 8009f40:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f002 ffa1 	bl	800ce90 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
 8009f52:	e03e      	b.n	8009fd2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009f54:	7bfa      	ldrb	r2, [r7, #15]
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	440b      	add	r3, r1
 8009f62:	3311      	adds	r3, #17
 8009f64:	2201      	movs	r2, #1
 8009f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009f68:	7bfa      	ldrb	r2, [r7, #15]
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	440b      	add	r3, r1
 8009f76:	3310      	adds	r3, #16
 8009f78:	7bfa      	ldrb	r2, [r7, #15]
 8009f7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009f7c:	7bfa      	ldrb	r2, [r7, #15]
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	00db      	lsls	r3, r3, #3
 8009f88:	440b      	add	r3, r1
 8009f8a:	3313      	adds	r3, #19
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009f90:	7bfa      	ldrb	r2, [r7, #15]
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	4613      	mov	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	440b      	add	r3, r1
 8009f9e:	3320      	adds	r3, #32
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009fa4:	7bfa      	ldrb	r2, [r7, #15]
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4413      	add	r3, r2
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	440b      	add	r3, r1
 8009fb2:	3324      	adds	r3, #36	@ 0x24
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	00db      	lsls	r3, r3, #3
 8009fc6:	440b      	add	r3, r1
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	73fb      	strb	r3, [r7, #15]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	791b      	ldrb	r3, [r3, #4]
 8009fd6:	7bfa      	ldrb	r2, [r7, #15]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d3bb      	bcc.n	8009f54 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]
 8009fe0:	e044      	b.n	800a06c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009fe2:	7bfa      	ldrb	r2, [r7, #15]
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	440b      	add	r3, r1
 8009ff0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009ff8:	7bfa      	ldrb	r2, [r7, #15]
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	00db      	lsls	r3, r3, #3
 800a004:	440b      	add	r3, r1
 800a006:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a00a:	7bfa      	ldrb	r2, [r7, #15]
 800a00c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a00e:	7bfa      	ldrb	r2, [r7, #15]
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4613      	mov	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	440b      	add	r3, r1
 800a01c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a024:	7bfa      	ldrb	r2, [r7, #15]
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	440b      	add	r3, r1
 800a032:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a03a:	7bfa      	ldrb	r2, [r7, #15]
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	440b      	add	r3, r1
 800a048:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a04c:	2200      	movs	r2, #0
 800a04e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a050:	7bfa      	ldrb	r2, [r7, #15]
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	4613      	mov	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	440b      	add	r3, r1
 800a05e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	3301      	adds	r3, #1
 800a06a:	73fb      	strb	r3, [r7, #15]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	791b      	ldrb	r3, [r3, #4]
 800a070:	7bfa      	ldrb	r2, [r7, #15]
 800a072:	429a      	cmp	r2, r3
 800a074:	d3b5      	bcc.n	8009fe2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3304      	adds	r3, #4
 800a07e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a082:	f002 ff20 	bl	800cec6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	7a9b      	ldrb	r3, [r3, #10]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d102      	bne.n	800a0a2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f805 	bl	800a0ac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f043 0301 	orr.w	r3, r3, #1
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f043 0302 	orr.w	r3, r3, #2
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a100:	b480      	push	{r7}
 800a102:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a104:	4b05      	ldr	r3, [pc, #20]	@ (800a11c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a04      	ldr	r2, [pc, #16]	@ (800a11c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a10a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a10e:	6013      	str	r3, [r2, #0]
}
 800a110:	bf00      	nop
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	58000400 	.word	0x58000400

0800a120 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a124:	4b04      	ldr	r3, [pc, #16]	@ (800a138 <HAL_PWREx_GetVoltageRange+0x18>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	58000400 	.word	0x58000400

0800a13c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a14a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a14e:	d101      	bne.n	800a154 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a150:	2301      	movs	r3, #1
 800a152:	e000      	b.n	800a156 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <LL_RCC_HSE_Enable>:
{
 800a160:	b480      	push	{r7}
 800a162:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a16e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a172:	6013      	str	r3, [r2, #0]
}
 800a174:	bf00      	nop
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <LL_RCC_HSE_Disable>:
{
 800a17e:	b480      	push	{r7}
 800a180:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a18c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a190:	6013      	str	r3, [r2, #0]
}
 800a192:	bf00      	nop
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <LL_RCC_HSE_IsReady>:
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a1a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ae:	d101      	bne.n	800a1b4 <LL_RCC_HSE_IsReady+0x18>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e000      	b.n	800a1b6 <LL_RCC_HSE_IsReady+0x1a>
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <LL_RCC_HSI_Enable>:
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a1c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1d2:	6013      	str	r3, [r2, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <LL_RCC_HSI_Disable>:
{
 800a1de:	b480      	push	{r7}
 800a1e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a1e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1f0:	6013      	str	r3, [r2, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <LL_RCC_HSI_IsReady>:
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a20a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a20e:	d101      	bne.n	800a214 <LL_RCC_HSI_IsReady+0x18>
 800a210:	2301      	movs	r3, #1
 800a212:	e000      	b.n	800a216 <LL_RCC_HSI_IsReady+0x1a>
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <LL_RCC_HSI_SetCalibTrimming>:
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	061b      	lsls	r3, r3, #24
 800a236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a23a:	4313      	orrs	r3, r2
 800a23c:	604b      	str	r3, [r1, #4]
}
 800a23e:	bf00      	nop
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <LL_RCC_HSI48_Enable>:
{
 800a24a:	b480      	push	{r7}
 800a24c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a24e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a252:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a25a:	f043 0301 	orr.w	r3, r3, #1
 800a25e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a262:	bf00      	nop
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <LL_RCC_HSI48_Disable>:
{
 800a26c:	b480      	push	{r7}
 800a26e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a274:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a27c:	f023 0301 	bic.w	r3, r3, #1
 800a280:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <LL_RCC_HSI48_IsReady>:
{
 800a28e:	b480      	push	{r7}
 800a290:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a296:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d101      	bne.n	800a2a6 <LL_RCC_HSI48_IsReady+0x18>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e000      	b.n	800a2a8 <LL_RCC_HSI48_IsReady+0x1a>
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <LL_RCC_LSE_Enable>:
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a2b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2c2:	f043 0301 	orr.w	r3, r3, #1
 800a2c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a2ca:	bf00      	nop
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <LL_RCC_LSE_Disable>:
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a2d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2e4:	f023 0301 	bic.w	r3, r3, #1
 800a2e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a2ec:	bf00      	nop
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <LL_RCC_LSE_EnableBypass>:
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a2fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a302:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a306:	f043 0304 	orr.w	r3, r3, #4
 800a30a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a30e:	bf00      	nop
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <LL_RCC_LSE_DisableBypass>:
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a31c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a324:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a328:	f023 0304 	bic.w	r3, r3, #4
 800a32c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a330:	bf00      	nop
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <LL_RCC_LSE_IsReady>:
{
 800a33a:	b480      	push	{r7}
 800a33c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a33e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d101      	bne.n	800a352 <LL_RCC_LSE_IsReady+0x18>
 800a34e:	2301      	movs	r3, #1
 800a350:	e000      	b.n	800a354 <LL_RCC_LSE_IsReady+0x1a>
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <LL_RCC_LSI1_Enable>:
{
 800a35e:	b480      	push	{r7}
 800a360:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a36a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a36e:	f043 0301 	orr.w	r3, r3, #1
 800a372:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a376:	bf00      	nop
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <LL_RCC_LSI1_Disable>:
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a38c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a390:	f023 0301 	bic.w	r3, r3, #1
 800a394:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a398:	bf00      	nop
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <LL_RCC_LSI1_IsReady>:
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a3a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d101      	bne.n	800a3ba <LL_RCC_LSI1_IsReady+0x18>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <LL_RCC_LSI1_IsReady+0x1a>
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <LL_RCC_LSI2_Enable>:
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a3ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3d6:	f043 0304 	orr.w	r3, r3, #4
 800a3da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a3de:	bf00      	nop
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <LL_RCC_LSI2_Disable>:
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a3ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3f8:	f023 0304 	bic.w	r3, r3, #4
 800a3fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a400:	bf00      	nop
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <LL_RCC_LSI2_IsReady>:
{
 800a40a:	b480      	push	{r7}
 800a40c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a40e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a416:	f003 0308 	and.w	r3, r3, #8
 800a41a:	2b08      	cmp	r3, #8
 800a41c:	d101      	bne.n	800a422 <LL_RCC_LSI2_IsReady+0x18>
 800a41e:	2301      	movs	r3, #1
 800a420:	e000      	b.n	800a424 <LL_RCC_LSI2_IsReady+0x1a>
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <LL_RCC_LSI2_SetTrimming>:
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a43a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a43e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a44a:	4313      	orrs	r3, r2
 800a44c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <LL_RCC_MSI_Enable>:
{
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a46a:	f043 0301 	orr.w	r3, r3, #1
 800a46e:	6013      	str	r3, [r2, #0]
}
 800a470:	bf00      	nop
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <LL_RCC_MSI_Disable>:
{
 800a47a:	b480      	push	{r7}
 800a47c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a47e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a488:	f023 0301 	bic.w	r3, r3, #1
 800a48c:	6013      	str	r3, [r2, #0]
}
 800a48e:	bf00      	nop
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <LL_RCC_MSI_IsReady>:
{
 800a498:	b480      	push	{r7}
 800a49a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a49c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d101      	bne.n	800a4ae <LL_RCC_MSI_IsReady+0x16>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <LL_RCC_MSI_IsReady+0x18>
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <LL_RCC_MSI_SetRange>:
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a4c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	600b      	str	r3, [r1, #0]
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <LL_RCC_MSI_GetRange>:
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a4e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4f2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2bb0      	cmp	r3, #176	@ 0xb0
 800a4f8:	d901      	bls.n	800a4fe <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800a4fa:	23b0      	movs	r3, #176	@ 0xb0
 800a4fc:	607b      	str	r3, [r7, #4]
  return msiRange;
 800a4fe:	687b      	ldr	r3, [r7, #4]
}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <LL_RCC_MSI_SetCalibTrimming>:
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a526:	4313      	orrs	r3, r2
 800a528:	604b      	str	r3, [r1, #4]
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <LL_RCC_SetSysClkSource>:
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a53e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	f023 0203 	bic.w	r2, r3, #3
 800a548:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4313      	orrs	r3, r2
 800a550:	608b      	str	r3, [r1, #8]
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <LL_RCC_GetSysClkSource>:
{
 800a55e:	b480      	push	{r7}
 800a560:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f003 030c 	and.w	r3, r3, #12
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <LL_RCC_SetAHBPrescaler>:
{
 800a576:	b480      	push	{r7}
 800a578:	b083      	sub	sp, #12
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a57e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a588:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4313      	orrs	r3, r2
 800a590:	608b      	str	r3, [r1, #8]
}
 800a592:	bf00      	nop
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <LL_C2_RCC_SetAHBPrescaler>:
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a5a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a5be:	bf00      	nop
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <LL_RCC_SetAHB4Prescaler>:
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a5d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5da:	f023 020f 	bic.w	r2, r3, #15
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	091b      	lsrs	r3, r3, #4
 800a5e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <LL_RCC_SetAPB1Prescaler>:
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a60a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4313      	orrs	r3, r2
 800a612:	608b      	str	r3, [r1, #8]
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <LL_RCC_SetAPB2Prescaler>:
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a632:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4313      	orrs	r3, r2
 800a63a:	608b      	str	r3, [r1, #8]
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <LL_RCC_GetAHBPrescaler>:
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a64c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a656:	4618      	mov	r0, r3
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <LL_RCC_GetAHB4Prescaler>:
{
 800a660:	b480      	push	{r7}
 800a662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a668:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a66c:	011b      	lsls	r3, r3, #4
 800a66e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a672:	4618      	mov	r0, r3
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <LL_RCC_GetAPB1Prescaler>:
{
 800a67c:	b480      	push	{r7}
 800a67e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <LL_RCC_GetAPB2Prescaler>:
{
 800a694:	b480      	push	{r7}
 800a696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <LL_RCC_PLL_Enable>:
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a6b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6be:	6013      	str	r3, [r2, #0]
}
 800a6c0:	bf00      	nop
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <LL_RCC_PLL_Disable>:
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a6ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6dc:	6013      	str	r3, [r2, #0]
}
 800a6de:	bf00      	nop
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <LL_RCC_PLL_IsReady>:
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a6ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6fa:	d101      	bne.n	800a700 <LL_RCC_PLL_IsReady+0x18>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <LL_RCC_PLL_IsReady+0x1a>
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <LL_RCC_PLL_GetN>:
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	0a1b      	lsrs	r3, r3, #8
 800a718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <LL_RCC_PLL_GetR>:
{
 800a726:	b480      	push	{r7}
 800a728:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a72a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800a734:	4618      	mov	r0, r3
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <LL_RCC_PLL_GetDivider>:
{
 800a73e:	b480      	push	{r7}
 800a740:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <LL_RCC_PLL_GetMainSource>:
{
 800a756:	b480      	push	{r7}
 800a758:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a75a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	f003 0303 	and.w	r3, r3, #3
}
 800a764:	4618      	mov	r0, r3
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <LL_RCC_IsActiveFlag_HPRE>:
{
 800a76e:	b480      	push	{r7}
 800a770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a77c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a780:	d101      	bne.n	800a786 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a782:	2301      	movs	r3, #1
 800a784:	e000      	b.n	800a788 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800a792:	b480      	push	{r7}
 800a794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a79a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a79e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7a6:	d101      	bne.n	800a7ac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e000      	b.n	800a7ae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a7bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a7c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7cc:	d101      	bne.n	800a7d2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <LL_RCC_IsActiveFlag_PPRE1>:
{
 800a7de:	b480      	push	{r7}
 800a7e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a7e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7f0:	d101      	bne.n	800a7f6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e000      	b.n	800a7f8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800a802:	b480      	push	{r7}
 800a804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a814:	d101      	bne.n	800a81a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a816:	2301      	movs	r3, #1
 800a818:	e000      	b.n	800a81c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
	...

0800a828 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a828:	b590      	push	{r4, r7, lr}
 800a82a:	b08d      	sub	sp, #52	@ 0x34
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e363      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 808d 	beq.w	800a962 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a848:	f7ff fe89 	bl	800a55e <LL_RCC_GetSysClkSource>
 800a84c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a84e:	f7ff ff82 	bl	800a756 <LL_RCC_PLL_GetMainSource>
 800a852:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d005      	beq.n	800a866 <HAL_RCC_OscConfig+0x3e>
 800a85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a85c:	2b0c      	cmp	r3, #12
 800a85e:	d147      	bne.n	800a8f0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a862:	2b01      	cmp	r3, #1
 800a864:	d144      	bne.n	800a8f0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e347      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a876:	f7ff fe34 	bl	800a4e2 <LL_RCC_MSI_GetRange>
 800a87a:	4603      	mov	r3, r0
 800a87c:	429c      	cmp	r4, r3
 800a87e:	d914      	bls.n	800a8aa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a884:	4618      	mov	r0, r3
 800a886:	f000 fd2f 	bl	800b2e8 <RCC_SetFlashLatencyFromMSIRange>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e336      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff fe0e 	bl	800a4ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7ff fe32 	bl	800a50c <LL_RCC_MSI_SetCalibTrimming>
 800a8a8:	e013      	b.n	800a8d2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7ff fe03 	bl	800a4ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff fe27 	bl	800a50c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 fd10 	bl	800b2e8 <RCC_SetFlashLatencyFromMSIRange>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e317      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a8d2:	f000 fcc9 	bl	800b268 <HAL_RCC_GetHCLKFreq>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4aa4      	ldr	r2, [pc, #656]	@ (800ab6c <HAL_RCC_OscConfig+0x344>)
 800a8da:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a8dc:	4ba4      	ldr	r3, [pc, #656]	@ (800ab70 <HAL_RCC_OscConfig+0x348>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fd fd05 	bl	80082f0 <HAL_InitTick>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d039      	beq.n	800a960 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e308      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d01e      	beq.n	800a936 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a8f8:	f7ff fdb0 	bl	800a45c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a8fc:	f7fd fd46 	bl	800838c <HAL_GetTick>
 800a900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a902:	e008      	b.n	800a916 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a904:	f7fd fd42 	bl	800838c <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d901      	bls.n	800a916 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e2f5      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a916:	f7ff fdbf 	bl	800a498 <LL_RCC_MSI_IsReady>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0f1      	beq.n	800a904 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff fdc8 	bl	800a4ba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a1b      	ldr	r3, [r3, #32]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff fdec 	bl	800a50c <LL_RCC_MSI_SetCalibTrimming>
 800a934:	e015      	b.n	800a962 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a936:	f7ff fda0 	bl	800a47a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a93a:	f7fd fd27 	bl	800838c <HAL_GetTick>
 800a93e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a940:	e008      	b.n	800a954 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a942:	f7fd fd23 	bl	800838c <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d901      	bls.n	800a954 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e2d6      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a954:	f7ff fda0 	bl	800a498 <LL_RCC_MSI_IsReady>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1f1      	bne.n	800a942 <HAL_RCC_OscConfig+0x11a>
 800a95e:	e000      	b.n	800a962 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a960:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d047      	beq.n	800a9fe <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a96e:	f7ff fdf6 	bl	800a55e <LL_RCC_GetSysClkSource>
 800a972:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a974:	f7ff feef 	bl	800a756 <LL_RCC_PLL_GetMainSource>
 800a978:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	2b08      	cmp	r3, #8
 800a97e:	d005      	beq.n	800a98c <HAL_RCC_OscConfig+0x164>
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	2b0c      	cmp	r3, #12
 800a984:	d108      	bne.n	800a998 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d105      	bne.n	800a998 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d134      	bne.n	800a9fe <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	e2b4      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9a0:	d102      	bne.n	800a9a8 <HAL_RCC_OscConfig+0x180>
 800a9a2:	f7ff fbdd 	bl	800a160 <LL_RCC_HSE_Enable>
 800a9a6:	e001      	b.n	800a9ac <HAL_RCC_OscConfig+0x184>
 800a9a8:	f7ff fbe9 	bl	800a17e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d012      	beq.n	800a9da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9b4:	f7fd fcea 	bl	800838c <HAL_GetTick>
 800a9b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a9ba:	e008      	b.n	800a9ce <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9bc:	f7fd fce6 	bl	800838c <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	2b64      	cmp	r3, #100	@ 0x64
 800a9c8:	d901      	bls.n	800a9ce <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e299      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a9ce:	f7ff fbe5 	bl	800a19c <LL_RCC_HSE_IsReady>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d0f1      	beq.n	800a9bc <HAL_RCC_OscConfig+0x194>
 800a9d8:	e011      	b.n	800a9fe <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9da:	f7fd fcd7 	bl	800838c <HAL_GetTick>
 800a9de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a9e0:	e008      	b.n	800a9f4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9e2:	f7fd fcd3 	bl	800838c <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	2b64      	cmp	r3, #100	@ 0x64
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e286      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a9f4:	f7ff fbd2 	bl	800a19c <LL_RCC_HSE_IsReady>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1f1      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d04c      	beq.n	800aaa4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa0a:	f7ff fda8 	bl	800a55e <LL_RCC_GetSysClkSource>
 800aa0e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa10:	f7ff fea1 	bl	800a756 <LL_RCC_PLL_GetMainSource>
 800aa14:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	2b04      	cmp	r3, #4
 800aa1a:	d005      	beq.n	800aa28 <HAL_RCC_OscConfig+0x200>
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2b0c      	cmp	r3, #12
 800aa20:	d10e      	bne.n	800aa40 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d10b      	bne.n	800aa40 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e266      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff fbf1 	bl	800a220 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa3e:	e031      	b.n	800aaa4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d019      	beq.n	800aa7c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa48:	f7ff fbba 	bl	800a1c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa4c:	f7fd fc9e 	bl	800838c <HAL_GetTick>
 800aa50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800aa52:	e008      	b.n	800aa66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa54:	f7fd fc9a 	bl	800838c <HAL_GetTick>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d901      	bls.n	800aa66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e24d      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800aa66:	f7ff fbc9 	bl	800a1fc <LL_RCC_HSI_IsReady>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d0f1      	beq.n	800aa54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff fbd3 	bl	800a220 <LL_RCC_HSI_SetCalibTrimming>
 800aa7a:	e013      	b.n	800aaa4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa7c:	f7ff fbaf 	bl	800a1de <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa80:	f7fd fc84 	bl	800838c <HAL_GetTick>
 800aa84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800aa86:	e008      	b.n	800aa9a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa88:	f7fd fc80 	bl	800838c <HAL_GetTick>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d901      	bls.n	800aa9a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800aa96:	2303      	movs	r3, #3
 800aa98:	e233      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800aa9a:	f7ff fbaf 	bl	800a1fc <LL_RCC_HSI_IsReady>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1f1      	bne.n	800aa88 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 0308 	and.w	r3, r3, #8
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 80a3 	beq.w	800ac04 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d076      	beq.n	800abb4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f003 0310 	and.w	r3, r3, #16
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d046      	beq.n	800ab60 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800aad2:	f7ff fc66 	bl	800a3a2 <LL_RCC_LSI1_IsReady>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d113      	bne.n	800ab04 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800aadc:	f7ff fc3f 	bl	800a35e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aae0:	f7fd fc54 	bl	800838c <HAL_GetTick>
 800aae4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aae6:	e008      	b.n	800aafa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aae8:	f7fd fc50 	bl	800838c <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d901      	bls.n	800aafa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e203      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aafa:	f7ff fc52 	bl	800a3a2 <LL_RCC_LSI1_IsReady>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0f1      	beq.n	800aae8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800ab04:	f7ff fc5f 	bl	800a3c6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab08:	f7fd fc40 	bl	800838c <HAL_GetTick>
 800ab0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ab0e:	e008      	b.n	800ab22 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab10:	f7fd fc3c 	bl	800838c <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d901      	bls.n	800ab22 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e1ef      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ab22:	f7ff fc72 	bl	800a40a <LL_RCC_LSI2_IsReady>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d0f1      	beq.n	800ab10 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff fc7c 	bl	800a42e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ab36:	f7ff fc23 	bl	800a380 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab3a:	f7fd fc27 	bl	800838c <HAL_GetTick>
 800ab3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ab40:	e008      	b.n	800ab54 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab42:	f7fd fc23 	bl	800838c <HAL_GetTick>
 800ab46:	4602      	mov	r2, r0
 800ab48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d901      	bls.n	800ab54 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e1d6      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ab54:	f7ff fc25 	bl	800a3a2 <LL_RCC_LSI1_IsReady>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1f1      	bne.n	800ab42 <HAL_RCC_OscConfig+0x31a>
 800ab5e:	e051      	b.n	800ac04 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ab60:	f7ff fbfd 	bl	800a35e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab64:	f7fd fc12 	bl	800838c <HAL_GetTick>
 800ab68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ab6a:	e00c      	b.n	800ab86 <HAL_RCC_OscConfig+0x35e>
 800ab6c:	20000008 	.word	0x20000008
 800ab70:	200000e0 	.word	0x200000e0
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab74:	f7fd fc0a 	bl	800838c <HAL_GetTick>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d901      	bls.n	800ab86 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e1bd      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ab86:	f7ff fc0c 	bl	800a3a2 <LL_RCC_LSI1_IsReady>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0f1      	beq.n	800ab74 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ab90:	f7ff fc2a 	bl	800a3e8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ab94:	e008      	b.n	800aba8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab96:	f7fd fbf9 	bl	800838c <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b03      	cmp	r3, #3
 800aba2:	d901      	bls.n	800aba8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e1ac      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800aba8:	f7ff fc2f 	bl	800a40a <LL_RCC_LSI2_IsReady>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f1      	bne.n	800ab96 <HAL_RCC_OscConfig+0x36e>
 800abb2:	e027      	b.n	800ac04 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800abb4:	f7ff fc18 	bl	800a3e8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abb8:	f7fd fbe8 	bl	800838c <HAL_GetTick>
 800abbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800abbe:	e008      	b.n	800abd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800abc0:	f7fd fbe4 	bl	800838c <HAL_GetTick>
 800abc4:	4602      	mov	r2, r0
 800abc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d901      	bls.n	800abd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800abce:	2303      	movs	r3, #3
 800abd0:	e197      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800abd2:	f7ff fc1a 	bl	800a40a <LL_RCC_LSI2_IsReady>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1f1      	bne.n	800abc0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800abdc:	f7ff fbd0 	bl	800a380 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abe0:	f7fd fbd4 	bl	800838c <HAL_GetTick>
 800abe4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800abe6:	e008      	b.n	800abfa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800abe8:	f7fd fbd0 	bl	800838c <HAL_GetTick>
 800abec:	4602      	mov	r2, r0
 800abee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d901      	bls.n	800abfa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e183      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800abfa:	f7ff fbd2 	bl	800a3a2 <LL_RCC_LSI1_IsReady>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1f1      	bne.n	800abe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d05b      	beq.n	800acc8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac10:	4ba7      	ldr	r3, [pc, #668]	@ (800aeb0 <HAL_RCC_OscConfig+0x688>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d114      	bne.n	800ac46 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ac1c:	f7ff fa70 	bl	800a100 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac20:	f7fd fbb4 	bl	800838c <HAL_GetTick>
 800ac24:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac26:	e008      	b.n	800ac3a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac28:	f7fd fbb0 	bl	800838c <HAL_GetTick>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d901      	bls.n	800ac3a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e163      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac3a:	4b9d      	ldr	r3, [pc, #628]	@ (800aeb0 <HAL_RCC_OscConfig+0x688>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0f0      	beq.n	800ac28 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d102      	bne.n	800ac54 <HAL_RCC_OscConfig+0x42c>
 800ac4e:	f7ff fb30 	bl	800a2b2 <LL_RCC_LSE_Enable>
 800ac52:	e00c      	b.n	800ac6e <HAL_RCC_OscConfig+0x446>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	2b05      	cmp	r3, #5
 800ac5a:	d104      	bne.n	800ac66 <HAL_RCC_OscConfig+0x43e>
 800ac5c:	f7ff fb4b 	bl	800a2f6 <LL_RCC_LSE_EnableBypass>
 800ac60:	f7ff fb27 	bl	800a2b2 <LL_RCC_LSE_Enable>
 800ac64:	e003      	b.n	800ac6e <HAL_RCC_OscConfig+0x446>
 800ac66:	f7ff fb35 	bl	800a2d4 <LL_RCC_LSE_Disable>
 800ac6a:	f7ff fb55 	bl	800a318 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d014      	beq.n	800aca0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac76:	f7fd fb89 	bl	800838c <HAL_GetTick>
 800ac7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ac7c:	e00a      	b.n	800ac94 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac7e:	f7fd fb85 	bl	800838c <HAL_GetTick>
 800ac82:	4602      	mov	r2, r0
 800ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d901      	bls.n	800ac94 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ac90:	2303      	movs	r3, #3
 800ac92:	e136      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ac94:	f7ff fb51 	bl	800a33a <LL_RCC_LSE_IsReady>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0ef      	beq.n	800ac7e <HAL_RCC_OscConfig+0x456>
 800ac9e:	e013      	b.n	800acc8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aca0:	f7fd fb74 	bl	800838c <HAL_GetTick>
 800aca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800aca6:	e00a      	b.n	800acbe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aca8:	f7fd fb70 	bl	800838c <HAL_GetTick>
 800acac:	4602      	mov	r2, r0
 800acae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e121      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800acbe:	f7ff fb3c 	bl	800a33a <LL_RCC_LSE_IsReady>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1ef      	bne.n	800aca8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d02c      	beq.n	800ad2e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d014      	beq.n	800ad06 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800acdc:	f7ff fab5 	bl	800a24a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ace0:	f7fd fb54 	bl	800838c <HAL_GetTick>
 800ace4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ace6:	e008      	b.n	800acfa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ace8:	f7fd fb50 	bl	800838c <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d901      	bls.n	800acfa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e103      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800acfa:	f7ff fac8 	bl	800a28e <LL_RCC_HSI48_IsReady>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d0f1      	beq.n	800ace8 <HAL_RCC_OscConfig+0x4c0>
 800ad04:	e013      	b.n	800ad2e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad06:	f7ff fab1 	bl	800a26c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad0a:	f7fd fb3f 	bl	800838c <HAL_GetTick>
 800ad0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ad10:	e008      	b.n	800ad24 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad12:	f7fd fb3b 	bl	800838c <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d901      	bls.n	800ad24 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e0ee      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ad24:	f7ff fab3 	bl	800a28e <LL_RCC_HSI48_IsReady>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1f1      	bne.n	800ad12 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 80e4 	beq.w	800af00 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad38:	f7ff fc11 	bl	800a55e <LL_RCC_GetSysClkSource>
 800ad3c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ad3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	f040 80b4 	bne.w	800aeb8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f003 0203 	and.w	r2, r3, #3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d123      	bne.n	800ada6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d11c      	bne.n	800ada6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	0a1b      	lsrs	r3, r3, #8
 800ad70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d114      	bne.n	800ada6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d10d      	bne.n	800ada6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d106      	bne.n	800ada6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d05d      	beq.n	800ae62 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2b0c      	cmp	r3, #12
 800adaa:	d058      	beq.n	800ae5e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800adac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e0a1      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800adbe:	f7ff fc84 	bl	800a6ca <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800adc2:	f7fd fae3 	bl	800838c <HAL_GetTick>
 800adc6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800adc8:	e008      	b.n	800addc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adca:	f7fd fadf 	bl	800838c <HAL_GetTick>
 800adce:	4602      	mov	r2, r0
 800add0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	2b02      	cmp	r3, #2
 800add6:	d901      	bls.n	800addc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800add8:	2303      	movs	r3, #3
 800adda:	e092      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800addc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1ef      	bne.n	800adca <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800adea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adee:	68da      	ldr	r2, [r3, #12]
 800adf0:	4b30      	ldr	r3, [pc, #192]	@ (800aeb4 <HAL_RCC_OscConfig+0x68c>)
 800adf2:	4013      	ands	r3, r2
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800adfc:	4311      	orrs	r1, r2
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ae02:	0212      	lsls	r2, r2, #8
 800ae04:	4311      	orrs	r1, r2
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ae0a:	4311      	orrs	r1, r2
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ae10:	4311      	orrs	r1, r2
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ae16:	430a      	orrs	r2, r1
 800ae18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ae20:	f7ff fc44 	bl	800a6ac <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ae34:	f7fd faaa 	bl	800838c <HAL_GetTick>
 800ae38:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae3a:	e008      	b.n	800ae4e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae3c:	f7fd faa6 	bl	800838c <HAL_GetTick>
 800ae40:	4602      	mov	r2, r0
 800ae42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d901      	bls.n	800ae4e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	e059      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d0ef      	beq.n	800ae3c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae5c:	e050      	b.n	800af00 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e04f      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d147      	bne.n	800af00 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ae70:	f7ff fc1c 	bl	800a6ac <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae84:	f7fd fa82 	bl	800838c <HAL_GetTick>
 800ae88:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae8a:	e008      	b.n	800ae9e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae8c:	f7fd fa7e 	bl	800838c <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d901      	bls.n	800ae9e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e031      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d0ef      	beq.n	800ae8c <HAL_RCC_OscConfig+0x664>
 800aeac:	e028      	b.n	800af00 <HAL_RCC_OscConfig+0x6d8>
 800aeae:	bf00      	nop
 800aeb0:	58000400 	.word	0x58000400
 800aeb4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	2b0c      	cmp	r3, #12
 800aebc:	d01e      	beq.n	800aefc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aebe:	f7ff fc04 	bl	800a6ca <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aec2:	f7fd fa63 	bl	800838c <HAL_GetTick>
 800aec6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aec8:	e008      	b.n	800aedc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeca:	f7fd fa5f 	bl	800838c <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d901      	bls.n	800aedc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e012      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aedc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1ef      	bne.n	800aeca <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800aeea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeee:	68da      	ldr	r2, [r3, #12]
 800aef0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aef4:	4b05      	ldr	r3, [pc, #20]	@ (800af0c <HAL_RCC_OscConfig+0x6e4>)
 800aef6:	4013      	ands	r3, r2
 800aef8:	60cb      	str	r3, [r1, #12]
 800aefa:	e001      	b.n	800af00 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e000      	b.n	800af02 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3734      	adds	r7, #52	@ 0x34
 800af06:	46bd      	mov	sp, r7
 800af08:	bd90      	pop	{r4, r7, pc}
 800af0a:	bf00      	nop
 800af0c:	eefefffc 	.word	0xeefefffc

0800af10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e12d      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af24:	4b98      	ldr	r3, [pc, #608]	@ (800b188 <HAL_RCC_ClockConfig+0x278>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 0307 	and.w	r3, r3, #7
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d91b      	bls.n	800af6a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af32:	4b95      	ldr	r3, [pc, #596]	@ (800b188 <HAL_RCC_ClockConfig+0x278>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f023 0207 	bic.w	r2, r3, #7
 800af3a:	4993      	ldr	r1, [pc, #588]	@ (800b188 <HAL_RCC_ClockConfig+0x278>)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	4313      	orrs	r3, r2
 800af40:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af42:	f7fd fa23 	bl	800838c <HAL_GetTick>
 800af46:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af48:	e008      	b.n	800af5c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800af4a:	f7fd fa1f 	bl	800838c <HAL_GetTick>
 800af4e:	4602      	mov	r2, r0
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	2b02      	cmp	r3, #2
 800af56:	d901      	bls.n	800af5c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800af58:	2303      	movs	r3, #3
 800af5a:	e111      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af5c:	4b8a      	ldr	r3, [pc, #552]	@ (800b188 <HAL_RCC_ClockConfig+0x278>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	429a      	cmp	r2, r3
 800af68:	d1ef      	bne.n	800af4a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0302 	and.w	r3, r3, #2
 800af72:	2b00      	cmp	r3, #0
 800af74:	d016      	beq.n	800afa4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff fafb 	bl	800a576 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af80:	f7fd fa04 	bl	800838c <HAL_GetTick>
 800af84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800af86:	e008      	b.n	800af9a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af88:	f7fd fa00 	bl	800838c <HAL_GetTick>
 800af8c:	4602      	mov	r2, r0
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	2b02      	cmp	r3, #2
 800af94:	d901      	bls.n	800af9a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800af96:	2303      	movs	r3, #3
 800af98:	e0f2      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800af9a:	f7ff fbe8 	bl	800a76e <LL_RCC_IsActiveFlag_HPRE>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d0f1      	beq.n	800af88 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0320 	and.w	r3, r3, #32
 800afac:	2b00      	cmp	r3, #0
 800afae:	d016      	beq.n	800afde <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff faf2 	bl	800a59e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800afba:	f7fd f9e7 	bl	800838c <HAL_GetTick>
 800afbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800afc0:	e008      	b.n	800afd4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afc2:	f7fd f9e3 	bl	800838c <HAL_GetTick>
 800afc6:	4602      	mov	r2, r0
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d901      	bls.n	800afd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e0d5      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800afd4:	f7ff fbdd 	bl	800a792 <LL_RCC_IsActiveFlag_C2HPRE>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0f1      	beq.n	800afc2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d016      	beq.n	800b018 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff faeb 	bl	800a5ca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800aff4:	f7fd f9ca 	bl	800838c <HAL_GetTick>
 800aff8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800affa:	e008      	b.n	800b00e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800affc:	f7fd f9c6 	bl	800838c <HAL_GetTick>
 800b000:	4602      	mov	r2, r0
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	2b02      	cmp	r3, #2
 800b008:	d901      	bls.n	800b00e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e0b8      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b00e:	f7ff fbd3 	bl	800a7b8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0f1      	beq.n	800affc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0304 	and.w	r3, r3, #4
 800b020:	2b00      	cmp	r3, #0
 800b022:	d016      	beq.n	800b052 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	4618      	mov	r0, r3
 800b02a:	f7ff fae5 	bl	800a5f8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b02e:	f7fd f9ad 	bl	800838c <HAL_GetTick>
 800b032:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b034:	e008      	b.n	800b048 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b036:	f7fd f9a9 	bl	800838c <HAL_GetTick>
 800b03a:	4602      	mov	r2, r0
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	2b02      	cmp	r3, #2
 800b042:	d901      	bls.n	800b048 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	e09b      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b048:	f7ff fbc9 	bl	800a7de <LL_RCC_IsActiveFlag_PPRE1>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0f1      	beq.n	800b036 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0308 	and.w	r3, r3, #8
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d017      	beq.n	800b08e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	00db      	lsls	r3, r3, #3
 800b064:	4618      	mov	r0, r3
 800b066:	f7ff fadb 	bl	800a620 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b06a:	f7fd f98f 	bl	800838c <HAL_GetTick>
 800b06e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b070:	e008      	b.n	800b084 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b072:	f7fd f98b 	bl	800838c <HAL_GetTick>
 800b076:	4602      	mov	r2, r0
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d901      	bls.n	800b084 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b080:	2303      	movs	r3, #3
 800b082:	e07d      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b084:	f7ff fbbd 	bl	800a802 <LL_RCC_IsActiveFlag_PPRE2>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0f1      	beq.n	800b072 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d043      	beq.n	800b122 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d106      	bne.n	800b0b0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b0a2:	f7ff f87b 	bl	800a19c <LL_RCC_HSE_IsReady>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d11e      	bne.n	800b0ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e067      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	2b03      	cmp	r3, #3
 800b0b6:	d106      	bne.n	800b0c6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b0b8:	f7ff fb16 	bl	800a6e8 <LL_RCC_PLL_IsReady>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d113      	bne.n	800b0ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e05c      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b0ce:	f7ff f9e3 	bl	800a498 <LL_RCC_MSI_IsReady>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d108      	bne.n	800b0ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e051      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b0dc:	f7ff f88e 	bl	800a1fc <LL_RCC_HSI_IsReady>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e04a      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff fa21 	bl	800a536 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0f4:	f7fd f94a 	bl	800838c <HAL_GetTick>
 800b0f8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0fa:	e00a      	b.n	800b112 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0fc:	f7fd f946 	bl	800838c <HAL_GetTick>
 800b100:	4602      	mov	r2, r0
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d901      	bls.n	800b112 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e036      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b112:	f7ff fa24 	bl	800a55e <LL_RCC_GetSysClkSource>
 800b116:	4602      	mov	r2, r0
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	429a      	cmp	r2, r3
 800b120:	d1ec      	bne.n	800b0fc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b122:	4b19      	ldr	r3, [pc, #100]	@ (800b188 <HAL_RCC_ClockConfig+0x278>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d21b      	bcs.n	800b168 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b130:	4b15      	ldr	r3, [pc, #84]	@ (800b188 <HAL_RCC_ClockConfig+0x278>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f023 0207 	bic.w	r2, r3, #7
 800b138:	4913      	ldr	r1, [pc, #76]	@ (800b188 <HAL_RCC_ClockConfig+0x278>)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b140:	f7fd f924 	bl	800838c <HAL_GetTick>
 800b144:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b146:	e008      	b.n	800b15a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b148:	f7fd f920 	bl	800838c <HAL_GetTick>
 800b14c:	4602      	mov	r2, r0
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	2b02      	cmp	r3, #2
 800b154:	d901      	bls.n	800b15a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b156:	2303      	movs	r3, #3
 800b158:	e012      	b.n	800b180 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b15a:	4b0b      	ldr	r3, [pc, #44]	@ (800b188 <HAL_RCC_ClockConfig+0x278>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f003 0307 	and.w	r3, r3, #7
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	429a      	cmp	r2, r3
 800b166:	d1ef      	bne.n	800b148 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b168:	f000 f87e 	bl	800b268 <HAL_RCC_GetHCLKFreq>
 800b16c:	4603      	mov	r3, r0
 800b16e:	4a07      	ldr	r2, [pc, #28]	@ (800b18c <HAL_RCC_ClockConfig+0x27c>)
 800b170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b172:	f7fd f917 	bl	80083a4 <HAL_GetTickPrio>
 800b176:	4603      	mov	r3, r0
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fd f8b9 	bl	80082f0 <HAL_InitTick>
 800b17e:	4603      	mov	r3, r0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	58004000 	.word	0x58004000
 800b18c:	20000008 	.word	0x20000008

0800b190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b190:	b590      	push	{r4, r7, lr}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b196:	f7ff f9e2 	bl	800a55e <LL_RCC_GetSysClkSource>
 800b19a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b1a2:	f7ff f99e 	bl	800a4e2 <LL_RCC_MSI_GetRange>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	091b      	lsrs	r3, r3, #4
 800b1aa:	f003 030f 	and.w	r3, r3, #15
 800b1ae:	4a2b      	ldr	r2, [pc, #172]	@ (800b25c <HAL_RCC_GetSysClockFreq+0xcc>)
 800b1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	e04b      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b04      	cmp	r3, #4
 800b1bc:	d102      	bne.n	800b1c4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b1be:	4b28      	ldr	r3, [pc, #160]	@ (800b260 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	e045      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b08      	cmp	r3, #8
 800b1c8:	d10a      	bne.n	800b1e0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b1ca:	f7fe ffb7 	bl	800a13c <LL_RCC_HSE_IsEnabledDiv2>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d102      	bne.n	800b1da <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b1d4:	4b22      	ldr	r3, [pc, #136]	@ (800b260 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	e03a      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b1da:	4b22      	ldr	r3, [pc, #136]	@ (800b264 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	e037      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b1e0:	f7ff fab9 	bl	800a756 <LL_RCC_PLL_GetMainSource>
 800b1e4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d003      	beq.n	800b1f4 <HAL_RCC_GetSysClockFreq+0x64>
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d003      	beq.n	800b1fa <HAL_RCC_GetSysClockFreq+0x6a>
 800b1f2:	e00d      	b.n	800b210 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b1f4:	4b1a      	ldr	r3, [pc, #104]	@ (800b260 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1f6:	60bb      	str	r3, [r7, #8]
        break;
 800b1f8:	e015      	b.n	800b226 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b1fa:	f7fe ff9f 	bl	800a13c <LL_RCC_HSE_IsEnabledDiv2>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b01      	cmp	r3, #1
 800b202:	d102      	bne.n	800b20a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b204:	4b16      	ldr	r3, [pc, #88]	@ (800b260 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b206:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b208:	e00d      	b.n	800b226 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b20a:	4b16      	ldr	r3, [pc, #88]	@ (800b264 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b20c:	60bb      	str	r3, [r7, #8]
        break;
 800b20e:	e00a      	b.n	800b226 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b210:	f7ff f967 	bl	800a4e2 <LL_RCC_MSI_GetRange>
 800b214:	4603      	mov	r3, r0
 800b216:	091b      	lsrs	r3, r3, #4
 800b218:	f003 030f 	and.w	r3, r3, #15
 800b21c:	4a0f      	ldr	r2, [pc, #60]	@ (800b25c <HAL_RCC_GetSysClockFreq+0xcc>)
 800b21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b222:	60bb      	str	r3, [r7, #8]
        break;
 800b224:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b226:	f7ff fa71 	bl	800a70c <LL_RCC_PLL_GetN>
 800b22a:	4602      	mov	r2, r0
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	fb03 f402 	mul.w	r4, r3, r2
 800b232:	f7ff fa84 	bl	800a73e <LL_RCC_PLL_GetDivider>
 800b236:	4603      	mov	r3, r0
 800b238:	091b      	lsrs	r3, r3, #4
 800b23a:	3301      	adds	r3, #1
 800b23c:	fbb4 f4f3 	udiv	r4, r4, r3
 800b240:	f7ff fa71 	bl	800a726 <LL_RCC_PLL_GetR>
 800b244:	4603      	mov	r3, r0
 800b246:	0f5b      	lsrs	r3, r3, #29
 800b248:	3301      	adds	r3, #1
 800b24a:	fbb4 f3f3 	udiv	r3, r4, r3
 800b24e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b250:	68fb      	ldr	r3, [r7, #12]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	bd90      	pop	{r4, r7, pc}
 800b25a:	bf00      	nop
 800b25c:	08013f50 	.word	0x08013f50
 800b260:	00f42400 	.word	0x00f42400
 800b264:	01e84800 	.word	0x01e84800

0800b268 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b268:	b598      	push	{r3, r4, r7, lr}
 800b26a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b26c:	f7ff ff90 	bl	800b190 <HAL_RCC_GetSysClockFreq>
 800b270:	4604      	mov	r4, r0
 800b272:	f7ff f9e9 	bl	800a648 <LL_RCC_GetAHBPrescaler>
 800b276:	4603      	mov	r3, r0
 800b278:	091b      	lsrs	r3, r3, #4
 800b27a:	f003 030f 	and.w	r3, r3, #15
 800b27e:	4a03      	ldr	r2, [pc, #12]	@ (800b28c <HAL_RCC_GetHCLKFreq+0x24>)
 800b280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b284:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b288:	4618      	mov	r0, r3
 800b28a:	bd98      	pop	{r3, r4, r7, pc}
 800b28c:	08013ef0 	.word	0x08013ef0

0800b290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b290:	b598      	push	{r3, r4, r7, lr}
 800b292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b294:	f7ff ffe8 	bl	800b268 <HAL_RCC_GetHCLKFreq>
 800b298:	4604      	mov	r4, r0
 800b29a:	f7ff f9ef 	bl	800a67c <LL_RCC_GetAPB1Prescaler>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	0a1b      	lsrs	r3, r3, #8
 800b2a2:	f003 0307 	and.w	r3, r3, #7
 800b2a6:	4a04      	ldr	r2, [pc, #16]	@ (800b2b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ac:	f003 031f 	and.w	r3, r3, #31
 800b2b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	bd98      	pop	{r3, r4, r7, pc}
 800b2b8:	08013f30 	.word	0x08013f30

0800b2bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2bc:	b598      	push	{r3, r4, r7, lr}
 800b2be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b2c0:	f7ff ffd2 	bl	800b268 <HAL_RCC_GetHCLKFreq>
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	f7ff f9e5 	bl	800a694 <LL_RCC_GetAPB2Prescaler>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	0adb      	lsrs	r3, r3, #11
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	4a04      	ldr	r2, [pc, #16]	@ (800b2e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2d8:	f003 031f 	and.w	r3, r3, #31
 800b2dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	bd98      	pop	{r3, r4, r7, pc}
 800b2e4:	08013f30 	.word	0x08013f30

0800b2e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b2e8:	b590      	push	{r4, r7, lr}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2bb0      	cmp	r3, #176	@ 0xb0
 800b2f4:	d903      	bls.n	800b2fe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b2f6:	4b15      	ldr	r3, [pc, #84]	@ (800b34c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	e007      	b.n	800b30e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	091b      	lsrs	r3, r3, #4
 800b302:	f003 030f 	and.w	r3, r3, #15
 800b306:	4a11      	ldr	r2, [pc, #68]	@ (800b34c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b30c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b30e:	f7ff f9a7 	bl	800a660 <LL_RCC_GetAHB4Prescaler>
 800b312:	4603      	mov	r3, r0
 800b314:	091b      	lsrs	r3, r3, #4
 800b316:	f003 030f 	and.w	r3, r3, #15
 800b31a:	4a0d      	ldr	r2, [pc, #52]	@ (800b350 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	fbb2 f3f3 	udiv	r3, r2, r3
 800b326:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	4a0a      	ldr	r2, [pc, #40]	@ (800b354 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b32c:	fba2 2303 	umull	r2, r3, r2, r3
 800b330:	0c9c      	lsrs	r4, r3, #18
 800b332:	f7fe fef5 	bl	800a120 <HAL_PWREx_GetVoltageRange>
 800b336:	4603      	mov	r3, r0
 800b338:	4619      	mov	r1, r3
 800b33a:	4620      	mov	r0, r4
 800b33c:	f000 f80c 	bl	800b358 <RCC_SetFlashLatency>
 800b340:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	bd90      	pop	{r4, r7, pc}
 800b34a:	bf00      	nop
 800b34c:	08013f50 	.word	0x08013f50
 800b350:	08013ef0 	.word	0x08013ef0
 800b354:	431bde83 	.word	0x431bde83

0800b358 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b358:	b590      	push	{r4, r7, lr}
 800b35a:	b093      	sub	sp, #76	@ 0x4c
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b362:	4b37      	ldr	r3, [pc, #220]	@ (800b440 <RCC_SetFlashLatency+0xe8>)
 800b364:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b368:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b36a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b36e:	4a35      	ldr	r2, [pc, #212]	@ (800b444 <RCC_SetFlashLatency+0xec>)
 800b370:	f107 031c 	add.w	r3, r7, #28
 800b374:	ca07      	ldmia	r2, {r0, r1, r2}
 800b376:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b37a:	4b33      	ldr	r3, [pc, #204]	@ (800b448 <RCC_SetFlashLatency+0xf0>)
 800b37c:	f107 040c 	add.w	r4, r7, #12
 800b380:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b382:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b386:	2300      	movs	r3, #0
 800b388:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b390:	d11a      	bne.n	800b3c8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b392:	2300      	movs	r3, #0
 800b394:	643b      	str	r3, [r7, #64]	@ 0x40
 800b396:	e013      	b.n	800b3c0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	3348      	adds	r3, #72	@ 0x48
 800b39e:	443b      	add	r3, r7
 800b3a0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d807      	bhi.n	800b3ba <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b3aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	3348      	adds	r3, #72	@ 0x48
 800b3b0:	443b      	add	r3, r7
 800b3b2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b3b6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b3b8:	e020      	b.n	800b3fc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b3ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3bc:	3301      	adds	r3, #1
 800b3be:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d9e8      	bls.n	800b398 <RCC_SetFlashLatency+0x40>
 800b3c6:	e019      	b.n	800b3fc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3cc:	e013      	b.n	800b3f6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	3348      	adds	r3, #72	@ 0x48
 800b3d4:	443b      	add	r3, r7
 800b3d6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d807      	bhi.n	800b3f0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	3348      	adds	r3, #72	@ 0x48
 800b3e6:	443b      	add	r3, r7
 800b3e8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b3ec:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b3ee:	e005      	b.n	800b3fc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b3f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d9e8      	bls.n	800b3ce <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b3fc:	4b13      	ldr	r3, [pc, #76]	@ (800b44c <RCC_SetFlashLatency+0xf4>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f023 0207 	bic.w	r2, r3, #7
 800b404:	4911      	ldr	r1, [pc, #68]	@ (800b44c <RCC_SetFlashLatency+0xf4>)
 800b406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b408:	4313      	orrs	r3, r2
 800b40a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b40c:	f7fc ffbe 	bl	800838c <HAL_GetTick>
 800b410:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b412:	e008      	b.n	800b426 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b414:	f7fc ffba 	bl	800838c <HAL_GetTick>
 800b418:	4602      	mov	r2, r0
 800b41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d901      	bls.n	800b426 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	e007      	b.n	800b436 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b426:	4b09      	ldr	r3, [pc, #36]	@ (800b44c <RCC_SetFlashLatency+0xf4>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 0307 	and.w	r3, r3, #7
 800b42e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b430:	429a      	cmp	r2, r3
 800b432:	d1ef      	bne.n	800b414 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	374c      	adds	r7, #76	@ 0x4c
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd90      	pop	{r4, r7, pc}
 800b43e:	bf00      	nop
 800b440:	08012e9c 	.word	0x08012e9c
 800b444:	08012eac 	.word	0x08012eac
 800b448:	08012eb8 	.word	0x08012eb8
 800b44c:	58004000 	.word	0x58004000

0800b450 <LL_RCC_LSE_IsEnabled>:
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b45c:	f003 0301 	and.w	r3, r3, #1
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <LL_RCC_LSE_IsEnabled+0x18>
 800b464:	2301      	movs	r3, #1
 800b466:	e000      	b.n	800b46a <LL_RCC_LSE_IsEnabled+0x1a>
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <LL_RCC_LSE_IsReady>:
{
 800b474:	b480      	push	{r7}
 800b476:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b02      	cmp	r3, #2
 800b486:	d101      	bne.n	800b48c <LL_RCC_LSE_IsReady+0x18>
 800b488:	2301      	movs	r3, #1
 800b48a:	e000      	b.n	800b48e <LL_RCC_LSE_IsReady+0x1a>
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <LL_RCC_MSI_EnablePLLMode>:
{
 800b498:	b480      	push	{r7}
 800b49a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800b49c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b4a6:	f043 0304 	orr.w	r3, r3, #4
 800b4aa:	6013      	str	r3, [r2, #0]
}
 800b4ac:	bf00      	nop
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <LL_RCC_SetRFWKPClockSource>:
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b4be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b4ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b4d6:	bf00      	nop
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <LL_RCC_SetSMPSClockSource>:
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b083      	sub	sp, #12
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b4ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f0:	f023 0203 	bic.w	r2, r3, #3
 800b4f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b4fe:	bf00      	nop
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <LL_RCC_SetSMPSPrescaler>:
{
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b518:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b51c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4313      	orrs	r3, r2
 800b524:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <LL_RCC_SetUSARTClockSource>:
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b53a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b542:	f023 0203 	bic.w	r2, r3, #3
 800b546:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b552:	bf00      	nop
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <LL_RCC_SetLPUARTClockSource>:
{
 800b55e:	b480      	push	{r7}
 800b560:	b083      	sub	sp, #12
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b56e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4313      	orrs	r3, r2
 800b57a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b57e:	bf00      	nop
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <LL_RCC_SetI2CClockSource>:
{
 800b58a:	b480      	push	{r7}
 800b58c:	b083      	sub	sp, #12
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b596:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	091b      	lsrs	r3, r3, #4
 800b59e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b5a2:	43db      	mvns	r3, r3
 800b5a4:	401a      	ands	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	011b      	lsls	r3, r3, #4
 800b5aa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b5ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <LL_RCC_SetLPTIMClockSource>:
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b5cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	0c1b      	lsrs	r3, r3, #16
 800b5d8:	041b      	lsls	r3, r3, #16
 800b5da:	43db      	mvns	r3, r3
 800b5dc:	401a      	ands	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	041b      	lsls	r3, r3, #16
 800b5e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <LL_RCC_SetSAIClockSource>:
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b608:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b60c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4313      	orrs	r3, r2
 800b614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <LL_RCC_SetRNGClockSource>:
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b62c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b634:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4313      	orrs	r3, r2
 800b640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <LL_RCC_SetCLK48ClockSource>:
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b660:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b664:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <LL_RCC_SetUSBClockSource>:
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff ffe3 	bl	800b650 <LL_RCC_SetCLK48ClockSource>
}
 800b68a:	bf00      	nop
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <LL_RCC_SetADCClockSource>:
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b69a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b6a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b6b2:	bf00      	nop
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <LL_RCC_SetRTCClockSource>:
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b6c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b6d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800b6de:	bf00      	nop
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <LL_RCC_GetRTCClockSource>:
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b6ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <LL_RCC_ForceBackupDomainReset>:
{
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b70c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b710:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b71c:	bf00      	nop
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b726:	b480      	push	{r7}
 800b728:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b72a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b73a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b73e:	bf00      	nop
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <LL_RCC_PLLSAI1_Enable>:
{
 800b748:	b480      	push	{r7}
 800b74a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b74c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b75a:	6013      	str	r3, [r2, #0]
}
 800b75c:	bf00      	nop
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <LL_RCC_PLLSAI1_Disable>:
{
 800b766:	b480      	push	{r7}
 800b768:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b76a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b774:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b778:	6013      	str	r3, [r2, #0]
}
 800b77a:	bf00      	nop
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <LL_RCC_PLLSAI1_IsReady>:
{
 800b784:	b480      	push	{r7}
 800b786:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b796:	d101      	bne.n	800b79c <LL_RCC_PLLSAI1_IsReady+0x18>
 800b798:	2301      	movs	r3, #1
 800b79a:	e000      	b.n	800b79e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d034      	beq.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b7cc:	d021      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b7ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b7d2:	d81b      	bhi.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7d8:	d01d      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800b7da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7de:	d815      	bhi.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x54>
 800b7e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7e8:	d110      	bne.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b7ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7f8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b7fa:	e00d      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	3304      	adds	r3, #4
 800b800:	4618      	mov	r0, r3
 800b802:	f000 f94d 	bl	800baa0 <RCCEx_PLLSAI1_ConfigNP>
 800b806:	4603      	mov	r3, r0
 800b808:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b80a:	e005      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	77fb      	strb	r3, [r7, #31]
        break;
 800b810:	e002      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b812:	bf00      	nop
 800b814:	e000      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b816:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b818:	7ffb      	ldrb	r3, [r7, #31]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d105      	bne.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff fee8 	bl	800b5f8 <LL_RCC_SetSAIClockSource>
 800b828:	e001      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b82a:	7ffb      	ldrb	r3, [r7, #31]
 800b82c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b836:	2b00      	cmp	r3, #0
 800b838:	d046      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b83a:	f7ff ff56 	bl	800b6ea <LL_RCC_GetRTCClockSource>
 800b83e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b844:	69ba      	ldr	r2, [r7, #24]
 800b846:	429a      	cmp	r2, r3
 800b848:	d03c      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b84a:	f7fe fc59 	bl	800a100 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d105      	bne.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b858:	4618      	mov	r0, r3
 800b85a:	f7ff ff30 	bl	800b6be <LL_RCC_SetRTCClockSource>
 800b85e:	e02e      	b.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b868:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b86a:	f7ff ff4b 	bl	800b704 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b86e:	f7ff ff5a 	bl	800b726 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b87c:	4313      	orrs	r3, r2
 800b87e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b88a:	f7ff fde1 	bl	800b450 <LL_RCC_LSE_IsEnabled>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b01      	cmp	r3, #1
 800b892:	d114      	bne.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b894:	f7fc fd7a 	bl	800838c <HAL_GetTick>
 800b898:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b89a:	e00b      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b89c:	f7fc fd76 	bl	800838c <HAL_GetTick>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d902      	bls.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	77fb      	strb	r3, [r7, #31]
              break;
 800b8b2:	e004      	b.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b8b4:	f7ff fdde 	bl	800b474 <LL_RCC_LSE_IsReady>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d1ee      	bne.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b8be:	7ffb      	ldrb	r3, [r7, #31]
 800b8c0:	77bb      	strb	r3, [r7, #30]
 800b8c2:	e001      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c4:	7ffb      	ldrb	r3, [r7, #31]
 800b8c6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0301 	and.w	r3, r3, #1
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d004      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	699b      	ldr	r3, [r3, #24]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff fe2a 	bl	800b532 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f003 0302 	and.w	r3, r3, #2
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d004      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	69db      	ldr	r3, [r3, #28]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7ff fe35 	bl	800b55e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0310 	and.w	r3, r3, #16
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b904:	4618      	mov	r0, r3
 800b906:	f7ff fe5d 	bl	800b5c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 0320 	and.w	r3, r3, #32
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff fe52 	bl	800b5c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0304 	and.w	r3, r3, #4
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d004      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6a1b      	ldr	r3, [r3, #32]
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff fe2a 	bl	800b58a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 0308 	and.w	r3, r3, #8
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d004      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff fe1f 	bl	800b58a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b954:	2b00      	cmp	r3, #0
 800b956:	d022      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fe8d 	bl	800b67c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b96a:	d107      	bne.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b96c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b97a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b980:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b984:	d10b      	bne.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3304      	adds	r3, #4
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 f8e3 	bl	800bb56 <RCCEx_PLLSAI1_ConfigNQ>
 800b990:	4603      	mov	r3, r0
 800b992:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b994:	7ffb      	ldrb	r3, [r7, #31]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800b99a:	7ffb      	ldrb	r3, [r7, #31]
 800b99c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d02b      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b2:	d008      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9bc:	d003      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d105      	bne.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7ff fe2a 	bl	800b624 <LL_RCC_SetRNGClockSource>
 800b9d0:	e00a      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	2000      	movs	r0, #0
 800b9de:	f7ff fe21 	bl	800b624 <LL_RCC_SetRNGClockSource>
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f7ff fe34 	bl	800b650 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ec:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800b9f0:	d107      	bne.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b9f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba00:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d022      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff fe3d 	bl	800b692 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba20:	d107      	bne.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ba22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba30:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba3a:	d10b      	bne.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	3304      	adds	r3, #4
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 f8e3 	bl	800bc0c <RCCEx_PLLSAI1_ConfigNR>
 800ba46:	4603      	mov	r3, r0
 800ba48:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ba4a:	7ffb      	ldrb	r3, [r7, #31]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800ba50:	7ffb      	ldrb	r3, [r7, #31]
 800ba52:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d004      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fd26 	bl	800b4b6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d009      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff fd45 	bl	800b50a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7ff fd2c 	bl	800b4e2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ba8a:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3720      	adds	r7, #32
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800ba98:	f7ff fcfe 	bl	800b498 <LL_RCC_MSI_EnablePLLMode>
}
 800ba9c:	bf00      	nop
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800baa8:	2300      	movs	r3, #0
 800baaa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800baac:	f7ff fe5b 	bl	800b766 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bab0:	f7fc fc6c 	bl	800838c <HAL_GetTick>
 800bab4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bab6:	e009      	b.n	800bacc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bab8:	f7fc fc68 	bl	800838c <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d902      	bls.n	800bacc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	73fb      	strb	r3, [r7, #15]
      break;
 800baca:	e004      	b.n	800bad6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bacc:	f7ff fe5a 	bl	800b784 <LL_RCC_PLLSAI1_IsReady>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1f0      	bne.n	800bab8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d137      	bne.n	800bb4c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800badc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	021b      	lsls	r3, r3, #8
 800baec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800baf0:	4313      	orrs	r3, r2
 800baf2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800baf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb06:	4313      	orrs	r3, r2
 800bb08:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bb0a:	f7ff fe1d 	bl	800b748 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb0e:	f7fc fc3d 	bl	800838c <HAL_GetTick>
 800bb12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb14:	e009      	b.n	800bb2a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb16:	f7fc fc39 	bl	800838c <HAL_GetTick>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d902      	bls.n	800bb2a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800bb24:	2303      	movs	r3, #3
 800bb26:	73fb      	strb	r3, [r7, #15]
        break;
 800bb28:	e004      	b.n	800bb34 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb2a:	f7ff fe2b 	bl	800b784 <LL_RCC_PLLSAI1_IsReady>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d1f0      	bne.n	800bb16 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d108      	bne.n	800bb4c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bb3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb3e:	691a      	ldr	r2, [r3, #16]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bb62:	f7ff fe00 	bl	800b766 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb66:	f7fc fc11 	bl	800838c <HAL_GetTick>
 800bb6a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb6c:	e009      	b.n	800bb82 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb6e:	f7fc fc0d 	bl	800838c <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d902      	bls.n	800bb82 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb80:	e004      	b.n	800bb8c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb82:	f7ff fdff 	bl	800b784 <LL_RCC_PLLSAI1_IsReady>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1f0      	bne.n	800bb6e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d137      	bne.n	800bc02 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bb92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	021b      	lsls	r3, r3, #8
 800bba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bba6:	4313      	orrs	r3, r2
 800bba8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bbaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bbc0:	f7ff fdc2 	bl	800b748 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbc4:	f7fc fbe2 	bl	800838c <HAL_GetTick>
 800bbc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbca:	e009      	b.n	800bbe0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbcc:	f7fc fbde 	bl	800838c <HAL_GetTick>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d902      	bls.n	800bbe0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	73fb      	strb	r3, [r7, #15]
        break;
 800bbde:	e004      	b.n	800bbea <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbe0:	f7ff fdd0 	bl	800b784 <LL_RCC_PLLSAI1_IsReady>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d1f0      	bne.n	800bbcc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d108      	bne.n	800bc02 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bbf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbf4:	691a      	ldr	r2, [r3, #16]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bc18:	f7ff fda5 	bl	800b766 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc1c:	f7fc fbb6 	bl	800838c <HAL_GetTick>
 800bc20:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bc22:	e009      	b.n	800bc38 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc24:	f7fc fbb2 	bl	800838c <HAL_GetTick>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	2b02      	cmp	r3, #2
 800bc30:	d902      	bls.n	800bc38 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800bc32:	2303      	movs	r3, #3
 800bc34:	73fb      	strb	r3, [r7, #15]
      break;
 800bc36:	e004      	b.n	800bc42 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bc38:	f7ff fda4 	bl	800b784 <LL_RCC_PLLSAI1_IsReady>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1f0      	bne.n	800bc24 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d137      	bne.n	800bcb8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bc48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800bc60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc72:	4313      	orrs	r3, r2
 800bc74:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bc76:	f7ff fd67 	bl	800b748 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc7a:	f7fc fb87 	bl	800838c <HAL_GetTick>
 800bc7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc80:	e009      	b.n	800bc96 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc82:	f7fc fb83 	bl	800838c <HAL_GetTick>
 800bc86:	4602      	mov	r2, r0
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d902      	bls.n	800bc96 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800bc90:	2303      	movs	r3, #3
 800bc92:	73fb      	strb	r3, [r7, #15]
        break;
 800bc94:	e004      	b.n	800bca0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc96:	f7ff fd75 	bl	800b784 <LL_RCC_PLLSAI1_IsReady>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d1f0      	bne.n	800bc82 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d108      	bne.n	800bcb8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcaa:	691a      	ldr	r2, [r3, #16]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
	...

0800bcc4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e09f      	b.n	800be16 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7f7 f884 	bl	8002df8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bcf8:	4b49      	ldr	r3, [pc, #292]	@ (800be20 <HAL_RTC_Init+0x15c>)
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	f003 0310 	and.w	r3, r3, #16
 800bd00:	2b10      	cmp	r3, #16
 800bd02:	d07e      	beq.n	800be02 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	22ca      	movs	r2, #202	@ 0xca
 800bd0a:	625a      	str	r2, [r3, #36]	@ 0x24
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2253      	movs	r2, #83	@ 0x53
 800bd12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f8ab 	bl	800be70 <RTC_EnterInitMode>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00a      	beq.n	800bd36 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	22ff      	movs	r2, #255	@ 0xff
 800bd26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2204      	movs	r2, #4
 800bd2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	73fb      	strb	r3, [r7, #15]
 800bd34:	e067      	b.n	800be06 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	6812      	ldr	r2, [r2, #0]
 800bd40:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bd44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd48:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6899      	ldr	r1, [r3, #8]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	431a      	orrs	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	431a      	orrs	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	430a      	orrs	r2, r1
 800bd66:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	68d2      	ldr	r2, [r2, #12]
 800bd70:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	6919      	ldr	r1, [r3, #16]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	041a      	lsls	r2, r3, #16
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	430a      	orrs	r2, r1
 800bd84:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68da      	ldr	r2, [r3, #12]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd94:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f022 0203 	bic.w	r2, r2, #3
 800bda4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	69da      	ldr	r2, [r3, #28]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	f003 0320 	and.w	r3, r3, #32
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d113      	bne.n	800bdf4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f829 	bl	800be24 <HAL_RTC_WaitForSynchro>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00d      	beq.n	800bdf4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	22ff      	movs	r2, #255	@ 0xff
 800bdde:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2204      	movs	r2, #4
 800bde4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e010      	b.n	800be16 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	22ff      	movs	r2, #255	@ 0xff
 800bdfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73fb      	strb	r3, [r7, #15]
 800be00:	e001      	b.n	800be06 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d103      	bne.n	800be14 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800be14:	7bfb      	ldrb	r3, [r7, #15]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	40002800 	.word	0x40002800

0800be24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68da      	ldr	r2, [r3, #12]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800be3a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800be3c:	f7fc faa6 	bl	800838c <HAL_GetTick>
 800be40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800be42:	e009      	b.n	800be58 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800be44:	f7fc faa2 	bl	800838c <HAL_GetTick>
 800be48:	4602      	mov	r2, r0
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	1ad3      	subs	r3, r2, r3
 800be4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be52:	d901      	bls.n	800be58 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800be54:	2303      	movs	r3, #3
 800be56:	e007      	b.n	800be68 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	f003 0320 	and.w	r3, r3, #32
 800be62:	2b00      	cmp	r3, #0
 800be64:	d0ee      	beq.n	800be44 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be82:	2b00      	cmp	r3, #0
 800be84:	d119      	bne.n	800beba <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f04f 32ff 	mov.w	r2, #4294967295
 800be8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800be90:	f7fc fa7c 	bl	800838c <HAL_GetTick>
 800be94:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800be96:	e009      	b.n	800beac <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800be98:	f7fc fa78 	bl	800838c <HAL_GetTick>
 800be9c:	4602      	mov	r2, r0
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bea6:	d901      	bls.n	800beac <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800bea8:	2303      	movs	r3, #3
 800beaa:	e007      	b.n	800bebc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0ee      	beq.n	800be98 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d101      	bne.n	800bede <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800beda:	2302      	movs	r3, #2
 800bedc:	e0a8      	b.n	800c030 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2202      	movs	r2, #2
 800beea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	22ca      	movs	r2, #202	@ 0xca
 800bef4:	625a      	str	r2, [r3, #36]	@ 0x24
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2253      	movs	r2, #83	@ 0x53
 800befc:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d020      	beq.n	800bf4e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800bf0c:	f7fc fa3e 	bl	800838c <HAL_GetTick>
 800bf10:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800bf12:	e015      	b.n	800bf40 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf14:	f7fc fa3a 	bl	800838c <HAL_GetTick>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf22:	d90d      	bls.n	800bf40 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	22ff      	movs	r2, #255	@ 0xff
 800bf2a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2203      	movs	r2, #3
 800bf30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e077      	b.n	800c030 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f003 0304 	and.w	r3, r3, #4
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d1e2      	bne.n	800bf14 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689a      	ldr	r2, [r3, #8]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf5c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800bf6e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800bf70:	f7fc fa0c 	bl	800838c <HAL_GetTick>
 800bf74:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800bf76:	e015      	b.n	800bfa4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf78:	f7fc fa08 	bl	800838c <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf86:	d90d      	bls.n	800bfa4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	22ff      	movs	r2, #255	@ 0xff
 800bf8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2203      	movs	r2, #3
 800bf94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e045      	b.n	800c030 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	f003 0304 	and.w	r3, r3, #4
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0e2      	beq.n	800bf78 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f022 0207 	bic.w	r2, r2, #7
 800bfc8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6899      	ldr	r1, [r3, #8]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	430a      	orrs	r2, r1
 800bfd8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800bfda:	4b17      	ldr	r3, [pc, #92]	@ (800c038 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bfdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfe0:	4a15      	ldr	r2, [pc, #84]	@ (800c038 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bfe2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bfe6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800bfea:	4b13      	ldr	r3, [pc, #76]	@ (800c038 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a12      	ldr	r2, [pc, #72]	@ (800c038 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bff0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bff4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	689a      	ldr	r2, [r3, #8]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c004:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c014:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	22ff      	movs	r2, #255	@ 0xff
 800c01c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	58000800 	.word	0x58000800

0800c03c <LL_RCC_GetUSARTClockSource>:
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800c044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c048:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4013      	ands	r3, r2
}
 800c050:	4618      	mov	r0, r3
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <LL_RCC_GetLPUARTClockSource>:
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c068:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4013      	ands	r3, r2
}
 800c070:	4618      	mov	r0, r3
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e042      	b.n	800c114 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c094:	2b00      	cmp	r3, #0
 800c096:	d106      	bne.n	800c0a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f7f6 fedf 	bl	8002e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2224      	movs	r2, #36	@ 0x24
 800c0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f022 0201 	bic.w	r2, r2, #1
 800c0bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d002      	beq.n	800c0cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fae4 	bl	800c694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f8b9 	bl	800c244 <UART_SetConfig>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d101      	bne.n	800c0dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e01b      	b.n	800c114 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	685a      	ldr	r2, [r3, #4]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c0ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	689a      	ldr	r2, [r3, #8]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c0fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f042 0201 	orr.w	r2, r2, #1
 800c10a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fb63 	bl	800c7d8 <UART_CheckIdleState>
 800c112:	4603      	mov	r3, r0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b08a      	sub	sp, #40	@ 0x28
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	4613      	mov	r3, r2
 800c128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c130:	2b20      	cmp	r3, #32
 800c132:	d167      	bne.n	800c204 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d002      	beq.n	800c140 <HAL_UART_Transmit_DMA+0x24>
 800c13a:	88fb      	ldrh	r3, [r7, #6]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d101      	bne.n	800c144 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	e060      	b.n	800c206 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	88fa      	ldrh	r2, [r7, #6]
 800c14e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	88fa      	ldrh	r2, [r7, #6]
 800c156:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2221      	movs	r2, #33	@ 0x21
 800c166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d028      	beq.n	800c1c4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c176:	4a26      	ldr	r2, [pc, #152]	@ (800c210 <HAL_UART_Transmit_DMA+0xf4>)
 800c178:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c17e:	4a25      	ldr	r2, [pc, #148]	@ (800c214 <HAL_UART_Transmit_DMA+0xf8>)
 800c180:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c186:	4a24      	ldr	r2, [pc, #144]	@ (800c218 <HAL_UART_Transmit_DMA+0xfc>)
 800c188:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c18e:	2200      	movs	r2, #0
 800c190:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c19a:	4619      	mov	r1, r3
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	3328      	adds	r3, #40	@ 0x28
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	88fb      	ldrh	r3, [r7, #6]
 800c1a6:	f7fc fb57 	bl	8008858 <HAL_DMA_Start_IT>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d009      	beq.n	800c1c4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2210      	movs	r2, #16
 800c1b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2220      	movs	r2, #32
 800c1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e020      	b.n	800c206 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2240      	movs	r2, #64	@ 0x40
 800c1ca:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	e853 3f00 	ldrex	r3, [r3]
 800c1da:	613b      	str	r3, [r7, #16]
   return(result);
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1ec:	623a      	str	r2, [r7, #32]
 800c1ee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f0:	69f9      	ldr	r1, [r7, #28]
 800c1f2:	6a3a      	ldr	r2, [r7, #32]
 800c1f4:	e841 2300 	strex	r3, r2, [r1]
 800c1f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1e5      	bne.n	800c1cc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c200:	2300      	movs	r3, #0
 800c202:	e000      	b.n	800c206 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c204:	2302      	movs	r3, #2
  }
}
 800c206:	4618      	mov	r0, r3
 800c208:	3728      	adds	r7, #40	@ 0x28
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	0800cb55 	.word	0x0800cb55
 800c214:	0800cbef 	.word	0x0800cbef
 800c218:	0800cc0b 	.word	0x0800cc0b

0800c21c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c248:	b08c      	sub	sp, #48	@ 0x30
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c24e:	2300      	movs	r3, #0
 800c250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	689a      	ldr	r2, [r3, #8]
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	431a      	orrs	r2, r3
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	695b      	ldr	r3, [r3, #20]
 800c262:	431a      	orrs	r2, r3
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	69db      	ldr	r3, [r3, #28]
 800c268:	4313      	orrs	r3, r2
 800c26a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	4baf      	ldr	r3, [pc, #700]	@ (800c530 <UART_SetConfig+0x2ec>)
 800c274:	4013      	ands	r3, r2
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	6812      	ldr	r2, [r2, #0]
 800c27a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c27c:	430b      	orrs	r3, r1
 800c27e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	68da      	ldr	r2, [r3, #12]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	430a      	orrs	r2, r1
 800c294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4aa4      	ldr	r2, [pc, #656]	@ (800c534 <UART_SetConfig+0x2f0>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d004      	beq.n	800c2b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c2ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	6812      	ldr	r2, [r2, #0]
 800c2c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2c4:	430b      	orrs	r3, r1
 800c2c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ce:	f023 010f 	bic.w	r1, r3, #15
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	430a      	orrs	r2, r1
 800c2dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a95      	ldr	r2, [pc, #596]	@ (800c538 <UART_SetConfig+0x2f4>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d125      	bne.n	800c334 <UART_SetConfig+0xf0>
 800c2e8:	2003      	movs	r0, #3
 800c2ea:	f7ff fea7 	bl	800c03c <LL_RCC_GetUSARTClockSource>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b03      	cmp	r3, #3
 800c2f2:	d81b      	bhi.n	800c32c <UART_SetConfig+0xe8>
 800c2f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2fc <UART_SetConfig+0xb8>)
 800c2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fa:	bf00      	nop
 800c2fc:	0800c30d 	.word	0x0800c30d
 800c300:	0800c31d 	.word	0x0800c31d
 800c304:	0800c315 	.word	0x0800c315
 800c308:	0800c325 	.word	0x0800c325
 800c30c:	2301      	movs	r3, #1
 800c30e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c312:	e042      	b.n	800c39a <UART_SetConfig+0x156>
 800c314:	2302      	movs	r3, #2
 800c316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c31a:	e03e      	b.n	800c39a <UART_SetConfig+0x156>
 800c31c:	2304      	movs	r3, #4
 800c31e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c322:	e03a      	b.n	800c39a <UART_SetConfig+0x156>
 800c324:	2308      	movs	r3, #8
 800c326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c32a:	e036      	b.n	800c39a <UART_SetConfig+0x156>
 800c32c:	2310      	movs	r3, #16
 800c32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c332:	e032      	b.n	800c39a <UART_SetConfig+0x156>
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a7e      	ldr	r2, [pc, #504]	@ (800c534 <UART_SetConfig+0x2f0>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d12a      	bne.n	800c394 <UART_SetConfig+0x150>
 800c33e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800c342:	f7ff fe8b 	bl	800c05c <LL_RCC_GetLPUARTClockSource>
 800c346:	4603      	mov	r3, r0
 800c348:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c34c:	d01a      	beq.n	800c384 <UART_SetConfig+0x140>
 800c34e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c352:	d81b      	bhi.n	800c38c <UART_SetConfig+0x148>
 800c354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c358:	d00c      	beq.n	800c374 <UART_SetConfig+0x130>
 800c35a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c35e:	d815      	bhi.n	800c38c <UART_SetConfig+0x148>
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <UART_SetConfig+0x128>
 800c364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c368:	d008      	beq.n	800c37c <UART_SetConfig+0x138>
 800c36a:	e00f      	b.n	800c38c <UART_SetConfig+0x148>
 800c36c:	2300      	movs	r3, #0
 800c36e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c372:	e012      	b.n	800c39a <UART_SetConfig+0x156>
 800c374:	2302      	movs	r3, #2
 800c376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c37a:	e00e      	b.n	800c39a <UART_SetConfig+0x156>
 800c37c:	2304      	movs	r3, #4
 800c37e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c382:	e00a      	b.n	800c39a <UART_SetConfig+0x156>
 800c384:	2308      	movs	r3, #8
 800c386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c38a:	e006      	b.n	800c39a <UART_SetConfig+0x156>
 800c38c:	2310      	movs	r3, #16
 800c38e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c392:	e002      	b.n	800c39a <UART_SetConfig+0x156>
 800c394:	2310      	movs	r3, #16
 800c396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a65      	ldr	r2, [pc, #404]	@ (800c534 <UART_SetConfig+0x2f0>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	f040 8097 	bne.w	800c4d4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c3aa:	2b08      	cmp	r3, #8
 800c3ac:	d823      	bhi.n	800c3f6 <UART_SetConfig+0x1b2>
 800c3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c3b4 <UART_SetConfig+0x170>)
 800c3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b4:	0800c3d9 	.word	0x0800c3d9
 800c3b8:	0800c3f7 	.word	0x0800c3f7
 800c3bc:	0800c3e1 	.word	0x0800c3e1
 800c3c0:	0800c3f7 	.word	0x0800c3f7
 800c3c4:	0800c3e7 	.word	0x0800c3e7
 800c3c8:	0800c3f7 	.word	0x0800c3f7
 800c3cc:	0800c3f7 	.word	0x0800c3f7
 800c3d0:	0800c3f7 	.word	0x0800c3f7
 800c3d4:	0800c3ef 	.word	0x0800c3ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3d8:	f7fe ff5a 	bl	800b290 <HAL_RCC_GetPCLK1Freq>
 800c3dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c3de:	e010      	b.n	800c402 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c3e0:	4b56      	ldr	r3, [pc, #344]	@ (800c53c <UART_SetConfig+0x2f8>)
 800c3e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c3e4:	e00d      	b.n	800c402 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3e6:	f7fe fed3 	bl	800b190 <HAL_RCC_GetSysClockFreq>
 800c3ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c3ec:	e009      	b.n	800c402 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c3f4:	e005      	b.n	800c402 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c400:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 812b 	beq.w	800c660 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40e:	4a4c      	ldr	r2, [pc, #304]	@ (800c540 <UART_SetConfig+0x2fc>)
 800c410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c414:	461a      	mov	r2, r3
 800c416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c418:	fbb3 f3f2 	udiv	r3, r3, r2
 800c41c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	4613      	mov	r3, r2
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	4413      	add	r3, r2
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d305      	bcc.n	800c43a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	429a      	cmp	r2, r3
 800c438:	d903      	bls.n	800c442 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c440:	e10e      	b.n	800c660 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	2200      	movs	r2, #0
 800c446:	60bb      	str	r3, [r7, #8]
 800c448:	60fa      	str	r2, [r7, #12]
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c44e:	4a3c      	ldr	r2, [pc, #240]	@ (800c540 <UART_SetConfig+0x2fc>)
 800c450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c454:	b29b      	uxth	r3, r3
 800c456:	2200      	movs	r2, #0
 800c458:	603b      	str	r3, [r7, #0]
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c460:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c464:	f7f4 fa7a 	bl	800095c <__aeabi_uldivmod>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4610      	mov	r0, r2
 800c46e:	4619      	mov	r1, r3
 800c470:	f04f 0200 	mov.w	r2, #0
 800c474:	f04f 0300 	mov.w	r3, #0
 800c478:	020b      	lsls	r3, r1, #8
 800c47a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c47e:	0202      	lsls	r2, r0, #8
 800c480:	6979      	ldr	r1, [r7, #20]
 800c482:	6849      	ldr	r1, [r1, #4]
 800c484:	0849      	lsrs	r1, r1, #1
 800c486:	2000      	movs	r0, #0
 800c488:	460c      	mov	r4, r1
 800c48a:	4605      	mov	r5, r0
 800c48c:	eb12 0804 	adds.w	r8, r2, r4
 800c490:	eb43 0905 	adc.w	r9, r3, r5
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	469a      	mov	sl, r3
 800c49c:	4693      	mov	fp, r2
 800c49e:	4652      	mov	r2, sl
 800c4a0:	465b      	mov	r3, fp
 800c4a2:	4640      	mov	r0, r8
 800c4a4:	4649      	mov	r1, r9
 800c4a6:	f7f4 fa59 	bl	800095c <__aeabi_uldivmod>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4b8:	d308      	bcc.n	800c4cc <UART_SetConfig+0x288>
 800c4ba:	6a3b      	ldr	r3, [r7, #32]
 800c4bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4c0:	d204      	bcs.n	800c4cc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	6a3a      	ldr	r2, [r7, #32]
 800c4c8:	60da      	str	r2, [r3, #12]
 800c4ca:	e0c9      	b.n	800c660 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c4d2:	e0c5      	b.n	800c660 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4dc:	d16d      	bne.n	800c5ba <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800c4de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	2b07      	cmp	r3, #7
 800c4e6:	d82d      	bhi.n	800c544 <UART_SetConfig+0x300>
 800c4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4f0 <UART_SetConfig+0x2ac>)
 800c4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ee:	bf00      	nop
 800c4f0:	0800c511 	.word	0x0800c511
 800c4f4:	0800c519 	.word	0x0800c519
 800c4f8:	0800c545 	.word	0x0800c545
 800c4fc:	0800c51f 	.word	0x0800c51f
 800c500:	0800c545 	.word	0x0800c545
 800c504:	0800c545 	.word	0x0800c545
 800c508:	0800c545 	.word	0x0800c545
 800c50c:	0800c527 	.word	0x0800c527
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c510:	f7fe fed4 	bl	800b2bc <HAL_RCC_GetPCLK2Freq>
 800c514:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c516:	e01b      	b.n	800c550 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c518:	4b08      	ldr	r3, [pc, #32]	@ (800c53c <UART_SetConfig+0x2f8>)
 800c51a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c51c:	e018      	b.n	800c550 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c51e:	f7fe fe37 	bl	800b190 <HAL_RCC_GetSysClockFreq>
 800c522:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c524:	e014      	b.n	800c550 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c52a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c52c:	e010      	b.n	800c550 <UART_SetConfig+0x30c>
 800c52e:	bf00      	nop
 800c530:	cfff69f3 	.word	0xcfff69f3
 800c534:	40008000 	.word	0x40008000
 800c538:	40013800 	.word	0x40013800
 800c53c:	00f42400 	.word	0x00f42400
 800c540:	08013f90 	.word	0x08013f90
      default:
        pclk = 0U;
 800c544:	2300      	movs	r3, #0
 800c546:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c54e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 8084 	beq.w	800c660 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c55c:	4a4b      	ldr	r2, [pc, #300]	@ (800c68c <UART_SetConfig+0x448>)
 800c55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c562:	461a      	mov	r2, r3
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	fbb3 f3f2 	udiv	r3, r3, r2
 800c56a:	005a      	lsls	r2, r3, #1
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	085b      	lsrs	r3, r3, #1
 800c572:	441a      	add	r2, r3
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	fbb2 f3f3 	udiv	r3, r2, r3
 800c57c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c57e:	6a3b      	ldr	r3, [r7, #32]
 800c580:	2b0f      	cmp	r3, #15
 800c582:	d916      	bls.n	800c5b2 <UART_SetConfig+0x36e>
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c58a:	d212      	bcs.n	800c5b2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c58c:	6a3b      	ldr	r3, [r7, #32]
 800c58e:	b29b      	uxth	r3, r3
 800c590:	f023 030f 	bic.w	r3, r3, #15
 800c594:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c596:	6a3b      	ldr	r3, [r7, #32]
 800c598:	085b      	lsrs	r3, r3, #1
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	f003 0307 	and.w	r3, r3, #7
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	8bfb      	ldrh	r3, [r7, #30]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	8bfa      	ldrh	r2, [r7, #30]
 800c5ae:	60da      	str	r2, [r3, #12]
 800c5b0:	e056      	b.n	800c660 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c5b8:	e052      	b.n	800c660 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	2b07      	cmp	r3, #7
 800c5c2:	d822      	bhi.n	800c60a <UART_SetConfig+0x3c6>
 800c5c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c5cc <UART_SetConfig+0x388>)
 800c5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ca:	bf00      	nop
 800c5cc:	0800c5ed 	.word	0x0800c5ed
 800c5d0:	0800c5f5 	.word	0x0800c5f5
 800c5d4:	0800c60b 	.word	0x0800c60b
 800c5d8:	0800c5fb 	.word	0x0800c5fb
 800c5dc:	0800c60b 	.word	0x0800c60b
 800c5e0:	0800c60b 	.word	0x0800c60b
 800c5e4:	0800c60b 	.word	0x0800c60b
 800c5e8:	0800c603 	.word	0x0800c603
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5ec:	f7fe fe66 	bl	800b2bc <HAL_RCC_GetPCLK2Freq>
 800c5f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c5f2:	e010      	b.n	800c616 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5f4:	4b26      	ldr	r3, [pc, #152]	@ (800c690 <UART_SetConfig+0x44c>)
 800c5f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c5f8:	e00d      	b.n	800c616 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5fa:	f7fe fdc9 	bl	800b190 <HAL_RCC_GetSysClockFreq>
 800c5fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c600:	e009      	b.n	800c616 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c608:	e005      	b.n	800c616 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c614:	bf00      	nop
    }

    if (pclk != 0U)
 800c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d021      	beq.n	800c660 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c620:	4a1a      	ldr	r2, [pc, #104]	@ (800c68c <UART_SetConfig+0x448>)
 800c622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c626:	461a      	mov	r2, r3
 800c628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	085b      	lsrs	r3, r3, #1
 800c634:	441a      	add	r2, r3
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c63e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c640:	6a3b      	ldr	r3, [r7, #32]
 800c642:	2b0f      	cmp	r3, #15
 800c644:	d909      	bls.n	800c65a <UART_SetConfig+0x416>
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c64c:	d205      	bcs.n	800c65a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c64e:	6a3b      	ldr	r3, [r7, #32]
 800c650:	b29a      	uxth	r2, r3
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	60da      	str	r2, [r3, #12]
 800c658:	e002      	b.n	800c660 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	2201      	movs	r2, #1
 800c664:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	2200      	movs	r2, #0
 800c674:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2200      	movs	r2, #0
 800c67a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c67c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c680:	4618      	mov	r0, r3
 800c682:	3730      	adds	r7, #48	@ 0x30
 800c684:	46bd      	mov	sp, r7
 800c686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c68a:	bf00      	nop
 800c68c:	08013f90 	.word	0x08013f90
 800c690:	00f42400 	.word	0x00f42400

0800c694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6a0:	f003 0308 	and.w	r3, r3, #8
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00a      	beq.n	800c6be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	430a      	orrs	r2, r1
 800c6bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00a      	beq.n	800c6e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	430a      	orrs	r2, r1
 800c6de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6e4:	f003 0302 	and.w	r3, r3, #2
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00a      	beq.n	800c702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	430a      	orrs	r2, r1
 800c700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c706:	f003 0304 	and.w	r3, r3, #4
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00a      	beq.n	800c724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	430a      	orrs	r2, r1
 800c722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c728:	f003 0310 	and.w	r3, r3, #16
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00a      	beq.n	800c746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c74a:	f003 0320 	and.w	r3, r3, #32
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00a      	beq.n	800c768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	430a      	orrs	r2, r1
 800c766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c76c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c770:	2b00      	cmp	r3, #0
 800c772:	d01a      	beq.n	800c7aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	430a      	orrs	r2, r1
 800c788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c78e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c792:	d10a      	bne.n	800c7aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	430a      	orrs	r2, r1
 800c7a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00a      	beq.n	800c7cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	430a      	orrs	r2, r1
 800c7ca:	605a      	str	r2, [r3, #4]
  }
}
 800c7cc:	bf00      	nop
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b098      	sub	sp, #96	@ 0x60
 800c7dc:	af02      	add	r7, sp, #8
 800c7de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7e8:	f7fb fdd0 	bl	800838c <HAL_GetTick>
 800c7ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f003 0308 	and.w	r3, r3, #8
 800c7f8:	2b08      	cmp	r3, #8
 800c7fa:	d12f      	bne.n	800c85c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c804:	2200      	movs	r2, #0
 800c806:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f88e 	bl	800c92c <UART_WaitOnFlagUntilTimeout>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d022      	beq.n	800c85c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c81e:	e853 3f00 	ldrex	r3, [r3]
 800c822:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c82a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	461a      	mov	r2, r3
 800c832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c834:	647b      	str	r3, [r7, #68]	@ 0x44
 800c836:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c83a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c83c:	e841 2300 	strex	r3, r2, [r1]
 800c840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1e6      	bne.n	800c816 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2220      	movs	r2, #32
 800c84c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c858:	2303      	movs	r3, #3
 800c85a:	e063      	b.n	800c924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 0304 	and.w	r3, r3, #4
 800c866:	2b04      	cmp	r3, #4
 800c868:	d149      	bne.n	800c8fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c86a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c872:	2200      	movs	r2, #0
 800c874:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 f857 	bl	800c92c <UART_WaitOnFlagUntilTimeout>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d03c      	beq.n	800c8fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88c:	e853 3f00 	ldrex	r3, [r3]
 800c890:	623b      	str	r3, [r7, #32]
   return(result);
 800c892:	6a3b      	ldr	r3, [r7, #32]
 800c894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8aa:	e841 2300 	strex	r3, r2, [r1]
 800c8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1e6      	bne.n	800c884 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3308      	adds	r3, #8
 800c8bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f023 0301 	bic.w	r3, r3, #1
 800c8cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3308      	adds	r3, #8
 800c8d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8d6:	61fa      	str	r2, [r7, #28]
 800c8d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	69b9      	ldr	r1, [r7, #24]
 800c8dc:	69fa      	ldr	r2, [r7, #28]
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	617b      	str	r3, [r7, #20]
   return(result);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e5      	bne.n	800c8b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2220      	movs	r2, #32
 800c8ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8fa:	2303      	movs	r3, #3
 800c8fc:	e012      	b.n	800c924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2220      	movs	r2, #32
 800c902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2220      	movs	r2, #32
 800c90a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3758      	adds	r7, #88	@ 0x58
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	603b      	str	r3, [r7, #0]
 800c938:	4613      	mov	r3, r2
 800c93a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c93c:	e04f      	b.n	800c9de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c944:	d04b      	beq.n	800c9de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c946:	f7fb fd21 	bl	800838c <HAL_GetTick>
 800c94a:	4602      	mov	r2, r0
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	69ba      	ldr	r2, [r7, #24]
 800c952:	429a      	cmp	r2, r3
 800c954:	d302      	bcc.n	800c95c <UART_WaitOnFlagUntilTimeout+0x30>
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e04e      	b.n	800c9fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 0304 	and.w	r3, r3, #4
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d037      	beq.n	800c9de <UART_WaitOnFlagUntilTimeout+0xb2>
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2b80      	cmp	r3, #128	@ 0x80
 800c972:	d034      	beq.n	800c9de <UART_WaitOnFlagUntilTimeout+0xb2>
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b40      	cmp	r3, #64	@ 0x40
 800c978:	d031      	beq.n	800c9de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	69db      	ldr	r3, [r3, #28]
 800c980:	f003 0308 	and.w	r3, r3, #8
 800c984:	2b08      	cmp	r3, #8
 800c986:	d110      	bne.n	800c9aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2208      	movs	r2, #8
 800c98e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f000 f879 	bl	800ca88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2208      	movs	r2, #8
 800c99a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e029      	b.n	800c9fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	69db      	ldr	r3, [r3, #28]
 800c9b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c9b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9b8:	d111      	bne.n	800c9de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c9c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 f85f 	bl	800ca88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c9da:	2303      	movs	r3, #3
 800c9dc:	e00f      	b.n	800c9fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	69da      	ldr	r2, [r3, #28]
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	bf0c      	ite	eq
 800c9ee:	2301      	moveq	r3, #1
 800c9f0:	2300      	movne	r3, #0
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d0a0      	beq.n	800c93e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b08f      	sub	sp, #60	@ 0x3c
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	e853 3f00 	ldrex	r3, [r3]
 800ca1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ca22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	461a      	mov	r2, r3
 800ca2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca34:	e841 2300 	strex	r3, r2, [r1]
 800ca38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1e6      	bne.n	800ca0e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3308      	adds	r3, #8
 800ca46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	e853 3f00 	ldrex	r3, [r3]
 800ca4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ca56:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca60:	61ba      	str	r2, [r7, #24]
 800ca62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca64:	6979      	ldr	r1, [r7, #20]
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	e841 2300 	strex	r3, r2, [r1]
 800ca6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e5      	bne.n	800ca40 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2220      	movs	r2, #32
 800ca78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ca7c:	bf00      	nop
 800ca7e:	373c      	adds	r7, #60	@ 0x3c
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b095      	sub	sp, #84	@ 0x54
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca98:	e853 3f00 	ldrex	r3, [r3]
 800ca9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800caa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caae:	643b      	str	r3, [r7, #64]	@ 0x40
 800cab0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cab4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cab6:	e841 2300 	strex	r3, r2, [r1]
 800caba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1e6      	bne.n	800ca90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	3308      	adds	r3, #8
 800cac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	e853 3f00 	ldrex	r3, [r3]
 800cad0:	61fb      	str	r3, [r7, #28]
   return(result);
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cad8:	f023 0301 	bic.w	r3, r3, #1
 800cadc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3308      	adds	r3, #8
 800cae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cae8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800caec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800caf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e3      	bne.n	800cac2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d118      	bne.n	800cb34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	f023 0310 	bic.w	r3, r3, #16
 800cb16:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb20:	61bb      	str	r3, [r7, #24]
 800cb22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	6979      	ldr	r1, [r7, #20]
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e6      	bne.n	800cb02 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2220      	movs	r2, #32
 800cb38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cb48:	bf00      	nop
 800cb4a:	3754      	adds	r7, #84	@ 0x54
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b090      	sub	sp, #64	@ 0x40
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb60:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0320 	and.w	r3, r3, #32
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d137      	bne.n	800cbe0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800cb70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb72:	2200      	movs	r2, #0
 800cb74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cb78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	3308      	adds	r3, #8
 800cb7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	e853 3f00 	ldrex	r3, [r3]
 800cb86:	623b      	str	r3, [r7, #32]
   return(result);
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3308      	adds	r3, #8
 800cb96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb98:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cba0:	e841 2300 	strex	r3, r2, [r1]
 800cba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1e5      	bne.n	800cb78 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	e853 3f00 	ldrex	r3, [r3]
 800cbb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbca:	61fb      	str	r3, [r7, #28]
 800cbcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbce:	69b9      	ldr	r1, [r7, #24]
 800cbd0:	69fa      	ldr	r2, [r7, #28]
 800cbd2:	e841 2300 	strex	r3, r2, [r1]
 800cbd6:	617b      	str	r3, [r7, #20]
   return(result);
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1e6      	bne.n	800cbac <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cbde:	e002      	b.n	800cbe6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cbe0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cbe2:	f7f5 fdd3 	bl	800278c <HAL_UART_TxCpltCallback>
}
 800cbe6:	bf00      	nop
 800cbe8:	3740      	adds	r7, #64	@ 0x40
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b084      	sub	sp, #16
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbfa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f7ff fb0d 	bl	800c21c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc02:	bf00      	nop
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b086      	sub	sp, #24
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc16:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc1e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc26:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc32:	2b80      	cmp	r3, #128	@ 0x80
 800cc34:	d109      	bne.n	800cc4a <UART_DMAError+0x40>
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	2b21      	cmp	r3, #33	@ 0x21
 800cc3a:	d106      	bne.n	800cc4a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cc44:	6978      	ldr	r0, [r7, #20]
 800cc46:	f7ff fede 	bl	800ca06 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc54:	2b40      	cmp	r3, #64	@ 0x40
 800cc56:	d109      	bne.n	800cc6c <UART_DMAError+0x62>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2b22      	cmp	r3, #34	@ 0x22
 800cc5c:	d106      	bne.n	800cc6c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cc66:	6978      	ldr	r0, [r7, #20]
 800cc68:	f7ff ff0e 	bl	800ca88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc72:	f043 0210 	orr.w	r2, r3, #16
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc7c:	6978      	ldr	r0, [r7, #20]
 800cc7e:	f7ff fad7 	bl	800c230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc82:	bf00      	nop
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc8a:	b480      	push	{r7}
 800cc8c:	b085      	sub	sp, #20
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d101      	bne.n	800cca0 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc9c:	2302      	movs	r3, #2
 800cc9e:	e027      	b.n	800ccf0 <HAL_UARTEx_DisableFifoMode+0x66>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2224      	movs	r2, #36	@ 0x24
 800ccac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f022 0201 	bic.w	r2, r2, #1
 800ccc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ccce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2220      	movs	r2, #32
 800cce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d101      	bne.n	800cd14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd10:	2302      	movs	r3, #2
 800cd12:	e02d      	b.n	800cd70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2224      	movs	r2, #36	@ 0x24
 800cd20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f022 0201 	bic.w	r2, r2, #1
 800cd3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	430a      	orrs	r2, r1
 800cd4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f84f 	bl	800cdf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2220      	movs	r2, #32
 800cd62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd6e:	2300      	movs	r3, #0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d101      	bne.n	800cd90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd8c:	2302      	movs	r3, #2
 800cd8e:	e02d      	b.n	800cdec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2224      	movs	r2, #36	@ 0x24
 800cd9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f022 0201 	bic.w	r2, r2, #1
 800cdb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	430a      	orrs	r2, r1
 800cdca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f811 	bl	800cdf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2220      	movs	r2, #32
 800cdde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d108      	bne.n	800ce16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce14:	e031      	b.n	800ce7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce16:	2308      	movs	r3, #8
 800ce18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce1a:	2308      	movs	r3, #8
 800ce1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	0e5b      	lsrs	r3, r3, #25
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	f003 0307 	and.w	r3, r3, #7
 800ce2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	0f5b      	lsrs	r3, r3, #29
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	f003 0307 	and.w	r3, r3, #7
 800ce3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce3e:	7bbb      	ldrb	r3, [r7, #14]
 800ce40:	7b3a      	ldrb	r2, [r7, #12]
 800ce42:	4911      	ldr	r1, [pc, #68]	@ (800ce88 <UARTEx_SetNbDataToProcess+0x94>)
 800ce44:	5c8a      	ldrb	r2, [r1, r2]
 800ce46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ce4a:	7b3a      	ldrb	r2, [r7, #12]
 800ce4c:	490f      	ldr	r1, [pc, #60]	@ (800ce8c <UARTEx_SetNbDataToProcess+0x98>)
 800ce4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce50:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
 800ce5e:	7b7a      	ldrb	r2, [r7, #13]
 800ce60:	4909      	ldr	r1, [pc, #36]	@ (800ce88 <UARTEx_SetNbDataToProcess+0x94>)
 800ce62:	5c8a      	ldrb	r2, [r1, r2]
 800ce64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ce68:	7b7a      	ldrb	r2, [r7, #13]
 800ce6a:	4908      	ldr	r1, [pc, #32]	@ (800ce8c <UARTEx_SetNbDataToProcess+0x98>)
 800ce6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ce7a:	bf00      	nop
 800ce7c:	3714      	adds	r7, #20
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	08013fa8 	.word	0x08013fa8
 800ce8c:	08013fb0 	.word	0x08013fb0

0800ce90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ce98:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ce9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	43db      	mvns	r3, r3
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	4013      	ands	r3, r2
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3714      	adds	r7, #20
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr

0800cec6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cec6:	b480      	push	{r7}
 800cec8:	b085      	sub	sp, #20
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	60f8      	str	r0, [r7, #12]
 800cece:	1d3b      	adds	r3, r7, #4
 800ced0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b088      	sub	sp, #32
 800cf06:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf0c:	f107 0308 	add.w	r3, r7, #8
 800cf10:	2218      	movs	r2, #24
 800cf12:	2100      	movs	r1, #0
 800cf14:	4618      	mov	r0, r3
 800cf16:	f001 f92d 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf1a:	233f      	movs	r3, #63	@ 0x3f
 800cf1c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800cf1e:	2381      	movs	r3, #129	@ 0x81
 800cf20:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cf22:	1dfb      	adds	r3, r7, #7
 800cf24:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cf26:	2301      	movs	r3, #1
 800cf28:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cf2a:	f107 0308 	add.w	r3, r7, #8
 800cf2e:	2100      	movs	r1, #0
 800cf30:	4618      	mov	r0, r3
 800cf32:	f001 fba9 	bl	800e688 <hci_send_req>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	da01      	bge.n	800cf40 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cf3c:	23ff      	movs	r3, #255	@ 0xff
 800cf3e:	e000      	b.n	800cf42 <aci_gap_set_non_discoverable+0x40>
  return status;
 800cf40:	79fb      	ldrb	r3, [r7, #7]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3720      	adds	r7, #32
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800cf4a:	b5b0      	push	{r4, r5, r7, lr}
 800cf4c:	b0ce      	sub	sp, #312	@ 0x138
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	4605      	mov	r5, r0
 800cf52:	460c      	mov	r4, r1
 800cf54:	4610      	mov	r0, r2
 800cf56:	4619      	mov	r1, r3
 800cf58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cf5c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cf60:	462a      	mov	r2, r5
 800cf62:	701a      	strb	r2, [r3, #0]
 800cf64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cf68:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cf6c:	4622      	mov	r2, r4
 800cf6e:	801a      	strh	r2, [r3, #0]
 800cf70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cf74:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800cf78:	4602      	mov	r2, r0
 800cf7a:	801a      	strh	r2, [r3, #0]
 800cf7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cf80:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cf84:	460a      	mov	r2, r1
 800cf86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800cf88:	f107 0310 	add.w	r3, r7, #16
 800cf8c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800cf90:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cf94:	3308      	adds	r3, #8
 800cf96:	f107 0210 	add.w	r2, r7, #16
 800cf9a:	4413      	add	r3, r2
 800cf9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800cfa0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cfa4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cfa8:	4413      	add	r3, r2
 800cfaa:	3309      	adds	r3, #9
 800cfac:	f107 0210 	add.w	r2, r7, #16
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cfb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cfba:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800cfc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cfcc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cfd0:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800cfd4:	7812      	ldrb	r2, [r2, #0]
 800cfd6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cfd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfdc:	3301      	adds	r3, #1
 800cfde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800cfe2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cfe6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cfea:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800cfee:	8812      	ldrh	r2, [r2, #0]
 800cff0:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800cff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cff8:	3302      	adds	r3, #2
 800cffa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800cffe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d002:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d006:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800d00a:	8812      	ldrh	r2, [r2, #0]
 800d00c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800d010:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d014:	3302      	adds	r3, #2
 800d016:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800d01a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d01e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d022:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d026:	7812      	ldrb	r2, [r2, #0]
 800d028:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d02a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d02e:	3301      	adds	r3, #1
 800d030:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800d034:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d038:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800d03c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d03e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d042:	3301      	adds	r3, #1
 800d044:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800d048:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d04c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800d050:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800d052:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d056:	3301      	adds	r3, #1
 800d058:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800d05c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d060:	3308      	adds	r3, #8
 800d062:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800d066:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800d06a:	4618      	mov	r0, r3
 800d06c:	f001 f872 	bl	800e154 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800d070:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800d074:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d078:	4413      	add	r3, r2
 800d07a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800d07e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d082:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d086:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d088:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d08c:	3301      	adds	r3, #1
 800d08e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800d092:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d096:	3301      	adds	r3, #1
 800d098:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d09c:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f001 f857 	bl	800e154 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800d0a6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800d0aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d0ae:	4413      	add	r3, r2
 800d0b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800d0b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0b8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800d0bc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d0be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d0c2:	3302      	adds	r3, #2
 800d0c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800d0c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0cc:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800d0d0:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800d0d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d0d6:	3302      	adds	r3, #2
 800d0d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d0dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d0e0:	2218      	movs	r2, #24
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f001 f845 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d0ea:	233f      	movs	r3, #63	@ 0x3f
 800d0ec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800d0f0:	2383      	movs	r3, #131	@ 0x83
 800d0f2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d0f6:	f107 0310 	add.w	r3, r7, #16
 800d0fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d0fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d102:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d106:	f107 030f 	add.w	r3, r7, #15
 800d10a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d10e:	2301      	movs	r3, #1
 800d110:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d114:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d118:	2100      	movs	r1, #0
 800d11a:	4618      	mov	r0, r3
 800d11c:	f001 fab4 	bl	800e688 <hci_send_req>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	da01      	bge.n	800d12a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800d126:	23ff      	movs	r3, #255	@ 0xff
 800d128:	e004      	b.n	800d134 <aci_gap_set_discoverable+0x1ea>
  return status;
 800d12a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d12e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d132:	781b      	ldrb	r3, [r3, #0]
}
 800d134:	4618      	mov	r0, r3
 800d136:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bdb0      	pop	{r4, r5, r7, pc}

0800d13e <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b0cc      	sub	sp, #304	@ 0x130
 800d142:	af00      	add	r7, sp, #0
 800d144:	4602      	mov	r2, r0
 800d146:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d14a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d14e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800d150:	f107 0310 	add.w	r3, r7, #16
 800d154:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d158:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d15c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d160:	2200      	movs	r2, #0
 800d162:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d164:	2300      	movs	r3, #0
 800d166:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800d16a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d16e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d172:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d176:	7812      	ldrb	r2, [r2, #0]
 800d178:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d17a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d17e:	3301      	adds	r3, #1
 800d180:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d184:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d188:	2218      	movs	r2, #24
 800d18a:	2100      	movs	r1, #0
 800d18c:	4618      	mov	r0, r3
 800d18e:	f000 fff1 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d192:	233f      	movs	r3, #63	@ 0x3f
 800d194:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800d198:	2385      	movs	r3, #133	@ 0x85
 800d19a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d19e:	f107 0310 	add.w	r3, r7, #16
 800d1a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d1a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d1ae:	f107 030f 	add.w	r3, r7, #15
 800d1b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d1bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f001 fa60 	bl	800e688 <hci_send_req>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	da01      	bge.n	800d1d2 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800d1ce:	23ff      	movs	r3, #255	@ 0xff
 800d1d0:	e004      	b.n	800d1dc <aci_gap_set_io_capability+0x9e>
  return status;
 800d1d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1d6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d1da:	781b      	ldrb	r3, [r3, #0]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800d1e6:	b5b0      	push	{r4, r5, r7, lr}
 800d1e8:	b0cc      	sub	sp, #304	@ 0x130
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	460c      	mov	r4, r1
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1f8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d1fc:	462a      	mov	r2, r5
 800d1fe:	701a      	strb	r2, [r3, #0]
 800d200:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d204:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d208:	4622      	mov	r2, r4
 800d20a:	701a      	strb	r2, [r3, #0]
 800d20c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d210:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d214:	4602      	mov	r2, r0
 800d216:	701a      	strb	r2, [r3, #0]
 800d218:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d21c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d220:	460a      	mov	r2, r1
 800d222:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800d224:	f107 0310 	add.w	r3, r7, #16
 800d228:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d22c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d230:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d234:	2200      	movs	r2, #0
 800d236:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800d23e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d242:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d246:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d24a:	7812      	ldrb	r2, [r2, #0]
 800d24c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d24e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d252:	3301      	adds	r3, #1
 800d254:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800d258:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d25c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d260:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d264:	7812      	ldrb	r2, [r2, #0]
 800d266:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d268:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d26c:	3301      	adds	r3, #1
 800d26e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800d272:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d276:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d27a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d27e:	7812      	ldrb	r2, [r2, #0]
 800d280:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d282:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d286:	3301      	adds	r3, #1
 800d288:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800d28c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d290:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d294:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d298:	7812      	ldrb	r2, [r2, #0]
 800d29a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800d29c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800d2a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d2aa:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800d2ae:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d2b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800d2ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d2be:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800d2c2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d2c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800d2ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d2d2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800d2d6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d2d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2dc:	3301      	adds	r3, #1
 800d2de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800d2e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d2e6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800d2ea:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800d2ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800d2f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d2fc:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d300:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800d302:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d306:	3301      	adds	r3, #1
 800d308:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d30c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d310:	2218      	movs	r2, #24
 800d312:	2100      	movs	r1, #0
 800d314:	4618      	mov	r0, r3
 800d316:	f000 ff2d 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d31a:	233f      	movs	r3, #63	@ 0x3f
 800d31c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800d320:	2386      	movs	r3, #134	@ 0x86
 800d322:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d326:	f107 0310 	add.w	r3, r7, #16
 800d32a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d32e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d332:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d336:	f107 030f 	add.w	r3, r7, #15
 800d33a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d33e:	2301      	movs	r3, #1
 800d340:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d344:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d348:	2100      	movs	r1, #0
 800d34a:	4618      	mov	r0, r3
 800d34c:	f001 f99c 	bl	800e688 <hci_send_req>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	da01      	bge.n	800d35a <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800d356:	23ff      	movs	r3, #255	@ 0xff
 800d358:	e004      	b.n	800d364 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800d35a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d35e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d362:	781b      	ldrb	r3, [r3, #0]
}
 800d364:	4618      	mov	r0, r3
 800d366:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bdb0      	pop	{r4, r5, r7, pc}

0800d36e <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b0cc      	sub	sp, #304	@ 0x130
 800d372:	af00      	add	r7, sp, #0
 800d374:	4602      	mov	r2, r0
 800d376:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d37a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d37e:	6019      	str	r1, [r3, #0]
 800d380:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d384:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d388:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800d38a:	f107 0310 	add.w	r3, r7, #16
 800d38e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d392:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d396:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d39a:	2200      	movs	r2, #0
 800d39c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d3a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d3a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d3ac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d3b0:	8812      	ldrh	r2, [r2, #0]
 800d3b2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d3b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3b8:	3302      	adds	r3, #2
 800d3ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800d3be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d3c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d3c6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d3ca:	6812      	ldr	r2, [r2, #0]
 800d3cc:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800d3d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3de:	2218      	movs	r2, #24
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f000 fec6 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3e8:	233f      	movs	r3, #63	@ 0x3f
 800d3ea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800d3ee:	2388      	movs	r3, #136	@ 0x88
 800d3f0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d3f4:	f107 0310 	add.w	r3, r7, #16
 800d3f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d3fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d400:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d404:	f107 030f 	add.w	r3, r7, #15
 800d408:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d40c:	2301      	movs	r3, #1
 800d40e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d416:	2100      	movs	r1, #0
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 f935 	bl	800e688 <hci_send_req>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	da01      	bge.n	800d428 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800d424:	23ff      	movs	r3, #255	@ 0xff
 800d426:	e004      	b.n	800d432 <aci_gap_pass_key_resp+0xc4>
  return status;
 800d428:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d42c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d430:	781b      	ldrb	r3, [r3, #0]
}
 800d432:	4618      	mov	r0, r3
 800d434:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d43c:	b590      	push	{r4, r7, lr}
 800d43e:	b0cd      	sub	sp, #308	@ 0x134
 800d440:	af00      	add	r7, sp, #0
 800d442:	4604      	mov	r4, r0
 800d444:	4608      	mov	r0, r1
 800d446:	4611      	mov	r1, r2
 800d448:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d44c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d450:	6013      	str	r3, [r2, #0]
 800d452:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d456:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d45a:	4622      	mov	r2, r4
 800d45c:	701a      	strb	r2, [r3, #0]
 800d45e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d462:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d466:	4602      	mov	r2, r0
 800d468:	701a      	strb	r2, [r3, #0]
 800d46a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d46e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d472:	460a      	mov	r2, r1
 800d474:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d476:	f107 0310 	add.w	r3, r7, #16
 800d47a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d47e:	f107 0308 	add.w	r3, r7, #8
 800d482:	2207      	movs	r2, #7
 800d484:	2100      	movs	r1, #0
 800d486:	4618      	mov	r0, r3
 800d488:	f000 fe74 	bl	800e174 <Osal_MemSet>
  int index_input = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800d492:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d496:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d49a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d49e:	7812      	ldrb	r2, [r2, #0]
 800d4a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d4a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d4ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4b4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d4b8:	7812      	ldrb	r2, [r2, #0]
 800d4ba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d4bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d4c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4ce:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d4d2:	7812      	ldrb	r2, [r2, #0]
 800d4d4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d4d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4da:	3301      	adds	r3, #1
 800d4dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4e4:	2218      	movs	r2, #24
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 fe43 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d4ee:	233f      	movs	r3, #63	@ 0x3f
 800d4f0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800d4f4:	238a      	movs	r3, #138	@ 0x8a
 800d4f6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d4fa:	f107 0310 	add.w	r3, r7, #16
 800d4fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d502:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d506:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d50a:	f107 0308 	add.w	r3, r7, #8
 800d50e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d512:	2307      	movs	r3, #7
 800d514:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d51c:	2100      	movs	r1, #0
 800d51e:	4618      	mov	r0, r3
 800d520:	f001 f8b2 	bl	800e688 <hci_send_req>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	da01      	bge.n	800d52e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d52a:	23ff      	movs	r3, #255	@ 0xff
 800d52c:	e02e      	b.n	800d58c <aci_gap_init+0x150>
  if ( resp.Status )
 800d52e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d532:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d005      	beq.n	800d548 <aci_gap_init+0x10c>
    return resp.Status;
 800d53c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d540:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	e021      	b.n	800d58c <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d548:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d54c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d550:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d554:	b29a      	uxth	r2, r3
 800d556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d55a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d562:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d566:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d56a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d56e:	b29a      	uxth	r2, r3
 800d570:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d574:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d576:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d57a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d57e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d582:	b29a      	uxth	r2, r3
 800d584:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d588:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d592:	46bd      	mov	sp, r7
 800d594:	bd90      	pop	{r4, r7, pc}

0800d596 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b0cc      	sub	sp, #304	@ 0x130
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	4602      	mov	r2, r0
 800d59e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d5a6:	6019      	str	r1, [r3, #0]
 800d5a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5ac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d5b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d5b2:	f107 0310 	add.w	r3, r7, #16
 800d5b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d5ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d5cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d5d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d5d4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d5d8:	7812      	ldrb	r2, [r2, #0]
 800d5da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d5dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d5e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d5ea:	1c58      	adds	r0, r3, #1
 800d5ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5f0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d5f4:	781a      	ldrb	r2, [r3, #0]
 800d5f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d5fe:	6819      	ldr	r1, [r3, #0]
 800d600:	f000 fda8 	bl	800e154 <Osal_MemCpy>
  index_input += AdvDataLen;
 800d604:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d608:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d612:	4413      	add	r3, r2
 800d614:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d61c:	2218      	movs	r2, #24
 800d61e:	2100      	movs	r1, #0
 800d620:	4618      	mov	r0, r3
 800d622:	f000 fda7 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d626:	233f      	movs	r3, #63	@ 0x3f
 800d628:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800d62c:	238e      	movs	r3, #142	@ 0x8e
 800d62e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d632:	f107 0310 	add.w	r3, r7, #16
 800d636:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d63a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d63e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d642:	f107 030f 	add.w	r3, r7, #15
 800d646:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d64a:	2301      	movs	r3, #1
 800d64c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d650:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d654:	2100      	movs	r1, #0
 800d656:	4618      	mov	r0, r3
 800d658:	f001 f816 	bl	800e688 <hci_send_req>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	da01      	bge.n	800d666 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d662:	23ff      	movs	r3, #255	@ 0xff
 800d664:	e004      	b.n	800d670 <aci_gap_update_adv_data+0xda>
  return status;
 800d666:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d66a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d66e:	781b      	ldrb	r3, [r3, #0]
}
 800d670:	4618      	mov	r0, r3
 800d672:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b088      	sub	sp, #32
 800d67e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d680:	2300      	movs	r3, #0
 800d682:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d684:	f107 0308 	add.w	r3, r7, #8
 800d688:	2218      	movs	r2, #24
 800d68a:	2100      	movs	r1, #0
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 fd71 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d692:	233f      	movs	r3, #63	@ 0x3f
 800d694:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d696:	2392      	movs	r3, #146	@ 0x92
 800d698:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d69a:	1dfb      	adds	r3, r7, #7
 800d69c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d6a2:	f107 0308 	add.w	r3, r7, #8
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 ffed 	bl	800e688 <hci_send_req>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	da01      	bge.n	800d6b8 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d6b4:	23ff      	movs	r3, #255	@ 0xff
 800d6b6:	e000      	b.n	800d6ba <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d6b8:	79fb      	ldrb	r3, [r7, #7]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3720      	adds	r7, #32
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b0cc      	sub	sp, #304	@ 0x130
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d6d2:	801a      	strh	r2, [r3, #0]
 800d6d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6d8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d6dc:	460a      	mov	r2, r1
 800d6de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d6e0:	f107 0310 	add.w	r3, r7, #16
 800d6e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d6e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6ec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d6fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d6fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d702:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d706:	8812      	ldrh	r2, [r2, #0]
 800d708:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d70a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d70e:	3302      	adds	r3, #2
 800d710:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d714:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d718:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d71c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d720:	7812      	ldrb	r2, [r2, #0]
 800d722:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d724:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d728:	3301      	adds	r3, #1
 800d72a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d72e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d732:	2218      	movs	r2, #24
 800d734:	2100      	movs	r1, #0
 800d736:	4618      	mov	r0, r3
 800d738:	f000 fd1c 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d73c:	233f      	movs	r3, #63	@ 0x3f
 800d73e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800d742:	23a5      	movs	r3, #165	@ 0xa5
 800d744:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d748:	f107 0310 	add.w	r3, r7, #16
 800d74c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d750:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d754:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d758:	f107 030f 	add.w	r3, r7, #15
 800d75c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d760:	2301      	movs	r3, #1
 800d762:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d76a:	2100      	movs	r1, #0
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 ff8b 	bl	800e688 <hci_send_req>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	da01      	bge.n	800d77c <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800d778:	23ff      	movs	r3, #255	@ 0xff
 800d77a:	e004      	b.n	800d786 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800d77c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d780:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d784:	781b      	ldrb	r3, [r3, #0]
}
 800d786:	4618      	mov	r0, r3
 800d788:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b088      	sub	sp, #32
 800d794:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d796:	2300      	movs	r3, #0
 800d798:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d79a:	f107 0308 	add.w	r3, r7, #8
 800d79e:	2218      	movs	r2, #24
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f000 fce6 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d7a8:	233f      	movs	r3, #63	@ 0x3f
 800d7aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d7ac:	f240 1301 	movw	r3, #257	@ 0x101
 800d7b0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d7b2:	1dfb      	adds	r3, r7, #7
 800d7b4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7ba:	f107 0308 	add.w	r3, r7, #8
 800d7be:	2100      	movs	r1, #0
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f000 ff61 	bl	800e688 <hci_send_req>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	da01      	bge.n	800d7d0 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d7cc:	23ff      	movs	r3, #255	@ 0xff
 800d7ce:	e000      	b.n	800d7d2 <aci_gatt_init+0x42>
  return status;
 800d7d0:	79fb      	ldrb	r3, [r7, #7]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3720      	adds	r7, #32
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d7da:	b590      	push	{r4, r7, lr}
 800d7dc:	b0cf      	sub	sp, #316	@ 0x13c
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800d7e6:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d7ea:	6001      	str	r1, [r0, #0]
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d7f4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	701a      	strb	r2, [r3, #0]
 800d7fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d800:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d804:	4602      	mov	r2, r0
 800d806:	701a      	strb	r2, [r3, #0]
 800d808:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d80c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d810:	460a      	mov	r2, r1
 800d812:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d814:	f107 0310 	add.w	r3, r7, #16
 800d818:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d81c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d820:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d00a      	beq.n	800d840 <aci_gatt_add_service+0x66>
 800d82a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d82e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b02      	cmp	r3, #2
 800d836:	d101      	bne.n	800d83c <aci_gatt_add_service+0x62>
 800d838:	2311      	movs	r3, #17
 800d83a:	e002      	b.n	800d842 <aci_gatt_add_service+0x68>
 800d83c:	2301      	movs	r3, #1
 800d83e:	e000      	b.n	800d842 <aci_gatt_add_service+0x68>
 800d840:	2303      	movs	r3, #3
 800d842:	f107 0210 	add.w	r2, r7, #16
 800d846:	4413      	add	r3, r2
 800d848:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d84c:	f107 030c 	add.w	r3, r7, #12
 800d850:	2203      	movs	r2, #3
 800d852:	2100      	movs	r1, #0
 800d854:	4618      	mov	r0, r3
 800d856:	f000 fc8d 	bl	800e174 <Osal_MemSet>
  int index_input = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d860:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d864:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d868:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d86c:	7812      	ldrb	r2, [r2, #0]
 800d86e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d870:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d874:	3301      	adds	r3, #1
 800d876:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d87a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d87e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	2b01      	cmp	r3, #1
 800d886:	d002      	beq.n	800d88e <aci_gatt_add_service+0xb4>
 800d888:	2b02      	cmp	r3, #2
 800d88a:	d004      	beq.n	800d896 <aci_gatt_add_service+0xbc>
 800d88c:	e007      	b.n	800d89e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d88e:	2302      	movs	r3, #2
 800d890:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d894:	e005      	b.n	800d8a2 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d896:	2310      	movs	r3, #16
 800d898:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d89c:	e001      	b.n	800d8a2 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d89e:	2397      	movs	r3, #151	@ 0x97
 800d8a0:	e06c      	b.n	800d97c <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d8a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d8a6:	1c58      	adds	r0, r3, #1
 800d8a8:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800d8ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d8b0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d8b4:	6819      	ldr	r1, [r3, #0]
 800d8b6:	f000 fc4d 	bl	800e154 <Osal_MemCpy>
    index_input += size;
 800d8ba:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800d8be:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d8c2:	4413      	add	r3, r2
 800d8c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800d8c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8cc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d8d0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d8d4:	7812      	ldrb	r2, [r2, #0]
 800d8d6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d8d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8dc:	3301      	adds	r3, #1
 800d8de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d8e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8e6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d8ea:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d8ee:	7812      	ldrb	r2, [r2, #0]
 800d8f0:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d8f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d8fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d900:	2218      	movs	r2, #24
 800d902:	2100      	movs	r1, #0
 800d904:	4618      	mov	r0, r3
 800d906:	f000 fc35 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d90a:	233f      	movs	r3, #63	@ 0x3f
 800d90c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800d910:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800d914:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d918:	f107 0310 	add.w	r3, r7, #16
 800d91c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d920:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d924:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d928:	f107 030c 	add.w	r3, r7, #12
 800d92c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d930:	2303      	movs	r3, #3
 800d932:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d93a:	2100      	movs	r1, #0
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 fea3 	bl	800e688 <hci_send_req>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	da01      	bge.n	800d94c <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d948:	23ff      	movs	r3, #255	@ 0xff
 800d94a:	e017      	b.n	800d97c <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d94c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d950:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d005      	beq.n	800d966 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d95a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d95e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	e00a      	b.n	800d97c <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d966:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d96a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d96e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d972:	b29a      	uxth	r2, r3
 800d974:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d978:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d982:	46bd      	mov	sp, r7
 800d984:	bd90      	pop	{r4, r7, pc}

0800d986 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d986:	b590      	push	{r4, r7, lr}
 800d988:	b0d1      	sub	sp, #324	@ 0x144
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	4604      	mov	r4, r0
 800d98e:	4608      	mov	r0, r1
 800d990:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d994:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d998:	600a      	str	r2, [r1, #0]
 800d99a:	4619      	mov	r1, r3
 800d99c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d9a0:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d9a4:	4622      	mov	r2, r4
 800d9a6:	801a      	strh	r2, [r3, #0]
 800d9a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d9ac:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d9b0:	4602      	mov	r2, r0
 800d9b2:	701a      	strb	r2, [r3, #0]
 800d9b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d9b8:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800d9bc:	460a      	mov	r2, r1
 800d9be:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d9c0:	f107 0318 	add.w	r3, r7, #24
 800d9c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d9c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d9cc:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d00a      	beq.n	800d9ec <aci_gatt_add_char+0x66>
 800d9d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d9da:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d101      	bne.n	800d9e8 <aci_gatt_add_char+0x62>
 800d9e4:	2313      	movs	r3, #19
 800d9e6:	e002      	b.n	800d9ee <aci_gatt_add_char+0x68>
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	e000      	b.n	800d9ee <aci_gatt_add_char+0x68>
 800d9ec:	2305      	movs	r3, #5
 800d9ee:	f107 0218 	add.w	r2, r7, #24
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d9f8:	f107 0314 	add.w	r3, r7, #20
 800d9fc:	2203      	movs	r2, #3
 800d9fe:	2100      	movs	r1, #0
 800da00:	4618      	mov	r0, r3
 800da02:	f000 fbb7 	bl	800e174 <Osal_MemSet>
  int index_input = 0;
 800da06:	2300      	movs	r3, #0
 800da08:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800da0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800da10:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800da14:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800da18:	8812      	ldrh	r2, [r2, #0]
 800da1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800da1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800da20:	3302      	adds	r3, #2
 800da22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800da26:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800da2a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800da2e:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800da32:	7812      	ldrb	r2, [r2, #0]
 800da34:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800da36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800da3a:	3301      	adds	r3, #1
 800da3c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800da40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da44:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d002      	beq.n	800da54 <aci_gatt_add_char+0xce>
 800da4e:	2b02      	cmp	r3, #2
 800da50:	d004      	beq.n	800da5c <aci_gatt_add_char+0xd6>
 800da52:	e007      	b.n	800da64 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800da54:	2302      	movs	r3, #2
 800da56:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800da5a:	e005      	b.n	800da68 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800da5c:	2310      	movs	r3, #16
 800da5e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800da62:	e001      	b.n	800da68 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800da64:	2397      	movs	r3, #151	@ 0x97
 800da66:	e091      	b.n	800db8c <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800da68:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800da6c:	1cd8      	adds	r0, r3, #3
 800da6e:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800da72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da76:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800da7a:	6819      	ldr	r1, [r3, #0]
 800da7c:	f000 fb6a 	bl	800e154 <Osal_MemCpy>
    index_input += size;
 800da80:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800da84:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800da88:	4413      	add	r3, r2
 800da8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800da8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800da92:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800da96:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800da9a:	8812      	ldrh	r2, [r2, #0]
 800da9c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800da9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800daa2:	3302      	adds	r3, #2
 800daa4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800daa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800daac:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800dab0:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800dab2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dab6:	3301      	adds	r3, #1
 800dab8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800dabc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dac0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800dac4:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800dac6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800daca:	3301      	adds	r3, #1
 800dacc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800dad0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dad4:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800dad8:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800dada:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dade:	3301      	adds	r3, #1
 800dae0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800dae4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dae8:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800daec:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800daee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800daf2:	3301      	adds	r3, #1
 800daf4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800daf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dafc:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800db00:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800db02:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800db06:	3301      	adds	r3, #1
 800db08:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800db10:	2218      	movs	r2, #24
 800db12:	2100      	movs	r1, #0
 800db14:	4618      	mov	r0, r3
 800db16:	f000 fb2d 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800db1a:	233f      	movs	r3, #63	@ 0x3f
 800db1c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800db20:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800db24:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800db28:	f107 0318 	add.w	r3, r7, #24
 800db2c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800db30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800db34:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800db38:	f107 0314 	add.w	r3, r7, #20
 800db3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800db40:	2303      	movs	r3, #3
 800db42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800db4a:	2100      	movs	r1, #0
 800db4c:	4618      	mov	r0, r3
 800db4e:	f000 fd9b 	bl	800e688 <hci_send_req>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	da01      	bge.n	800db5c <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800db58:	23ff      	movs	r3, #255	@ 0xff
 800db5a:	e017      	b.n	800db8c <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800db5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d005      	beq.n	800db76 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800db6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	e00a      	b.n	800db8c <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800db76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800db7e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800db82:	b29a      	uxth	r2, r3
 800db84:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800db88:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800db92:	46bd      	mov	sp, r7
 800db94:	bd90      	pop	{r4, r7, pc}

0800db96 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800db96:	b5b0      	push	{r4, r5, r7, lr}
 800db98:	b0cc      	sub	sp, #304	@ 0x130
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	4605      	mov	r5, r0
 800db9e:	460c      	mov	r4, r1
 800dba0:	4610      	mov	r0, r2
 800dba2:	4619      	mov	r1, r3
 800dba4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dba8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dbac:	462a      	mov	r2, r5
 800dbae:	801a      	strh	r2, [r3, #0]
 800dbb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dbb8:	4622      	mov	r2, r4
 800dbba:	801a      	strh	r2, [r3, #0]
 800dbbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbc0:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	701a      	strb	r2, [r3, #0]
 800dbc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbcc:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800dbd0:	460a      	mov	r2, r1
 800dbd2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800dbd4:	f107 0310 	add.w	r3, r7, #16
 800dbd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dbdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbe0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800dbee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dbf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dbf6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dbfa:	8812      	ldrh	r2, [r2, #0]
 800dbfc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dbfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc02:	3302      	adds	r3, #2
 800dc04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800dc08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dc10:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800dc14:	8812      	ldrh	r2, [r2, #0]
 800dc16:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800dc18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc1c:	3302      	adds	r3, #2
 800dc1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800dc22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dc2a:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800dc2e:	7812      	ldrb	r2, [r2, #0]
 800dc30:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800dc32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc36:	3301      	adds	r3, #1
 800dc38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800dc3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dc44:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800dc48:	7812      	ldrb	r2, [r2, #0]
 800dc4a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800dc4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc50:	3301      	adds	r3, #1
 800dc52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800dc56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc5a:	1d98      	adds	r0, r3, #6
 800dc5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc60:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	461a      	mov	r2, r3
 800dc68:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800dc6c:	f000 fa72 	bl	800e154 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800dc70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc74:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800dc7e:	4413      	add	r3, r2
 800dc80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc88:	2218      	movs	r2, #24
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f000 fa71 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc92:	233f      	movs	r3, #63	@ 0x3f
 800dc94:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800dc98:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800dc9c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dca0:	f107 0310 	add.w	r3, r7, #16
 800dca4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dcac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dcb0:	f107 030f 	add.w	r3, r7, #15
 800dcb4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dcbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 fcdf 	bl	800e688 <hci_send_req>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	da01      	bge.n	800dcd4 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800dcd0:	23ff      	movs	r3, #255	@ 0xff
 800dcd2:	e004      	b.n	800dcde <aci_gatt_update_char_value+0x148>
  return status;
 800dcd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcd8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dcdc:	781b      	ldrb	r3, [r3, #0]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bdb0      	pop	{r4, r5, r7, pc}

0800dce8 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b0cc      	sub	sp, #304	@ 0x130
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	4602      	mov	r2, r0
 800dcf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcf4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dcf8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800dcfa:	f107 0310 	add.w	r3, r7, #16
 800dcfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dd02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800dd14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd1c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dd20:	8812      	ldrh	r2, [r2, #0]
 800dd22:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dd24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd28:	3302      	adds	r3, #2
 800dd2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd32:	2218      	movs	r2, #24
 800dd34:	2100      	movs	r1, #0
 800dd36:	4618      	mov	r0, r3
 800dd38:	f000 fa1c 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dd3c:	233f      	movs	r3, #63	@ 0x3f
 800dd3e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 800dd42:	f240 1327 	movw	r3, #295	@ 0x127
 800dd46:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dd4a:	f107 0310 	add.w	r3, r7, #16
 800dd4e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dd52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dd5a:	f107 030f 	add.w	r3, r7, #15
 800dd5e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dd62:	2301      	movs	r3, #1
 800dd64:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f000 fc8a 	bl	800e688 <hci_send_req>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	da01      	bge.n	800dd7e <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800dd7a:	23ff      	movs	r3, #255	@ 0xff
 800dd7c:	e004      	b.n	800dd88 <aci_gatt_allow_read+0xa0>
  return status;
 800dd7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd82:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd86:	781b      	ldrb	r3, [r3, #0]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b0cc      	sub	sp, #304	@ 0x130
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd9c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dda0:	601a      	str	r2, [r3, #0]
 800dda2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dda6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ddaa:	4602      	mov	r2, r0
 800ddac:	701a      	strb	r2, [r3, #0]
 800ddae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ddb2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ddb6:	460a      	mov	r2, r1
 800ddb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800ddba:	f107 0310 	add.w	r3, r7, #16
 800ddbe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ddc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ddc6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ddca:	2200      	movs	r2, #0
 800ddcc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800ddd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ddd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dddc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dde0:	7812      	ldrb	r2, [r2, #0]
 800dde2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dde4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dde8:	3301      	adds	r3, #1
 800ddea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800ddee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ddf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ddf6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ddfa:	7812      	ldrb	r2, [r2, #0]
 800ddfc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ddfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de02:	3301      	adds	r3, #1
 800de04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800de08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de0c:	1c98      	adds	r0, r3, #2
 800de0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de12:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800de16:	781a      	ldrb	r2, [r3, #0]
 800de18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de1c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800de20:	6819      	ldr	r1, [r3, #0]
 800de22:	f000 f997 	bl	800e154 <Osal_MemCpy>
  index_input += Length;
 800de26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de2a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800de34:	4413      	add	r3, r2
 800de36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de3e:	2218      	movs	r2, #24
 800de40:	2100      	movs	r1, #0
 800de42:	4618      	mov	r0, r3
 800de44:	f000 f996 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800de48:	233f      	movs	r3, #63	@ 0x3f
 800de4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800de4e:	230c      	movs	r3, #12
 800de50:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800de54:	f107 0310 	add.w	r3, r7, #16
 800de58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800de5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800de64:	f107 030f 	add.w	r3, r7, #15
 800de68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800de6c:	2301      	movs	r3, #1
 800de6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de76:	2100      	movs	r1, #0
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 fc05 	bl	800e688 <hci_send_req>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	da01      	bge.n	800de88 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800de84:	23ff      	movs	r3, #255	@ 0xff
 800de86:	e004      	b.n	800de92 <aci_hal_write_config_data+0x100>
  return status;
 800de88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800de90:	781b      	ldrb	r3, [r3, #0]
}
 800de92:	4618      	mov	r0, r3
 800de94:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b0cc      	sub	sp, #304	@ 0x130
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	4602      	mov	r2, r0
 800dea4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dea8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800deac:	701a      	strb	r2, [r3, #0]
 800deae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800deb2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800deb6:	460a      	mov	r2, r1
 800deb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800deba:	f107 0310 	add.w	r3, r7, #16
 800debe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dec2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dec6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800deca:	2200      	movs	r2, #0
 800decc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800ded4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ded8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dedc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dee0:	7812      	ldrb	r2, [r2, #0]
 800dee2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dee8:	3301      	adds	r3, #1
 800deea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800deee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800def2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800def6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800defa:	7812      	ldrb	r2, [r2, #0]
 800defc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800defe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df02:	3301      	adds	r3, #1
 800df04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df0c:	2218      	movs	r2, #24
 800df0e:	2100      	movs	r1, #0
 800df10:	4618      	mov	r0, r3
 800df12:	f000 f92f 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800df16:	233f      	movs	r3, #63	@ 0x3f
 800df18:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800df1c:	230f      	movs	r3, #15
 800df1e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800df22:	f107 0310 	add.w	r3, r7, #16
 800df26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800df2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800df32:	f107 030f 	add.w	r3, r7, #15
 800df36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800df3a:	2301      	movs	r3, #1
 800df3c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df44:	2100      	movs	r1, #0
 800df46:	4618      	mov	r0, r3
 800df48:	f000 fb9e 	bl	800e688 <hci_send_req>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	da01      	bge.n	800df56 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800df52:	23ff      	movs	r3, #255	@ 0xff
 800df54:	e004      	b.n	800df60 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800df56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df5a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800df5e:	781b      	ldrb	r3, [r3, #0]
}
 800df60:	4618      	mov	r0, r3
 800df62:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b0cc      	sub	sp, #304	@ 0x130
 800df6e:	af00      	add	r7, sp, #0
 800df70:	4602      	mov	r2, r0
 800df72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df76:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800df7a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800df7c:	f107 0310 	add.w	r3, r7, #16
 800df80:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800df84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df88:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800df8c:	2200      	movs	r2, #0
 800df8e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800df90:	2300      	movs	r3, #0
 800df92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800df96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df9a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df9e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dfa2:	8812      	ldrh	r2, [r2, #0]
 800dfa4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dfa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfaa:	3302      	adds	r3, #2
 800dfac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dfb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfb4:	2218      	movs	r2, #24
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f000 f8db 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dfbe:	233f      	movs	r3, #63	@ 0x3f
 800dfc0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800dfc4:	2318      	movs	r3, #24
 800dfc6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dfca:	f107 0310 	add.w	r3, r7, #16
 800dfce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dfd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfd6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dfda:	f107 030f 	add.w	r3, r7, #15
 800dfde:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dfe8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfec:	2100      	movs	r1, #0
 800dfee:	4618      	mov	r0, r3
 800dff0:	f000 fb4a 	bl	800e688 <hci_send_req>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	da01      	bge.n	800dffe <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800dffa:	23ff      	movs	r3, #255	@ 0xff
 800dffc:	e004      	b.n	800e008 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800dffe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e002:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e006:	781b      	ldrb	r3, [r3, #0]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b088      	sub	sp, #32
 800e016:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e018:	2300      	movs	r3, #0
 800e01a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e01c:	f107 0308 	add.w	r3, r7, #8
 800e020:	2218      	movs	r2, #24
 800e022:	2100      	movs	r1, #0
 800e024:	4618      	mov	r0, r3
 800e026:	f000 f8a5 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x03;
 800e02a:	2303      	movs	r3, #3
 800e02c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800e02e:	2303      	movs	r3, #3
 800e030:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e032:	1dfb      	adds	r3, r7, #7
 800e034:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e036:	2301      	movs	r3, #1
 800e038:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e03a:	f107 0308 	add.w	r3, r7, #8
 800e03e:	2100      	movs	r1, #0
 800e040:	4618      	mov	r0, r3
 800e042:	f000 fb21 	bl	800e688 <hci_send_req>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	da01      	bge.n	800e050 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e04c:	23ff      	movs	r3, #255	@ 0xff
 800e04e:	e000      	b.n	800e052 <hci_reset+0x40>
  return status;
 800e050:	79fb      	ldrb	r3, [r7, #7]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3720      	adds	r7, #32
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800e05a:	b590      	push	{r4, r7, lr}
 800e05c:	b0cd      	sub	sp, #308	@ 0x134
 800e05e:	af00      	add	r7, sp, #0
 800e060:	4604      	mov	r4, r0
 800e062:	4608      	mov	r0, r1
 800e064:	4611      	mov	r1, r2
 800e066:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e06a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e06e:	4622      	mov	r2, r4
 800e070:	701a      	strb	r2, [r3, #0]
 800e072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e076:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e07a:	4602      	mov	r2, r0
 800e07c:	701a      	strb	r2, [r3, #0]
 800e07e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e082:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800e086:	460a      	mov	r2, r1
 800e088:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800e08a:	f107 0310 	add.w	r3, r7, #16
 800e08e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e092:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e096:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e09a:	2200      	movs	r2, #0
 800e09c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800e0a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e0ac:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e0b0:	7812      	ldrb	r2, [r2, #0]
 800e0b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e0b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800e0be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e0c6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e0ca:	7812      	ldrb	r2, [r2, #0]
 800e0cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e0ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800e0d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e0e0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800e0e4:	7812      	ldrb	r2, [r2, #0]
 800e0e6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e0e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e0f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e0f6:	2218      	movs	r2, #24
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f000 f83a 	bl	800e174 <Osal_MemSet>
  rq.ogf = 0x08;
 800e100:	2308      	movs	r3, #8
 800e102:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800e106:	2331      	movs	r3, #49	@ 0x31
 800e108:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e10c:	f107 0310 	add.w	r3, r7, #16
 800e110:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e114:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e118:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e11c:	f107 030f 	add.w	r3, r7, #15
 800e120:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e124:	2301      	movs	r3, #1
 800e126:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e12a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e12e:	2100      	movs	r1, #0
 800e130:	4618      	mov	r0, r3
 800e132:	f000 faa9 	bl	800e688 <hci_send_req>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	da01      	bge.n	800e140 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800e13c:	23ff      	movs	r3, #255	@ 0xff
 800e13e:	e004      	b.n	800e14a <hci_le_set_default_phy+0xf0>
  return status;
 800e140:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e144:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e148:	781b      	ldrb	r3, [r3, #0]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800e150:	46bd      	mov	sp, r7
 800e152:	bd90      	pop	{r4, r7, pc}

0800e154 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	68b9      	ldr	r1, [r7, #8]
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f003 fe14 	bl	8011d92 <memcpy>
 800e16a:	4603      	mov	r3, r0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	68b9      	ldr	r1, [r7, #8]
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f003 fd73 	bl	8011c70 <memset>
 800e18a:	4603      	mov	r3, r0
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800e194:	b480      	push	{r7}
 800e196:	af00      	add	r7, sp, #0
  return;
 800e198:	bf00      	nop
}
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800e1a2:	b480      	push	{r7}
 800e1a4:	af00      	add	r7, sp, #0
  return;
 800e1a6:	bf00      	nop
}
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	af00      	add	r7, sp, #0
  return;
 800e1b4:	bf00      	nop
}
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800e1be:	b480      	push	{r7}
 800e1c0:	af00      	add	r7, sp, #0
  return;
 800e1c2:	bf00      	nop
}
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	af00      	add	r7, sp, #0
  return;
 800e1d0:	bf00      	nop
}
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr

0800e1da <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800e1da:	b480      	push	{r7}
 800e1dc:	af00      	add	r7, sp, #0
  return;
 800e1de:	bf00      	nop
}
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	af00      	add	r7, sp, #0
  return;
 800e1ec:	bf00      	nop
}
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800e1f6:	b480      	push	{r7}
 800e1f8:	af00      	add	r7, sp, #0
  return;
 800e1fa:	bf00      	nop
}
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800e204:	b480      	push	{r7}
 800e206:	af00      	add	r7, sp, #0
  return;
 800e208:	bf00      	nop
}
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800e212:	b480      	push	{r7}
 800e214:	af00      	add	r7, sp, #0
  return;
 800e216:	bf00      	nop
}
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800e220:	b480      	push	{r7}
 800e222:	af00      	add	r7, sp, #0
  return;
 800e224:	bf00      	nop
}
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr

0800e22e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800e22e:	b480      	push	{r7}
 800e230:	af00      	add	r7, sp, #0
  return;
 800e232:	bf00      	nop
}
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800e23c:	b480      	push	{r7}
 800e23e:	af00      	add	r7, sp, #0
  return;
 800e240:	bf00      	nop
}
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800e24a:	b480      	push	{r7}
 800e24c:	af00      	add	r7, sp, #0
  return;
 800e24e:	bf00      	nop
}
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800e258:	b480      	push	{r7}
 800e25a:	af00      	add	r7, sp, #0
  return;
 800e25c:	bf00      	nop
}
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800e266:	b480      	push	{r7}
 800e268:	af00      	add	r7, sp, #0
  return;
 800e26a:	bf00      	nop
}
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800e274:	b480      	push	{r7}
 800e276:	af00      	add	r7, sp, #0
  return;
 800e278:	bf00      	nop
}
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
	...

0800e284 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800e284:	b580      	push	{r7, lr}
 800e286:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800e288:	4b04      	ldr	r3, [pc, #16]	@ (800e29c <SVCCTL_Init+0x18>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800e28e:	4b04      	ldr	r3, [pc, #16]	@ (800e2a0 <SVCCTL_Init+0x1c>)
 800e290:	2200      	movs	r2, #0
 800e292:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800e294:	f000 f806 	bl	800e2a4 <SVCCTL_SvcInit>

  return;
 800e298:	bf00      	nop
}
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	20000168 	.word	0x20000168
 800e2a0:	20000188 	.word	0x20000188

0800e2a4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	af00      	add	r7, sp, #0
  BAS_Init();
 800e2a8:	f7ff ff74 	bl	800e194 <BAS_Init>

  BLS_Init();
 800e2ac:	f7ff ff79 	bl	800e1a2 <BLS_Init>

  CRS_STM_Init();
 800e2b0:	f7ff ff7e 	bl	800e1b0 <CRS_STM_Init>

  DIS_Init();
 800e2b4:	f7ff ff83 	bl	800e1be <DIS_Init>

  EDS_STM_Init();
 800e2b8:	f7ff ff88 	bl	800e1cc <EDS_STM_Init>

  HIDS_Init();
 800e2bc:	f7ff ff8d 	bl	800e1da <HIDS_Init>

  HRS_Init();
 800e2c0:	f7ff ff92 	bl	800e1e8 <HRS_Init>

  HTS_Init();
 800e2c4:	f7ff ff97 	bl	800e1f6 <HTS_Init>

  IAS_Init();
 800e2c8:	f7ff ff9c 	bl	800e204 <IAS_Init>

  LLS_Init();
 800e2cc:	f7ff ffa1 	bl	800e212 <LLS_Init>

  TPS_Init();
 800e2d0:	f7ff ffa6 	bl	800e220 <TPS_Init>

  MOTENV_STM_Init();
 800e2d4:	f7ff ffab 	bl	800e22e <MOTENV_STM_Init>

  P2PS_STM_Init();
 800e2d8:	f7ff ffb0 	bl	800e23c <P2PS_STM_Init>

  ZDD_STM_Init();
 800e2dc:	f7ff ffb5 	bl	800e24a <ZDD_STM_Init>

  OTAS_STM_Init();
 800e2e0:	f7ff ffba 	bl	800e258 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800e2e4:	f7ff ffc6 	bl	800e274 <BVOPUS_STM_Init>

  MESH_Init();
 800e2e8:	f7ff ffbd 	bl	800e266 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800e2ec:	f002 fcd6 	bl	8010c9c <SVCCTL_InitCustomSvc>
  
  return;
 800e2f0:	bf00      	nop
}
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800e2fc:	4b09      	ldr	r3, [pc, #36]	@ (800e324 <SVCCTL_RegisterSvcHandler+0x30>)
 800e2fe:	7f1b      	ldrb	r3, [r3, #28]
 800e300:	4619      	mov	r1, r3
 800e302:	4a08      	ldr	r2, [pc, #32]	@ (800e324 <SVCCTL_RegisterSvcHandler+0x30>)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800e30a:	4b06      	ldr	r3, [pc, #24]	@ (800e324 <SVCCTL_RegisterSvcHandler+0x30>)
 800e30c:	7f1b      	ldrb	r3, [r3, #28]
 800e30e:	3301      	adds	r3, #1
 800e310:	b2da      	uxtb	r2, r3
 800e312:	4b04      	ldr	r3, [pc, #16]	@ (800e324 <SVCCTL_RegisterSvcHandler+0x30>)
 800e314:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800e316:	bf00      	nop
}
 800e318:	370c      	adds	r7, #12
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	20000168 	.word	0x20000168

0800e328 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3301      	adds	r3, #1
 800e334:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800e336:	2300      	movs	r3, #0
 800e338:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	2bff      	cmp	r3, #255	@ 0xff
 800e340:	d125      	bne.n	800e38e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	3302      	adds	r3, #2
 800e346:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e352:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e356:	d118      	bne.n	800e38a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e358:	2300      	movs	r3, #0
 800e35a:	757b      	strb	r3, [r7, #21]
 800e35c:	e00d      	b.n	800e37a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800e35e:	7d7b      	ldrb	r3, [r7, #21]
 800e360:	4a1a      	ldr	r2, [pc, #104]	@ (800e3cc <SVCCTL_UserEvtRx+0xa4>)
 800e362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	4798      	blx	r3
 800e36a:	4603      	mov	r3, r0
 800e36c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800e36e:	7dfb      	ldrb	r3, [r7, #23]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d108      	bne.n	800e386 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e374:	7d7b      	ldrb	r3, [r7, #21]
 800e376:	3301      	adds	r3, #1
 800e378:	757b      	strb	r3, [r7, #21]
 800e37a:	4b14      	ldr	r3, [pc, #80]	@ (800e3cc <SVCCTL_UserEvtRx+0xa4>)
 800e37c:	7f1b      	ldrb	r3, [r3, #28]
 800e37e:	7d7a      	ldrb	r2, [r7, #21]
 800e380:	429a      	cmp	r2, r3
 800e382:	d3ec      	bcc.n	800e35e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800e384:	e002      	b.n	800e38c <SVCCTL_UserEvtRx+0x64>
              break;
 800e386:	bf00      	nop
          break;
 800e388:	e000      	b.n	800e38c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800e38a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800e38c:	e000      	b.n	800e390 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800e38e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	2b02      	cmp	r3, #2
 800e394:	d00f      	beq.n	800e3b6 <SVCCTL_UserEvtRx+0x8e>
 800e396:	2b02      	cmp	r3, #2
 800e398:	dc10      	bgt.n	800e3bc <SVCCTL_UserEvtRx+0x94>
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d002      	beq.n	800e3a4 <SVCCTL_UserEvtRx+0x7c>
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d006      	beq.n	800e3b0 <SVCCTL_UserEvtRx+0x88>
 800e3a2:	e00b      	b.n	800e3bc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f001 fc65 	bl	800fc74 <SVCCTL_App_Notification>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	75bb      	strb	r3, [r7, #22]
      break;
 800e3ae:	e008      	b.n	800e3c2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	75bb      	strb	r3, [r7, #22]
      break;
 800e3b4:	e005      	b.n	800e3c2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	75bb      	strb	r3, [r7, #22]
      break;
 800e3ba:	e002      	b.n	800e3c2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	75bb      	strb	r3, [r7, #22]
      break;
 800e3c0:	bf00      	nop
  }

  return (return_status);
 800e3c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3718      	adds	r7, #24
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	20000168 	.word	0x20000168

0800e3d0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b088      	sub	sp, #32
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e3d8:	f107 030c 	add.w	r3, r7, #12
 800e3dc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	212e      	movs	r1, #46	@ 0x2e
 800e3e8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800e3ec:	f000 fae8 	bl	800e9c0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	330b      	adds	r3, #11
 800e3f4:	78db      	ldrb	r3, [r3, #3]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3720      	adds	r7, #32
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b088      	sub	sp, #32
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e406:	f107 030c 	add.w	r3, r7, #12
 800e40a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	210f      	movs	r1, #15
 800e416:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800e41a:	f000 fad1 	bl	800e9c0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	330b      	adds	r3, #11
 800e422:	78db      	ldrb	r3, [r3, #3]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3720      	adds	r7, #32
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b088      	sub	sp, #32
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e434:	f107 030c 	add.w	r3, r7, #12
 800e438:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	2110      	movs	r1, #16
 800e440:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800e444:	f000 fabc 	bl	800e9c0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	330b      	adds	r3, #11
 800e44c:	78db      	ldrb	r3, [r3, #3]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3720      	adds	r7, #32
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
	...

0800e458 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e458:	b480      	push	{r7}
 800e45a:	b08b      	sub	sp, #44	@ 0x2c
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e460:	2300      	movs	r3, #0
 800e462:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e464:	2300      	movs	r3, #0
 800e466:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e46c:	2300      	movs	r3, #0
 800e46e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e470:	2300      	movs	r3, #0
 800e472:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e474:	2300      	movs	r3, #0
 800e476:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e478:	2300      	movs	r3, #0
 800e47a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e47c:	2300      	movs	r3, #0
 800e47e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e480:	4b4a      	ldr	r3, [pc, #296]	@ (800e5ac <SHCI_GetWirelessFwInfo+0x154>)
 800e482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e484:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e488:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e492:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4a44      	ldr	r2, [pc, #272]	@ (800e5b0 <SHCI_GetWirelessFwInfo+0x158>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d10f      	bne.n	800e4c4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	699b      	ldr	r3, [r3, #24]
 800e4ae:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	69db      	ldr	r3, [r3, #28]
 800e4b4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	617b      	str	r3, [r7, #20]
 800e4c2:	e01a      	b.n	800e4fa <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	009b      	lsls	r3, r3, #2
 800e4c8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e4cc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e4d0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	695b      	ldr	r3, [r3, #20]
 800e4e0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fc:	0e1b      	lsrs	r3, r3, #24
 800e4fe:	b2da      	uxtb	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e506:	0c1b      	lsrs	r3, r3, #16
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e510:	0a1b      	lsrs	r3, r3, #8
 800e512:	b2da      	uxtb	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51a:	091b      	lsrs	r3, r3, #4
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	f003 030f 	and.w	r3, r3, #15
 800e522:	b2da      	uxtb	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	f003 030f 	and.w	r3, r3, #15
 800e530:	b2da      	uxtb	r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e536:	6a3b      	ldr	r3, [r7, #32]
 800e538:	0e1b      	lsrs	r3, r3, #24
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	0c1b      	lsrs	r3, r3, #16
 800e544:	b2da      	uxtb	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e54a:	6a3b      	ldr	r3, [r7, #32]
 800e54c:	0a1b      	lsrs	r3, r3, #8
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	b2da      	uxtb	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	0e1b      	lsrs	r3, r3, #24
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	0c1b      	lsrs	r3, r3, #16
 800e572:	b2da      	uxtb	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	0a1b      	lsrs	r3, r3, #8
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	0e1b      	lsrs	r3, r3, #24
 800e586:	b2da      	uxtb	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	0c1b      	lsrs	r3, r3, #16
 800e590:	b2da      	uxtb	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	b2da      	uxtb	r2, r3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e59e:	2300      	movs	r3, #0
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	372c      	adds	r7, #44	@ 0x2c
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	58004000 	.word	0x58004000
 800e5b0:	a94656b9 	.word	0xa94656b9

0800e5b4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	4a08      	ldr	r2, [pc, #32]	@ (800e5e4 <hci_init+0x30>)
 800e5c4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e5c6:	4a08      	ldr	r2, [pc, #32]	@ (800e5e8 <hci_init+0x34>)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e5cc:	4806      	ldr	r0, [pc, #24]	@ (800e5e8 <hci_init+0x34>)
 800e5ce:	f000 f979 	bl	800e8c4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f000 f8da 	bl	800e790 <TlInit>

  return;
 800e5dc:	bf00      	nop
}
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	20000878 	.word	0x20000878
 800e5e8:	20000850 	.word	0x20000850

0800e5ec <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e5f2:	4822      	ldr	r0, [pc, #136]	@ (800e67c <hci_user_evt_proc+0x90>)
 800e5f4:	f000 fdfa 	bl	800f1ec <LST_is_empty>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d12b      	bne.n	800e656 <hci_user_evt_proc+0x6a>
 800e5fe:	4b20      	ldr	r3, [pc, #128]	@ (800e680 <hci_user_evt_proc+0x94>)
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d027      	beq.n	800e656 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e606:	f107 030c 	add.w	r3, r7, #12
 800e60a:	4619      	mov	r1, r3
 800e60c:	481b      	ldr	r0, [pc, #108]	@ (800e67c <hci_user_evt_proc+0x90>)
 800e60e:	f000 fe7c 	bl	800f30a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e612:	4b1c      	ldr	r3, [pc, #112]	@ (800e684 <hci_user_evt_proc+0x98>)
 800e614:	69db      	ldr	r3, [r3, #28]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00c      	beq.n	800e634 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e61e:	2301      	movs	r3, #1
 800e620:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e622:	4b18      	ldr	r3, [pc, #96]	@ (800e684 <hci_user_evt_proc+0x98>)
 800e624:	69db      	ldr	r3, [r3, #28]
 800e626:	1d3a      	adds	r2, r7, #4
 800e628:	4610      	mov	r0, r2
 800e62a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e62c:	793a      	ldrb	r2, [r7, #4]
 800e62e:	4b14      	ldr	r3, [pc, #80]	@ (800e680 <hci_user_evt_proc+0x94>)
 800e630:	701a      	strb	r2, [r3, #0]
 800e632:	e002      	b.n	800e63a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e634:	4b12      	ldr	r3, [pc, #72]	@ (800e680 <hci_user_evt_proc+0x94>)
 800e636:	2201      	movs	r2, #1
 800e638:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e63a:	4b11      	ldr	r3, [pc, #68]	@ (800e680 <hci_user_evt_proc+0x94>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d004      	beq.n	800e64c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	4618      	mov	r0, r3
 800e646:	f000 fc0d 	bl	800ee64 <TL_MM_EvtDone>
 800e64a:	e004      	b.n	800e656 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4619      	mov	r1, r3
 800e650:	480a      	ldr	r0, [pc, #40]	@ (800e67c <hci_user_evt_proc+0x90>)
 800e652:	f000 fded 	bl	800f230 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e656:	4809      	ldr	r0, [pc, #36]	@ (800e67c <hci_user_evt_proc+0x90>)
 800e658:	f000 fdc8 	bl	800f1ec <LST_is_empty>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d107      	bne.n	800e672 <hci_user_evt_proc+0x86>
 800e662:	4b07      	ldr	r3, [pc, #28]	@ (800e680 <hci_user_evt_proc+0x94>)
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d003      	beq.n	800e672 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e66a:	4804      	ldr	r0, [pc, #16]	@ (800e67c <hci_user_evt_proc+0x90>)
 800e66c:	f002 f962 	bl	8010934 <hci_notify_asynch_evt>
  }


  return;
 800e670:	bf00      	nop
 800e672:	bf00      	nop
}
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000190 	.word	0x20000190
 800e680:	2000019c 	.word	0x2000019c
 800e684:	20000850 	.word	0x20000850

0800e688 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b088      	sub	sp, #32
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e694:	2000      	movs	r0, #0
 800e696:	f000 f8d1 	bl	800e83c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e69a:	2300      	movs	r3, #0
 800e69c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	885b      	ldrh	r3, [r3, #2]
 800e6a2:	b21b      	sxth	r3, r3
 800e6a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6a8:	b21a      	sxth	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	881b      	ldrh	r3, [r3, #0]
 800e6ae:	029b      	lsls	r3, r3, #10
 800e6b0:	b21b      	sxth	r3, r3
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	b21b      	sxth	r3, r3
 800e6b6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e6b8:	4b33      	ldr	r3, [pc, #204]	@ (800e788 <hci_send_req+0x100>)
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	b2d9      	uxtb	r1, r3
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	689a      	ldr	r2, [r3, #8]
 800e6c8:	8bbb      	ldrh	r3, [r7, #28]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f000 f890 	bl	800e7f0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e6d0:	e04e      	b.n	800e770 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e6d2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e6d6:	f002 f944 	bl	8010962 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e6da:	e043      	b.n	800e764 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e6dc:	f107 030c 	add.w	r3, r7, #12
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	482a      	ldr	r0, [pc, #168]	@ (800e78c <hci_send_req+0x104>)
 800e6e4:	f000 fe11 	bl	800f30a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	7a5b      	ldrb	r3, [r3, #9]
 800e6ec:	2b0f      	cmp	r3, #15
 800e6ee:	d114      	bne.n	800e71a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	330b      	adds	r3, #11
 800e6f4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	885b      	ldrh	r3, [r3, #2]
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	8bba      	ldrh	r2, [r7, #28]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d104      	bne.n	800e70c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	691b      	ldr	r3, [r3, #16]
 800e706:	693a      	ldr	r2, [r7, #16]
 800e708:	7812      	ldrb	r2, [r2, #0]
 800e70a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	785b      	ldrb	r3, [r3, #1]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d027      	beq.n	800e764 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e714:	2301      	movs	r3, #1
 800e716:	77fb      	strb	r3, [r7, #31]
 800e718:	e024      	b.n	800e764 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	330b      	adds	r3, #11
 800e71e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e726:	b29b      	uxth	r3, r3
 800e728:	8bba      	ldrh	r2, [r7, #28]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d114      	bne.n	800e758 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	7a9b      	ldrb	r3, [r3, #10]
 800e732:	3b03      	subs	r3, #3
 800e734:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	695a      	ldr	r2, [r3, #20]
 800e73a:	7dfb      	ldrb	r3, [r7, #23]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	bfa8      	it	ge
 800e740:	461a      	movge	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6918      	ldr	r0, [r3, #16]
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	1cd9      	adds	r1, r3, #3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	695b      	ldr	r3, [r3, #20]
 800e752:	461a      	mov	r2, r3
 800e754:	f003 fb1d 	bl	8011d92 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d001      	beq.n	800e764 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e760:	2301      	movs	r3, #1
 800e762:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e764:	4809      	ldr	r0, [pc, #36]	@ (800e78c <hci_send_req+0x104>)
 800e766:	f000 fd41 	bl	800f1ec <LST_is_empty>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d0b5      	beq.n	800e6dc <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e770:	7ffb      	ldrb	r3, [r7, #31]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0ad      	beq.n	800e6d2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e776:	2001      	movs	r0, #1
 800e778:	f000 f860 	bl	800e83c <NotifyCmdStatus>

  return 0;
 800e77c:	2300      	movs	r3, #0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3720      	adds	r7, #32
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	2000087c 	.word	0x2000087c
 800e78c:	20000870 	.word	0x20000870

0800e790 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b086      	sub	sp, #24
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e798:	480f      	ldr	r0, [pc, #60]	@ (800e7d8 <TlInit+0x48>)
 800e79a:	f000 fd17 	bl	800f1cc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e79e:	4a0f      	ldr	r2, [pc, #60]	@ (800e7dc <TlInit+0x4c>)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e7a4:	480e      	ldr	r0, [pc, #56]	@ (800e7e0 <TlInit+0x50>)
 800e7a6:	f000 fd11 	bl	800f1cc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e7aa:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e4 <TlInit+0x54>)
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e7b0:	4b0d      	ldr	r3, [pc, #52]	@ (800e7e8 <TlInit+0x58>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d00a      	beq.n	800e7ce <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800e7ec <TlInit+0x5c>)
 800e7be:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e7c0:	4b09      	ldr	r3, [pc, #36]	@ (800e7e8 <TlInit+0x58>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f107 0208 	add.w	r2, r7, #8
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	4798      	blx	r3
  }

  return;
 800e7cc:	bf00      	nop
 800e7ce:	bf00      	nop
}
 800e7d0:	3718      	adds	r7, #24
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20000870 	.word	0x20000870
 800e7dc:	20000198 	.word	0x20000198
 800e7e0:	20000190 	.word	0x20000190
 800e7e4:	2000019c 	.word	0x2000019c
 800e7e8:	20000850 	.word	0x20000850
 800e7ec:	0800e87d 	.word	0x0800e87d

0800e7f0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	603a      	str	r2, [r7, #0]
 800e7fa:	80fb      	strh	r3, [r7, #6]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e800:	4b0c      	ldr	r3, [pc, #48]	@ (800e834 <SendCmd+0x44>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	88fa      	ldrh	r2, [r7, #6]
 800e806:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e80a:	4b0a      	ldr	r3, [pc, #40]	@ (800e834 <SendCmd+0x44>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	797a      	ldrb	r2, [r7, #5]
 800e810:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e812:	4b08      	ldr	r3, [pc, #32]	@ (800e834 <SendCmd+0x44>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	330c      	adds	r3, #12
 800e818:	797a      	ldrb	r2, [r7, #5]
 800e81a:	6839      	ldr	r1, [r7, #0]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f003 fab8 	bl	8011d92 <memcpy>

  hciContext.io.Send(0,0);
 800e822:	4b05      	ldr	r3, [pc, #20]	@ (800e838 <SendCmd+0x48>)
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	2100      	movs	r1, #0
 800e828:	2000      	movs	r0, #0
 800e82a:	4798      	blx	r3

  return;
 800e82c:	bf00      	nop
}
 800e82e:	3708      	adds	r7, #8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	20000198 	.word	0x20000198
 800e838:	20000850 	.word	0x20000850

0800e83c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	4603      	mov	r3, r0
 800e844:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e846:	79fb      	ldrb	r3, [r7, #7]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d108      	bne.n	800e85e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e84c:	4b0a      	ldr	r3, [pc, #40]	@ (800e878 <NotifyCmdStatus+0x3c>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00d      	beq.n	800e870 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e854:	4b08      	ldr	r3, [pc, #32]	@ (800e878 <NotifyCmdStatus+0x3c>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2000      	movs	r0, #0
 800e85a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e85c:	e008      	b.n	800e870 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e85e:	4b06      	ldr	r3, [pc, #24]	@ (800e878 <NotifyCmdStatus+0x3c>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d004      	beq.n	800e870 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e866:	4b04      	ldr	r3, [pc, #16]	@ (800e878 <NotifyCmdStatus+0x3c>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2001      	movs	r0, #1
 800e86c:	4798      	blx	r3
  return;
 800e86e:	bf00      	nop
 800e870:	bf00      	nop
}
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	20000878 	.word	0x20000878

0800e87c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	7a5b      	ldrb	r3, [r3, #9]
 800e888:	2b0f      	cmp	r3, #15
 800e88a:	d003      	beq.n	800e894 <TlEvtReceived+0x18>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	7a5b      	ldrb	r3, [r3, #9]
 800e890:	2b0e      	cmp	r3, #14
 800e892:	d107      	bne.n	800e8a4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e894:	6879      	ldr	r1, [r7, #4]
 800e896:	4809      	ldr	r0, [pc, #36]	@ (800e8bc <TlEvtReceived+0x40>)
 800e898:	f000 fcf0 	bl	800f27c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e89c:	2000      	movs	r0, #0
 800e89e:	f002 f855 	bl	801094c <hci_cmd_resp_release>
 800e8a2:	e006      	b.n	800e8b2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e8a4:	6879      	ldr	r1, [r7, #4]
 800e8a6:	4806      	ldr	r0, [pc, #24]	@ (800e8c0 <TlEvtReceived+0x44>)
 800e8a8:	f000 fce8 	bl	800f27c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e8ac:	4804      	ldr	r0, [pc, #16]	@ (800e8c0 <TlEvtReceived+0x44>)
 800e8ae:	f002 f841 	bl	8010934 <hci_notify_asynch_evt>
  }

  return;
 800e8b2:	bf00      	nop
}
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20000870 	.word	0x20000870
 800e8c0:	20000190 	.word	0x20000190

0800e8c4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4a05      	ldr	r2, [pc, #20]	@ (800e8e4 <hci_register_io_bus+0x20>)
 800e8d0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	4a04      	ldr	r2, [pc, #16]	@ (800e8e8 <hci_register_io_bus+0x24>)
 800e8d6:	611a      	str	r2, [r3, #16]

  return;
 800e8d8:	bf00      	nop
}
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	0800ebdd 	.word	0x0800ebdd
 800e8e8:	0800ec45 	.word	0x0800ec45

0800e8ec <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	4a08      	ldr	r2, [pc, #32]	@ (800e91c <shci_init+0x30>)
 800e8fc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e8fe:	4a08      	ldr	r2, [pc, #32]	@ (800e920 <shci_init+0x34>)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e904:	4806      	ldr	r0, [pc, #24]	@ (800e920 <shci_init+0x34>)
 800e906:	f000 f915 	bl	800eb34 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4618      	mov	r0, r3
 800e910:	f000 f898 	bl	800ea44 <TlInit>

  return;
 800e914:	bf00      	nop
}
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	200008a0 	.word	0x200008a0
 800e920:	20000880 	.word	0x20000880

0800e924 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e92a:	4822      	ldr	r0, [pc, #136]	@ (800e9b4 <shci_user_evt_proc+0x90>)
 800e92c:	f000 fc5e 	bl	800f1ec <LST_is_empty>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d12b      	bne.n	800e98e <shci_user_evt_proc+0x6a>
 800e936:	4b20      	ldr	r3, [pc, #128]	@ (800e9b8 <shci_user_evt_proc+0x94>)
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d027      	beq.n	800e98e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e93e:	f107 030c 	add.w	r3, r7, #12
 800e942:	4619      	mov	r1, r3
 800e944:	481b      	ldr	r0, [pc, #108]	@ (800e9b4 <shci_user_evt_proc+0x90>)
 800e946:	f000 fce0 	bl	800f30a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e94a:	4b1c      	ldr	r3, [pc, #112]	@ (800e9bc <shci_user_evt_proc+0x98>)
 800e94c:	69db      	ldr	r3, [r3, #28]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00c      	beq.n	800e96c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e956:	2301      	movs	r3, #1
 800e958:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e95a:	4b18      	ldr	r3, [pc, #96]	@ (800e9bc <shci_user_evt_proc+0x98>)
 800e95c:	69db      	ldr	r3, [r3, #28]
 800e95e:	1d3a      	adds	r2, r7, #4
 800e960:	4610      	mov	r0, r2
 800e962:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e964:	793a      	ldrb	r2, [r7, #4]
 800e966:	4b14      	ldr	r3, [pc, #80]	@ (800e9b8 <shci_user_evt_proc+0x94>)
 800e968:	701a      	strb	r2, [r3, #0]
 800e96a:	e002      	b.n	800e972 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e96c:	4b12      	ldr	r3, [pc, #72]	@ (800e9b8 <shci_user_evt_proc+0x94>)
 800e96e:	2201      	movs	r2, #1
 800e970:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e972:	4b11      	ldr	r3, [pc, #68]	@ (800e9b8 <shci_user_evt_proc+0x94>)
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d004      	beq.n	800e984 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	4618      	mov	r0, r3
 800e97e:	f000 fa71 	bl	800ee64 <TL_MM_EvtDone>
 800e982:	e004      	b.n	800e98e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	4619      	mov	r1, r3
 800e988:	480a      	ldr	r0, [pc, #40]	@ (800e9b4 <shci_user_evt_proc+0x90>)
 800e98a:	f000 fc51 	bl	800f230 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e98e:	4809      	ldr	r0, [pc, #36]	@ (800e9b4 <shci_user_evt_proc+0x90>)
 800e990:	f000 fc2c 	bl	800f1ec <LST_is_empty>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d107      	bne.n	800e9aa <shci_user_evt_proc+0x86>
 800e99a:	4b07      	ldr	r3, [pc, #28]	@ (800e9b8 <shci_user_evt_proc+0x94>)
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e9a2:	4804      	ldr	r0, [pc, #16]	@ (800e9b4 <shci_user_evt_proc+0x90>)
 800e9a4:	f7f3 f883 	bl	8001aae <shci_notify_asynch_evt>
  }


  return;
 800e9a8:	bf00      	nop
 800e9aa:	bf00      	nop
}
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	200001a0 	.word	0x200001a0
 800e9b8:	200001b0 	.word	0x200001b0
 800e9bc:	20000880 	.word	0x20000880

0800e9c0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60ba      	str	r2, [r7, #8]
 800e9c8:	607b      	str	r3, [r7, #4]
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	81fb      	strh	r3, [r7, #14]
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	f000 f868 	bl	800eaa8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e9d8:	4b17      	ldr	r3, [pc, #92]	@ (800ea38 <shci_send+0x78>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	89fa      	ldrh	r2, [r7, #14]
 800e9de:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e9e2:	4b15      	ldr	r3, [pc, #84]	@ (800ea38 <shci_send+0x78>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	7b7a      	ldrb	r2, [r7, #13]
 800e9e8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e9ea:	4b13      	ldr	r3, [pc, #76]	@ (800ea38 <shci_send+0x78>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	330c      	adds	r3, #12
 800e9f0:	7b7a      	ldrb	r2, [r7, #13]
 800e9f2:	68b9      	ldr	r1, [r7, #8]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f003 f9cc 	bl	8011d92 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e9fa:	4b10      	ldr	r3, [pc, #64]	@ (800ea3c <shci_send+0x7c>)
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800ea00:	4b0f      	ldr	r3, [pc, #60]	@ (800ea40 <shci_send+0x80>)
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	2100      	movs	r1, #0
 800ea06:	2000      	movs	r0, #0
 800ea08:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800ea0a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800ea0e:	f7f3 f865 	bl	8001adc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f103 0008 	add.w	r0, r3, #8
 800ea18:	4b07      	ldr	r3, [pc, #28]	@ (800ea38 <shci_send+0x78>)
 800ea1a:	6819      	ldr	r1, [r3, #0]
 800ea1c:	4b06      	ldr	r3, [pc, #24]	@ (800ea38 <shci_send+0x78>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	789b      	ldrb	r3, [r3, #2]
 800ea22:	3303      	adds	r3, #3
 800ea24:	461a      	mov	r2, r3
 800ea26:	f003 f9b4 	bl	8011d92 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ea2a:	2001      	movs	r0, #1
 800ea2c:	f000 f83c 	bl	800eaa8 <Cmd_SetStatus>

  return;
 800ea30:	bf00      	nop
}
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	200001ac 	.word	0x200001ac
 800ea3c:	200008a4 	.word	0x200008a4
 800ea40:	20000880 	.word	0x20000880

0800ea44 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b086      	sub	sp, #24
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800ea4c:	4a10      	ldr	r2, [pc, #64]	@ (800ea90 <TlInit+0x4c>)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800ea52:	4810      	ldr	r0, [pc, #64]	@ (800ea94 <TlInit+0x50>)
 800ea54:	f000 fbba 	bl	800f1cc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ea58:	2001      	movs	r0, #1
 800ea5a:	f000 f825 	bl	800eaa8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ea5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ea98 <TlInit+0x54>)
 800ea60:	2201      	movs	r2, #1
 800ea62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800ea64:	4b0d      	ldr	r3, [pc, #52]	@ (800ea9c <TlInit+0x58>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00c      	beq.n	800ea86 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ea70:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa0 <TlInit+0x5c>)
 800ea72:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ea74:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa4 <TlInit+0x60>)
 800ea76:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800ea78:	4b08      	ldr	r3, [pc, #32]	@ (800ea9c <TlInit+0x58>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f107 020c 	add.w	r2, r7, #12
 800ea80:	4610      	mov	r0, r2
 800ea82:	4798      	blx	r3
  }

  return;
 800ea84:	bf00      	nop
 800ea86:	bf00      	nop
}
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	200001ac 	.word	0x200001ac
 800ea94:	200001a0 	.word	0x200001a0
 800ea98:	200001b0 	.word	0x200001b0
 800ea9c:	20000880 	.word	0x20000880
 800eaa0:	0800eaf9 	.word	0x0800eaf9
 800eaa4:	0800eb11 	.word	0x0800eb11

0800eaa8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	4603      	mov	r3, r0
 800eab0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800eab2:	79fb      	ldrb	r3, [r7, #7]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d10b      	bne.n	800ead0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800eab8:	4b0d      	ldr	r3, [pc, #52]	@ (800eaf0 <Cmd_SetStatus+0x48>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d003      	beq.n	800eac8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800eac0:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf0 <Cmd_SetStatus+0x48>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2000      	movs	r0, #0
 800eac6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800eac8:	4b0a      	ldr	r3, [pc, #40]	@ (800eaf4 <Cmd_SetStatus+0x4c>)
 800eaca:	2200      	movs	r2, #0
 800eacc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800eace:	e00b      	b.n	800eae8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ead0:	4b08      	ldr	r3, [pc, #32]	@ (800eaf4 <Cmd_SetStatus+0x4c>)
 800ead2:	2201      	movs	r2, #1
 800ead4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ead6:	4b06      	ldr	r3, [pc, #24]	@ (800eaf0 <Cmd_SetStatus+0x48>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d004      	beq.n	800eae8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800eade:	4b04      	ldr	r3, [pc, #16]	@ (800eaf0 <Cmd_SetStatus+0x48>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2001      	movs	r0, #1
 800eae4:	4798      	blx	r3
  return;
 800eae6:	bf00      	nop
 800eae8:	bf00      	nop
}
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	200008a0 	.word	0x200008a0
 800eaf4:	200001a8 	.word	0x200001a8

0800eaf8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800eb00:	2000      	movs	r0, #0
 800eb02:	f7f2 ffe0 	bl	8001ac6 <shci_cmd_resp_release>

  return;
 800eb06:	bf00      	nop
}
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
	...

0800eb10 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800eb18:	6879      	ldr	r1, [r7, #4]
 800eb1a:	4805      	ldr	r0, [pc, #20]	@ (800eb30 <TlUserEvtReceived+0x20>)
 800eb1c:	f000 fbae 	bl	800f27c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800eb20:	4803      	ldr	r0, [pc, #12]	@ (800eb30 <TlUserEvtReceived+0x20>)
 800eb22:	f7f2 ffc4 	bl	8001aae <shci_notify_asynch_evt>

  return;
 800eb26:	bf00      	nop
}
 800eb28:	3708      	adds	r7, #8
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	200001a0 	.word	0x200001a0

0800eb34 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a05      	ldr	r2, [pc, #20]	@ (800eb54 <shci_register_io_bus+0x20>)
 800eb40:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4a04      	ldr	r2, [pc, #16]	@ (800eb58 <shci_register_io_bus+0x24>)
 800eb46:	611a      	str	r2, [r3, #16]

  return;
 800eb48:	bf00      	nop
}
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	0800ecf1 	.word	0x0800ecf1
 800eb58:	0800ed45 	.word	0x0800ed45

0800eb5c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800eb60:	f002 fb26 	bl	80111b0 <HW_IPCC_Enable>

  return;
 800eb64:	bf00      	nop
}
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <TL_Init>:


void TL_Init( void )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800eb6c:	4b10      	ldr	r3, [pc, #64]	@ (800ebb0 <TL_Init+0x48>)
 800eb6e:	4a11      	ldr	r2, [pc, #68]	@ (800ebb4 <TL_Init+0x4c>)
 800eb70:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800eb72:	4b0f      	ldr	r3, [pc, #60]	@ (800ebb0 <TL_Init+0x48>)
 800eb74:	4a10      	ldr	r2, [pc, #64]	@ (800ebb8 <TL_Init+0x50>)
 800eb76:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800eb78:	4b0d      	ldr	r3, [pc, #52]	@ (800ebb0 <TL_Init+0x48>)
 800eb7a:	4a10      	ldr	r2, [pc, #64]	@ (800ebbc <TL_Init+0x54>)
 800eb7c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800eb7e:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb0 <TL_Init+0x48>)
 800eb80:	4a0f      	ldr	r2, [pc, #60]	@ (800ebc0 <TL_Init+0x58>)
 800eb82:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800eb84:	4b0a      	ldr	r3, [pc, #40]	@ (800ebb0 <TL_Init+0x48>)
 800eb86:	4a0f      	ldr	r2, [pc, #60]	@ (800ebc4 <TL_Init+0x5c>)
 800eb88:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800eb8a:	4b09      	ldr	r3, [pc, #36]	@ (800ebb0 <TL_Init+0x48>)
 800eb8c:	4a0e      	ldr	r2, [pc, #56]	@ (800ebc8 <TL_Init+0x60>)
 800eb8e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800eb90:	4b07      	ldr	r3, [pc, #28]	@ (800ebb0 <TL_Init+0x48>)
 800eb92:	4a0e      	ldr	r2, [pc, #56]	@ (800ebcc <TL_Init+0x64>)
 800eb94:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800eb96:	4b06      	ldr	r3, [pc, #24]	@ (800ebb0 <TL_Init+0x48>)
 800eb98:	4a0d      	ldr	r2, [pc, #52]	@ (800ebd0 <TL_Init+0x68>)
 800eb9a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800eb9c:	4b04      	ldr	r3, [pc, #16]	@ (800ebb0 <TL_Init+0x48>)
 800eb9e:	4a0d      	ldr	r2, [pc, #52]	@ (800ebd4 <TL_Init+0x6c>)
 800eba0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800eba2:	4b03      	ldr	r3, [pc, #12]	@ (800ebb0 <TL_Init+0x48>)
 800eba4:	4a0c      	ldr	r2, [pc, #48]	@ (800ebd8 <TL_Init+0x70>)
 800eba6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800eba8:	f002 fb16 	bl	80111d8 <HW_IPCC_Init>

  return;
 800ebac:	bf00      	nop
}
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	20030000 	.word	0x20030000
 800ebb4:	20030028 	.word	0x20030028
 800ebb8:	20030048 	.word	0x20030048
 800ebbc:	20030058 	.word	0x20030058
 800ebc0:	20030068 	.word	0x20030068
 800ebc4:	20030070 	.word	0x20030070
 800ebc8:	20030078 	.word	0x20030078
 800ebcc:	20030080 	.word	0x20030080
 800ebd0:	2003009c 	.word	0x2003009c
 800ebd4:	200300a0 	.word	0x200300a0
 800ebd8:	200300ac 	.word	0x200300ac

0800ebdc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ebe8:	4811      	ldr	r0, [pc, #68]	@ (800ec30 <TL_BLE_Init+0x54>)
 800ebea:	f000 faef 	bl	800f1cc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ebee:	4b11      	ldr	r3, [pc, #68]	@ (800ec34 <TL_BLE_Init+0x58>)
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	689a      	ldr	r2, [r3, #8]
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	68da      	ldr	r2, [r3, #12]
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	4a0c      	ldr	r2, [pc, #48]	@ (800ec38 <TL_BLE_Init+0x5c>)
 800ec08:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	4a08      	ldr	r2, [pc, #32]	@ (800ec30 <TL_BLE_Init+0x54>)
 800ec0e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ec10:	f002 faf8 	bl	8011204 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a08      	ldr	r2, [pc, #32]	@ (800ec3c <TL_BLE_Init+0x60>)
 800ec1a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	4a07      	ldr	r2, [pc, #28]	@ (800ec40 <TL_BLE_Init+0x64>)
 800ec22:	6013      	str	r3, [r2, #0]

  return 0;
 800ec24:	2300      	movs	r3, #0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	200300c8 	.word	0x200300c8
 800ec34:	20030000 	.word	0x20030000
 800ec38:	20030a58 	.word	0x20030a58
 800ec3c:	200008b0 	.word	0x200008b0
 800ec40:	200008b4 	.word	0x200008b4

0800ec44 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800ec50:	4b09      	ldr	r3, [pc, #36]	@ (800ec78 <TL_BLE_SendCmd+0x34>)
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2201      	movs	r2, #1
 800ec58:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800ec5a:	4b07      	ldr	r3, [pc, #28]	@ (800ec78 <TL_BLE_SendCmd+0x34>)
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4619      	mov	r1, r3
 800ec62:	2001      	movs	r0, #1
 800ec64:	f000 f96c 	bl	800ef40 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800ec68:	f002 fad6 	bl	8011218 <HW_IPCC_BLE_SendCmd>

  return 0;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3708      	adds	r7, #8
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20030000 	.word	0x20030000

0800ec7c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ec82:	e01c      	b.n	800ecbe <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ec84:	1d3b      	adds	r3, r7, #4
 800ec86:	4619      	mov	r1, r3
 800ec88:	4812      	ldr	r0, [pc, #72]	@ (800ecd4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ec8a:	f000 fb3e 	bl	800f30a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	7a5b      	ldrb	r3, [r3, #9]
 800ec92:	2b0f      	cmp	r3, #15
 800ec94:	d003      	beq.n	800ec9e <HW_IPCC_BLE_RxEvtNot+0x22>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	7a5b      	ldrb	r3, [r3, #9]
 800ec9a:	2b0e      	cmp	r3, #14
 800ec9c:	d105      	bne.n	800ecaa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4619      	mov	r1, r3
 800eca2:	2002      	movs	r0, #2
 800eca4:	f000 f94c 	bl	800ef40 <OutputDbgTrace>
 800eca8:	e004      	b.n	800ecb4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4619      	mov	r1, r3
 800ecae:	2003      	movs	r0, #3
 800ecb0:	f000 f946 	bl	800ef40 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ecb4:	4b08      	ldr	r3, [pc, #32]	@ (800ecd8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	4610      	mov	r0, r2
 800ecbc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ecbe:	4805      	ldr	r0, [pc, #20]	@ (800ecd4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ecc0:	f000 fa94 	bl	800f1ec <LST_is_empty>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d0dc      	beq.n	800ec84 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ecca:	bf00      	nop
}
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	200300c8 	.word	0x200300c8
 800ecd8:	200008b0 	.word	0x200008b0

0800ecdc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ece0:	4b02      	ldr	r3, [pc, #8]	@ (800ecec <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4798      	blx	r3

  return;
 800ece6:	bf00      	nop
}
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	200008b4 	.word	0x200008b4

0800ecf0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ecfc:	480d      	ldr	r0, [pc, #52]	@ (800ed34 <TL_SYS_Init+0x44>)
 800ecfe:	f000 fa65 	bl	800f1cc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ed02:	4b0d      	ldr	r3, [pc, #52]	@ (800ed38 <TL_SYS_Init+0x48>)
 800ed04:	68db      	ldr	r3, [r3, #12]
 800ed06:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	689a      	ldr	r2, [r3, #8]
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	4a08      	ldr	r2, [pc, #32]	@ (800ed34 <TL_SYS_Init+0x44>)
 800ed14:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ed16:	f002 faa1 	bl	801125c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	4a07      	ldr	r2, [pc, #28]	@ (800ed3c <TL_SYS_Init+0x4c>)
 800ed20:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	4a06      	ldr	r2, [pc, #24]	@ (800ed40 <TL_SYS_Init+0x50>)
 800ed28:	6013      	str	r3, [r2, #0]

  return 0;
 800ed2a:	2300      	movs	r3, #0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3710      	adds	r7, #16
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	200300d0 	.word	0x200300d0
 800ed38:	20030000 	.word	0x20030000
 800ed3c:	200008b8 	.word	0x200008b8
 800ed40:	200008bc 	.word	0x200008bc

0800ed44 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ed50:	4b09      	ldr	r3, [pc, #36]	@ (800ed78 <TL_SYS_SendCmd+0x34>)
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2210      	movs	r2, #16
 800ed58:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ed5a:	4b07      	ldr	r3, [pc, #28]	@ (800ed78 <TL_SYS_SendCmd+0x34>)
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4619      	mov	r1, r3
 800ed62:	2004      	movs	r0, #4
 800ed64:	f000 f8ec 	bl	800ef40 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ed68:	f002 fa82 	bl	8011270 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20030000 	.word	0x20030000

0800ed7c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ed80:	4b07      	ldr	r3, [pc, #28]	@ (800eda0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ed82:	68db      	ldr	r3, [r3, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4619      	mov	r1, r3
 800ed88:	2005      	movs	r0, #5
 800ed8a:	f000 f8d9 	bl	800ef40 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ed8e:	4b05      	ldr	r3, [pc, #20]	@ (800eda4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4a03      	ldr	r2, [pc, #12]	@ (800eda0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ed94:	68d2      	ldr	r2, [r2, #12]
 800ed96:	6812      	ldr	r2, [r2, #0]
 800ed98:	4610      	mov	r0, r2
 800ed9a:	4798      	blx	r3

  return;
 800ed9c:	bf00      	nop
}
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20030000 	.word	0x20030000
 800eda4:	200008b8 	.word	0x200008b8

0800eda8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800edae:	e00e      	b.n	800edce <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800edb0:	1d3b      	adds	r3, r7, #4
 800edb2:	4619      	mov	r1, r3
 800edb4:	480b      	ldr	r0, [pc, #44]	@ (800ede4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800edb6:	f000 faa8 	bl	800f30a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4619      	mov	r1, r3
 800edbe:	2006      	movs	r0, #6
 800edc0:	f000 f8be 	bl	800ef40 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800edc4:	4b08      	ldr	r3, [pc, #32]	@ (800ede8 <HW_IPCC_SYS_EvtNot+0x40>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	4610      	mov	r0, r2
 800edcc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800edce:	4805      	ldr	r0, [pc, #20]	@ (800ede4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800edd0:	f000 fa0c 	bl	800f1ec <LST_is_empty>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d0ea      	beq.n	800edb0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800edda:	bf00      	nop
}
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	200300d0 	.word	0x200300d0
 800ede8:	200008bc 	.word	0x200008bc

0800edec <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800edf4:	4817      	ldr	r0, [pc, #92]	@ (800ee54 <TL_MM_Init+0x68>)
 800edf6:	f000 f9e9 	bl	800f1cc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800edfa:	4817      	ldr	r0, [pc, #92]	@ (800ee58 <TL_MM_Init+0x6c>)
 800edfc:	f000 f9e6 	bl	800f1cc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ee00:	4b16      	ldr	r3, [pc, #88]	@ (800ee5c <TL_MM_Init+0x70>)
 800ee02:	691b      	ldr	r3, [r3, #16]
 800ee04:	4a16      	ldr	r2, [pc, #88]	@ (800ee60 <TL_MM_Init+0x74>)
 800ee06:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ee08:	4b15      	ldr	r3, [pc, #84]	@ (800ee60 <TL_MM_Init+0x74>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	6892      	ldr	r2, [r2, #8]
 800ee10:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ee12:	4b13      	ldr	r3, [pc, #76]	@ (800ee60 <TL_MM_Init+0x74>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	68d2      	ldr	r2, [r2, #12]
 800ee1a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ee1c:	4b10      	ldr	r3, [pc, #64]	@ (800ee60 <TL_MM_Init+0x74>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a0c      	ldr	r2, [pc, #48]	@ (800ee54 <TL_MM_Init+0x68>)
 800ee22:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ee24:	4b0e      	ldr	r3, [pc, #56]	@ (800ee60 <TL_MM_Init+0x74>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	6812      	ldr	r2, [r2, #0]
 800ee2c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ee2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ee60 <TL_MM_Init+0x74>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	6852      	ldr	r2, [r2, #4]
 800ee36:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ee38:	4b09      	ldr	r3, [pc, #36]	@ (800ee60 <TL_MM_Init+0x74>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	6912      	ldr	r2, [r2, #16]
 800ee40:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ee42:	4b07      	ldr	r3, [pc, #28]	@ (800ee60 <TL_MM_Init+0x74>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	6952      	ldr	r2, [r2, #20]
 800ee4a:	619a      	str	r2, [r3, #24]

  return;
 800ee4c:	bf00      	nop
}
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	200300b8 	.word	0x200300b8
 800ee58:	200008a8 	.word	0x200008a8
 800ee5c:	20030000 	.word	0x20030000
 800ee60:	200008c0 	.word	0x200008c0

0800ee64 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ee6c:	6879      	ldr	r1, [r7, #4]
 800ee6e:	4807      	ldr	r0, [pc, #28]	@ (800ee8c <TL_MM_EvtDone+0x28>)
 800ee70:	f000 fa04 	bl	800f27c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ee74:	6879      	ldr	r1, [r7, #4]
 800ee76:	2000      	movs	r0, #0
 800ee78:	f000 f862 	bl	800ef40 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ee7c:	4804      	ldr	r0, [pc, #16]	@ (800ee90 <TL_MM_EvtDone+0x2c>)
 800ee7e:	f002 fa1d 	bl	80112bc <HW_IPCC_MM_SendFreeBuf>

  return;
 800ee82:	bf00      	nop
}
 800ee84:	3708      	adds	r7, #8
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	200008a8 	.word	0x200008a8
 800ee90:	0800ee95 	.word	0x0800ee95

0800ee94 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ee9a:	e00c      	b.n	800eeb6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ee9c:	1d3b      	adds	r3, r7, #4
 800ee9e:	4619      	mov	r1, r3
 800eea0:	480a      	ldr	r0, [pc, #40]	@ (800eecc <SendFreeBuf+0x38>)
 800eea2:	f000 fa32 	bl	800f30a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800eea6:	4b0a      	ldr	r3, [pc, #40]	@ (800eed0 <SendFreeBuf+0x3c>)
 800eea8:	691b      	ldr	r3, [r3, #16]
 800eeaa:	691b      	ldr	r3, [r3, #16]
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	4611      	mov	r1, r2
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f000 f9e3 	bl	800f27c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eeb6:	4805      	ldr	r0, [pc, #20]	@ (800eecc <SendFreeBuf+0x38>)
 800eeb8:	f000 f998 	bl	800f1ec <LST_is_empty>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d0ec      	beq.n	800ee9c <SendFreeBuf+0x8>
  }

  return;
 800eec2:	bf00      	nop
}
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	200008a8 	.word	0x200008a8
 800eed0:	20030000 	.word	0x20030000

0800eed4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800eed8:	4805      	ldr	r0, [pc, #20]	@ (800eef0 <TL_TRACES_Init+0x1c>)
 800eeda:	f000 f977 	bl	800f1cc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800eede:	4b05      	ldr	r3, [pc, #20]	@ (800eef4 <TL_TRACES_Init+0x20>)
 800eee0:	695b      	ldr	r3, [r3, #20]
 800eee2:	4a03      	ldr	r2, [pc, #12]	@ (800eef0 <TL_TRACES_Init+0x1c>)
 800eee4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800eee6:	f002 fa1f 	bl	8011328 <HW_IPCC_TRACES_Init>

  return;
 800eeea:	bf00      	nop
}
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	200300c0 	.word	0x200300c0
 800eef4:	20030000 	.word	0x20030000

0800eef8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eefe:	e008      	b.n	800ef12 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ef00:	1d3b      	adds	r3, r7, #4
 800ef02:	4619      	mov	r1, r3
 800ef04:	4808      	ldr	r0, [pc, #32]	@ (800ef28 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ef06:	f000 fa00 	bl	800f30a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f000 f80d 	bl	800ef2c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ef12:	4805      	ldr	r0, [pc, #20]	@ (800ef28 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ef14:	f000 f96a 	bl	800f1ec <LST_is_empty>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d0f0      	beq.n	800ef00 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ef1e:	bf00      	nop
}
 800ef20:	3708      	adds	r7, #8
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	200300c0 	.word	0x200300c0

0800ef2c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ef34:	bf00      	nop
 800ef36:	370c      	adds	r7, #12
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b085      	sub	sp, #20
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	4603      	mov	r3, r0
 800ef48:	6039      	str	r1, [r7, #0]
 800ef4a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ef4c:	79fb      	ldrb	r3, [r7, #7]
 800ef4e:	2b06      	cmp	r3, #6
 800ef50:	d845      	bhi.n	800efde <OutputDbgTrace+0x9e>
 800ef52:	a201      	add	r2, pc, #4	@ (adr r2, 800ef58 <OutputDbgTrace+0x18>)
 800ef54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef58:	0800ef75 	.word	0x0800ef75
 800ef5c:	0800ef99 	.word	0x0800ef99
 800ef60:	0800ef9f 	.word	0x0800ef9f
 800ef64:	0800efb3 	.word	0x0800efb3
 800ef68:	0800efbf 	.word	0x0800efbf
 800ef6c:	0800efc5 	.word	0x0800efc5
 800ef70:	0800efd3 	.word	0x0800efd3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	7a5b      	ldrb	r3, [r3, #9]
 800ef7c:	2bff      	cmp	r3, #255	@ 0xff
 800ef7e:	d005      	beq.n	800ef8c <OutputDbgTrace+0x4c>
 800ef80:	2bff      	cmp	r3, #255	@ 0xff
 800ef82:	dc05      	bgt.n	800ef90 <OutputDbgTrace+0x50>
 800ef84:	2b0e      	cmp	r3, #14
 800ef86:	d005      	beq.n	800ef94 <OutputDbgTrace+0x54>
 800ef88:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ef8a:	e001      	b.n	800ef90 <OutputDbgTrace+0x50>
          break;
 800ef8c:	bf00      	nop
 800ef8e:	e027      	b.n	800efe0 <OutputDbgTrace+0xa0>
          break;
 800ef90:	bf00      	nop
 800ef92:	e025      	b.n	800efe0 <OutputDbgTrace+0xa0>
          break;
 800ef94:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ef96:	e023      	b.n	800efe0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ef9c:	e020      	b.n	800efe0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	7a5b      	ldrb	r3, [r3, #9]
 800efa6:	2b0e      	cmp	r3, #14
 800efa8:	d001      	beq.n	800efae <OutputDbgTrace+0x6e>
 800efaa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800efac:	e000      	b.n	800efb0 <OutputDbgTrace+0x70>
          break;
 800efae:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800efb0:	e016      	b.n	800efe0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	7a5b      	ldrb	r3, [r3, #9]
 800efba:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800efbc:	e010      	b.n	800efe0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800efc2:	e00d      	b.n	800efe0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	7a5b      	ldrb	r3, [r3, #9]
 800efcc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800efce:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800efd0:	e006      	b.n	800efe0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	7a5b      	ldrb	r3, [r3, #9]
 800efda:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800efdc:	e000      	b.n	800efe0 <OutputDbgTrace+0xa0>

    default:
      break;
 800efde:	bf00      	nop
  }

  return;
 800efe0:	bf00      	nop
}
 800efe2:	3714      	adds	r7, #20
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr

0800efec <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800eff8:	215c      	movs	r1, #92	@ 0x5c
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f002 fe40 	bl	8011c80 <strrchr>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d007      	beq.n	800f016 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800f006:	215c      	movs	r1, #92	@ 0x5c
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f002 fe39 	bl	8011c80 <strrchr>
 800f00e:	4603      	mov	r3, r0
 800f010:	3301      	adds	r3, #1
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	e00d      	b.n	800f032 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800f016:	212f      	movs	r1, #47	@ 0x2f
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f002 fe31 	bl	8011c80 <strrchr>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d006      	beq.n	800f032 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800f024:	212f      	movs	r1, #47	@ 0x2f
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f002 fe2a 	bl	8011c80 <strrchr>
 800f02c:	4603      	mov	r3, r0
 800f02e:	3301      	adds	r3, #1
 800f030:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f032:	68fb      	ldr	r3, [r7, #12]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f042:	f3ef 8310 	mrs	r3, PRIMASK
 800f046:	60fb      	str	r3, [r7, #12]
  return(result);
 800f048:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800f04a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f04c:	b672      	cpsid	i
}
 800f04e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800f050:	1cbb      	adds	r3, r7, #2
 800f052:	4619      	mov	r1, r3
 800f054:	4812      	ldr	r0, [pc, #72]	@ (800f0a0 <DbgTrace_TxCpltCallback+0x64>)
 800f056:	f000 fb9d 	bl	800f794 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800f05a:	1cbb      	adds	r3, r7, #2
 800f05c:	4619      	mov	r1, r3
 800f05e:	4810      	ldr	r0, [pc, #64]	@ (800f0a0 <DbgTrace_TxCpltCallback+0x64>)
 800f060:	f000 fc87 	bl	800f972 <CircularQueue_Sense>
 800f064:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00c      	beq.n	800f086 <DbgTrace_TxCpltCallback+0x4a>
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f383 8810 	msr	PRIMASK, r3
}
 800f076:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800f078:	887b      	ldrh	r3, [r7, #2]
 800f07a:	4a0a      	ldr	r2, [pc, #40]	@ (800f0a4 <DbgTrace_TxCpltCallback+0x68>)
 800f07c:	4619      	mov	r1, r3
 800f07e:	6938      	ldr	r0, [r7, #16]
 800f080:	f7f2 f876 	bl	8001170 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800f084:	e008      	b.n	800f098 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800f086:	4b08      	ldr	r3, [pc, #32]	@ (800f0a8 <DbgTrace_TxCpltCallback+0x6c>)
 800f088:	2201      	movs	r2, #1
 800f08a:	701a      	strb	r2, [r3, #0]
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f383 8810 	msr	PRIMASK, r3
}
 800f096:	bf00      	nop
}
 800f098:	bf00      	nop
 800f09a:	3718      	adds	r7, #24
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	200008c4 	.word	0x200008c4
 800f0a4:	0800f03d 	.word	0x0800f03d
 800f0a8:	200000e5 	.word	0x200000e5

0800f0ac <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	68b9      	ldr	r1, [r7, #8]
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f000 f805 	bl	800f0cc <DbgTraceWrite>
 800f0c2:	4603      	mov	r3, r0
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3710      	adds	r7, #16
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b08a      	sub	sp, #40	@ 0x28
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0dc:	f3ef 8310 	mrs	r3, PRIMASK
 800f0e0:	61bb      	str	r3, [r7, #24]
  return(result);
 800f0e2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800f0e4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ec:	d102      	bne.n	800f0f4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0f2:	e037      	b.n	800f164 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d006      	beq.n	800f108 <DbgTraceWrite+0x3c>
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b02      	cmp	r3, #2
 800f0fe:	d003      	beq.n	800f108 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800f100:	f04f 33ff 	mov.w	r3, #4294967295
 800f104:	627b      	str	r3, [r7, #36]	@ 0x24
 800f106:	e02d      	b.n	800f164 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d02a      	beq.n	800f164 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800f112:	b672      	cpsid	i
}
 800f114:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	b29a      	uxth	r2, r3
 800f11a:	2301      	movs	r3, #1
 800f11c:	68b9      	ldr	r1, [r7, #8]
 800f11e:	4814      	ldr	r0, [pc, #80]	@ (800f170 <DbgTraceWrite+0xa4>)
 800f120:	f000 f912 	bl	800f348 <CircularQueue_Add>
 800f124:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d015      	beq.n	800f158 <DbgTraceWrite+0x8c>
 800f12c:	4b11      	ldr	r3, [pc, #68]	@ (800f174 <DbgTraceWrite+0xa8>)
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	b2db      	uxtb	r3, r3
 800f132:	2b00      	cmp	r3, #0
 800f134:	d010      	beq.n	800f158 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800f136:	4b0f      	ldr	r3, [pc, #60]	@ (800f174 <DbgTraceWrite+0xa8>)
 800f138:	2200      	movs	r2, #0
 800f13a:	701a      	strb	r2, [r3, #0]
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	f383 8810 	msr	PRIMASK, r3
}
 800f146:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	4a0a      	ldr	r2, [pc, #40]	@ (800f178 <DbgTraceWrite+0xac>)
 800f14e:	4619      	mov	r1, r3
 800f150:	69f8      	ldr	r0, [r7, #28]
 800f152:	f7f2 f80d 	bl	8001170 <DbgOutputTraces>
 800f156:	e005      	b.n	800f164 <DbgTraceWrite+0x98>
 800f158:	6a3b      	ldr	r3, [r7, #32]
 800f15a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	f383 8810 	msr	PRIMASK, r3
}
 800f162:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800f164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f166:	4618      	mov	r0, r3
 800f168:	3728      	adds	r7, #40	@ 0x28
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	200008c4 	.word	0x200008c4
 800f174:	200000e5 	.word	0x200000e5
 800f178:	0800f03d 	.word	0x0800f03d

0800f17c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	4603      	mov	r3, r0
 800f184:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800f186:	4b0f      	ldr	r3, [pc, #60]	@ (800f1c4 <OTP_Read+0x48>)
 800f188:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800f18a:	e002      	b.n	800f192 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	3b08      	subs	r3, #8
 800f190:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	3307      	adds	r3, #7
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	79fa      	ldrb	r2, [r7, #7]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d003      	beq.n	800f1a6 <OTP_Read+0x2a>
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	4a09      	ldr	r2, [pc, #36]	@ (800f1c8 <OTP_Read+0x4c>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d1f2      	bne.n	800f18c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	3307      	adds	r3, #7
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	79fa      	ldrb	r2, [r7, #7]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d001      	beq.n	800f1b6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3714      	adds	r7, #20
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	1fff73f8 	.word	0x1fff73f8
 800f1c8:	1fff7000 	.word	0x1fff7000

0800f1cc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	605a      	str	r2, [r3, #4]
}
 800f1e0:	bf00      	nop
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b087      	sub	sp, #28
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1f4:	f3ef 8310 	mrs	r3, PRIMASK
 800f1f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f1fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f1fe:	b672      	cpsid	i
}
 800f200:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	429a      	cmp	r2, r3
 800f20a:	d102      	bne.n	800f212 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800f20c:	2301      	movs	r3, #1
 800f20e:	75fb      	strb	r3, [r7, #23]
 800f210:	e001      	b.n	800f216 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800f212:	2300      	movs	r3, #0
 800f214:	75fb      	strb	r3, [r7, #23]
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	f383 8810 	msr	PRIMASK, r3
}
 800f220:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800f222:	7dfb      	ldrb	r3, [r7, #23]
}
 800f224:	4618      	mov	r0, r3
 800f226:	371c      	adds	r7, #28
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800f230:	b480      	push	{r7}
 800f232:	b087      	sub	sp, #28
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f23a:	f3ef 8310 	mrs	r3, PRIMASK
 800f23e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f240:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f244:	b672      	cpsid	i
}
 800f246:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	683a      	ldr	r2, [r7, #0]
 800f25a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	683a      	ldr	r2, [r7, #0]
 800f262:	605a      	str	r2, [r3, #4]
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	f383 8810 	msr	PRIMASK, r3
}
 800f26e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f270:	bf00      	nop
 800f272:	371c      	adds	r7, #28
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b087      	sub	sp, #28
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f286:	f3ef 8310 	mrs	r3, PRIMASK
 800f28a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f28c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f28e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f290:	b672      	cpsid	i
}
 800f292:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	687a      	ldr	r2, [r7, #4]
 800f298:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	685a      	ldr	r2, [r3, #4]
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	683a      	ldr	r2, [r7, #0]
 800f2a6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	683a      	ldr	r2, [r7, #0]
 800f2ae:	601a      	str	r2, [r3, #0]
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	f383 8810 	msr	PRIMASK, r3
}
 800f2ba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f2bc:	bf00      	nop
 800f2be:	371c      	adds	r7, #28
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b087      	sub	sp, #28
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2d0:	f3ef 8310 	mrs	r3, PRIMASK
 800f2d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f2d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2da:	b672      	cpsid	i
}
 800f2dc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	6812      	ldr	r2, [r2, #0]
 800f2e6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	6852      	ldr	r2, [r2, #4]
 800f2f0:	605a      	str	r2, [r3, #4]
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	f383 8810 	msr	PRIMASK, r3
}
 800f2fc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f2fe:	bf00      	nop
 800f300:	371c      	adds	r7, #28
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b086      	sub	sp, #24
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
 800f312:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f314:	f3ef 8310 	mrs	r3, PRIMASK
 800f318:	60fb      	str	r3, [r7, #12]
  return(result);
 800f31a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f31c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f31e:	b672      	cpsid	i
}
 800f320:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4618      	mov	r0, r3
 800f330:	f7ff ffca 	bl	800f2c8 <LST_remove_node>
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	f383 8810 	msr	PRIMASK, r3
}
 800f33e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f340:	bf00      	nop
 800f342:	3718      	adds	r7, #24
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b08e      	sub	sp, #56	@ 0x38
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	603b      	str	r3, [r7, #0]
 800f354:	4613      	mov	r3, r2
 800f356:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800f358:	2300      	movs	r3, #0
 800f35a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800f35c:	2300      	movs	r3, #0
 800f35e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800f360:	2300      	movs	r3, #0
 800f362:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800f364:	2300      	movs	r3, #0
 800f366:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f368:	2300      	movs	r3, #0
 800f36a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800f36c:	2300      	movs	r3, #0
 800f36e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800f370:	2300      	movs	r3, #0
 800f372:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	891b      	ldrh	r3, [r3, #8]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d101      	bne.n	800f380 <CircularQueue_Add+0x38>
 800f37c:	2302      	movs	r3, #2
 800f37e:	e000      	b.n	800f382 <CircularQueue_Add+0x3a>
 800f380:	2300      	movs	r3, #0
 800f382:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	695b      	ldr	r3, [r3, #20]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d029      	beq.n	800f3e0 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	891b      	ldrh	r3, [r3, #8]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d122      	bne.n	800f3da <CircularQueue_Add+0x92>
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	691b      	ldr	r3, [r3, #16]
 800f39c:	4413      	add	r3, r2
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681a      	ldr	r2, [r3, #0]
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	1c59      	adds	r1, r3, #1
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	4299      	cmp	r1, r3
 800f3b2:	d306      	bcc.n	800f3c2 <CircularQueue_Add+0x7a>
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	6919      	ldr	r1, [r3, #16]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	1acb      	subs	r3, r1, r3
 800f3be:	3301      	adds	r3, #1
 800f3c0:	e002      	b.n	800f3c8 <CircularQueue_Add+0x80>
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	691b      	ldr	r3, [r3, #16]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	4413      	add	r3, r2
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	021b      	lsls	r3, r3, #8
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	4403      	add	r3, r0
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	3302      	adds	r3, #2
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	e001      	b.n	800f3de <CircularQueue_Add+0x96>
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	891b      	ldrh	r3, [r3, #8]
 800f3de:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	891b      	ldrh	r3, [r3, #8]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d002      	beq.n	800f3ee <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	891b      	ldrh	r3, [r3, #8]
 800f3ec:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	691a      	ldr	r2, [r3, #16]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d307      	bcc.n	800f40a <CircularQueue_Add+0xc2>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	685a      	ldr	r2, [r3, #4]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6919      	ldr	r1, [r3, #16]
 800f402:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f404:	440b      	add	r3, r1
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	e000      	b.n	800f40c <CircularQueue_Add+0xc4>
 800f40a:	2300      	movs	r3, #0
 800f40c:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800f40e:	88fa      	ldrh	r2, [r7, #6]
 800f410:	7ffb      	ldrb	r3, [r7, #31]
 800f412:	4413      	add	r3, r2
 800f414:	461a      	mov	r2, r3
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	fb02 f303 	mul.w	r3, r2, r3
 800f41c:	69ba      	ldr	r2, [r7, #24]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d80b      	bhi.n	800f43a <CircularQueue_Add+0xf2>
 800f422:	88fa      	ldrh	r2, [r7, #6]
 800f424:	7ffb      	ldrb	r3, [r7, #31]
 800f426:	4413      	add	r3, r2
 800f428:	461a      	mov	r2, r3
 800f42a:	69bb      	ldr	r3, [r7, #24]
 800f42c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f430:	fb01 f202 	mul.w	r2, r1, r2
 800f434:	1a9b      	subs	r3, r3, r2
 800f436:	b2db      	uxtb	r3, r3
 800f438:	e000      	b.n	800f43c <CircularQueue_Add+0xf4>
 800f43a:	2300      	movs	r3, #0
 800f43c:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800f43e:	7dfa      	ldrb	r2, [r7, #23]
 800f440:	7ffb      	ldrb	r3, [r7, #31]
 800f442:	429a      	cmp	r2, r3
 800f444:	bf8c      	ite	hi
 800f446:	2301      	movhi	r3, #1
 800f448:	2300      	movls	r3, #0
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800f44e:	7fbb      	ldrb	r3, [r7, #30]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d008      	beq.n	800f466 <CircularQueue_Add+0x11e>
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	7f1b      	ldrb	r3, [r3, #28]
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d002      	beq.n	800f466 <CircularQueue_Add+0x11e>
 800f460:	7dfb      	ldrb	r3, [r7, #23]
 800f462:	b29b      	uxth	r3, r3
 800f464:	e000      	b.n	800f468 <CircularQueue_Add+0x120>
 800f466:	8bbb      	ldrh	r3, [r7, #28]
 800f468:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800f46a:	7fbb      	ldrb	r3, [r7, #30]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d008      	beq.n	800f482 <CircularQueue_Add+0x13a>
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	7f1b      	ldrb	r3, [r3, #28]
 800f474:	f003 0302 	and.w	r3, r3, #2
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d002      	beq.n	800f482 <CircularQueue_Add+0x13a>
 800f47c:	7ffb      	ldrb	r3, [r7, #31]
 800f47e:	b29b      	uxth	r3, r3
 800f480:	e000      	b.n	800f484 <CircularQueue_Add+0x13c>
 800f482:	8bbb      	ldrh	r3, [r7, #28]
 800f484:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800f486:	88fb      	ldrh	r3, [r7, #6]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f000 817e 	beq.w	800f78a <CircularQueue_Add+0x442>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	695a      	ldr	r2, [r3, #20]
 800f492:	88f9      	ldrh	r1, [r7, #6]
 800f494:	7ffb      	ldrb	r3, [r7, #31]
 800f496:	440b      	add	r3, r1
 800f498:	4619      	mov	r1, r3
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	fb01 f303 	mul.w	r3, r1, r3
 800f4a0:	441a      	add	r2, r3
 800f4a2:	8bbb      	ldrh	r3, [r7, #28]
 800f4a4:	441a      	add	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	f200 816d 	bhi.w	800f78a <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f4b4:	e14a      	b.n	800f74c <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	691a      	ldr	r2, [r3, #16]
 800f4ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f4bc:	441a      	add	r2, r3
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d307      	bcc.n	800f4d6 <CircularQueue_Add+0x18e>
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	691a      	ldr	r2, [r3, #16]
 800f4ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f4cc:	441a      	add	r2, r3
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	1ad3      	subs	r3, r2, r3
 800f4d4:	e003      	b.n	800f4de <CircularQueue_Add+0x196>
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	691a      	ldr	r2, [r3, #16]
 800f4da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f4dc:	4413      	add	r3, r2
 800f4de:	68fa      	ldr	r2, [r7, #12]
 800f4e0:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	691b      	ldr	r3, [r3, #16]
 800f4e6:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	891b      	ldrh	r3, [r3, #8]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d130      	bne.n	800f552 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f6:	1c59      	adds	r1, r3, #1
 800f4f8:	6339      	str	r1, [r7, #48]	@ 0x30
 800f4fa:	4413      	add	r3, r2
 800f4fc:	88fa      	ldrh	r2, [r7, #6]
 800f4fe:	b2d2      	uxtb	r2, r2
 800f500:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f508:	429a      	cmp	r2, r3
 800f50a:	d304      	bcc.n	800f516 <CircularQueue_Add+0x1ce>
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f512:	1ad3      	subs	r3, r2, r3
 800f514:	e000      	b.n	800f518 <CircularQueue_Add+0x1d0>
 800f516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f518:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800f51a:	88fb      	ldrh	r3, [r7, #6]
 800f51c:	0a1b      	lsrs	r3, r3, #8
 800f51e:	b298      	uxth	r0, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f526:	1c59      	adds	r1, r3, #1
 800f528:	6339      	str	r1, [r7, #48]	@ 0x30
 800f52a:	4413      	add	r3, r2
 800f52c:	b2c2      	uxtb	r2, r0
 800f52e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f536:	429a      	cmp	r2, r3
 800f538:	d304      	bcc.n	800f544 <CircularQueue_Add+0x1fc>
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	e000      	b.n	800f546 <CircularQueue_Add+0x1fe>
 800f544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f546:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	695b      	ldr	r3, [r3, #20]
 800f54c:	1c9a      	adds	r2, r3, #2
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800f552:	88fa      	ldrh	r2, [r7, #6]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	6859      	ldr	r1, [r3, #4]
 800f558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f55a:	1acb      	subs	r3, r1, r3
 800f55c:	4293      	cmp	r3, r2
 800f55e:	bf28      	it	cs
 800f560:	4613      	movcs	r3, r2
 800f562:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800f564:	88fb      	ldrh	r3, [r7, #6]
 800f566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f568:	429a      	cmp	r2, r3
 800f56a:	d007      	beq.n	800f57c <CircularQueue_Add+0x234>
 800f56c:	88fb      	ldrh	r3, [r7, #6]
 800f56e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f570:	429a      	cmp	r2, r3
 800f572:	d225      	bcs.n	800f5c0 <CircularQueue_Add+0x278>
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	7f1b      	ldrb	r3, [r3, #28]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d121      	bne.n	800f5c0 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f582:	18d0      	adds	r0, r2, r3
 800f584:	88fb      	ldrh	r3, [r7, #6]
 800f586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f588:	fb02 f303 	mul.w	r3, r2, r3
 800f58c:	68ba      	ldr	r2, [r7, #8]
 800f58e:	4413      	add	r3, r2
 800f590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f592:	4619      	mov	r1, r3
 800f594:	f002 fbfd 	bl	8011d92 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	695a      	ldr	r2, [r3, #20]
 800f59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f59e:	441a      	add	r2, r3
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800f5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5aa:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800f5ac:	88fa      	ldrh	r2, [r7, #6]
 800f5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800f5b4:	7ffb      	ldrb	r3, [r7, #31]
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	88fb      	ldrh	r3, [r7, #6]
 800f5ba:	4413      	add	r3, r2
 800f5bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f5be:	e0a4      	b.n	800f70a <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800f5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f000 80a1 	beq.w	800f70a <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	7f1b      	ldrb	r3, [r3, #28]
 800f5cc:	f003 0301 	and.w	r3, r3, #1
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d03a      	beq.n	800f64a <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	891b      	ldrh	r3, [r3, #8]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d10d      	bne.n	800f5f8 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e2:	3b02      	subs	r3, #2
 800f5e4:	4413      	add	r3, r2
 800f5e6:	22ff      	movs	r2, #255	@ 0xff
 800f5e8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f0:	3b01      	subs	r3, #1
 800f5f2:	4413      	add	r3, r2
 800f5f4:	22ff      	movs	r2, #255	@ 0xff
 800f5f6:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	695a      	ldr	r2, [r3, #20]
 800f5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fe:	441a      	add	r2, r3
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800f604:	2300      	movs	r3, #0
 800f606:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800f608:	88fb      	ldrh	r3, [r7, #6]
 800f60a:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800f60c:	2300      	movs	r3, #0
 800f60e:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	891b      	ldrh	r3, [r3, #8]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d16f      	bne.n	800f6f8 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f61e:	1c59      	adds	r1, r3, #1
 800f620:	6339      	str	r1, [r7, #48]	@ 0x30
 800f622:	4413      	add	r3, r2
 800f624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f626:	b2d2      	uxtb	r2, r2
 800f628:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f62c:	0a18      	lsrs	r0, r3, #8
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f634:	1c59      	adds	r1, r3, #1
 800f636:	6339      	str	r1, [r7, #48]	@ 0x30
 800f638:	4413      	add	r3, r2
 800f63a:	b2c2      	uxtb	r2, r0
 800f63c:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	695b      	ldr	r3, [r3, #20]
 800f642:	1c9a      	adds	r2, r3, #2
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	615a      	str	r2, [r3, #20]
 800f648:	e056      	b.n	800f6f8 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	7f1b      	ldrb	r3, [r3, #28]
 800f64e:	f003 0302 	and.w	r3, r3, #2
 800f652:	2b00      	cmp	r3, #0
 800f654:	d050      	beq.n	800f6f8 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	891b      	ldrh	r3, [r3, #8]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d14a      	bne.n	800f6f4 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f664:	3b02      	subs	r3, #2
 800f666:	4413      	add	r3, r2
 800f668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f66a:	b2d2      	uxtb	r2, r2
 800f66c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f670:	0a19      	lsrs	r1, r3, #8
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f678:	3b01      	subs	r3, #1
 800f67a:	4413      	add	r3, r2
 800f67c:	b2ca      	uxtb	r2, r1
 800f67e:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f686:	18d0      	adds	r0, r2, r3
 800f688:	88fb      	ldrh	r3, [r7, #6]
 800f68a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f68c:	fb02 f303 	mul.w	r3, r2, r3
 800f690:	68ba      	ldr	r2, [r7, #8]
 800f692:	4413      	add	r3, r2
 800f694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f696:	4619      	mov	r1, r3
 800f698:	f002 fb7b 	bl	8011d92 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	695a      	ldr	r2, [r3, #20]
 800f6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6a2:	441a      	add	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800f6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6aa:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800f6ac:	88fa      	ldrh	r2, [r7, #6]
 800f6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b0:	1ad3      	subs	r3, r2, r3
 800f6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	699b      	ldr	r3, [r3, #24]
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800f6be:	2300      	movs	r3, #0
 800f6c0:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c8:	1c59      	adds	r1, r3, #1
 800f6ca:	6339      	str	r1, [r7, #48]	@ 0x30
 800f6cc:	4413      	add	r3, r2
 800f6ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6d0:	b2d2      	uxtb	r2, r2
 800f6d2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d6:	0a18      	lsrs	r0, r3, #8
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6de:	1c59      	adds	r1, r3, #1
 800f6e0:	6339      	str	r1, [r7, #48]	@ 0x30
 800f6e2:	4413      	add	r3, r2
 800f6e4:	b2c2      	uxtb	r2, r0
 800f6e6:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	695b      	ldr	r3, [r3, #20]
 800f6ec:	1c9a      	adds	r2, r3, #2
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	615a      	str	r2, [r3, #20]
 800f6f2:	e001      	b.n	800f6f8 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	e049      	b.n	800f78c <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800f6f8:	7ffb      	ldrb	r3, [r7, #31]
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	4413      	add	r3, r2
 800f702:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2200      	movs	r2, #0
 800f708:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800f70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d015      	beq.n	800f73c <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f716:	18d0      	adds	r0, r2, r3
 800f718:	88fb      	ldrh	r3, [r7, #6]
 800f71a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f71c:	fb03 f202 	mul.w	r2, r3, r2
 800f720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f722:	4413      	add	r3, r2
 800f724:	68ba      	ldr	r2, [r7, #8]
 800f726:	4413      	add	r3, r2
 800f728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f72a:	4619      	mov	r1, r3
 800f72c:	f002 fb31 	bl	8011d92 <memcpy>
        q->byteCount += NbBytesToCopy;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	695a      	ldr	r2, [r3, #20]
 800f734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f736:	441a      	add	r2, r3
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	699b      	ldr	r3, [r3, #24]
 800f740:	1c5a      	adds	r2, r3, #1
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800f746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f748:	3301      	adds	r3, #1
 800f74a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f74c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	429a      	cmp	r2, r3
 800f752:	f4ff aeb0 	bcc.w	800f4b6 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6919      	ldr	r1, [r3, #16]
 800f75e:	7ffb      	ldrb	r3, [r7, #31]
 800f760:	4419      	add	r1, r3
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	4299      	cmp	r1, r3
 800f768:	d307      	bcc.n	800f77a <CircularQueue_Add+0x432>
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6919      	ldr	r1, [r3, #16]
 800f76e:	7ffb      	ldrb	r3, [r7, #31]
 800f770:	4419      	add	r1, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	1acb      	subs	r3, r1, r3
 800f778:	e003      	b.n	800f782 <CircularQueue_Add+0x43a>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6919      	ldr	r1, [r3, #16]
 800f77e:	7ffb      	ldrb	r3, [r7, #31]
 800f780:	440b      	add	r3, r1
 800f782:	4413      	add	r3, r2
 800f784:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800f786:	6a3b      	ldr	r3, [r7, #32]
 800f788:	e000      	b.n	800f78c <CircularQueue_Add+0x444>
    return NULL;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3738      	adds	r7, #56	@ 0x38
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	891b      	ldrh	r3, [r3, #8]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d101      	bne.n	800f7b2 <CircularQueue_Remove+0x1e>
 800f7ae:	2302      	movs	r3, #2
 800f7b0:	e000      	b.n	800f7b4 <CircularQueue_Remove+0x20>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	695b      	ldr	r3, [r3, #20]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f000 80ca 	beq.w	800f958 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	891b      	ldrh	r3, [r3, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d120      	bne.n	800f80e <CircularQueue_Remove+0x7a>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	68db      	ldr	r3, [r3, #12]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681a      	ldr	r2, [r3, #0]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	1c59      	adds	r1, r3, #1
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	4299      	cmp	r1, r3
 800f7ea:	d306      	bcc.n	800f7fa <CircularQueue_Remove+0x66>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	68d9      	ldr	r1, [r3, #12]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	1acb      	subs	r3, r1, r3
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	e002      	b.n	800f800 <CircularQueue_Remove+0x6c>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	68db      	ldr	r3, [r3, #12]
 800f7fe:	3301      	adds	r3, #1
 800f800:	4413      	add	r3, r2
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	021b      	lsls	r3, r3, #8
 800f806:	b29b      	uxth	r3, r3
 800f808:	4403      	add	r3, r0
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	e001      	b.n	800f812 <CircularQueue_Remove+0x7e>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	891b      	ldrh	r3, [r3, #8]
 800f812:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	7f1b      	ldrb	r3, [r3, #28]
 800f818:	f003 0301 	and.w	r3, r3, #1
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d056      	beq.n	800f8ce <CircularQueue_Remove+0x13a>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	7f1b      	ldrb	r3, [r3, #28]
 800f824:	f003 0302 	and.w	r3, r3, #2
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d150      	bne.n	800f8ce <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800f82c:	897b      	ldrh	r3, [r7, #10]
 800f82e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f832:	4293      	cmp	r3, r2
 800f834:	d103      	bne.n	800f83e <CircularQueue_Remove+0xaa>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	891b      	ldrh	r3, [r3, #8]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d012      	beq.n	800f864 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68da      	ldr	r2, [r3, #12]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800f846:	429a      	cmp	r2, r3
 800f848:	d941      	bls.n	800f8ce <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	891b      	ldrh	r3, [r3, #8]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d03d      	beq.n	800f8ce <CircularQueue_Remove+0x13a>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	685a      	ldr	r2, [r3, #4]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	1ad3      	subs	r3, r2, r3
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	8912      	ldrh	r2, [r2, #8]
 800f860:	4293      	cmp	r3, r2
 800f862:	d234      	bcs.n	800f8ce <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	695a      	ldr	r2, [r3, #20]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	68d9      	ldr	r1, [r3, #12]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	1acb      	subs	r3, r1, r3
 800f872:	441a      	add	r2, r3
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	891b      	ldrh	r3, [r3, #8]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d120      	bne.n	800f8c8 <CircularQueue_Remove+0x134>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	4413      	add	r3, r2
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	4618      	mov	r0, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	1c59      	adds	r1, r3, #1
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	4299      	cmp	r1, r3
 800f8a4:	d306      	bcc.n	800f8b4 <CircularQueue_Remove+0x120>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68d9      	ldr	r1, [r3, #12]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	1acb      	subs	r3, r1, r3
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	e002      	b.n	800f8ba <CircularQueue_Remove+0x126>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	4413      	add	r3, r2
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	021b      	lsls	r3, r3, #8
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	4403      	add	r3, r0
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	e001      	b.n	800f8cc <CircularQueue_Remove+0x138>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	891b      	ldrh	r3, [r3, #8]
 800f8cc:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	68d9      	ldr	r1, [r3, #12]
 800f8d6:	7a7b      	ldrb	r3, [r7, #9]
 800f8d8:	4419      	add	r1, r3
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	4299      	cmp	r1, r3
 800f8e0:	d307      	bcc.n	800f8f2 <CircularQueue_Remove+0x15e>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	68d9      	ldr	r1, [r3, #12]
 800f8e6:	7a7b      	ldrb	r3, [r7, #9]
 800f8e8:	4419      	add	r1, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	1acb      	subs	r3, r1, r3
 800f8f0:	e003      	b.n	800f8fa <CircularQueue_Remove+0x166>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	68d9      	ldr	r1, [r3, #12]
 800f8f6:	7a7b      	ldrb	r3, [r7, #9]
 800f8f8:	440b      	add	r3, r1
 800f8fa:	4413      	add	r3, r2
 800f8fc:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	695b      	ldr	r3, [r3, #20]
 800f902:	8979      	ldrh	r1, [r7, #10]
 800f904:	7a7a      	ldrb	r2, [r7, #9]
 800f906:	440a      	add	r2, r1
 800f908:	1a9a      	subs	r2, r3, r2
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	695b      	ldr	r3, [r3, #20]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d01b      	beq.n	800f94e <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	68da      	ldr	r2, [r3, #12]
 800f91a:	897b      	ldrh	r3, [r7, #10]
 800f91c:	441a      	add	r2, r3
 800f91e:	7a7b      	ldrb	r3, [r7, #9]
 800f920:	441a      	add	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	429a      	cmp	r2, r3
 800f928:	d309      	bcc.n	800f93e <CircularQueue_Remove+0x1aa>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	68da      	ldr	r2, [r3, #12]
 800f92e:	897b      	ldrh	r3, [r7, #10]
 800f930:	441a      	add	r2, r3
 800f932:	7a7b      	ldrb	r3, [r7, #9]
 800f934:	441a      	add	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	e005      	b.n	800f94a <CircularQueue_Remove+0x1b6>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	68da      	ldr	r2, [r3, #12]
 800f942:	897b      	ldrh	r3, [r7, #10]
 800f944:	441a      	add	r2, r3
 800f946:	7a7b      	ldrb	r3, [r7, #9]
 800f948:	4413      	add	r3, r2
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	699b      	ldr	r3, [r3, #24]
 800f952:	1e5a      	subs	r2, r3, #1
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d002      	beq.n	800f964 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	897a      	ldrh	r2, [r7, #10]
 800f962:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800f964:	68fb      	ldr	r3, [r7, #12]
}
 800f966:	4618      	mov	r0, r3
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800f972:	b480      	push	{r7}
 800f974:	b087      	sub	sp, #28
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
 800f97a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800f97c:	2300      	movs	r3, #0
 800f97e:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800f980:	2300      	movs	r3, #0
 800f982:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	891b      	ldrh	r3, [r3, #8]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d101      	bne.n	800f990 <CircularQueue_Sense+0x1e>
 800f98c:	2302      	movs	r3, #2
 800f98e:	e000      	b.n	800f992 <CircularQueue_Sense+0x20>
 800f990:	2300      	movs	r3, #0
 800f992:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800f994:	2300      	movs	r3, #0
 800f996:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	695b      	ldr	r3, [r3, #20]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f000 808e 	beq.w	800fac2 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	891b      	ldrh	r3, [r3, #8]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d120      	bne.n	800f9f6 <CircularQueue_Sense+0x84>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	4413      	add	r3, r2
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	1c59      	adds	r1, r3, #1
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	4299      	cmp	r1, r3
 800f9d2:	d306      	bcc.n	800f9e2 <CircularQueue_Sense+0x70>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	68d9      	ldr	r1, [r3, #12]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	1acb      	subs	r3, r1, r3
 800f9de:	3301      	adds	r3, #1
 800f9e0:	e002      	b.n	800f9e8 <CircularQueue_Sense+0x76>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	4413      	add	r3, r2
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	021b      	lsls	r3, r3, #8
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	4403      	add	r3, r0
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	e001      	b.n	800f9fa <CircularQueue_Sense+0x88>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	891b      	ldrh	r3, [r3, #8]
 800f9fa:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	7f1b      	ldrb	r3, [r3, #28]
 800fa00:	f003 0301 	and.w	r3, r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d047      	beq.n	800fa98 <CircularQueue_Sense+0x126>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	7f1b      	ldrb	r3, [r3, #28]
 800fa0c:	f003 0302 	and.w	r3, r3, #2
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d141      	bne.n	800fa98 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800fa14:	8a7b      	ldrh	r3, [r7, #18]
 800fa16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d103      	bne.n	800fa26 <CircularQueue_Sense+0xb4>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	891b      	ldrh	r3, [r3, #8]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d012      	beq.n	800fa4c <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	68da      	ldr	r2, [r3, #12]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d932      	bls.n	800fa98 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	891b      	ldrh	r3, [r3, #8]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d02e      	beq.n	800fa98 <CircularQueue_Sense+0x126>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	685a      	ldr	r2, [r3, #4]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	8912      	ldrh	r2, [r2, #8]
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d225      	bcs.n	800fa98 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	891b      	ldrh	r3, [r3, #8]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d11c      	bne.n	800fa92 <CircularQueue_Sense+0x120>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	4413      	add	r3, r2
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	4618      	mov	r0, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	1c59      	adds	r1, r3, #1
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	4299      	cmp	r1, r3
 800fa72:	d305      	bcc.n	800fa80 <CircularQueue_Sense+0x10e>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	68f9      	ldr	r1, [r7, #12]
 800fa7a:	1acb      	subs	r3, r1, r3
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	e001      	b.n	800fa84 <CircularQueue_Sense+0x112>
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	3301      	adds	r3, #1
 800fa84:	4413      	add	r3, r2
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	021b      	lsls	r3, r3, #8
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	4403      	add	r3, r0
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	e001      	b.n	800fa96 <CircularQueue_Sense+0x124>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	891b      	ldrh	r3, [r3, #8]
 800fa96:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	7af9      	ldrb	r1, [r7, #11]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	4419      	add	r1, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	4299      	cmp	r1, r3
 800faa8:	d306      	bcc.n	800fab8 <CircularQueue_Sense+0x146>
 800faaa:	7af9      	ldrb	r1, [r7, #11]
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4419      	add	r1, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	1acb      	subs	r3, r1, r3
 800fab6:	e002      	b.n	800fabe <CircularQueue_Sense+0x14c>
 800fab8:	7af9      	ldrb	r1, [r7, #11]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	440b      	add	r3, r1
 800fabe:	4413      	add	r3, r2
 800fac0:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d002      	beq.n	800face <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	8a7a      	ldrh	r2, [r7, #18]
 800facc:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800face:	697b      	ldr	r3, [r7, #20]
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	371c      	adds	r7, #28
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr

0800fadc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800fadc:	b480      	push	{r7}
 800fade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800fae0:	4b03      	ldr	r3, [pc, #12]	@ (800faf0 <LL_FLASH_GetUDN+0x14>)
 800fae2:	681b      	ldr	r3, [r3, #0]
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	1fff7580 	.word	0x1fff7580

0800faf4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800faf4:	b480      	push	{r7}
 800faf6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800faf8:	4b03      	ldr	r3, [pc, #12]	@ (800fb08 <LL_FLASH_GetDeviceID+0x14>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	b2db      	uxtb	r3, r3
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr
 800fb08:	1fff7584 	.word	0x1fff7584

0800fb0c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800fb10:	4b03      	ldr	r3, [pc, #12]	@ (800fb20 <LL_FLASH_GetSTCompanyID+0x14>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	0a1b      	lsrs	r3, r3, #8
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	1fff7584 	.word	0x1fff7584

0800fb24 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800fb24:	b5b0      	push	{r4, r5, r7, lr}
 800fb26:	b090      	sub	sp, #64	@ 0x40
 800fb28:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fb2a:	2392      	movs	r3, #146	@ 0x92
 800fb2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800fb30:	4b45      	ldr	r3, [pc, #276]	@ (800fc48 <APP_BLE_Init+0x124>)
 800fb32:	1d3c      	adds	r4, r7, #4
 800fb34:	461d      	mov	r5, r3
 800fb36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb46:	c403      	stmia	r4!, {r0, r1}
 800fb48:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800fb4a:	f000 fb37 	bl	80101bc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800fb4e:	2101      	movs	r1, #1
 800fb50:	2002      	movs	r0, #2
 800fb52:	f001 fc11 	bl	8011378 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800fb56:	4a3d      	ldr	r2, [pc, #244]	@ (800fc4c <APP_BLE_Init+0x128>)
 800fb58:	2100      	movs	r1, #0
 800fb5a:	2002      	movs	r0, #2
 800fb5c:	f001 fd38 	bl	80115d0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800fb60:	1d3b      	adds	r3, r7, #4
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe fc34 	bl	800e3d0 <SHCI_C2_BLE_Init>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800fb6e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d012      	beq.n	800fb9c <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800fb76:	4836      	ldr	r0, [pc, #216]	@ (800fc50 <APP_BLE_Init+0x12c>)
 800fb78:	f7ff fa38 	bl	800efec <DbgTraceGetFileName>
 800fb7c:	4601      	mov	r1, r0
 800fb7e:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800fb82:	4a34      	ldr	r2, [pc, #208]	@ (800fc54 <APP_BLE_Init+0x130>)
 800fb84:	4834      	ldr	r0, [pc, #208]	@ (800fc58 <APP_BLE_Init+0x134>)
 800fb86:	f001 ff23 	bl	80119d0 <iprintf>
 800fb8a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800fb8e:	4619      	mov	r1, r3
 800fb90:	4832      	ldr	r0, [pc, #200]	@ (800fc5c <APP_BLE_Init+0x138>)
 800fb92:	f001 ff1d 	bl	80119d0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800fb96:	f7f3 f87f 	bl	8002c98 <Error_Handler>
 800fb9a:	e00c      	b.n	800fbb6 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800fb9c:	482c      	ldr	r0, [pc, #176]	@ (800fc50 <APP_BLE_Init+0x12c>)
 800fb9e:	f7ff fa25 	bl	800efec <DbgTraceGetFileName>
 800fba2:	4601      	mov	r1, r0
 800fba4:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800fba8:	4a2a      	ldr	r2, [pc, #168]	@ (800fc54 <APP_BLE_Init+0x130>)
 800fbaa:	482b      	ldr	r0, [pc, #172]	@ (800fc58 <APP_BLE_Init+0x134>)
 800fbac:	f001 ff10 	bl	80119d0 <iprintf>
 800fbb0:	482b      	ldr	r0, [pc, #172]	@ (800fc60 <APP_BLE_Init+0x13c>)
 800fbb2:	f001 ff0d 	bl	80119d0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800fbb6:	f000 fb17 	bl	80101e8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800fbba:	f7fe fb63 	bl	800e284 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800fbbe:	4b29      	ldr	r3, [pc, #164]	@ (800fc64 <APP_BLE_Init+0x140>)
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800fbc6:	4b27      	ldr	r3, [pc, #156]	@ (800fc64 <APP_BLE_Init+0x140>)
 800fbc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fbcc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800fbce:	4a26      	ldr	r2, [pc, #152]	@ (800fc68 <APP_BLE_Init+0x144>)
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	2001      	movs	r0, #1
 800fbd4:	f001 fcfc 	bl	80115d0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800fbd8:	2006      	movs	r0, #6
 800fbda:	f7fe f9c6 	bl	800df6a <aci_hal_set_radio_activity_mask>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800fbe4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d010      	beq.n	800fc0e <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800fbec:	4818      	ldr	r0, [pc, #96]	@ (800fc50 <APP_BLE_Init+0x12c>)
 800fbee:	f7ff f9fd 	bl	800efec <DbgTraceGetFileName>
 800fbf2:	4601      	mov	r1, r0
 800fbf4:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 800fbf8:	4a16      	ldr	r2, [pc, #88]	@ (800fc54 <APP_BLE_Init+0x130>)
 800fbfa:	4817      	ldr	r0, [pc, #92]	@ (800fc58 <APP_BLE_Init+0x134>)
 800fbfc:	f001 fee8 	bl	80119d0 <iprintf>
 800fc00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fc04:	4619      	mov	r1, r3
 800fc06:	4819      	ldr	r0, [pc, #100]	@ (800fc6c <APP_BLE_Init+0x148>)
 800fc08:	f001 fee2 	bl	80119d0 <iprintf>
 800fc0c:	e00c      	b.n	800fc28 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800fc0e:	4810      	ldr	r0, [pc, #64]	@ (800fc50 <APP_BLE_Init+0x12c>)
 800fc10:	f7ff f9ec 	bl	800efec <DbgTraceGetFileName>
 800fc14:	4601      	mov	r1, r0
 800fc16:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800fc1a:	4a0e      	ldr	r2, [pc, #56]	@ (800fc54 <APP_BLE_Init+0x130>)
 800fc1c:	480e      	ldr	r0, [pc, #56]	@ (800fc58 <APP_BLE_Init+0x134>)
 800fc1e:	f001 fed7 	bl	80119d0 <iprintf>
 800fc22:	4813      	ldr	r0, [pc, #76]	@ (800fc70 <APP_BLE_Init+0x14c>)
 800fc24:	f001 fed4 	bl	80119d0 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800fc28:	f000 ff22 	bl	8010a70 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800fc2c:	4b0d      	ldr	r3, [pc, #52]	@ (800fc64 <APP_BLE_Init+0x140>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800fc32:	4b0c      	ldr	r3, [pc, #48]	@ (800fc64 <APP_BLE_Init+0x140>)
 800fc34:	2200      	movs	r2, #0
 800fc36:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800fc38:	2001      	movs	r0, #1
 800fc3a:	f000 fd69 	bl	8010710 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800fc3e:	bf00      	nop
}
 800fc40:	3740      	adds	r7, #64	@ 0x40
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bdb0      	pop	{r4, r5, r7, pc}
 800fc46:	bf00      	nop
 800fc48:	08012fd4 	.word	0x08012fd4
 800fc4c:	0800e5ed 	.word	0x0800e5ed
 800fc50:	08012ec8 	.word	0x08012ec8
 800fc54:	08013fe0 	.word	0x08013fe0
 800fc58:	08012ee4 	.word	0x08012ee4
 800fc5c:	08012ef8 	.word	0x08012ef8
 800fc60:	08012f30 	.word	0x08012f30
 800fc64:	200008ec 	.word	0x200008ec
 800fc68:	08010895 	.word	0x08010895
 800fc6c:	08012f58 	.word	0x08012f58
 800fc70:	08012f9c 	.word	0x08012f9c

0800fc74 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800fc74:	b5b0      	push	{r4, r5, r7, lr}
 800fc76:	b08e      	sub	sp, #56	@ 0x38
 800fc78:	af04      	add	r7, sp, #16
 800fc7a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800fc7c:	2392      	movs	r3, #146	@ 0x92
 800fc7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	3301      	adds	r3, #1
 800fc86:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800fc88:	6a3b      	ldr	r3, [r7, #32]
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	2bff      	cmp	r3, #255	@ 0xff
 800fc8e:	f000 811d 	beq.w	800fecc <SVCCTL_App_Notification+0x258>
 800fc92:	2bff      	cmp	r3, #255	@ 0xff
 800fc94:	f300 8269 	bgt.w	801016a <SVCCTL_App_Notification+0x4f6>
 800fc98:	2b05      	cmp	r3, #5
 800fc9a:	d002      	beq.n	800fca2 <SVCCTL_App_Notification+0x2e>
 800fc9c:	2b3e      	cmp	r3, #62	@ 0x3e
 800fc9e:	d042      	beq.n	800fd26 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800fca0:	e263      	b.n	801016a <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800fca2:	6a3b      	ldr	r3, [r7, #32]
 800fca4:	3302      	adds	r3, #2
 800fca6:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	4bb1      	ldr	r3, [pc, #708]	@ (800ff78 <SVCCTL_App_Notification+0x304>)
 800fcb2:	8adb      	ldrh	r3, [r3, #22]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d128      	bne.n	800fd0a <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800fcb8:	4baf      	ldr	r3, [pc, #700]	@ (800ff78 <SVCCTL_App_Notification+0x304>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800fcbe:	4bae      	ldr	r3, [pc, #696]	@ (800ff78 <SVCCTL_App_Notification+0x304>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800fcc6:	48ad      	ldr	r0, [pc, #692]	@ (800ff7c <SVCCTL_App_Notification+0x308>)
 800fcc8:	f7ff f990 	bl	800efec <DbgTraceGetFileName>
 800fccc:	4601      	mov	r1, r0
 800fcce:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800fcd2:	4aab      	ldr	r2, [pc, #684]	@ (800ff80 <SVCCTL_App_Notification+0x30c>)
 800fcd4:	48ab      	ldr	r0, [pc, #684]	@ (800ff84 <SVCCTL_App_Notification+0x310>)
 800fcd6:	f001 fe7b 	bl	80119d0 <iprintf>
 800fcda:	48ab      	ldr	r0, [pc, #684]	@ (800ff88 <SVCCTL_App_Notification+0x314>)
 800fcdc:	f001 fee8 	bl	8011ab0 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800fce0:	48a6      	ldr	r0, [pc, #664]	@ (800ff7c <SVCCTL_App_Notification+0x308>)
 800fce2:	f7ff f983 	bl	800efec <DbgTraceGetFileName>
 800fce6:	4601      	mov	r1, r0
 800fce8:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800fcec:	4aa4      	ldr	r2, [pc, #656]	@ (800ff80 <SVCCTL_App_Notification+0x30c>)
 800fcee:	48a5      	ldr	r0, [pc, #660]	@ (800ff84 <SVCCTL_App_Notification+0x310>)
 800fcf0:	f001 fe6e 	bl	80119d0 <iprintf>
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	78db      	ldrb	r3, [r3, #3]
 800fd02:	461a      	mov	r2, r3
 800fd04:	48a1      	ldr	r0, [pc, #644]	@ (800ff8c <SVCCTL_App_Notification+0x318>)
 800fd06:	f001 fe63 	bl	80119d0 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800fd0a:	2001      	movs	r0, #1
 800fd0c:	f000 fd00 	bl	8010710 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800fd10:	4b9f      	ldr	r3, [pc, #636]	@ (800ff90 <SVCCTL_App_Notification+0x31c>)
 800fd12:	2201      	movs	r2, #1
 800fd14:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800fd16:	4b98      	ldr	r3, [pc, #608]	@ (800ff78 <SVCCTL_App_Notification+0x304>)
 800fd18:	8ada      	ldrh	r2, [r3, #22]
 800fd1a:	4b9d      	ldr	r3, [pc, #628]	@ (800ff90 <SVCCTL_App_Notification+0x31c>)
 800fd1c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800fd1e:	489c      	ldr	r0, [pc, #624]	@ (800ff90 <SVCCTL_App_Notification+0x31c>)
 800fd20:	f000 fe92 	bl	8010a48 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800fd24:	e224      	b.n	8010170 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800fd26:	6a3b      	ldr	r3, [r7, #32]
 800fd28:	3302      	adds	r3, #2
 800fd2a:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d042      	beq.n	800fdba <SVCCTL_App_Notification+0x146>
 800fd34:	2b03      	cmp	r3, #3
 800fd36:	f040 80c7 	bne.w	800fec8 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800fd40:	488e      	ldr	r0, [pc, #568]	@ (800ff7c <SVCCTL_App_Notification+0x308>)
 800fd42:	f7ff f953 	bl	800efec <DbgTraceGetFileName>
 800fd46:	4601      	mov	r1, r0
 800fd48:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 800fd4c:	4a8c      	ldr	r2, [pc, #560]	@ (800ff80 <SVCCTL_App_Notification+0x30c>)
 800fd4e:	488d      	ldr	r0, [pc, #564]	@ (800ff84 <SVCCTL_App_Notification+0x310>)
 800fd50:	f001 fe3e 	bl	80119d0 <iprintf>
 800fd54:	488f      	ldr	r0, [pc, #572]	@ (800ff94 <SVCCTL_App_Notification+0x320>)
 800fd56:	f001 feab 	bl	8011ab0 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800fd5a:	4888      	ldr	r0, [pc, #544]	@ (800ff7c <SVCCTL_App_Notification+0x308>)
 800fd5c:	f7ff f946 	bl	800efec <DbgTraceGetFileName>
 800fd60:	4601      	mov	r1, r0
 800fd62:	f240 13e3 	movw	r3, #483	@ 0x1e3
 800fd66:	4a86      	ldr	r2, [pc, #536]	@ (800ff80 <SVCCTL_App_Notification+0x30c>)
 800fd68:	4886      	ldr	r0, [pc, #536]	@ (800ff84 <SVCCTL_App_Notification+0x310>)
 800fd6a:	f001 fe31 	bl	80119d0 <iprintf>
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7f0 fcd6 	bl	8000728 <__aeabi_i2d>
 800fd7c:	f04f 0200 	mov.w	r2, #0
 800fd80:	4b85      	ldr	r3, [pc, #532]	@ (800ff98 <SVCCTL_App_Notification+0x324>)
 800fd82:	f7f0 fa55 	bl	8000230 <__aeabi_dmul>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	4610      	mov	r0, r2
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	461c      	mov	r4, r3
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	461a      	mov	r2, r3
 800fda2:	4613      	mov	r3, r2
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	4413      	add	r3, r2
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	9301      	str	r3, [sp, #4]
 800fdac:	9400      	str	r4, [sp, #0]
 800fdae:	4602      	mov	r2, r0
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	487a      	ldr	r0, [pc, #488]	@ (800ff9c <SVCCTL_App_Notification+0x328>)
 800fdb4:	f001 fe0c 	bl	80119d0 <iprintf>
          break;
 800fdb8:	e087      	b.n	800feca <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800fdc0:	486e      	ldr	r0, [pc, #440]	@ (800ff7c <SVCCTL_App_Notification+0x308>)
 800fdc2:	f7ff f913 	bl	800efec <DbgTraceGetFileName>
 800fdc6:	4601      	mov	r1, r0
 800fdc8:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800fdcc:	4a6c      	ldr	r2, [pc, #432]	@ (800ff80 <SVCCTL_App_Notification+0x30c>)
 800fdce:	486d      	ldr	r0, [pc, #436]	@ (800ff84 <SVCCTL_App_Notification+0x310>)
 800fdd0:	f001 fdfe 	bl	80119d0 <iprintf>
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	4619      	mov	r1, r3
 800fdde:	4870      	ldr	r0, [pc, #448]	@ (800ffa0 <SVCCTL_App_Notification+0x32c>)
 800fde0:	f001 fdf6 	bl	80119d0 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800fde4:	4865      	ldr	r0, [pc, #404]	@ (800ff7c <SVCCTL_App_Notification+0x308>)
 800fde6:	f7ff f901 	bl	800efec <DbgTraceGetFileName>
 800fdea:	4601      	mov	r1, r0
 800fdec:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 800fdf0:	4a63      	ldr	r2, [pc, #396]	@ (800ff80 <SVCCTL_App_Notification+0x30c>)
 800fdf2:	4864      	ldr	r0, [pc, #400]	@ (800ff84 <SVCCTL_App_Notification+0x310>)
 800fdf4:	f001 fdec 	bl	80119d0 <iprintf>
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	7a9b      	ldrb	r3, [r3, #10]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	7a5b      	ldrb	r3, [r3, #9]
 800fe02:	461c      	mov	r4, r3
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	7a1b      	ldrb	r3, [r3, #8]
 800fe08:	461d      	mov	r5, r3
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	79db      	ldrb	r3, [r3, #7]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	799b      	ldrb	r3, [r3, #6]
 800fe14:	4619      	mov	r1, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	795b      	ldrb	r3, [r3, #5]
 800fe1a:	9302      	str	r3, [sp, #8]
 800fe1c:	9101      	str	r1, [sp, #4]
 800fe1e:	9200      	str	r2, [sp, #0]
 800fe20:	462b      	mov	r3, r5
 800fe22:	4622      	mov	r2, r4
 800fe24:	4601      	mov	r1, r0
 800fe26:	485f      	ldr	r0, [pc, #380]	@ (800ffa4 <SVCCTL_App_Notification+0x330>)
 800fe28:	f001 fdd2 	bl	80119d0 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800fe2c:	4853      	ldr	r0, [pc, #332]	@ (800ff7c <SVCCTL_App_Notification+0x308>)
 800fe2e:	f7ff f8dd 	bl	800efec <DbgTraceGetFileName>
 800fe32:	4601      	mov	r1, r0
 800fe34:	f240 13fd 	movw	r3, #509	@ 0x1fd
 800fe38:	4a51      	ldr	r2, [pc, #324]	@ (800ff80 <SVCCTL_App_Notification+0x30c>)
 800fe3a:	4852      	ldr	r0, [pc, #328]	@ (800ff84 <SVCCTL_App_Notification+0x310>)
 800fe3c:	f001 fdc8 	bl	80119d0 <iprintf>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7f0 fc6d 	bl	8000728 <__aeabi_i2d>
 800fe4e:	f04f 0200 	mov.w	r2, #0
 800fe52:	4b51      	ldr	r3, [pc, #324]	@ (800ff98 <SVCCTL_App_Notification+0x324>)
 800fe54:	f7f0 f9ec 	bl	8000230 <__aeabi_dmul>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	460b      	mov	r3, r1
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	4619      	mov	r1, r3
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	461c      	mov	r4, r3
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	461a      	mov	r2, r3
 800fe74:	4613      	mov	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4413      	add	r3, r2
 800fe7a:	005b      	lsls	r3, r3, #1
 800fe7c:	9301      	str	r3, [sp, #4]
 800fe7e:	9400      	str	r4, [sp, #0]
 800fe80:	4602      	mov	r2, r0
 800fe82:	460b      	mov	r3, r1
 800fe84:	4845      	ldr	r0, [pc, #276]	@ (800ff9c <SVCCTL_App_Notification+0x328>)
 800fe86:	f001 fda3 	bl	80119d0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800fe8a:	4b3b      	ldr	r3, [pc, #236]	@ (800ff78 <SVCCTL_App_Notification+0x304>)
 800fe8c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fe90:	2b04      	cmp	r3, #4
 800fe92:	d104      	bne.n	800fe9e <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800fe94:	4b38      	ldr	r3, [pc, #224]	@ (800ff78 <SVCCTL_App_Notification+0x304>)
 800fe96:	2206      	movs	r2, #6
 800fe98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800fe9c:	e003      	b.n	800fea6 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800fe9e:	4b36      	ldr	r3, [pc, #216]	@ (800ff78 <SVCCTL_App_Notification+0x304>)
 800fea0:	2205      	movs	r2, #5
 800fea2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800feac:	b29a      	uxth	r2, r3
 800feae:	4b32      	ldr	r3, [pc, #200]	@ (800ff78 <SVCCTL_App_Notification+0x304>)
 800feb0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800feb2:	4b37      	ldr	r3, [pc, #220]	@ (800ff90 <SVCCTL_App_Notification+0x31c>)
 800feb4:	2200      	movs	r2, #0
 800feb6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800feb8:	4b2f      	ldr	r3, [pc, #188]	@ (800ff78 <SVCCTL_App_Notification+0x304>)
 800feba:	8ada      	ldrh	r2, [r3, #22]
 800febc:	4b34      	ldr	r3, [pc, #208]	@ (800ff90 <SVCCTL_App_Notification+0x31c>)
 800febe:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800fec0:	4833      	ldr	r0, [pc, #204]	@ (800ff90 <SVCCTL_App_Notification+0x31c>)
 800fec2:	f000 fdc1 	bl	8010a48 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800fec6:	e000      	b.n	800feca <SVCCTL_App_Notification+0x256>
          break;
 800fec8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800feca:	e151      	b.n	8010170 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800fecc:	6a3b      	ldr	r3, [r7, #32]
 800fece:	3302      	adds	r3, #2
 800fed0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	881b      	ldrh	r3, [r3, #0]
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fedc:	f000 8141 	beq.w	8010162 <SVCCTL_App_Notification+0x4ee>
 800fee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fee4:	f300 8143 	bgt.w	801016e <SVCCTL_App_Notification+0x4fa>
 800fee8:	2b04      	cmp	r3, #4
 800feea:	f000 813c 	beq.w	8010166 <SVCCTL_App_Notification+0x4f2>
 800feee:	2b04      	cmp	r3, #4
 800fef0:	f2c0 813d 	blt.w	801016e <SVCCTL_App_Notification+0x4fa>
 800fef4:	f240 420a 	movw	r2, #1034	@ 0x40a
 800fef8:	4293      	cmp	r3, r2
 800fefa:	f300 8138 	bgt.w	801016e <SVCCTL_App_Notification+0x4fa>
 800fefe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ff02:	f340 8134 	ble.w	801016e <SVCCTL_App_Notification+0x4fa>
 800ff06:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800ff0a:	2b09      	cmp	r3, #9
 800ff0c:	f200 812f 	bhi.w	801016e <SVCCTL_App_Notification+0x4fa>
 800ff10:	a201      	add	r2, pc, #4	@ (adr r2, 800ff18 <SVCCTL_App_Notification+0x2a4>)
 800ff12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff16:	bf00      	nop
 800ff18:	080100dd 	.word	0x080100dd
 800ff1c:	0800ffb1 	.word	0x0800ffb1
 800ff20:	0801016f 	.word	0x0801016f
 800ff24:	0801016f 	.word	0x0801016f
 800ff28:	0801016f 	.word	0x0801016f
 800ff2c:	0801016f 	.word	0x0801016f
 800ff30:	0800ff41 	.word	0x0800ff41
 800ff34:	0801016f 	.word	0x0801016f
 800ff38:	08010023 	.word	0x08010023
 800ff3c:	0800ff5d 	.word	0x0800ff5d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800ff40:	480e      	ldr	r0, [pc, #56]	@ (800ff7c <SVCCTL_App_Notification+0x308>)
 800ff42:	f7ff f853 	bl	800efec <DbgTraceGetFileName>
 800ff46:	4601      	mov	r1, r0
 800ff48:	f240 233f 	movw	r3, #575	@ 0x23f
 800ff4c:	4a0c      	ldr	r2, [pc, #48]	@ (800ff80 <SVCCTL_App_Notification+0x30c>)
 800ff4e:	480d      	ldr	r0, [pc, #52]	@ (800ff84 <SVCCTL_App_Notification+0x310>)
 800ff50:	f001 fd3e 	bl	80119d0 <iprintf>
 800ff54:	4814      	ldr	r0, [pc, #80]	@ (800ffa8 <SVCCTL_App_Notification+0x334>)
 800ff56:	f001 fd3b 	bl	80119d0 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ff5a:	e105      	b.n	8010168 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800ff5c:	4807      	ldr	r0, [pc, #28]	@ (800ff7c <SVCCTL_App_Notification+0x308>)
 800ff5e:	f7ff f845 	bl	800efec <DbgTraceGetFileName>
 800ff62:	4601      	mov	r1, r0
 800ff64:	f240 234f 	movw	r3, #591	@ 0x24f
 800ff68:	4a05      	ldr	r2, [pc, #20]	@ (800ff80 <SVCCTL_App_Notification+0x30c>)
 800ff6a:	4806      	ldr	r0, [pc, #24]	@ (800ff84 <SVCCTL_App_Notification+0x310>)
 800ff6c:	f001 fd30 	bl	80119d0 <iprintf>
 800ff70:	480e      	ldr	r0, [pc, #56]	@ (800ffac <SVCCTL_App_Notification+0x338>)
 800ff72:	f001 fd9d 	bl	8011ab0 <puts>
          break;
 800ff76:	e0f7      	b.n	8010168 <SVCCTL_App_Notification+0x4f4>
 800ff78:	200008ec 	.word	0x200008ec
 800ff7c:	08012ec8 	.word	0x08012ec8
 800ff80:	08013ff0 	.word	0x08013ff0
 800ff84:	08012ee4 	.word	0x08012ee4
 800ff88:	08013010 	.word	0x08013010
 800ff8c:	0801303c 	.word	0x0801303c
 800ff90:	20000970 	.word	0x20000970
 800ff94:	08013078 	.word	0x08013078
 800ff98:	3ff40000 	.word	0x3ff40000
 800ff9c:	080130ac 	.word	0x080130ac
 800ffa0:	08013118 	.word	0x08013118
 800ffa4:	08013160 	.word	0x08013160
 800ffa8:	080131b0 	.word	0x080131b0
 800ffac:	080131d8 	.word	0x080131d8
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800ffb0:	4872      	ldr	r0, [pc, #456]	@ (801017c <SVCCTL_App_Notification+0x508>)
 800ffb2:	f7ff f81b 	bl	800efec <DbgTraceGetFileName>
 800ffb6:	4601      	mov	r1, r0
 800ffb8:	f240 2356 	movw	r3, #598	@ 0x256
 800ffbc:	4a70      	ldr	r2, [pc, #448]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 800ffbe:	4871      	ldr	r0, [pc, #452]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 800ffc0:	f001 fd06 	bl	80119d0 <iprintf>
 800ffc4:	4870      	ldr	r0, [pc, #448]	@ (8010188 <SVCCTL_App_Notification+0x514>)
 800ffc6:	f001 fd73 	bl	8011ab0 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800ffca:	4b70      	ldr	r3, [pc, #448]	@ (801018c <SVCCTL_App_Notification+0x518>)
 800ffcc:	8adb      	ldrh	r3, [r3, #22]
 800ffce:	4970      	ldr	r1, [pc, #448]	@ (8010190 <SVCCTL_App_Notification+0x51c>)
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fd f9cc 	bl	800d36e <aci_gap_pass_key_resp>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800ffdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d010      	beq.n	8010006 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800ffe4:	4865      	ldr	r0, [pc, #404]	@ (801017c <SVCCTL_App_Notification+0x508>)
 800ffe6:	f7ff f801 	bl	800efec <DbgTraceGetFileName>
 800ffea:	4601      	mov	r1, r0
 800ffec:	f240 235b 	movw	r3, #603	@ 0x25b
 800fff0:	4a63      	ldr	r2, [pc, #396]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 800fff2:	4864      	ldr	r0, [pc, #400]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 800fff4:	f001 fcec 	bl	80119d0 <iprintf>
 800fff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fffc:	4619      	mov	r1, r3
 800fffe:	4865      	ldr	r0, [pc, #404]	@ (8010194 <SVCCTL_App_Notification+0x520>)
 8010000:	f001 fce6 	bl	80119d0 <iprintf>
          break;
 8010004:	e0b0      	b.n	8010168 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8010006:	485d      	ldr	r0, [pc, #372]	@ (801017c <SVCCTL_App_Notification+0x508>)
 8010008:	f7fe fff0 	bl	800efec <DbgTraceGetFileName>
 801000c:	4601      	mov	r1, r0
 801000e:	f240 235f 	movw	r3, #607	@ 0x25f
 8010012:	4a5b      	ldr	r2, [pc, #364]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 8010014:	485b      	ldr	r0, [pc, #364]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 8010016:	f001 fcdb 	bl	80119d0 <iprintf>
 801001a:	485f      	ldr	r0, [pc, #380]	@ (8010198 <SVCCTL_App_Notification+0x524>)
 801001c:	f001 fd48 	bl	8011ab0 <puts>
          break;
 8010020:	e0a2      	b.n	8010168 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8010022:	4856      	ldr	r0, [pc, #344]	@ (801017c <SVCCTL_App_Notification+0x508>)
 8010024:	f7fe ffe2 	bl	800efec <DbgTraceGetFileName>
 8010028:	4601      	mov	r1, r0
 801002a:	f240 2367 	movw	r3, #615	@ 0x267
 801002e:	4a54      	ldr	r2, [pc, #336]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 8010030:	4854      	ldr	r0, [pc, #336]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 8010032:	f001 fccd 	bl	80119d0 <iprintf>
 8010036:	4859      	ldr	r0, [pc, #356]	@ (801019c <SVCCTL_App_Notification+0x528>)
 8010038:	f001 fd3a 	bl	8011ab0 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 801003c:	484f      	ldr	r0, [pc, #316]	@ (801017c <SVCCTL_App_Notification+0x508>)
 801003e:	f7fe ffd5 	bl	800efec <DbgTraceGetFileName>
 8010042:	4601      	mov	r1, r0
 8010044:	f44f 731a 	mov.w	r3, #616	@ 0x268
 8010048:	4a4d      	ldr	r2, [pc, #308]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 801004a:	484e      	ldr	r0, [pc, #312]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 801004c:	f001 fcc0 	bl	80119d0 <iprintf>
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	3302      	adds	r3, #2
 8010054:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8010058:	4619      	mov	r1, r3
 801005a:	4851      	ldr	r0, [pc, #324]	@ (80101a0 <SVCCTL_App_Notification+0x52c>)
 801005c:	f001 fcb8 	bl	80119d0 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8010060:	4846      	ldr	r0, [pc, #280]	@ (801017c <SVCCTL_App_Notification+0x508>)
 8010062:	f7fe ffc3 	bl	800efec <DbgTraceGetFileName>
 8010066:	4601      	mov	r1, r0
 8010068:	f240 236a 	movw	r3, #618	@ 0x26a
 801006c:	4a44      	ldr	r2, [pc, #272]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 801006e:	4845      	ldr	r0, [pc, #276]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 8010070:	f001 fcae 	bl	80119d0 <iprintf>
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	3302      	adds	r3, #2
 8010078:	f8d3 3002 	ldr.w	r3, [r3, #2]
 801007c:	4619      	mov	r1, r3
 801007e:	4849      	ldr	r0, [pc, #292]	@ (80101a4 <SVCCTL_App_Notification+0x530>)
 8010080:	f001 fca6 	bl	80119d0 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8010084:	4b41      	ldr	r3, [pc, #260]	@ (801018c <SVCCTL_App_Notification+0x518>)
 8010086:	8adb      	ldrh	r3, [r3, #22]
 8010088:	2101      	movs	r1, #1
 801008a:	4618      	mov	r0, r3
 801008c:	f7fd fb19 	bl	800d6c2 <aci_gap_numeric_comparison_value_confirm_yesno>
 8010090:	4603      	mov	r3, r0
 8010092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8010096:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801009a:	2b00      	cmp	r3, #0
 801009c:	d010      	beq.n	80100c0 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 801009e:	4837      	ldr	r0, [pc, #220]	@ (801017c <SVCCTL_App_Notification+0x508>)
 80100a0:	f7fe ffa4 	bl	800efec <DbgTraceGetFileName>
 80100a4:	4601      	mov	r1, r0
 80100a6:	f240 236f 	movw	r3, #623	@ 0x26f
 80100aa:	4a35      	ldr	r2, [pc, #212]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 80100ac:	4835      	ldr	r0, [pc, #212]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 80100ae:	f001 fc8f 	bl	80119d0 <iprintf>
 80100b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100b6:	4619      	mov	r1, r3
 80100b8:	483b      	ldr	r0, [pc, #236]	@ (80101a8 <SVCCTL_App_Notification+0x534>)
 80100ba:	f001 fc89 	bl	80119d0 <iprintf>
          break;
 80100be:	e053      	b.n	8010168 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 80100c0:	482e      	ldr	r0, [pc, #184]	@ (801017c <SVCCTL_App_Notification+0x508>)
 80100c2:	f7fe ff93 	bl	800efec <DbgTraceGetFileName>
 80100c6:	4601      	mov	r1, r0
 80100c8:	f240 2373 	movw	r3, #627	@ 0x273
 80100cc:	4a2c      	ldr	r2, [pc, #176]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 80100ce:	482d      	ldr	r0, [pc, #180]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 80100d0:	f001 fc7e 	bl	80119d0 <iprintf>
 80100d4:	4835      	ldr	r0, [pc, #212]	@ (80101ac <SVCCTL_App_Notification+0x538>)
 80100d6:	f001 fceb 	bl	8011ab0 <puts>
          break;
 80100da:	e045      	b.n	8010168 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	3302      	adds	r3, #2
 80100e0:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 80100e2:	4826      	ldr	r0, [pc, #152]	@ (801017c <SVCCTL_App_Notification+0x508>)
 80100e4:	f7fe ff82 	bl	800efec <DbgTraceGetFileName>
 80100e8:	4601      	mov	r1, r0
 80100ea:	f240 237d 	movw	r3, #637	@ 0x27d
 80100ee:	4a24      	ldr	r2, [pc, #144]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 80100f0:	4824      	ldr	r0, [pc, #144]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 80100f2:	f001 fc6d 	bl	80119d0 <iprintf>
 80100f6:	482e      	ldr	r0, [pc, #184]	@ (80101b0 <SVCCTL_App_Notification+0x53c>)
 80100f8:	f001 fcda 	bl	8011ab0 <puts>
          if (p_pairing_complete->Status != 0)
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	789b      	ldrb	r3, [r3, #2]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d013      	beq.n	801012c <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8010104:	481d      	ldr	r0, [pc, #116]	@ (801017c <SVCCTL_App_Notification+0x508>)
 8010106:	f7fe ff71 	bl	800efec <DbgTraceGetFileName>
 801010a:	4601      	mov	r1, r0
 801010c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8010110:	4a1b      	ldr	r2, [pc, #108]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 8010112:	481c      	ldr	r0, [pc, #112]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 8010114:	f001 fc5c 	bl	80119d0 <iprintf>
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	789b      	ldrb	r3, [r3, #2]
 801011c:	4619      	mov	r1, r3
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	78db      	ldrb	r3, [r3, #3]
 8010122:	461a      	mov	r2, r3
 8010124:	4823      	ldr	r0, [pc, #140]	@ (80101b4 <SVCCTL_App_Notification+0x540>)
 8010126:	f001 fc53 	bl	80119d0 <iprintf>
 801012a:	e00c      	b.n	8010146 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 801012c:	4813      	ldr	r0, [pc, #76]	@ (801017c <SVCCTL_App_Notification+0x508>)
 801012e:	f7fe ff5d 	bl	800efec <DbgTraceGetFileName>
 8010132:	4601      	mov	r1, r0
 8010134:	f44f 7321 	mov.w	r3, #644	@ 0x284
 8010138:	4a11      	ldr	r2, [pc, #68]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 801013a:	4812      	ldr	r0, [pc, #72]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 801013c:	f001 fc48 	bl	80119d0 <iprintf>
 8010140:	481d      	ldr	r0, [pc, #116]	@ (80101b8 <SVCCTL_App_Notification+0x544>)
 8010142:	f001 fcb5 	bl	8011ab0 <puts>
          APP_DBG_MSG("\n");
 8010146:	480d      	ldr	r0, [pc, #52]	@ (801017c <SVCCTL_App_Notification+0x508>)
 8010148:	f7fe ff50 	bl	800efec <DbgTraceGetFileName>
 801014c:	4601      	mov	r1, r0
 801014e:	f240 2386 	movw	r3, #646	@ 0x286
 8010152:	4a0b      	ldr	r2, [pc, #44]	@ (8010180 <SVCCTL_App_Notification+0x50c>)
 8010154:	480b      	ldr	r0, [pc, #44]	@ (8010184 <SVCCTL_App_Notification+0x510>)
 8010156:	f001 fc3b 	bl	80119d0 <iprintf>
 801015a:	200a      	movs	r0, #10
 801015c:	f001 fc4a 	bl	80119f4 <putchar>
          break;
 8010160:	e002      	b.n	8010168 <SVCCTL_App_Notification+0x4f4>
          break;
 8010162:	bf00      	nop
 8010164:	e003      	b.n	801016e <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8010166:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010168:	e001      	b.n	801016e <SVCCTL_App_Notification+0x4fa>
      break;
 801016a:	bf00      	nop
 801016c:	e000      	b.n	8010170 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801016e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8010170:	2301      	movs	r3, #1
}
 8010172:	4618      	mov	r0, r3
 8010174:	3728      	adds	r7, #40	@ 0x28
 8010176:	46bd      	mov	sp, r7
 8010178:	bdb0      	pop	{r4, r5, r7, pc}
 801017a:	bf00      	nop
 801017c:	08012ec8 	.word	0x08012ec8
 8010180:	08013ff0 	.word	0x08013ff0
 8010184:	08012ee4 	.word	0x08012ee4
 8010188:	08013208 	.word	0x08013208
 801018c:	200008ec 	.word	0x200008ec
 8010190:	0001b207 	.word	0x0001b207
 8010194:	08013230 	.word	0x08013230
 8010198:	08013264 	.word	0x08013264
 801019c:	0801328c 	.word	0x0801328c
 80101a0:	080132c0 	.word	0x080132c0
 80101a4:	080132dc 	.word	0x080132dc
 80101a8:	080132f4 	.word	0x080132f4
 80101ac:	08013344 	.word	0x08013344
 80101b0:	0801338c 	.word	0x0801338c
 80101b4:	080133b8 	.word	0x080133b8
 80101b8:	080133f4 	.word	0x080133f4

080101bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80101c2:	4b06      	ldr	r3, [pc, #24]	@ (80101dc <Ble_Tl_Init+0x20>)
 80101c4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80101c6:	4b06      	ldr	r3, [pc, #24]	@ (80101e0 <Ble_Tl_Init+0x24>)
 80101c8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80101ca:	463b      	mov	r3, r7
 80101cc:	4619      	mov	r1, r3
 80101ce:	4805      	ldr	r0, [pc, #20]	@ (80101e4 <Ble_Tl_Init+0x28>)
 80101d0:	f7fe f9f0 	bl	800e5b4 <hci_init>

  return;
 80101d4:	bf00      	nop
}
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	200300d8 	.word	0x200300d8
 80101e0:	080109b1 	.word	0x080109b1
 80101e4:	08010979 	.word	0x08010979

080101e8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80101e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ea:	b08d      	sub	sp, #52	@ 0x34
 80101ec:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80101ee:	2300      	movs	r3, #0
 80101f0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80101f2:	2392      	movs	r3, #146	@ 0x92
 80101f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80101f6:	48a3      	ldr	r0, [pc, #652]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80101f8:	f7fe fef8 	bl	800efec <DbgTraceGetFileName>
 80101fc:	4601      	mov	r1, r0
 80101fe:	f240 23c6 	movw	r3, #710	@ 0x2c6
 8010202:	4aa1      	ldr	r2, [pc, #644]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010204:	48a1      	ldr	r0, [pc, #644]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010206:	f001 fbe3 	bl	80119d0 <iprintf>
 801020a:	48a1      	ldr	r0, [pc, #644]	@ (8010490 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 801020c:	f001 fc50 	bl	8011ab0 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8010210:	f7fd feff 	bl	800e012 <hci_reset>
 8010214:	4603      	mov	r3, r0
 8010216:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010218:	7dfb      	ldrb	r3, [r7, #23]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d00f      	beq.n	801023e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 801021e:	4899      	ldr	r0, [pc, #612]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010220:	f7fe fee4 	bl	800efec <DbgTraceGetFileName>
 8010224:	4601      	mov	r1, r0
 8010226:	f240 23cf 	movw	r3, #719	@ 0x2cf
 801022a:	4a97      	ldr	r2, [pc, #604]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801022c:	4897      	ldr	r0, [pc, #604]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801022e:	f001 fbcf 	bl	80119d0 <iprintf>
 8010232:	7dfb      	ldrb	r3, [r7, #23]
 8010234:	4619      	mov	r1, r3
 8010236:	4897      	ldr	r0, [pc, #604]	@ (8010494 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8010238:	f001 fbca 	bl	80119d0 <iprintf>
 801023c:	e00c      	b.n	8010258 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 801023e:	4891      	ldr	r0, [pc, #580]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010240:	f7fe fed4 	bl	800efec <DbgTraceGetFileName>
 8010244:	4601      	mov	r1, r0
 8010246:	f240 23d3 	movw	r3, #723	@ 0x2d3
 801024a:	4a8f      	ldr	r2, [pc, #572]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801024c:	488f      	ldr	r0, [pc, #572]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801024e:	f001 fbbf 	bl	80119d0 <iprintf>
 8010252:	4891      	ldr	r0, [pc, #580]	@ (8010498 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8010254:	f001 fc2c 	bl	8011ab0 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8010258:	f000 fad8 	bl	801080c <BleGetBdAddress>
 801025c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 801025e:	693a      	ldr	r2, [r7, #16]
 8010260:	2106      	movs	r1, #6
 8010262:	2000      	movs	r0, #0
 8010264:	f7fd fd95 	bl	800dd92 <aci_hal_write_config_data>
 8010268:	4603      	mov	r3, r0
 801026a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801026c:	7dfb      	ldrb	r3, [r7, #23]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00f      	beq.n	8010292 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8010272:	4884      	ldr	r0, [pc, #528]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010274:	f7fe feba 	bl	800efec <DbgTraceGetFileName>
 8010278:	4601      	mov	r1, r0
 801027a:	f240 23dd 	movw	r3, #733	@ 0x2dd
 801027e:	4a82      	ldr	r2, [pc, #520]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010280:	4882      	ldr	r0, [pc, #520]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010282:	f001 fba5 	bl	80119d0 <iprintf>
 8010286:	7dfb      	ldrb	r3, [r7, #23]
 8010288:	4619      	mov	r1, r3
 801028a:	4884      	ldr	r0, [pc, #528]	@ (801049c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 801028c:	f001 fba0 	bl	80119d0 <iprintf>
 8010290:	e035      	b.n	80102fe <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8010292:	487c      	ldr	r0, [pc, #496]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010294:	f7fe feaa 	bl	800efec <DbgTraceGetFileName>
 8010298:	4601      	mov	r1, r0
 801029a:	f240 23e1 	movw	r3, #737	@ 0x2e1
 801029e:	4a7a      	ldr	r2, [pc, #488]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80102a0:	487a      	ldr	r0, [pc, #488]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80102a2:	f001 fb95 	bl	80119d0 <iprintf>
 80102a6:	487e      	ldr	r0, [pc, #504]	@ (80104a0 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80102a8:	f001 fc02 	bl	8011ab0 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80102ac:	4875      	ldr	r0, [pc, #468]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80102ae:	f7fe fe9d 	bl	800efec <DbgTraceGetFileName>
 80102b2:	4601      	mov	r1, r0
 80102b4:	f240 23e2 	movw	r3, #738	@ 0x2e2
 80102b8:	4a73      	ldr	r2, [pc, #460]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80102ba:	4874      	ldr	r0, [pc, #464]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80102bc:	f001 fb88 	bl	80119d0 <iprintf>
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	3305      	adds	r3, #5
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	4618      	mov	r0, r3
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	3304      	adds	r3, #4
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	461c      	mov	r4, r3
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	3303      	adds	r3, #3
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	461d      	mov	r5, r3
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	3302      	adds	r3, #2
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	461a      	mov	r2, r3
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	3301      	adds	r3, #1
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	4619      	mov	r1, r3
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	9302      	str	r3, [sp, #8]
 80102ee:	9101      	str	r1, [sp, #4]
 80102f0:	9200      	str	r2, [sp, #0]
 80102f2:	462b      	mov	r3, r5
 80102f4:	4622      	mov	r2, r4
 80102f6:	4601      	mov	r1, r0
 80102f8:	486a      	ldr	r0, [pc, #424]	@ (80104a4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80102fa:	f001 fb69 	bl	80119d0 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80102fe:	4a6a      	ldr	r2, [pc, #424]	@ (80104a8 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8010300:	2110      	movs	r1, #16
 8010302:	2018      	movs	r0, #24
 8010304:	f7fd fd45 	bl	800dd92 <aci_hal_write_config_data>
 8010308:	4603      	mov	r3, r0
 801030a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801030c:	7dfb      	ldrb	r3, [r7, #23]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d00f      	beq.n	8010332 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8010312:	485c      	ldr	r0, [pc, #368]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010314:	f7fe fe6a 	bl	800efec <DbgTraceGetFileName>
 8010318:	4601      	mov	r1, r0
 801031a:	f44f 734b 	mov.w	r3, #812	@ 0x32c
 801031e:	4a5a      	ldr	r2, [pc, #360]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010320:	485a      	ldr	r0, [pc, #360]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010322:	f001 fb55 	bl	80119d0 <iprintf>
 8010326:	7dfb      	ldrb	r3, [r7, #23]
 8010328:	4619      	mov	r1, r3
 801032a:	4860      	ldr	r0, [pc, #384]	@ (80104ac <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 801032c:	f001 fb50 	bl	80119d0 <iprintf>
 8010330:	e00c      	b.n	801034c <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8010332:	4854      	ldr	r0, [pc, #336]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010334:	f7fe fe5a 	bl	800efec <DbgTraceGetFileName>
 8010338:	4601      	mov	r1, r0
 801033a:	f44f 734c 	mov.w	r3, #816	@ 0x330
 801033e:	4a52      	ldr	r2, [pc, #328]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010340:	4852      	ldr	r0, [pc, #328]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010342:	f001 fb45 	bl	80119d0 <iprintf>
 8010346:	485a      	ldr	r0, [pc, #360]	@ (80104b0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8010348:	f001 fbb2 	bl	8011ab0 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 801034c:	4a59      	ldr	r2, [pc, #356]	@ (80104b4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 801034e:	2110      	movs	r1, #16
 8010350:	2008      	movs	r0, #8
 8010352:	f7fd fd1e 	bl	800dd92 <aci_hal_write_config_data>
 8010356:	4603      	mov	r3, r0
 8010358:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801035a:	7dfb      	ldrb	r3, [r7, #23]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00f      	beq.n	8010380 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8010360:	4848      	ldr	r0, [pc, #288]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010362:	f7fe fe43 	bl	800efec <DbgTraceGetFileName>
 8010366:	4601      	mov	r1, r0
 8010368:	f240 3339 	movw	r3, #825	@ 0x339
 801036c:	4a46      	ldr	r2, [pc, #280]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801036e:	4847      	ldr	r0, [pc, #284]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010370:	f001 fb2e 	bl	80119d0 <iprintf>
 8010374:	7dfb      	ldrb	r3, [r7, #23]
 8010376:	4619      	mov	r1, r3
 8010378:	484f      	ldr	r0, [pc, #316]	@ (80104b8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 801037a:	f001 fb29 	bl	80119d0 <iprintf>
 801037e:	e00c      	b.n	801039a <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8010380:	4840      	ldr	r0, [pc, #256]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010382:	f7fe fe33 	bl	800efec <DbgTraceGetFileName>
 8010386:	4601      	mov	r1, r0
 8010388:	f240 333d 	movw	r3, #829	@ 0x33d
 801038c:	4a3e      	ldr	r2, [pc, #248]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801038e:	483f      	ldr	r0, [pc, #252]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010390:	f001 fb1e 	bl	80119d0 <iprintf>
 8010394:	4849      	ldr	r0, [pc, #292]	@ (80104bc <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8010396:	f001 fb8b 	bl	8011ab0 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 801039a:	2118      	movs	r1, #24
 801039c:	2001      	movs	r0, #1
 801039e:	f7fd fd7d 	bl	800de9c <aci_hal_set_tx_power_level>
 80103a2:	4603      	mov	r3, r0
 80103a4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80103a6:	7dfb      	ldrb	r3, [r7, #23]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00f      	beq.n	80103cc <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80103ac:	4835      	ldr	r0, [pc, #212]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80103ae:	f7fe fe1d 	bl	800efec <DbgTraceGetFileName>
 80103b2:	4601      	mov	r1, r0
 80103b4:	f240 3346 	movw	r3, #838	@ 0x346
 80103b8:	4a33      	ldr	r2, [pc, #204]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80103ba:	4834      	ldr	r0, [pc, #208]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80103bc:	f001 fb08 	bl	80119d0 <iprintf>
 80103c0:	7dfb      	ldrb	r3, [r7, #23]
 80103c2:	4619      	mov	r1, r3
 80103c4:	483e      	ldr	r0, [pc, #248]	@ (80104c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80103c6:	f001 fb03 	bl	80119d0 <iprintf>
 80103ca:	e00c      	b.n	80103e6 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 80103cc:	482d      	ldr	r0, [pc, #180]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80103ce:	f7fe fe0d 	bl	800efec <DbgTraceGetFileName>
 80103d2:	4601      	mov	r1, r0
 80103d4:	f240 334a 	movw	r3, #842	@ 0x34a
 80103d8:	4a2b      	ldr	r2, [pc, #172]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80103da:	482c      	ldr	r0, [pc, #176]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80103dc:	f001 faf8 	bl	80119d0 <iprintf>
 80103e0:	4838      	ldr	r0, [pc, #224]	@ (80104c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80103e2:	f001 fb65 	bl	8011ab0 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80103e6:	f7fd f9d3 	bl	800d790 <aci_gatt_init>
 80103ea:	4603      	mov	r3, r0
 80103ec:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80103ee:	7dfb      	ldrb	r3, [r7, #23]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00f      	beq.n	8010414 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 80103f4:	4823      	ldr	r0, [pc, #140]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80103f6:	f7fe fdf9 	bl	800efec <DbgTraceGetFileName>
 80103fa:	4601      	mov	r1, r0
 80103fc:	f240 3353 	movw	r3, #851	@ 0x353
 8010400:	4a21      	ldr	r2, [pc, #132]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010402:	4822      	ldr	r0, [pc, #136]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010404:	f001 fae4 	bl	80119d0 <iprintf>
 8010408:	7dfb      	ldrb	r3, [r7, #23]
 801040a:	4619      	mov	r1, r3
 801040c:	482e      	ldr	r0, [pc, #184]	@ (80104c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801040e:	f001 fadf 	bl	80119d0 <iprintf>
 8010412:	e00c      	b.n	801042e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8010414:	481b      	ldr	r0, [pc, #108]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010416:	f7fe fde9 	bl	800efec <DbgTraceGetFileName>
 801041a:	4601      	mov	r1, r0
 801041c:	f240 3357 	movw	r3, #855	@ 0x357
 8010420:	4a19      	ldr	r2, [pc, #100]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010422:	481a      	ldr	r0, [pc, #104]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010424:	f001 fad4 	bl	80119d0 <iprintf>
 8010428:	4828      	ldr	r0, [pc, #160]	@ (80104cc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 801042a:	f001 fb41 	bl	8011ab0 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801042e:	2300      	movs	r3, #0
 8010430:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8010432:	7bfb      	ldrb	r3, [r7, #15]
 8010434:	f043 0301 	orr.w	r3, r3, #1
 8010438:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 801043a:	7bfb      	ldrb	r3, [r7, #15]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d069      	beq.n	8010514 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8010440:	4b23      	ldr	r3, [pc, #140]	@ (80104d0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8010442:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8010444:	1dba      	adds	r2, r7, #6
 8010446:	7bf8      	ldrb	r0, [r7, #15]
 8010448:	1cbb      	adds	r3, r7, #2
 801044a:	9301      	str	r3, [sp, #4]
 801044c:	1d3b      	adds	r3, r7, #4
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	4613      	mov	r3, r2
 8010452:	2203      	movs	r2, #3
 8010454:	2100      	movs	r1, #0
 8010456:	f7fc fff1 	bl	800d43c <aci_gap_init>
 801045a:	4603      	mov	r3, r0
 801045c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 801045e:	7dfb      	ldrb	r3, [r7, #23]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d039      	beq.n	80104d8 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8010464:	4807      	ldr	r0, [pc, #28]	@ (8010484 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010466:	f7fe fdc1 	bl	800efec <DbgTraceGetFileName>
 801046a:	4601      	mov	r1, r0
 801046c:	f240 3377 	movw	r3, #887	@ 0x377
 8010470:	4a05      	ldr	r2, [pc, #20]	@ (8010488 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010472:	4806      	ldr	r0, [pc, #24]	@ (801048c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010474:	f001 faac 	bl	80119d0 <iprintf>
 8010478:	7dfb      	ldrb	r3, [r7, #23]
 801047a:	4619      	mov	r1, r3
 801047c:	4815      	ldr	r0, [pc, #84]	@ (80104d4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 801047e:	f001 faa7 	bl	80119d0 <iprintf>
 8010482:	e036      	b.n	80104f2 <Ble_Hci_Gap_Gatt_Init+0x30a>
 8010484:	08012ec8 	.word	0x08012ec8
 8010488:	08014008 	.word	0x08014008
 801048c:	08012ee4 	.word	0x08012ee4
 8010490:	0801340c 	.word	0x0801340c
 8010494:	08013438 	.word	0x08013438
 8010498:	08013468 	.word	0x08013468
 801049c:	08013488 	.word	0x08013488
 80104a0:	080134e4 	.word	0x080134e4
 80104a4:	08013530 	.word	0x08013530
 80104a8:	08013fc0 	.word	0x08013fc0
 80104ac:	0801356c 	.word	0x0801356c
 80104b0:	080135c4 	.word	0x080135c4
 80104b4:	08013fd0 	.word	0x08013fd0
 80104b8:	0801360c 	.word	0x0801360c
 80104bc:	08013664 	.word	0x08013664
 80104c0:	080136ac 	.word	0x080136ac
 80104c4:	080136ec 	.word	0x080136ec
 80104c8:	0801371c 	.word	0x0801371c
 80104cc:	08013750 	.word	0x08013750
 80104d0:	08013774 	.word	0x08013774
 80104d4:	08013778 	.word	0x08013778
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80104d8:	487e      	ldr	r0, [pc, #504]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80104da:	f7fe fd87 	bl	800efec <DbgTraceGetFileName>
 80104de:	4601      	mov	r1, r0
 80104e0:	f240 337b 	movw	r3, #891	@ 0x37b
 80104e4:	4a7c      	ldr	r2, [pc, #496]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80104e6:	487d      	ldr	r0, [pc, #500]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80104e8:	f001 fa72 	bl	80119d0 <iprintf>
 80104ec:	487c      	ldr	r0, [pc, #496]	@ (80106e0 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 80104ee:	f001 fadf 	bl	8011ab0 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80104f2:	88fc      	ldrh	r4, [r7, #6]
 80104f4:	88bd      	ldrh	r5, [r7, #4]
 80104f6:	68b8      	ldr	r0, [r7, #8]
 80104f8:	f7ef fe42 	bl	8000180 <strlen>
 80104fc:	4603      	mov	r3, r0
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	4613      	mov	r3, r2
 8010506:	2200      	movs	r2, #0
 8010508:	4629      	mov	r1, r5
 801050a:	4620      	mov	r0, r4
 801050c:	f7fd fb43 	bl	800db96 <aci_gatt_update_char_value>
 8010510:	4603      	mov	r3, r0
 8010512:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8010514:	88f8      	ldrh	r0, [r7, #6]
 8010516:	8879      	ldrh	r1, [r7, #2]
 8010518:	463b      	mov	r3, r7
 801051a:	9300      	str	r3, [sp, #0]
 801051c:	2302      	movs	r3, #2
 801051e:	2200      	movs	r2, #0
 8010520:	f7fd fb39 	bl	800db96 <aci_gatt_update_char_value>
 8010524:	4603      	mov	r3, r0
 8010526:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8010528:	2202      	movs	r2, #2
 801052a:	2102      	movs	r1, #2
 801052c:	2000      	movs	r0, #0
 801052e:	f7fd fd94 	bl	800e05a <hci_le_set_default_phy>
 8010532:	4603      	mov	r3, r0
 8010534:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010536:	7dfb      	ldrb	r3, [r7, #23]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d00f      	beq.n	801055c <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 801053c:	4865      	ldr	r0, [pc, #404]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801053e:	f7fe fd55 	bl	800efec <DbgTraceGetFileName>
 8010542:	4601      	mov	r1, r0
 8010544:	f240 339d 	movw	r3, #925	@ 0x39d
 8010548:	4a63      	ldr	r2, [pc, #396]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801054a:	4864      	ldr	r0, [pc, #400]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801054c:	f001 fa40 	bl	80119d0 <iprintf>
 8010550:	7dfb      	ldrb	r3, [r7, #23]
 8010552:	4619      	mov	r1, r3
 8010554:	4863      	ldr	r0, [pc, #396]	@ (80106e4 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 8010556:	f001 fa3b 	bl	80119d0 <iprintf>
 801055a:	e00c      	b.n	8010576 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 801055c:	485d      	ldr	r0, [pc, #372]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801055e:	f7fe fd45 	bl	800efec <DbgTraceGetFileName>
 8010562:	4601      	mov	r1, r0
 8010564:	f240 33a1 	movw	r3, #929	@ 0x3a1
 8010568:	4a5b      	ldr	r2, [pc, #364]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801056a:	485c      	ldr	r0, [pc, #368]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801056c:	f001 fa30 	bl	80119d0 <iprintf>
 8010570:	485d      	ldr	r0, [pc, #372]	@ (80106e8 <Ble_Hci_Gap_Gatt_Init+0x500>)
 8010572:	f001 fa9d 	bl	8011ab0 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8010576:	4b5d      	ldr	r3, [pc, #372]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010578:	2201      	movs	r2, #1
 801057a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 801057c:	4b5b      	ldr	r3, [pc, #364]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	4618      	mov	r0, r3
 8010582:	f7fc fddc 	bl	800d13e <aci_gap_set_io_capability>
 8010586:	4603      	mov	r3, r0
 8010588:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801058a:	7dfb      	ldrb	r3, [r7, #23]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d00f      	beq.n	80105b0 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8010590:	4850      	ldr	r0, [pc, #320]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010592:	f7fe fd2b 	bl	800efec <DbgTraceGetFileName>
 8010596:	4601      	mov	r1, r0
 8010598:	f240 33ab 	movw	r3, #939	@ 0x3ab
 801059c:	4a4e      	ldr	r2, [pc, #312]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801059e:	484f      	ldr	r0, [pc, #316]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80105a0:	f001 fa16 	bl	80119d0 <iprintf>
 80105a4:	7dfb      	ldrb	r3, [r7, #23]
 80105a6:	4619      	mov	r1, r3
 80105a8:	4851      	ldr	r0, [pc, #324]	@ (80106f0 <Ble_Hci_Gap_Gatt_Init+0x508>)
 80105aa:	f001 fa11 	bl	80119d0 <iprintf>
 80105ae:	e00c      	b.n	80105ca <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80105b0:	4848      	ldr	r0, [pc, #288]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80105b2:	f7fe fd1b 	bl	800efec <DbgTraceGetFileName>
 80105b6:	4601      	mov	r1, r0
 80105b8:	f240 33af 	movw	r3, #943	@ 0x3af
 80105bc:	4a46      	ldr	r2, [pc, #280]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80105be:	4847      	ldr	r0, [pc, #284]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80105c0:	f001 fa06 	bl	80119d0 <iprintf>
 80105c4:	484b      	ldr	r0, [pc, #300]	@ (80106f4 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 80105c6:	f001 fa73 	bl	8011ab0 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80105ca:	4b48      	ldr	r3, [pc, #288]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105cc:	2201      	movs	r2, #1
 80105ce:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80105d0:	4b46      	ldr	r3, [pc, #280]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105d2:	2208      	movs	r2, #8
 80105d4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80105d6:	4b45      	ldr	r3, [pc, #276]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105d8:	2210      	movs	r2, #16
 80105da:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80105dc:	4b43      	ldr	r3, [pc, #268]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105de:	2200      	movs	r2, #0
 80105e0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80105e2:	4b42      	ldr	r3, [pc, #264]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105e4:	4a44      	ldr	r2, [pc, #272]	@ (80106f8 <Ble_Hci_Gap_Gatt_Init+0x510>)
 80105e6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80105e8:	4b40      	ldr	r3, [pc, #256]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80105ee:	4b3f      	ldr	r3, [pc, #252]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105f0:	789c      	ldrb	r4, [r3, #2]
 80105f2:	4b3e      	ldr	r3, [pc, #248]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105f4:	785d      	ldrb	r5, [r3, #1]
 80105f6:	4b3d      	ldr	r3, [pc, #244]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105f8:	791b      	ldrb	r3, [r3, #4]
 80105fa:	4a3c      	ldr	r2, [pc, #240]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 80105fc:	7952      	ldrb	r2, [r2, #5]
 80105fe:	493b      	ldr	r1, [pc, #236]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010600:	78c9      	ldrb	r1, [r1, #3]
 8010602:	483a      	ldr	r0, [pc, #232]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010604:	6880      	ldr	r0, [r0, #8]
 8010606:	2600      	movs	r6, #0
 8010608:	9604      	str	r6, [sp, #16]
 801060a:	9003      	str	r0, [sp, #12]
 801060c:	9102      	str	r1, [sp, #8]
 801060e:	9201      	str	r2, [sp, #4]
 8010610:	9300      	str	r3, [sp, #0]
 8010612:	2300      	movs	r3, #0
 8010614:	2201      	movs	r2, #1
 8010616:	4629      	mov	r1, r5
 8010618:	4620      	mov	r0, r4
 801061a:	f7fc fde4 	bl	800d1e6 <aci_gap_set_authentication_requirement>
 801061e:	4603      	mov	r3, r0
 8010620:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8010622:	7dfb      	ldrb	r3, [r7, #23]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d00f      	beq.n	8010648 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8010628:	482a      	ldr	r0, [pc, #168]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801062a:	f7fe fcdf 	bl	800efec <DbgTraceGetFileName>
 801062e:	4601      	mov	r1, r0
 8010630:	f240 33ca 	movw	r3, #970	@ 0x3ca
 8010634:	4a28      	ldr	r2, [pc, #160]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010636:	4829      	ldr	r0, [pc, #164]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010638:	f001 f9ca 	bl	80119d0 <iprintf>
 801063c:	7dfb      	ldrb	r3, [r7, #23]
 801063e:	4619      	mov	r1, r3
 8010640:	482e      	ldr	r0, [pc, #184]	@ (80106fc <Ble_Hci_Gap_Gatt_Init+0x514>)
 8010642:	f001 f9c5 	bl	80119d0 <iprintf>
 8010646:	e00c      	b.n	8010662 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8010648:	4822      	ldr	r0, [pc, #136]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801064a:	f7fe fccf 	bl	800efec <DbgTraceGetFileName>
 801064e:	4601      	mov	r1, r0
 8010650:	f240 33ce 	movw	r3, #974	@ 0x3ce
 8010654:	4a20      	ldr	r2, [pc, #128]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010656:	4821      	ldr	r0, [pc, #132]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010658:	f001 f9ba 	bl	80119d0 <iprintf>
 801065c:	4828      	ldr	r0, [pc, #160]	@ (8010700 <Ble_Hci_Gap_Gatt_Init+0x518>)
 801065e:	f001 fa27 	bl	8011ab0 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8010662:	4b22      	ldr	r3, [pc, #136]	@ (80106ec <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010664:	789b      	ldrb	r3, [r3, #2]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d023      	beq.n	80106b2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 801066a:	f7fd f806 	bl	800d67a <aci_gap_configure_filter_accept_list>
 801066e:	4603      	mov	r3, r0
 8010670:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8010672:	7dfb      	ldrb	r3, [r7, #23]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d00f      	beq.n	8010698 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8010678:	4816      	ldr	r0, [pc, #88]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801067a:	f7fe fcb7 	bl	800efec <DbgTraceGetFileName>
 801067e:	4601      	mov	r1, r0
 8010680:	f240 33d9 	movw	r3, #985	@ 0x3d9
 8010684:	4a14      	ldr	r2, [pc, #80]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010686:	4815      	ldr	r0, [pc, #84]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010688:	f001 f9a2 	bl	80119d0 <iprintf>
 801068c:	7dfb      	ldrb	r3, [r7, #23]
 801068e:	4619      	mov	r1, r3
 8010690:	481c      	ldr	r0, [pc, #112]	@ (8010704 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 8010692:	f001 f99d 	bl	80119d0 <iprintf>
 8010696:	e00c      	b.n	80106b2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8010698:	480e      	ldr	r0, [pc, #56]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801069a:	f7fe fca7 	bl	800efec <DbgTraceGetFileName>
 801069e:	4601      	mov	r1, r0
 80106a0:	f240 33dd 	movw	r3, #989	@ 0x3dd
 80106a4:	4a0c      	ldr	r2, [pc, #48]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80106a6:	480d      	ldr	r0, [pc, #52]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80106a8:	f001 f992 	bl	80119d0 <iprintf>
 80106ac:	4816      	ldr	r0, [pc, #88]	@ (8010708 <Ble_Hci_Gap_Gatt_Init+0x520>)
 80106ae:	f001 f9ff 	bl	8011ab0 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80106b2:	4808      	ldr	r0, [pc, #32]	@ (80106d4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80106b4:	f7fe fc9a 	bl	800efec <DbgTraceGetFileName>
 80106b8:	4601      	mov	r1, r0
 80106ba:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80106be:	4a06      	ldr	r2, [pc, #24]	@ (80106d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80106c0:	4806      	ldr	r0, [pc, #24]	@ (80106dc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80106c2:	f001 f985 	bl	80119d0 <iprintf>
 80106c6:	4811      	ldr	r0, [pc, #68]	@ (801070c <Ble_Hci_Gap_Gatt_Init+0x524>)
 80106c8:	f001 f982 	bl	80119d0 <iprintf>
}
 80106cc:	bf00      	nop
 80106ce:	371c      	adds	r7, #28
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106d4:	08012ec8 	.word	0x08012ec8
 80106d8:	08014008 	.word	0x08014008
 80106dc:	08012ee4 	.word	0x08012ee4
 80106e0:	080137a8 	.word	0x080137a8
 80106e4:	080137c8 	.word	0x080137c8
 80106e8:	08013804 	.word	0x08013804
 80106ec:	200008ec 	.word	0x200008ec
 80106f0:	08013830 	.word	0x08013830
 80106f4:	08013870 	.word	0x08013870
 80106f8:	0001b207 	.word	0x0001b207
 80106fc:	080138a0 	.word	0x080138a0
 8010700:	080138ec 	.word	0x080138ec
 8010704:	08013928 	.word	0x08013928
 8010708:	08013968 	.word	0x08013968
 801070c:	08013998 	.word	0x08013998

08010710 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b08c      	sub	sp, #48	@ 0x30
 8010714:	af08      	add	r7, sp, #32
 8010716:	4603      	mov	r3, r0
 8010718:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801071a:	2392      	movs	r3, #146	@ 0x92
 801071c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801071e:	4a32      	ldr	r2, [pc, #200]	@ (80107e8 <Adv_Request+0xd8>)
 8010720:	79fb      	ldrb	r3, [r7, #7]
 8010722:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8010726:	2300      	movs	r3, #0
 8010728:	9306      	str	r3, [sp, #24]
 801072a:	2300      	movs	r3, #0
 801072c:	9305      	str	r3, [sp, #20]
 801072e:	2300      	movs	r3, #0
 8010730:	9304      	str	r3, [sp, #16]
 8010732:	2300      	movs	r3, #0
 8010734:	9303      	str	r3, [sp, #12]
 8010736:	2300      	movs	r3, #0
 8010738:	9302      	str	r3, [sp, #8]
 801073a:	2300      	movs	r3, #0
 801073c:	9301      	str	r3, [sp, #4]
 801073e:	2300      	movs	r3, #0
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	2300      	movs	r3, #0
 8010744:	22a0      	movs	r2, #160	@ 0xa0
 8010746:	2180      	movs	r1, #128	@ 0x80
 8010748:	2000      	movs	r0, #0
 801074a:	f7fc fbfe 	bl	800cf4a <aci_gap_set_discoverable>
 801074e:	4603      	mov	r3, r0
 8010750:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00f      	beq.n	8010778 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8010758:	4824      	ldr	r0, [pc, #144]	@ (80107ec <Adv_Request+0xdc>)
 801075a:	f7fe fc47 	bl	800efec <DbgTraceGetFileName>
 801075e:	4601      	mov	r1, r0
 8010760:	f240 33f6 	movw	r3, #1014	@ 0x3f6
 8010764:	4a22      	ldr	r2, [pc, #136]	@ (80107f0 <Adv_Request+0xe0>)
 8010766:	4823      	ldr	r0, [pc, #140]	@ (80107f4 <Adv_Request+0xe4>)
 8010768:	f001 f932 	bl	80119d0 <iprintf>
 801076c:	7bfb      	ldrb	r3, [r7, #15]
 801076e:	4619      	mov	r1, r3
 8010770:	4821      	ldr	r0, [pc, #132]	@ (80107f8 <Adv_Request+0xe8>)
 8010772:	f001 f92d 	bl	80119d0 <iprintf>
 8010776:	e00c      	b.n	8010792 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8010778:	481c      	ldr	r0, [pc, #112]	@ (80107ec <Adv_Request+0xdc>)
 801077a:	f7fe fc37 	bl	800efec <DbgTraceGetFileName>
 801077e:	4601      	mov	r1, r0
 8010780:	f240 33fa 	movw	r3, #1018	@ 0x3fa
 8010784:	4a1a      	ldr	r2, [pc, #104]	@ (80107f0 <Adv_Request+0xe0>)
 8010786:	481b      	ldr	r0, [pc, #108]	@ (80107f4 <Adv_Request+0xe4>)
 8010788:	f001 f922 	bl	80119d0 <iprintf>
 801078c:	481b      	ldr	r0, [pc, #108]	@ (80107fc <Adv_Request+0xec>)
 801078e:	f001 f98f 	bl	8011ab0 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8010792:	491b      	ldr	r1, [pc, #108]	@ (8010800 <Adv_Request+0xf0>)
 8010794:	201b      	movs	r0, #27
 8010796:	f7fc fefe 	bl	800d596 <aci_gap_update_adv_data>
 801079a:	4603      	mov	r3, r0
 801079c:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 801079e:	7bfb      	ldrb	r3, [r7, #15]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d00f      	beq.n	80107c4 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80107a4:	4811      	ldr	r0, [pc, #68]	@ (80107ec <Adv_Request+0xdc>)
 80107a6:	f7fe fc21 	bl	800efec <DbgTraceGetFileName>
 80107aa:	4601      	mov	r1, r0
 80107ac:	f240 4305 	movw	r3, #1029	@ 0x405
 80107b0:	4a0f      	ldr	r2, [pc, #60]	@ (80107f0 <Adv_Request+0xe0>)
 80107b2:	4810      	ldr	r0, [pc, #64]	@ (80107f4 <Adv_Request+0xe4>)
 80107b4:	f001 f90c 	bl	80119d0 <iprintf>
 80107b8:	7bfb      	ldrb	r3, [r7, #15]
 80107ba:	4619      	mov	r1, r3
 80107bc:	4811      	ldr	r0, [pc, #68]	@ (8010804 <Adv_Request+0xf4>)
 80107be:	f001 f907 	bl	80119d0 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80107c2:	e00d      	b.n	80107e0 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 80107c4:	4809      	ldr	r0, [pc, #36]	@ (80107ec <Adv_Request+0xdc>)
 80107c6:	f7fe fc11 	bl	800efec <DbgTraceGetFileName>
 80107ca:	4601      	mov	r1, r0
 80107cc:	f240 4309 	movw	r3, #1033	@ 0x409
 80107d0:	4a07      	ldr	r2, [pc, #28]	@ (80107f0 <Adv_Request+0xe0>)
 80107d2:	4808      	ldr	r0, [pc, #32]	@ (80107f4 <Adv_Request+0xe4>)
 80107d4:	f001 f8fc 	bl	80119d0 <iprintf>
 80107d8:	480b      	ldr	r0, [pc, #44]	@ (8010808 <Adv_Request+0xf8>)
 80107da:	f001 f8f9 	bl	80119d0 <iprintf>
  return;
 80107de:	bf00      	nop
}
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	200008ec 	.word	0x200008ec
 80107ec:	08012ec8 	.word	0x08012ec8
 80107f0:	08014020 	.word	0x08014020
 80107f4:	08012ee4 	.word	0x08012ee4
 80107f8:	080139c4 	.word	0x080139c4
 80107fc:	080139fc 	.word	0x080139fc
 8010800:	200000e8 	.word	0x200000e8
 8010804:	08013a24 	.word	0x08013a24
 8010808:	08013a58 	.word	0x08013a58

0801080c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b086      	sub	sp, #24
 8010810:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8010812:	f7ff f963 	bl	800fadc <LL_FLASH_GetUDN>
 8010816:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801081e:	d023      	beq.n	8010868 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8010820:	f7ff f974 	bl	800fb0c <LL_FLASH_GetSTCompanyID>
 8010824:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8010826:	f7ff f965 	bl	800faf4 <LL_FLASH_GetDeviceID>
 801082a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	b2da      	uxtb	r2, r3
 8010830:	4b16      	ldr	r3, [pc, #88]	@ (801088c <BleGetBdAddress+0x80>)
 8010832:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	0a1b      	lsrs	r3, r3, #8
 8010838:	b2da      	uxtb	r2, r3
 801083a:	4b14      	ldr	r3, [pc, #80]	@ (801088c <BleGetBdAddress+0x80>)
 801083c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	b2da      	uxtb	r2, r3
 8010842:	4b12      	ldr	r3, [pc, #72]	@ (801088c <BleGetBdAddress+0x80>)
 8010844:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	b2da      	uxtb	r2, r3
 801084a:	4b10      	ldr	r3, [pc, #64]	@ (801088c <BleGetBdAddress+0x80>)
 801084c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	0a1b      	lsrs	r3, r3, #8
 8010852:	b2da      	uxtb	r2, r3
 8010854:	4b0d      	ldr	r3, [pc, #52]	@ (801088c <BleGetBdAddress+0x80>)
 8010856:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	0c1b      	lsrs	r3, r3, #16
 801085c:	b2da      	uxtb	r2, r3
 801085e:	4b0b      	ldr	r3, [pc, #44]	@ (801088c <BleGetBdAddress+0x80>)
 8010860:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8010862:	4b0a      	ldr	r3, [pc, #40]	@ (801088c <BleGetBdAddress+0x80>)
 8010864:	617b      	str	r3, [r7, #20]
 8010866:	e00b      	b.n	8010880 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8010868:	2000      	movs	r0, #0
 801086a:	f7fe fc87 	bl	800f17c <OTP_Read>
 801086e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d002      	beq.n	801087c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	617b      	str	r3, [r7, #20]
 801087a:	e001      	b.n	8010880 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 801087c:	4b04      	ldr	r3, [pc, #16]	@ (8010890 <BleGetBdAddress+0x84>)
 801087e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8010880:	697b      	ldr	r3, [r7, #20]
}
 8010882:	4618      	mov	r0, r3
 8010884:	3718      	adds	r7, #24
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	200008e4 	.word	0x200008e4
 8010890:	08013fb8 	.word	0x08013fb8

08010894 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 801089a:	4b1f      	ldr	r3, [pc, #124]	@ (8010918 <Adv_Cancel+0x84>)
 801089c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80108a0:	2b05      	cmp	r3, #5
 80108a2:	d035      	beq.n	8010910 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80108a4:	2392      	movs	r3, #146	@ 0x92
 80108a6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80108a8:	f7fc fb2b 	bl	800cf02 <aci_gap_set_non_discoverable>
 80108ac:	4603      	mov	r3, r0
 80108ae:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80108b0:	4b19      	ldr	r3, [pc, #100]	@ (8010918 <Adv_Cancel+0x84>)
 80108b2:	2200      	movs	r2, #0
 80108b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 80108b8:	79fb      	ldrb	r3, [r7, #7]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d00d      	beq.n	80108da <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 80108be:	4817      	ldr	r0, [pc, #92]	@ (801091c <Adv_Cancel+0x88>)
 80108c0:	f7fe fb94 	bl	800efec <DbgTraceGetFileName>
 80108c4:	4601      	mov	r1, r0
 80108c6:	f240 4357 	movw	r3, #1111	@ 0x457
 80108ca:	4a15      	ldr	r2, [pc, #84]	@ (8010920 <Adv_Cancel+0x8c>)
 80108cc:	4815      	ldr	r0, [pc, #84]	@ (8010924 <Adv_Cancel+0x90>)
 80108ce:	f001 f87f 	bl	80119d0 <iprintf>
 80108d2:	4815      	ldr	r0, [pc, #84]	@ (8010928 <Adv_Cancel+0x94>)
 80108d4:	f001 f87c 	bl	80119d0 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80108d8:	e01a      	b.n	8010910 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 80108da:	4810      	ldr	r0, [pc, #64]	@ (801091c <Adv_Cancel+0x88>)
 80108dc:	f7fe fb86 	bl	800efec <DbgTraceGetFileName>
 80108e0:	4601      	mov	r1, r0
 80108e2:	f240 435b 	movw	r3, #1115	@ 0x45b
 80108e6:	4a0e      	ldr	r2, [pc, #56]	@ (8010920 <Adv_Cancel+0x8c>)
 80108e8:	480e      	ldr	r0, [pc, #56]	@ (8010924 <Adv_Cancel+0x90>)
 80108ea:	f001 f871 	bl	80119d0 <iprintf>
 80108ee:	480f      	ldr	r0, [pc, #60]	@ (801092c <Adv_Cancel+0x98>)
 80108f0:	f001 f86e 	bl	80119d0 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80108f4:	4809      	ldr	r0, [pc, #36]	@ (801091c <Adv_Cancel+0x88>)
 80108f6:	f7fe fb79 	bl	800efec <DbgTraceGetFileName>
 80108fa:	4601      	mov	r1, r0
 80108fc:	f240 435c 	movw	r3, #1116	@ 0x45c
 8010900:	4a07      	ldr	r2, [pc, #28]	@ (8010920 <Adv_Cancel+0x8c>)
 8010902:	4808      	ldr	r0, [pc, #32]	@ (8010924 <Adv_Cancel+0x90>)
 8010904:	f001 f864 	bl	80119d0 <iprintf>
 8010908:	4809      	ldr	r0, [pc, #36]	@ (8010930 <Adv_Cancel+0x9c>)
 801090a:	f001 f861 	bl	80119d0 <iprintf>
  return;
 801090e:	bf00      	nop
 8010910:	bf00      	nop
}
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	200008ec 	.word	0x200008ec
 801091c:	08012ec8 	.word	0x08012ec8
 8010920:	0801402c 	.word	0x0801402c
 8010924:	08012ee4 	.word	0x08012ee4
 8010928:	08013a80 	.word	0x08013a80
 801092c:	08013aa4 	.word	0x08013aa4
 8010930:	08013aac 	.word	0x08013aac

08010934 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 801093c:	2100      	movs	r1, #0
 801093e:	2002      	movs	r0, #2
 8010940:	f000 fe68 	bl	8011614 <UTIL_SEQ_SetTask>

  return;
 8010944:	bf00      	nop
}
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8010954:	2001      	movs	r0, #1
 8010956:	f000 fec9 	bl	80116ec <UTIL_SEQ_SetEvt>

  return;
 801095a:	bf00      	nop
}
 801095c:	3708      	adds	r7, #8
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b082      	sub	sp, #8
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801096a:	2001      	movs	r0, #1
 801096c:	f000 fede 	bl	801172c <UTIL_SEQ_WaitEvt>

  return;
 8010970:	bf00      	nop
}
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	3308      	adds	r3, #8
 801098a:	4618      	mov	r0, r3
 801098c:	f7fd fccc 	bl	800e328 <SVCCTL_UserEvtRx>
 8010990:	4603      	mov	r3, r0
 8010992:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8010994:	7afb      	ldrb	r3, [r7, #11]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d003      	beq.n	80109a2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2201      	movs	r2, #1
 801099e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80109a0:	e003      	b.n	80109aa <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2200      	movs	r2, #0
 80109a6:	701a      	strb	r2, [r3, #0]
  return;
 80109a8:	bf00      	nop
}
 80109aa:	3710      	adds	r7, #16
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	4603      	mov	r3, r0
 80109b8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80109ba:	79fb      	ldrb	r3, [r7, #7]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <BLE_StatusNot+0x16>
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d006      	beq.n	80109d2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80109c4:	e00b      	b.n	80109de <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80109c6:	2307      	movs	r3, #7
 80109c8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f000 fe4e 	bl	801166c <UTIL_SEQ_PauseTask>
      break;
 80109d0:	e005      	b.n	80109de <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80109d2:	2307      	movs	r3, #7
 80109d4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f000 fe68 	bl	80116ac <UTIL_SEQ_ResumeTask>
      break;
 80109dc:	bf00      	nop
  }

  return;
 80109de:	bf00      	nop
}
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
	...

080109e8 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	// copy data update buffer +BCH
	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6859      	ldr	r1, [r3, #4]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	7a1b      	ldrb	r3, [r3, #8]
 80109f8:	461a      	mov	r2, r3
 80109fa:	4811      	ldr	r0, [pc, #68]	@ (8010a40 <Custom_STM_App_Notification+0x58>)
 80109fc:	f001 f9c9 	bl	8011d92 <memcpy>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	2b03      	cmp	r3, #3
 8010a06:	d815      	bhi.n	8010a34 <Custom_STM_App_Notification+0x4c>
 8010a08:	a201      	add	r2, pc, #4	@ (adr r2, 8010a10 <Custom_STM_App_Notification+0x28>)
 8010a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a0e:	bf00      	nop
 8010a10:	08010a21 	.word	0x08010a21
 8010a14:	08010a2d 	.word	0x08010a2d
 8010a18:	08010a35 	.word	0x08010a35
 8010a1c:	08010a35 	.word	0x08010a35

    /* envoi_rep_definition */
    case CUSTOM_STM_MOVEMENT_RECORD_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOVEMENT_RECORD_READ_EVT */
    	// +BCH
    	Custom_App_Context.Movement_record_Notification_Status = 1;
 8010a20:	4b08      	ldr	r3, [pc, #32]	@ (8010a44 <Custom_STM_App_Notification+0x5c>)
 8010a22:	2201      	movs	r2, #1
 8010a24:	701a      	strb	r2, [r3, #0]
    	Custom_Movement_record_Send_Notification();
 8010a26:	f000 f85b 	bl	8010ae0 <Custom_Movement_record_Send_Notification>
      /* USER CODE END CUSTOM_STM_MOVEMENT_RECORD_READ_EVT */
      break;
 8010a2a:	e004      	b.n	8010a36 <Custom_STM_App_Notification+0x4e>

    case CUSTOM_STM_MOVEMENT_RECORD_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOVEMENT_RECORD_WRITE_NO_RESP_EVT */
    	Custom_App_Context.Movement_record_Notification_Status = 0;
 8010a2c:	4b05      	ldr	r3, [pc, #20]	@ (8010a44 <Custom_STM_App_Notification+0x5c>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_MOVEMENT_RECORD_WRITE_NO_RESP_EVT */
      break;
 8010a32:	e000      	b.n	8010a36 <Custom_STM_App_Notification+0x4e>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8010a34:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8010a36:	bf00      	nop
}
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	bf00      	nop
 8010a40:	20000978 	.word	0x20000978
 8010a44:	20000974 	.word	0x20000974

08010a48 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d002      	beq.n	8010a5e <Custom_APP_Notification+0x16>
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d002      	beq.n	8010a62 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8010a5c:	e002      	b.n	8010a64 <Custom_APP_Notification+0x1c>
      break;
 8010a5e:	bf00      	nop
 8010a60:	e000      	b.n	8010a64 <Custom_APP_Notification+0x1c>
      break;
 8010a62:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8010a64:	bf00      	nop
}
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  /* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.Movement_record_Notification_Status = 0;
 8010a74:	4b05      	ldr	r3, [pc, #20]	@ (8010a8c <Custom_APP_Init+0x1c>)
 8010a76:	2200      	movs	r2, #0
 8010a78:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_RegTask(1 << CFG_TASK_ACC_rep_ref_ID, UTIL_SEQ_RFU,
 8010a7a:	4a05      	ldr	r2, [pc, #20]	@ (8010a90 <Custom_APP_Init+0x20>)
 8010a7c:	2100      	movs	r1, #0
 8010a7e:	2004      	movs	r0, #4
 8010a80:	f000 fda6 	bl	80115d0 <UTIL_SEQ_RegTask>
			Custom_Movement_record_Send_Notification);
	Custom_Movement_record_Update_Char();
 8010a84:	f000 f818 	bl	8010ab8 <Custom_Movement_record_Update_Char>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8010a88:	bf00      	nop
}
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	20000974 	.word	0x20000974
 8010a90:	08010ae1 	.word	0x08010ae1

08010a94 <BLE_MVT_REF>:

/* USER CODE BEGIN FD */
void BLE_MVT_REF(void) {
 8010a94:	b580      	push	{r7, lr}
 8010a96:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ref_ID, CFG_SCH_PRIO_0);
 8010a98:	2100      	movs	r1, #0
 8010a9a:	2004      	movs	r0, #4
 8010a9c:	f000 fdba 	bl	8011614 <UTIL_SEQ_SetTask>

	//UTIL_SEQ_SetTask( 1<<CFG_TASK_B1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

	Custom_App_Context.Movement_record_Notification_Status = 1;
 8010aa0:	4b03      	ldr	r3, [pc, #12]	@ (8010ab0 <BLE_MVT_REF+0x1c>)
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	701a      	strb	r2, [r3, #0]
	printf("on est dans le FSVC_APP_B1_Button_Action");
 8010aa6:	4803      	ldr	r0, [pc, #12]	@ (8010ab4 <BLE_MVT_REF+0x20>)
 8010aa8:	f000 ff92 	bl	80119d0 <iprintf>

	return;
 8010aac:	bf00      	nop
}
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	20000974 	.word	0x20000974
 8010ab4:	08013ac8 	.word	0x08013ac8

08010ab8 <Custom_Movement_record_Update_Char>:
 *
 *************************************************************/

/* envoi_rep_definition */
void Custom_Movement_record_Update_Char(void) /* Property Read */
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Movement_record_UC_1*/

  /* USER CODE END Movement_record_UC_1*/

  if (updateflag != 0)
 8010ac2:	79fb      	ldrb	r3, [r7, #7]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d004      	beq.n	8010ad2 <Custom_Movement_record_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MOVEMENT_RECORD, (uint8_t *)UpdateCharData);
 8010ac8:	4904      	ldr	r1, [pc, #16]	@ (8010adc <Custom_Movement_record_Update_Char+0x24>)
 8010aca:	2000      	movs	r0, #0
 8010acc:	f000 f9ac 	bl	8010e28 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Movement_record_UC_Last*/

  /* USER CODE END Movement_record_UC_Last*/
  return;
 8010ad0:	bf00      	nop
 8010ad2:	bf00      	nop
}
 8010ad4:	3708      	adds	r7, #8
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	20000978 	.word	0x20000978

08010ae0 <Custom_Movement_record_Send_Notification>:

void Custom_Movement_record_Send_Notification(void) /* Property Notification */
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Movement_record_NS_1*/
  if (Custom_App_Context.Movement_record_Notification_Status == 1) {
 8010aea:	4b1c      	ldr	r3, [pc, #112]	@ (8010b5c <Custom_Movement_record_Send_Notification+0x7c>)
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	d11c      	bne.n	8010b2c <Custom_Movement_record_Send_Notification+0x4c>
  		updateflag = 1;
 8010af2:	2301      	movs	r3, #1
 8010af4:	71fb      	strb	r3, [r7, #7]
  		char rep_valide[] = "salut";
 8010af6:	4a1a      	ldr	r2, [pc, #104]	@ (8010b60 <Custom_Movement_record_Send_Notification+0x80>)
 8010af8:	463b      	mov	r3, r7
 8010afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010afe:	6018      	str	r0, [r3, #0]
 8010b00:	3304      	adds	r3, #4
 8010b02:	8019      	strh	r1, [r3, #0]
  		memcpy(&NotifyCharData[0], &rep_valide, sizeof(rep_valide));
 8010b04:	4b17      	ldr	r3, [pc, #92]	@ (8010b64 <Custom_Movement_record_Send_Notification+0x84>)
 8010b06:	463a      	mov	r2, r7
 8010b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b0c:	6018      	str	r0, [r3, #0]
 8010b0e:	3304      	adds	r3, #4
 8010b10:	8019      	strh	r1, [r3, #0]
  		APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep good \n");
 8010b12:	4815      	ldr	r0, [pc, #84]	@ (8010b68 <Custom_Movement_record_Send_Notification+0x88>)
 8010b14:	f7fe fa6a 	bl	800efec <DbgTraceGetFileName>
 8010b18:	4601      	mov	r1, r0
 8010b1a:	23ee      	movs	r3, #238	@ 0xee
 8010b1c:	4a13      	ldr	r2, [pc, #76]	@ (8010b6c <Custom_Movement_record_Send_Notification+0x8c>)
 8010b1e:	4814      	ldr	r0, [pc, #80]	@ (8010b70 <Custom_Movement_record_Send_Notification+0x90>)
 8010b20:	f000 ff56 	bl	80119d0 <iprintf>
 8010b24:	4813      	ldr	r0, [pc, #76]	@ (8010b74 <Custom_Movement_record_Send_Notification+0x94>)
 8010b26:	f000 ffc3 	bl	8011ab0 <puts>
 8010b2a:	e00b      	b.n	8010b44 <Custom_Movement_record_Send_Notification+0x64>

  	} else {
  		APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 8010b2c:	480e      	ldr	r0, [pc, #56]	@ (8010b68 <Custom_Movement_record_Send_Notification+0x88>)
 8010b2e:	f7fe fa5d 	bl	800efec <DbgTraceGetFileName>
 8010b32:	4601      	mov	r1, r0
 8010b34:	23f1      	movs	r3, #241	@ 0xf1
 8010b36:	4a0d      	ldr	r2, [pc, #52]	@ (8010b6c <Custom_Movement_record_Send_Notification+0x8c>)
 8010b38:	480d      	ldr	r0, [pc, #52]	@ (8010b70 <Custom_Movement_record_Send_Notification+0x90>)
 8010b3a:	f000 ff49 	bl	80119d0 <iprintf>
 8010b3e:	480e      	ldr	r0, [pc, #56]	@ (8010b78 <Custom_Movement_record_Send_Notification+0x98>)
 8010b40:	f000 ffb6 	bl	8011ab0 <puts>
  	}
  /* USER CODE END Movement_record_NS_1*/

  if (updateflag != 0)
 8010b44:	79fb      	ldrb	r3, [r7, #7]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d004      	beq.n	8010b54 <Custom_Movement_record_Send_Notification+0x74>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MOVEMENT_RECORD, (uint8_t *)NotifyCharData);
 8010b4a:	4906      	ldr	r1, [pc, #24]	@ (8010b64 <Custom_Movement_record_Send_Notification+0x84>)
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	f000 f96b 	bl	8010e28 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Movement_record_NS_Last*/

  /* USER CODE END Movement_record_NS_Last*/

  return;
 8010b52:	bf00      	nop
 8010b54:	bf00      	nop
}
 8010b56:	3708      	adds	r7, #8
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	20000974 	.word	0x20000974
 8010b60:	08013ba8 	.word	0x08013ba8
 8010b64:	20000a70 	.word	0x20000a70
 8010b68:	08013af4 	.word	0x08013af4
 8010b6c:	08014038 	.word	0x08014038
 8010b70:	08013b14 	.word	0x08013b14
 8010b74:	08013b28 	.word	0x08013b28
 8010b78:	08013b60 	.word	0x08013b60

08010b7c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b08c      	sub	sp, #48	@ 0x30
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8010b84:	2300      	movs	r3, #0
 8010b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8010b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	2bff      	cmp	r3, #255	@ 0xff
 8010b96:	d178      	bne.n	8010c8a <Custom_STM_Event_Handler+0x10e>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8010b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b9a:	3302      	adds	r3, #2
 8010b9c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8010b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	f640 4214 	movw	r2, #3092	@ 0xc14
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	d040      	beq.n	8010c2e <Custom_STM_Event_Handler+0xb2>
 8010bac:	f640 4214 	movw	r2, #3092	@ 0xc14
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	dc62      	bgt.n	8010c7a <Custom_STM_Event_Handler+0xfe>
 8010bb4:	f640 4201 	movw	r2, #3073	@ 0xc01
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d004      	beq.n	8010bc6 <Custom_STM_Event_Handler+0x4a>
 8010bbc:	f640 4213 	movw	r2, #3091	@ 0xc13
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d04a      	beq.n	8010c5a <Custom_STM_Event_Handler+0xde>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8010bc4:	e059      	b.n	8010c7a <Custom_STM_Event_Handler+0xfe>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc8:	3302      	adds	r3, #2
 8010bca:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMovement_RecordHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	885b      	ldrh	r3, [r3, #2]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	4b30      	ldr	r3, [pc, #192]	@ (8010c98 <Custom_STM_Event_Handler+0x11c>)
 8010bd6:	885b      	ldrh	r3, [r3, #2]
 8010bd8:	3302      	adds	r3, #2
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d119      	bne.n	8010c12 <Custom_STM_Event_Handler+0x96>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010bde:	2301      	movs	r3, #1
 8010be0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 8010be4:	69bb      	ldr	r3, [r7, #24]
 8010be6:	7a1b      	ldrb	r3, [r3, #8]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d002      	beq.n	8010bf2 <Custom_STM_Event_Handler+0x76>
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d008      	beq.n	8010c02 <Custom_STM_Event_Handler+0x86>
              break;
 8010bf0:	e01c      	b.n	8010c2c <Custom_STM_Event_Handler+0xb0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOVEMENT_RECORD_NOTIFY_DISABLED_EVT;
 8010bf2:	2303      	movs	r3, #3
 8010bf4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010bf6:	f107 0308 	add.w	r3, r7, #8
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff fef4 	bl	80109e8 <Custom_STM_App_Notification>
                break;
 8010c00:	e014      	b.n	8010c2c <Custom_STM_Event_Handler+0xb0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOVEMENT_RECORD_NOTIFY_ENABLED_EVT;
 8010c02:	2302      	movs	r3, #2
 8010c04:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010c06:	f107 0308 	add.w	r3, r7, #8
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7ff feec 	bl	80109e8 <Custom_STM_App_Notification>
                break;
 8010c10:	e00c      	b.n	8010c2c <Custom_STM_Event_Handler+0xb0>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMovement_RecordHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	885b      	ldrh	r3, [r3, #2]
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	461a      	mov	r2, r3
 8010c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8010c98 <Custom_STM_Event_Handler+0x11c>)
 8010c1c:	885b      	ldrh	r3, [r3, #2]
 8010c1e:	3301      	adds	r3, #1
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d12c      	bne.n	8010c7e <Custom_STM_Event_Handler+0x102>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010c24:	2301      	movs	r3, #1
 8010c26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8010c2a:	e028      	b.n	8010c7e <Custom_STM_Event_Handler+0x102>
 8010c2c:	e027      	b.n	8010c7e <Custom_STM_Event_Handler+0x102>
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c30:	3302      	adds	r3, #2
 8010c32:	623b      	str	r3, [r7, #32]
          if (read_req->Attribute_Handle == (CustomContext.CustomMovement_RecordHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8010c34:	6a3b      	ldr	r3, [r7, #32]
 8010c36:	885b      	ldrh	r3, [r3, #2]
 8010c38:	b29b      	uxth	r3, r3
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	4b16      	ldr	r3, [pc, #88]	@ (8010c98 <Custom_STM_Event_Handler+0x11c>)
 8010c3e:	885b      	ldrh	r3, [r3, #2]
 8010c40:	3301      	adds	r3, #1
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d11d      	bne.n	8010c82 <Custom_STM_Event_Handler+0x106>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010c46:	2301      	movs	r3, #1
 8010c48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            aci_gatt_allow_read(read_req->Connection_Handle);
 8010c4c:	6a3b      	ldr	r3, [r7, #32]
 8010c4e:	881b      	ldrh	r3, [r3, #0]
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7fd f848 	bl	800dce8 <aci_gatt_allow_read>
          break;
 8010c58:	e013      	b.n	8010c82 <Custom_STM_Event_Handler+0x106>
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c5c:	3302      	adds	r3, #2
 8010c5e:	61fb      	str	r3, [r7, #28]
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomMovement_RecordHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	885b      	ldrh	r3, [r3, #2]
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	461a      	mov	r2, r3
 8010c68:	4b0b      	ldr	r3, [pc, #44]	@ (8010c98 <Custom_STM_Event_Handler+0x11c>)
 8010c6a:	885b      	ldrh	r3, [r3, #2]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d109      	bne.n	8010c86 <Custom_STM_Event_Handler+0x10a>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010c72:	2301      	movs	r3, #1
 8010c74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8010c78:	e005      	b.n	8010c86 <Custom_STM_Event_Handler+0x10a>
          break;
 8010c7a:	bf00      	nop
 8010c7c:	e006      	b.n	8010c8c <Custom_STM_Event_Handler+0x110>
          break;
 8010c7e:	bf00      	nop
 8010c80:	e004      	b.n	8010c8c <Custom_STM_Event_Handler+0x110>
          break;
 8010c82:	bf00      	nop
 8010c84:	e002      	b.n	8010c8c <Custom_STM_Event_Handler+0x110>
          break;
 8010c86:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010c88:	e000      	b.n	8010c8c <Custom_STM_Event_Handler+0x110>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8010c8a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8010c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8010c90:	4618      	mov	r0, r3
 8010c92:	3730      	adds	r7, #48	@ 0x30
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	20000b68 	.word	0x20000b68

08010c9c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b08c      	sub	sp, #48	@ 0x30
 8010ca0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010ca2:	2392      	movs	r3, #146	@ 0x92
 8010ca4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8010ca6:	4855      	ldr	r0, [pc, #340]	@ (8010dfc <SVCCTL_InitCustomSvc+0x160>)
 8010ca8:	f7fd fb24 	bl	800e2f4 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 8010cac:	2304      	movs	r3, #4
 8010cae:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_ENVOI_REP_DEFINITION_UUID(uuid.Char_UUID_128);
 8010cb0:	238f      	movs	r3, #143	@ 0x8f
 8010cb2:	713b      	strb	r3, [r7, #4]
 8010cb4:	23e5      	movs	r3, #229	@ 0xe5
 8010cb6:	717b      	strb	r3, [r7, #5]
 8010cb8:	23b3      	movs	r3, #179	@ 0xb3
 8010cba:	71bb      	strb	r3, [r7, #6]
 8010cbc:	23d5      	movs	r3, #213	@ 0xd5
 8010cbe:	71fb      	strb	r3, [r7, #7]
 8010cc0:	232e      	movs	r3, #46	@ 0x2e
 8010cc2:	723b      	strb	r3, [r7, #8]
 8010cc4:	237f      	movs	r3, #127	@ 0x7f
 8010cc6:	727b      	strb	r3, [r7, #9]
 8010cc8:	234a      	movs	r3, #74	@ 0x4a
 8010cca:	72bb      	strb	r3, [r7, #10]
 8010ccc:	2398      	movs	r3, #152	@ 0x98
 8010cce:	72fb      	strb	r3, [r7, #11]
 8010cd0:	232a      	movs	r3, #42	@ 0x2a
 8010cd2:	733b      	strb	r3, [r7, #12]
 8010cd4:	2348      	movs	r3, #72	@ 0x48
 8010cd6:	737b      	strb	r3, [r7, #13]
 8010cd8:	237a      	movs	r3, #122	@ 0x7a
 8010cda:	73bb      	strb	r3, [r7, #14]
 8010cdc:	23cc      	movs	r3, #204	@ 0xcc
 8010cde:	73fb      	strb	r3, [r7, #15]
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	743b      	strb	r3, [r7, #16]
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	747b      	strb	r3, [r7, #17]
 8010ce8:	2300      	movs	r3, #0
 8010cea:	74bb      	strb	r3, [r7, #18]
 8010cec:	2300      	movs	r3, #0
 8010cee:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8010cf0:	7dbb      	ldrb	r3, [r7, #22]
 8010cf2:	1d39      	adds	r1, r7, #4
 8010cf4:	4a42      	ldr	r2, [pc, #264]	@ (8010e00 <SVCCTL_InitCustomSvc+0x164>)
 8010cf6:	9200      	str	r2, [sp, #0]
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	2002      	movs	r0, #2
 8010cfc:	f7fc fd6d 	bl	800d7da <aci_gatt_add_service>
 8010d00:	4603      	mov	r3, r0
 8010d02:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomRep_RefHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8010d04:	7dfb      	ldrb	r3, [r7, #23]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00f      	beq.n	8010d2a <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: rep_ref, error code: 0x%x \n\r", ret);
 8010d0a:	483e      	ldr	r0, [pc, #248]	@ (8010e04 <SVCCTL_InitCustomSvc+0x168>)
 8010d0c:	f7fe f96e 	bl	800efec <DbgTraceGetFileName>
 8010d10:	4601      	mov	r1, r0
 8010d12:	f240 1349 	movw	r3, #329	@ 0x149
 8010d16:	4a3c      	ldr	r2, [pc, #240]	@ (8010e08 <SVCCTL_InitCustomSvc+0x16c>)
 8010d18:	483c      	ldr	r0, [pc, #240]	@ (8010e0c <SVCCTL_InitCustomSvc+0x170>)
 8010d1a:	f000 fe59 	bl	80119d0 <iprintf>
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
 8010d20:	4619      	mov	r1, r3
 8010d22:	483b      	ldr	r0, [pc, #236]	@ (8010e10 <SVCCTL_InitCustomSvc+0x174>)
 8010d24:	f000 fe54 	bl	80119d0 <iprintf>
 8010d28:	e00c      	b.n	8010d44 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: rep_ref \n\r");
 8010d2a:	4836      	ldr	r0, [pc, #216]	@ (8010e04 <SVCCTL_InitCustomSvc+0x168>)
 8010d2c:	f7fe f95e 	bl	800efec <DbgTraceGetFileName>
 8010d30:	4601      	mov	r1, r0
 8010d32:	f240 134d 	movw	r3, #333	@ 0x14d
 8010d36:	4a34      	ldr	r2, [pc, #208]	@ (8010e08 <SVCCTL_InitCustomSvc+0x16c>)
 8010d38:	4834      	ldr	r0, [pc, #208]	@ (8010e0c <SVCCTL_InitCustomSvc+0x170>)
 8010d3a:	f000 fe49 	bl	80119d0 <iprintf>
 8010d3e:	4835      	ldr	r0, [pc, #212]	@ (8010e14 <SVCCTL_InitCustomSvc+0x178>)
 8010d40:	f000 fe46 	bl	80119d0 <iprintf>
  }

  /**
   *  Movement_record_ref
   */
  COPY_MOVEMENT_RECORD_REF_UUID(uuid.Char_UUID_128);
 8010d44:	2319      	movs	r3, #25
 8010d46:	713b      	strb	r3, [r7, #4]
 8010d48:	23ed      	movs	r3, #237	@ 0xed
 8010d4a:	717b      	strb	r3, [r7, #5]
 8010d4c:	2382      	movs	r3, #130	@ 0x82
 8010d4e:	71bb      	strb	r3, [r7, #6]
 8010d50:	23ae      	movs	r3, #174	@ 0xae
 8010d52:	71fb      	strb	r3, [r7, #7]
 8010d54:	23ed      	movs	r3, #237	@ 0xed
 8010d56:	723b      	strb	r3, [r7, #8]
 8010d58:	2321      	movs	r3, #33	@ 0x21
 8010d5a:	727b      	strb	r3, [r7, #9]
 8010d5c:	234c      	movs	r3, #76	@ 0x4c
 8010d5e:	72bb      	strb	r3, [r7, #10]
 8010d60:	239d      	movs	r3, #157	@ 0x9d
 8010d62:	72fb      	strb	r3, [r7, #11]
 8010d64:	2341      	movs	r3, #65	@ 0x41
 8010d66:	733b      	strb	r3, [r7, #12]
 8010d68:	2345      	movs	r3, #69	@ 0x45
 8010d6a:	737b      	strb	r3, [r7, #13]
 8010d6c:	2322      	movs	r3, #34	@ 0x22
 8010d6e:	73bb      	strb	r3, [r7, #14]
 8010d70:	238e      	movs	r3, #142	@ 0x8e
 8010d72:	73fb      	strb	r3, [r7, #15]
 8010d74:	23cd      	movs	r3, #205	@ 0xcd
 8010d76:	743b      	strb	r3, [r7, #16]
 8010d78:	23ab      	movs	r3, #171	@ 0xab
 8010d7a:	747b      	strb	r3, [r7, #17]
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	74bb      	strb	r3, [r7, #18]
 8010d80:	2300      	movs	r3, #0
 8010d82:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomRep_RefHdle,
 8010d84:	4b1e      	ldr	r3, [pc, #120]	@ (8010e00 <SVCCTL_InitCustomSvc+0x164>)
 8010d86:	8818      	ldrh	r0, [r3, #0]
 8010d88:	4b23      	ldr	r3, [pc, #140]	@ (8010e18 <SVCCTL_InitCustomSvc+0x17c>)
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	1d3a      	adds	r2, r7, #4
 8010d90:	4b22      	ldr	r3, [pc, #136]	@ (8010e1c <SVCCTL_InitCustomSvc+0x180>)
 8010d92:	9305      	str	r3, [sp, #20]
 8010d94:	2301      	movs	r3, #1
 8010d96:	9304      	str	r3, [sp, #16]
 8010d98:	2310      	movs	r3, #16
 8010d9a:	9303      	str	r3, [sp, #12]
 8010d9c:	2307      	movs	r3, #7
 8010d9e:	9302      	str	r3, [sp, #8]
 8010da0:	2300      	movs	r3, #0
 8010da2:	9301      	str	r3, [sp, #4]
 8010da4:	2316      	movs	r3, #22
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	460b      	mov	r3, r1
 8010daa:	2102      	movs	r1, #2
 8010dac:	f7fc fdeb 	bl	800d986 <aci_gatt_add_char>
 8010db0:	4603      	mov	r3, r0
 8010db2:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomMovement_RecordHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8010db4:	7dfb      	ldrb	r3, [r7, #23]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00f      	beq.n	8010dda <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MOVEMENT_RECORD, error code: 0x%x \n\r", ret);
 8010dba:	4812      	ldr	r0, [pc, #72]	@ (8010e04 <SVCCTL_InitCustomSvc+0x168>)
 8010dbc:	f7fe f916 	bl	800efec <DbgTraceGetFileName>
 8010dc0:	4601      	mov	r1, r0
 8010dc2:	f240 135f 	movw	r3, #351	@ 0x15f
 8010dc6:	4a10      	ldr	r2, [pc, #64]	@ (8010e08 <SVCCTL_InitCustomSvc+0x16c>)
 8010dc8:	4810      	ldr	r0, [pc, #64]	@ (8010e0c <SVCCTL_InitCustomSvc+0x170>)
 8010dca:	f000 fe01 	bl	80119d0 <iprintf>
 8010dce:	7dfb      	ldrb	r3, [r7, #23]
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	4813      	ldr	r0, [pc, #76]	@ (8010e20 <SVCCTL_InitCustomSvc+0x184>)
 8010dd4:	f000 fdfc 	bl	80119d0 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8010dd8:	e00d      	b.n	8010df6 <SVCCTL_InitCustomSvc+0x15a>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MOVEMENT_RECORD \n\r");
 8010dda:	480a      	ldr	r0, [pc, #40]	@ (8010e04 <SVCCTL_InitCustomSvc+0x168>)
 8010ddc:	f7fe f906 	bl	800efec <DbgTraceGetFileName>
 8010de0:	4601      	mov	r1, r0
 8010de2:	f240 1363 	movw	r3, #355	@ 0x163
 8010de6:	4a08      	ldr	r2, [pc, #32]	@ (8010e08 <SVCCTL_InitCustomSvc+0x16c>)
 8010de8:	4808      	ldr	r0, [pc, #32]	@ (8010e0c <SVCCTL_InitCustomSvc+0x170>)
 8010dea:	f000 fdf1 	bl	80119d0 <iprintf>
 8010dee:	480d      	ldr	r0, [pc, #52]	@ (8010e24 <SVCCTL_InitCustomSvc+0x188>)
 8010df0:	f000 fdee 	bl	80119d0 <iprintf>
  return;
 8010df4:	bf00      	nop
}
 8010df6:	3718      	adds	r7, #24
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	08010b7d 	.word	0x08010b7d
 8010e00:	20000b68 	.word	0x20000b68
 8010e04:	08013bb0 	.word	0x08013bb0
 8010e08:	08014064 	.word	0x08014064
 8010e0c:	08013bd0 	.word	0x08013bd0
 8010e10:	08013be4 	.word	0x08013be4
 8010e14:	08013c2c 	.word	0x08013c2c
 8010e18:	20000103 	.word	0x20000103
 8010e1c:	20000b6a 	.word	0x20000b6a
 8010e20:	08013c60 	.word	0x08013c60
 8010e24:	08013cb0 	.word	0x08013cb0

08010e28 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b086      	sub	sp, #24
 8010e2c:	af02      	add	r7, sp, #8
 8010e2e:	4603      	mov	r3, r0
 8010e30:	6039      	str	r1, [r7, #0]
 8010e32:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010e34:	2392      	movs	r3, #146	@ 0x92
 8010e36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8010e38:	79fb      	ldrb	r3, [r7, #7]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d12e      	bne.n	8010e9c <Custom_STM_App_Update_Char+0x74>
  {

    case CUSTOM_STM_MOVEMENT_RECORD:
      ret = aci_gatt_update_char_value(CustomContext.CustomRep_RefHdle,
 8010e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ea8 <Custom_STM_App_Update_Char+0x80>)
 8010e40:	8818      	ldrh	r0, [r3, #0]
 8010e42:	4b19      	ldr	r3, [pc, #100]	@ (8010ea8 <Custom_STM_App_Update_Char+0x80>)
 8010e44:	8859      	ldrh	r1, [r3, #2]
 8010e46:	4b19      	ldr	r3, [pc, #100]	@ (8010eac <Custom_STM_App_Update_Char+0x84>)
 8010e48:	781a      	ldrb	r2, [r3, #0]
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	9300      	str	r3, [sp, #0]
 8010e4e:	4613      	mov	r3, r2
 8010e50:	2200      	movs	r2, #0
 8010e52:	f7fc fea0 	bl	800db96 <aci_gatt_update_char_value>
 8010e56:	4603      	mov	r3, r0
 8010e58:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomMovement_RecordHdle,
                                       0, /* charValOffset */
                                       SizeMovement_Record, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8010e5a:	7bfb      	ldrb	r3, [r7, #15]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00f      	beq.n	8010e80 <Custom_STM_App_Update_Char+0x58>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value MOVEMENT_RECORD command, result : 0x%x \n\r", ret);
 8010e60:	4813      	ldr	r0, [pc, #76]	@ (8010eb0 <Custom_STM_App_Update_Char+0x88>)
 8010e62:	f7fe f8c3 	bl	800efec <DbgTraceGetFileName>
 8010e66:	4601      	mov	r1, r0
 8010e68:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8010e6c:	4a11      	ldr	r2, [pc, #68]	@ (8010eb4 <Custom_STM_App_Update_Char+0x8c>)
 8010e6e:	4812      	ldr	r0, [pc, #72]	@ (8010eb8 <Custom_STM_App_Update_Char+0x90>)
 8010e70:	f000 fdae 	bl	80119d0 <iprintf>
 8010e74:	7bfb      	ldrb	r3, [r7, #15]
 8010e76:	4619      	mov	r1, r3
 8010e78:	4810      	ldr	r0, [pc, #64]	@ (8010ebc <Custom_STM_App_Update_Char+0x94>)
 8010e7a:	f000 fda9 	bl	80119d0 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MOVEMENT_RECORD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8010e7e:	e00e      	b.n	8010e9e <Custom_STM_App_Update_Char+0x76>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MOVEMENT_RECORD command\n\r");
 8010e80:	480b      	ldr	r0, [pc, #44]	@ (8010eb0 <Custom_STM_App_Update_Char+0x88>)
 8010e82:	f7fe f8b3 	bl	800efec <DbgTraceGetFileName>
 8010e86:	4601      	mov	r1, r0
 8010e88:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8010e8c:	4a09      	ldr	r2, [pc, #36]	@ (8010eb4 <Custom_STM_App_Update_Char+0x8c>)
 8010e8e:	480a      	ldr	r0, [pc, #40]	@ (8010eb8 <Custom_STM_App_Update_Char+0x90>)
 8010e90:	f000 fd9e 	bl	80119d0 <iprintf>
 8010e94:	480a      	ldr	r0, [pc, #40]	@ (8010ec0 <Custom_STM_App_Update_Char+0x98>)
 8010e96:	f000 fd9b 	bl	80119d0 <iprintf>
      break;
 8010e9a:	e000      	b.n	8010e9e <Custom_STM_App_Update_Char+0x76>

    default:
      break;
 8010e9c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8010e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3710      	adds	r7, #16
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	20000b68 	.word	0x20000b68
 8010eac:	20000103 	.word	0x20000103
 8010eb0:	08013bb0 	.word	0x08013bb0
 8010eb4:	0801407c 	.word	0x0801407c
 8010eb8:	08013bd0 	.word	0x08013bd0
 8010ebc:	08013cec 	.word	0x08013cec
 8010ec0:	08013d3c 	.word	0x08013d3c

08010ec4 <LL_PWR_EnableBootC2>:
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8010ec8:	4b05      	ldr	r3, [pc, #20]	@ (8010ee0 <LL_PWR_EnableBootC2+0x1c>)
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	4a04      	ldr	r2, [pc, #16]	@ (8010ee0 <LL_PWR_EnableBootC2+0x1c>)
 8010ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010ed2:	60d3      	str	r3, [r2, #12]
}
 8010ed4:	bf00      	nop
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr
 8010ede:	bf00      	nop
 8010ee0:	58000400 	.word	0x58000400

08010ee4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010eec:	4b06      	ldr	r3, [pc, #24]	@ (8010f08 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010eee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8010ef2:	4905      	ldr	r1, [pc, #20]	@ (8010f08 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8010efc:	bf00      	nop
 8010efe:	370c      	adds	r7, #12
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr
 8010f08:	58000800 	.word	0x58000800

08010f0c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b083      	sub	sp, #12
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8010f14:	4b05      	ldr	r3, [pc, #20]	@ (8010f2c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010f16:	6a1a      	ldr	r2, [r3, #32]
 8010f18:	4904      	ldr	r1, [pc, #16]	@ (8010f2c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4313      	orrs	r3, r2
 8010f1e:	620b      	str	r3, [r1, #32]
}
 8010f20:	bf00      	nop
 8010f22:	370c      	adds	r7, #12
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr
 8010f2c:	58000800 	.word	0x58000800

08010f30 <LL_AHB3_GRP1_EnableClock>:
{
 8010f30:	b480      	push	{r7}
 8010f32:	b085      	sub	sp, #20
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8010f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010f3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4313      	orrs	r3, r2
 8010f46:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8010f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010f4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	4013      	ands	r3, r2
 8010f52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010f54:	68fb      	ldr	r3, [r7, #12]
}
 8010f56:	bf00      	nop
 8010f58:	3714      	adds	r7, #20
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr

08010f62 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8010f62:	b480      	push	{r7}
 8010f64:	b085      	sub	sp, #20
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8010f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010f6e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8010f72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8010f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010f82:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	4013      	ands	r3, r2
 8010f8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
}
 8010f8e:	bf00      	nop
 8010f90:	3714      	adds	r7, #20
 8010f92:	46bd      	mov	sp, r7
 8010f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f98:	4770      	bx	lr

08010f9a <LL_C1_IPCC_EnableIT_TXF>:
{
 8010f9a:	b480      	push	{r7}
 8010f9c:	b083      	sub	sp, #12
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	601a      	str	r2, [r3, #0]
}
 8010fae:	bf00      	nop
 8010fb0:	370c      	adds	r7, #12
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb8:	4770      	bx	lr

08010fba <LL_C1_IPCC_EnableIT_RXO>:
{
 8010fba:	b480      	push	{r7}
 8010fbc:	b083      	sub	sp, #12
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f043 0201 	orr.w	r2, r3, #1
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	601a      	str	r2, [r3, #0]
}
 8010fce:	bf00      	nop
 8010fd0:	370c      	adds	r7, #12
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr

08010fda <LL_C1_IPCC_EnableTransmitChannel>:
{
 8010fda:	b480      	push	{r7}
 8010fdc:	b083      	sub	sp, #12
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
 8010fe2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	685a      	ldr	r2, [r3, #4]
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	041b      	lsls	r3, r3, #16
 8010fec:	43db      	mvns	r3, r3
 8010fee:	401a      	ands	r2, r3
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	605a      	str	r2, [r3, #4]
}
 8010ff4:	bf00      	nop
 8010ff6:	370c      	adds	r7, #12
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr

08011000 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	685a      	ldr	r2, [r3, #4]
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	041b      	lsls	r3, r3, #16
 8011012:	431a      	orrs	r2, r3
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	605a      	str	r2, [r3, #4]
}
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	685a      	ldr	r2, [r3, #4]
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	43db      	mvns	r3, r3
 8011036:	401a      	ands	r2, r3
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	605a      	str	r2, [r3, #4]
}
 801103c:	bf00      	nop
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	683a      	ldr	r2, [r7, #0]
 8011056:	609a      	str	r2, [r3, #8]
}
 8011058:	bf00      	nop
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <LL_C1_IPCC_SetFlag_CHx>:
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	041a      	lsls	r2, r3, #16
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	609a      	str	r2, [r3, #8]
}
 8011076:	bf00      	nop
 8011078:	370c      	adds	r7, #12
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8011082:	b480      	push	{r7}
 8011084:	b083      	sub	sp, #12
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
 801108a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	68da      	ldr	r2, [r3, #12]
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	4013      	ands	r3, r2
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	429a      	cmp	r2, r3
 8011098:	d101      	bne.n	801109e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801109a:	2301      	movs	r3, #1
 801109c:	e000      	b.n	80110a0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	370c      	adds	r7, #12
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr

080110ac <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	69da      	ldr	r2, [r3, #28]
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	4013      	ands	r3, r2
 80110be:	683a      	ldr	r2, [r7, #0]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d101      	bne.n	80110c8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80110c4:	2301      	movs	r3, #1
 80110c6:	e000      	b.n	80110ca <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80110c8:	2300      	movs	r3, #0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	370c      	adds	r7, #12
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr
	...

080110d8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80110dc:	2102      	movs	r1, #2
 80110de:	4818      	ldr	r0, [pc, #96]	@ (8011140 <HW_IPCC_Rx_Handler+0x68>)
 80110e0:	f7ff ffe4 	bl	80110ac <LL_C2_IPCC_IsActiveFlag_CHx>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d008      	beq.n	80110fc <HW_IPCC_Rx_Handler+0x24>
 80110ea:	4b15      	ldr	r3, [pc, #84]	@ (8011140 <HW_IPCC_Rx_Handler+0x68>)
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	f003 0302 	and.w	r3, r3, #2
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d102      	bne.n	80110fc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80110f6:	f000 f8d5 	bl	80112a4 <HW_IPCC_SYS_EvtHandler>
 80110fa:	e01e      	b.n	801113a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80110fc:	2101      	movs	r1, #1
 80110fe:	4810      	ldr	r0, [pc, #64]	@ (8011140 <HW_IPCC_Rx_Handler+0x68>)
 8011100:	f7ff ffd4 	bl	80110ac <LL_C2_IPCC_IsActiveFlag_CHx>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d008      	beq.n	801111c <HW_IPCC_Rx_Handler+0x44>
 801110a:	4b0d      	ldr	r3, [pc, #52]	@ (8011140 <HW_IPCC_Rx_Handler+0x68>)
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	f003 0301 	and.w	r3, r3, #1
 8011112:	2b00      	cmp	r3, #0
 8011114:	d102      	bne.n	801111c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8011116:	f000 f889 	bl	801122c <HW_IPCC_BLE_EvtHandler>
 801111a:	e00e      	b.n	801113a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 801111c:	2108      	movs	r1, #8
 801111e:	4808      	ldr	r0, [pc, #32]	@ (8011140 <HW_IPCC_Rx_Handler+0x68>)
 8011120:	f7ff ffc4 	bl	80110ac <LL_C2_IPCC_IsActiveFlag_CHx>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d008      	beq.n	801113c <HW_IPCC_Rx_Handler+0x64>
 801112a:	4b05      	ldr	r3, [pc, #20]	@ (8011140 <HW_IPCC_Rx_Handler+0x68>)
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	f003 0308 	and.w	r3, r3, #8
 8011132:	2b00      	cmp	r3, #0
 8011134:	d102      	bne.n	801113c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8011136:	f000 f901 	bl	801133c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801113a:	bf00      	nop
 801113c:	bf00      	nop
}
 801113e:	bd80      	pop	{r7, pc}
 8011140:	58000c00 	.word	0x58000c00

08011144 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8011144:	b580      	push	{r7, lr}
 8011146:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8011148:	2102      	movs	r1, #2
 801114a:	4818      	ldr	r0, [pc, #96]	@ (80111ac <HW_IPCC_Tx_Handler+0x68>)
 801114c:	f7ff ff99 	bl	8011082 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d108      	bne.n	8011168 <HW_IPCC_Tx_Handler+0x24>
 8011156:	4b15      	ldr	r3, [pc, #84]	@ (80111ac <HW_IPCC_Tx_Handler+0x68>)
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801115e:	2b00      	cmp	r3, #0
 8011160:	d102      	bne.n	8011168 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8011162:	f000 f893 	bl	801128c <HW_IPCC_SYS_CmdEvtHandler>
 8011166:	e01e      	b.n	80111a6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8011168:	2108      	movs	r1, #8
 801116a:	4810      	ldr	r0, [pc, #64]	@ (80111ac <HW_IPCC_Tx_Handler+0x68>)
 801116c:	f7ff ff89 	bl	8011082 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d108      	bne.n	8011188 <HW_IPCC_Tx_Handler+0x44>
 8011176:	4b0d      	ldr	r3, [pc, #52]	@ (80111ac <HW_IPCC_Tx_Handler+0x68>)
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801117e:	2b00      	cmp	r3, #0
 8011180:	d102      	bne.n	8011188 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8011182:	f000 f8bd 	bl	8011300 <HW_IPCC_MM_FreeBufHandler>
 8011186:	e00e      	b.n	80111a6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8011188:	2120      	movs	r1, #32
 801118a:	4808      	ldr	r0, [pc, #32]	@ (80111ac <HW_IPCC_Tx_Handler+0x68>)
 801118c:	f7ff ff79 	bl	8011082 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d108      	bne.n	80111a8 <HW_IPCC_Tx_Handler+0x64>
 8011196:	4b05      	ldr	r3, [pc, #20]	@ (80111ac <HW_IPCC_Tx_Handler+0x68>)
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d102      	bne.n	80111a8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80111a2:	f000 f84f 	bl	8011244 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80111a6:	bf00      	nop
 80111a8:	bf00      	nop
}
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	58000c00 	.word	0x58000c00

080111b0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80111b4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80111b8:	f7ff fed3 	bl	8010f62 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80111bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80111c0:	f7ff fea4 	bl	8010f0c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80111c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80111c8:	f7ff fe8c 	bl	8010ee4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80111cc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80111ce:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80111d0:	f7ff fe78 	bl	8010ec4 <LL_PWR_EnableBootC2>

  return;
 80111d4:	bf00      	nop
}
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80111dc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80111e0:	f7ff fea6 	bl	8010f30 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80111e4:	4806      	ldr	r0, [pc, #24]	@ (8011200 <HW_IPCC_Init+0x28>)
 80111e6:	f7ff fee8 	bl	8010fba <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80111ea:	4805      	ldr	r0, [pc, #20]	@ (8011200 <HW_IPCC_Init+0x28>)
 80111ec:	f7ff fed5 	bl	8010f9a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80111f0:	202c      	movs	r0, #44	@ 0x2c
 80111f2:	f7f7 fa44 	bl	800867e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80111f6:	202d      	movs	r0, #45	@ 0x2d
 80111f8:	f7f7 fa41 	bl	800867e <HAL_NVIC_EnableIRQ>

  return;
 80111fc:	bf00      	nop
}
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	58000c00 	.word	0x58000c00

08011204 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8011204:	b580      	push	{r7, lr}
 8011206:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011208:	2101      	movs	r1, #1
 801120a:	4802      	ldr	r0, [pc, #8]	@ (8011214 <HW_IPCC_BLE_Init+0x10>)
 801120c:	f7ff ff0a 	bl	8011024 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011210:	bf00      	nop
}
 8011212:	bd80      	pop	{r7, pc}
 8011214:	58000c00 	.word	0x58000c00

08011218 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 801121c:	2101      	movs	r1, #1
 801121e:	4802      	ldr	r0, [pc, #8]	@ (8011228 <HW_IPCC_BLE_SendCmd+0x10>)
 8011220:	f7ff ff20 	bl	8011064 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011224:	bf00      	nop
}
 8011226:	bd80      	pop	{r7, pc}
 8011228:	58000c00 	.word	0x58000c00

0801122c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8011230:	f7fd fd24 	bl	800ec7c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011234:	2101      	movs	r1, #1
 8011236:	4802      	ldr	r0, [pc, #8]	@ (8011240 <HW_IPCC_BLE_EvtHandler+0x14>)
 8011238:	f7ff ff06 	bl	8011048 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801123c:	bf00      	nop
}
 801123e:	bd80      	pop	{r7, pc}
 8011240:	58000c00 	.word	0x58000c00

08011244 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8011244:	b580      	push	{r7, lr}
 8011246:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8011248:	2120      	movs	r1, #32
 801124a:	4803      	ldr	r0, [pc, #12]	@ (8011258 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801124c:	f7ff fed8 	bl	8011000 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8011250:	f7fd fd44 	bl	800ecdc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8011254:	bf00      	nop
}
 8011256:	bd80      	pop	{r7, pc}
 8011258:	58000c00 	.word	0x58000c00

0801125c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011260:	2102      	movs	r1, #2
 8011262:	4802      	ldr	r0, [pc, #8]	@ (801126c <HW_IPCC_SYS_Init+0x10>)
 8011264:	f7ff fede 	bl	8011024 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011268:	bf00      	nop
}
 801126a:	bd80      	pop	{r7, pc}
 801126c:	58000c00 	.word	0x58000c00

08011270 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8011270:	b580      	push	{r7, lr}
 8011272:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011274:	2102      	movs	r1, #2
 8011276:	4804      	ldr	r0, [pc, #16]	@ (8011288 <HW_IPCC_SYS_SendCmd+0x18>)
 8011278:	f7ff fef4 	bl	8011064 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801127c:	2102      	movs	r1, #2
 801127e:	4802      	ldr	r0, [pc, #8]	@ (8011288 <HW_IPCC_SYS_SendCmd+0x18>)
 8011280:	f7ff feab 	bl	8010fda <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8011284:	bf00      	nop
}
 8011286:	bd80      	pop	{r7, pc}
 8011288:	58000c00 	.word	0x58000c00

0801128c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801128c:	b580      	push	{r7, lr}
 801128e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011290:	2102      	movs	r1, #2
 8011292:	4803      	ldr	r0, [pc, #12]	@ (80112a0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8011294:	f7ff feb4 	bl	8011000 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8011298:	f7fd fd70 	bl	800ed7c <HW_IPCC_SYS_CmdEvtNot>

  return;
 801129c:	bf00      	nop
}
 801129e:	bd80      	pop	{r7, pc}
 80112a0:	58000c00 	.word	0x58000c00

080112a4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80112a8:	f7fd fd7e 	bl	800eda8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80112ac:	2102      	movs	r1, #2
 80112ae:	4802      	ldr	r0, [pc, #8]	@ (80112b8 <HW_IPCC_SYS_EvtHandler+0x14>)
 80112b0:	f7ff feca 	bl	8011048 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80112b4:	bf00      	nop
}
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	58000c00 	.word	0x58000c00

080112bc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80112c4:	2108      	movs	r1, #8
 80112c6:	480c      	ldr	r0, [pc, #48]	@ (80112f8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80112c8:	f7ff fedb 	bl	8011082 <LL_C1_IPCC_IsActiveFlag_CHx>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d007      	beq.n	80112e2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80112d2:	4a0a      	ldr	r2, [pc, #40]	@ (80112fc <HW_IPCC_MM_SendFreeBuf+0x40>)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80112d8:	2108      	movs	r1, #8
 80112da:	4807      	ldr	r0, [pc, #28]	@ (80112f8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80112dc:	f7ff fe7d 	bl	8010fda <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80112e0:	e006      	b.n	80112f0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80112e6:	2108      	movs	r1, #8
 80112e8:	4803      	ldr	r0, [pc, #12]	@ (80112f8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80112ea:	f7ff febb 	bl	8011064 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80112ee:	bf00      	nop
}
 80112f0:	3708      	adds	r7, #8
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	58000c00 	.word	0x58000c00
 80112fc:	20000b6c 	.word	0x20000b6c

08011300 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011304:	2108      	movs	r1, #8
 8011306:	4806      	ldr	r0, [pc, #24]	@ (8011320 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011308:	f7ff fe7a 	bl	8011000 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 801130c:	4b05      	ldr	r3, [pc, #20]	@ (8011324 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011312:	2108      	movs	r1, #8
 8011314:	4802      	ldr	r0, [pc, #8]	@ (8011320 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011316:	f7ff fea5 	bl	8011064 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801131a:	bf00      	nop
}
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	58000c00 	.word	0x58000c00
 8011324:	20000b6c 	.word	0x20000b6c

08011328 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8011328:	b580      	push	{r7, lr}
 801132a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 801132c:	2108      	movs	r1, #8
 801132e:	4802      	ldr	r0, [pc, #8]	@ (8011338 <HW_IPCC_TRACES_Init+0x10>)
 8011330:	f7ff fe78 	bl	8011024 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011334:	bf00      	nop
}
 8011336:	bd80      	pop	{r7, pc}
 8011338:	58000c00 	.word	0x58000c00

0801133c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 801133c:	b580      	push	{r7, lr}
 801133e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8011340:	f7fd fdda 	bl	800eef8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011344:	2108      	movs	r1, #8
 8011346:	4802      	ldr	r0, [pc, #8]	@ (8011350 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8011348:	f7ff fe7e 	bl	8011048 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801134c:	bf00      	nop
}
 801134e:	bd80      	pop	{r7, pc}
 8011350:	58000c00 	.word	0x58000c00

08011354 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011354:	b480      	push	{r7}
 8011356:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011358:	4b05      	ldr	r3, [pc, #20]	@ (8011370 <UTIL_LPM_Init+0x1c>)
 801135a:	2200      	movs	r2, #0
 801135c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801135e:	4b05      	ldr	r3, [pc, #20]	@ (8011374 <UTIL_LPM_Init+0x20>)
 8011360:	2200      	movs	r2, #0
 8011362:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011364:	bf00      	nop
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	20000b70 	.word	0x20000b70
 8011374:	20000b74 	.word	0x20000b74

08011378 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011378:	b480      	push	{r7}
 801137a:	b087      	sub	sp, #28
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	460b      	mov	r3, r1
 8011382:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011384:	f3ef 8310 	mrs	r3, PRIMASK
 8011388:	613b      	str	r3, [r7, #16]
  return(result);
 801138a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801138c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801138e:	b672      	cpsid	i
}
 8011390:	bf00      	nop
  
  switch(state)
 8011392:	78fb      	ldrb	r3, [r7, #3]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d008      	beq.n	80113aa <UTIL_LPM_SetOffMode+0x32>
 8011398:	2b01      	cmp	r3, #1
 801139a:	d10e      	bne.n	80113ba <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801139c:	4b0d      	ldr	r3, [pc, #52]	@ (80113d4 <UTIL_LPM_SetOffMode+0x5c>)
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4313      	orrs	r3, r2
 80113a4:	4a0b      	ldr	r2, [pc, #44]	@ (80113d4 <UTIL_LPM_SetOffMode+0x5c>)
 80113a6:	6013      	str	r3, [r2, #0]
      break;
 80113a8:	e008      	b.n	80113bc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	43da      	mvns	r2, r3
 80113ae:	4b09      	ldr	r3, [pc, #36]	@ (80113d4 <UTIL_LPM_SetOffMode+0x5c>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	4013      	ands	r3, r2
 80113b4:	4a07      	ldr	r2, [pc, #28]	@ (80113d4 <UTIL_LPM_SetOffMode+0x5c>)
 80113b6:	6013      	str	r3, [r2, #0]
      break;
 80113b8:	e000      	b.n	80113bc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80113ba:	bf00      	nop
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f383 8810 	msr	PRIMASK, r3
}
 80113c6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80113c8:	bf00      	nop
 80113ca:	371c      	adds	r7, #28
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr
 80113d4:	20000b74 	.word	0x20000b74

080113d8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b090      	sub	sp, #64	@ 0x40
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80113e0:	4b73      	ldr	r3, [pc, #460]	@ (80115b0 <UTIL_SEQ_Run+0x1d8>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80113e6:	4b72      	ldr	r3, [pc, #456]	@ (80115b0 <UTIL_SEQ_Run+0x1d8>)
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4013      	ands	r3, r2
 80113ee:	4a70      	ldr	r2, [pc, #448]	@ (80115b0 <UTIL_SEQ_Run+0x1d8>)
 80113f0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80113f2:	4b70      	ldr	r3, [pc, #448]	@ (80115b4 <UTIL_SEQ_Run+0x1dc>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80113f8:	4b6f      	ldr	r3, [pc, #444]	@ (80115b8 <UTIL_SEQ_Run+0x1e0>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80113fe:	4b6f      	ldr	r3, [pc, #444]	@ (80115bc <UTIL_SEQ_Run+0x1e4>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8011404:	4b6e      	ldr	r3, [pc, #440]	@ (80115c0 <UTIL_SEQ_Run+0x1e8>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801140a:	e08d      	b.n	8011528 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801140c:	2300      	movs	r3, #0
 801140e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011410:	e002      	b.n	8011418 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011414:	3301      	adds	r3, #1
 8011416:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011418:	4a6a      	ldr	r2, [pc, #424]	@ (80115c4 <UTIL_SEQ_Run+0x1ec>)
 801141a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801141c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011422:	401a      	ands	r2, r3
 8011424:	4b62      	ldr	r3, [pc, #392]	@ (80115b0 <UTIL_SEQ_Run+0x1d8>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4013      	ands	r3, r2
 801142a:	2b00      	cmp	r3, #0
 801142c:	d0f1      	beq.n	8011412 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801142e:	4a65      	ldr	r2, [pc, #404]	@ (80115c4 <UTIL_SEQ_Run+0x1ec>)
 8011430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011432:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011438:	401a      	ands	r2, r3
 801143a:	4b5d      	ldr	r3, [pc, #372]	@ (80115b0 <UTIL_SEQ_Run+0x1d8>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	4013      	ands	r3, r2
 8011440:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011442:	4a60      	ldr	r2, [pc, #384]	@ (80115c4 <UTIL_SEQ_Run+0x1ec>)
 8011444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011446:	00db      	lsls	r3, r3, #3
 8011448:	4413      	add	r3, r2
 801144a:	685a      	ldr	r2, [r3, #4]
 801144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801144e:	4013      	ands	r3, r2
 8011450:	2b00      	cmp	r3, #0
 8011452:	d106      	bne.n	8011462 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011454:	4a5b      	ldr	r2, [pc, #364]	@ (80115c4 <UTIL_SEQ_Run+0x1ec>)
 8011456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	4413      	add	r3, r2
 801145c:	f04f 32ff 	mov.w	r2, #4294967295
 8011460:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011462:	4a58      	ldr	r2, [pc, #352]	@ (80115c4 <UTIL_SEQ_Run+0x1ec>)
 8011464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011466:	00db      	lsls	r3, r3, #3
 8011468:	4413      	add	r3, r2
 801146a:	685a      	ldr	r2, [r3, #4]
 801146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146e:	4013      	ands	r3, r2
 8011470:	4618      	mov	r0, r3
 8011472:	f000 f9b3 	bl	80117dc <SEQ_BitPosition>
 8011476:	4603      	mov	r3, r0
 8011478:	461a      	mov	r2, r3
 801147a:	4b53      	ldr	r3, [pc, #332]	@ (80115c8 <UTIL_SEQ_Run+0x1f0>)
 801147c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801147e:	4a51      	ldr	r2, [pc, #324]	@ (80115c4 <UTIL_SEQ_Run+0x1ec>)
 8011480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011482:	00db      	lsls	r3, r3, #3
 8011484:	4413      	add	r3, r2
 8011486:	685a      	ldr	r2, [r3, #4]
 8011488:	4b4f      	ldr	r3, [pc, #316]	@ (80115c8 <UTIL_SEQ_Run+0x1f0>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2101      	movs	r1, #1
 801148e:	fa01 f303 	lsl.w	r3, r1, r3
 8011492:	43db      	mvns	r3, r3
 8011494:	401a      	ands	r2, r3
 8011496:	494b      	ldr	r1, [pc, #300]	@ (80115c4 <UTIL_SEQ_Run+0x1ec>)
 8011498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801149a:	00db      	lsls	r3, r3, #3
 801149c:	440b      	add	r3, r1
 801149e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114a0:	f3ef 8310 	mrs	r3, PRIMASK
 80114a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80114a6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80114a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80114aa:	b672      	cpsid	i
}
 80114ac:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80114ae:	4b46      	ldr	r3, [pc, #280]	@ (80115c8 <UTIL_SEQ_Run+0x1f0>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2201      	movs	r2, #1
 80114b4:	fa02 f303 	lsl.w	r3, r2, r3
 80114b8:	43da      	mvns	r2, r3
 80114ba:	4b3e      	ldr	r3, [pc, #248]	@ (80115b4 <UTIL_SEQ_Run+0x1dc>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	4013      	ands	r3, r2
 80114c0:	4a3c      	ldr	r2, [pc, #240]	@ (80115b4 <UTIL_SEQ_Run+0x1dc>)
 80114c2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80114c4:	2302      	movs	r3, #2
 80114c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80114c8:	e013      	b.n	80114f2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80114ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114cc:	3b01      	subs	r3, #1
 80114ce:	4a3d      	ldr	r2, [pc, #244]	@ (80115c4 <UTIL_SEQ_Run+0x1ec>)
 80114d0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80114d4:	4b3c      	ldr	r3, [pc, #240]	@ (80115c8 <UTIL_SEQ_Run+0x1f0>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2201      	movs	r2, #1
 80114da:	fa02 f303 	lsl.w	r3, r2, r3
 80114de:	43da      	mvns	r2, r3
 80114e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114e2:	3b01      	subs	r3, #1
 80114e4:	400a      	ands	r2, r1
 80114e6:	4937      	ldr	r1, [pc, #220]	@ (80115c4 <UTIL_SEQ_Run+0x1ec>)
 80114e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80114ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114ee:	3b01      	subs	r3, #1
 80114f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80114f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d1e8      	bne.n	80114ca <UTIL_SEQ_Run+0xf2>
 80114f8:	6a3b      	ldr	r3, [r7, #32]
 80114fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	f383 8810 	msr	PRIMASK, r3
}
 8011502:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8011504:	4b30      	ldr	r3, [pc, #192]	@ (80115c8 <UTIL_SEQ_Run+0x1f0>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	4a30      	ldr	r2, [pc, #192]	@ (80115cc <UTIL_SEQ_Run+0x1f4>)
 801150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801150e:	4798      	blx	r3

    local_taskset = TaskSet;
 8011510:	4b28      	ldr	r3, [pc, #160]	@ (80115b4 <UTIL_SEQ_Run+0x1dc>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8011516:	4b28      	ldr	r3, [pc, #160]	@ (80115b8 <UTIL_SEQ_Run+0x1e0>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801151c:	4b27      	ldr	r3, [pc, #156]	@ (80115bc <UTIL_SEQ_Run+0x1e4>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8011522:	4b27      	ldr	r3, [pc, #156]	@ (80115c0 <UTIL_SEQ_Run+0x1e8>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801152a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801152c:	401a      	ands	r2, r3
 801152e:	4b20      	ldr	r3, [pc, #128]	@ (80115b0 <UTIL_SEQ_Run+0x1d8>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	4013      	ands	r3, r2
 8011534:	2b00      	cmp	r3, #0
 8011536:	d005      	beq.n	8011544 <UTIL_SEQ_Run+0x16c>
 8011538:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801153a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801153c:	4013      	ands	r3, r2
 801153e:	2b00      	cmp	r3, #0
 8011540:	f43f af64 	beq.w	801140c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011544:	4b20      	ldr	r3, [pc, #128]	@ (80115c8 <UTIL_SEQ_Run+0x1f0>)
 8011546:	f04f 32ff 	mov.w	r2, #4294967295
 801154a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801154c:	f000 f938 	bl	80117c0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011550:	f3ef 8310 	mrs	r3, PRIMASK
 8011554:	613b      	str	r3, [r7, #16]
  return(result);
 8011556:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801155a:	b672      	cpsid	i
}
 801155c:	bf00      	nop
  local_taskset = TaskSet;
 801155e:	4b15      	ldr	r3, [pc, #84]	@ (80115b4 <UTIL_SEQ_Run+0x1dc>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8011564:	4b14      	ldr	r3, [pc, #80]	@ (80115b8 <UTIL_SEQ_Run+0x1e0>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801156a:	4b14      	ldr	r3, [pc, #80]	@ (80115bc <UTIL_SEQ_Run+0x1e4>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011574:	401a      	ands	r2, r3
 8011576:	4b0e      	ldr	r3, [pc, #56]	@ (80115b0 <UTIL_SEQ_Run+0x1d8>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4013      	ands	r3, r2
 801157c:	2b00      	cmp	r3, #0
 801157e:	d107      	bne.n	8011590 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8011580:	4b0f      	ldr	r3, [pc, #60]	@ (80115c0 <UTIL_SEQ_Run+0x1e8>)
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011586:	4013      	ands	r3, r2
 8011588:	2b00      	cmp	r3, #0
 801158a:	d101      	bne.n	8011590 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801158c:	f7f0 fa7b 	bl	8001a86 <UTIL_SEQ_Idle>
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f383 8810 	msr	PRIMASK, r3
}
 801159a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801159c:	f000 f917 	bl	80117ce <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80115a0:	4a03      	ldr	r2, [pc, #12]	@ (80115b0 <UTIL_SEQ_Run+0x1d8>)
 80115a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115a4:	6013      	str	r3, [r2, #0]

  return;
 80115a6:	bf00      	nop
}
 80115a8:	3740      	adds	r7, #64	@ 0x40
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	20000108 	.word	0x20000108
 80115b4:	20000b78 	.word	0x20000b78
 80115b8:	20000b7c 	.word	0x20000b7c
 80115bc:	20000104 	.word	0x20000104
 80115c0:	20000b80 	.word	0x20000b80
 80115c4:	20000c08 	.word	0x20000c08
 80115c8:	20000b84 	.word	0x20000b84
 80115cc:	20000b88 	.word	0x20000b88

080115d0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b088      	sub	sp, #32
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115dc:	f3ef 8310 	mrs	r3, PRIMASK
 80115e0:	617b      	str	r3, [r7, #20]
  return(result);
 80115e2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80115e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80115e6:	b672      	cpsid	i
}
 80115e8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80115ea:	68f8      	ldr	r0, [r7, #12]
 80115ec:	f000 f8f6 	bl	80117dc <SEQ_BitPosition>
 80115f0:	4603      	mov	r3, r0
 80115f2:	4619      	mov	r1, r3
 80115f4:	4a06      	ldr	r2, [pc, #24]	@ (8011610 <UTIL_SEQ_RegTask+0x40>)
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	f383 8810 	msr	PRIMASK, r3
}
 8011606:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8011608:	bf00      	nop
}
 801160a:	3720      	adds	r7, #32
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	20000b88 	.word	0x20000b88

08011614 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8011614:	b480      	push	{r7}
 8011616:	b087      	sub	sp, #28
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801161e:	f3ef 8310 	mrs	r3, PRIMASK
 8011622:	60fb      	str	r3, [r7, #12]
  return(result);
 8011624:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011626:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011628:	b672      	cpsid	i
}
 801162a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801162c:	4b0d      	ldr	r3, [pc, #52]	@ (8011664 <UTIL_SEQ_SetTask+0x50>)
 801162e:	681a      	ldr	r2, [r3, #0]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	4313      	orrs	r3, r2
 8011634:	4a0b      	ldr	r2, [pc, #44]	@ (8011664 <UTIL_SEQ_SetTask+0x50>)
 8011636:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8011638:	4a0b      	ldr	r2, [pc, #44]	@ (8011668 <UTIL_SEQ_SetTask+0x54>)
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	431a      	orrs	r2, r3
 8011644:	4908      	ldr	r1, [pc, #32]	@ (8011668 <UTIL_SEQ_SetTask+0x54>)
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	f383 8810 	msr	PRIMASK, r3
}
 8011656:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8011658:	bf00      	nop
}
 801165a:	371c      	adds	r7, #28
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	20000b78 	.word	0x20000b78
 8011668:	20000c08 	.word	0x20000c08

0801166c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801166c:	b480      	push	{r7}
 801166e:	b087      	sub	sp, #28
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011674:	f3ef 8310 	mrs	r3, PRIMASK
 8011678:	60fb      	str	r3, [r7, #12]
  return(result);
 801167a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801167c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801167e:	b672      	cpsid	i
}
 8011680:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	43da      	mvns	r2, r3
 8011686:	4b08      	ldr	r3, [pc, #32]	@ (80116a8 <UTIL_SEQ_PauseTask+0x3c>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	4013      	ands	r3, r2
 801168c:	4a06      	ldr	r2, [pc, #24]	@ (80116a8 <UTIL_SEQ_PauseTask+0x3c>)
 801168e:	6013      	str	r3, [r2, #0]
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	f383 8810 	msr	PRIMASK, r3
}
 801169a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801169c:	bf00      	nop
}
 801169e:	371c      	adds	r7, #28
 80116a0:	46bd      	mov	sp, r7
 80116a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a6:	4770      	bx	lr
 80116a8:	20000104 	.word	0x20000104

080116ac <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80116ac:	b480      	push	{r7}
 80116ae:	b087      	sub	sp, #28
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116b4:	f3ef 8310 	mrs	r3, PRIMASK
 80116b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80116ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80116bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80116be:	b672      	cpsid	i
}
 80116c0:	bf00      	nop

  TaskMask |= TaskId_bm;
 80116c2:	4b09      	ldr	r3, [pc, #36]	@ (80116e8 <UTIL_SEQ_ResumeTask+0x3c>)
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4313      	orrs	r3, r2
 80116ca:	4a07      	ldr	r2, [pc, #28]	@ (80116e8 <UTIL_SEQ_ResumeTask+0x3c>)
 80116cc:	6013      	str	r3, [r2, #0]
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	f383 8810 	msr	PRIMASK, r3
}
 80116d8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80116da:	bf00      	nop
}
 80116dc:	371c      	adds	r7, #28
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr
 80116e6:	bf00      	nop
 80116e8:	20000104 	.word	0x20000104

080116ec <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80116ec:	b480      	push	{r7}
 80116ee:	b087      	sub	sp, #28
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116f4:	f3ef 8310 	mrs	r3, PRIMASK
 80116f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80116fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80116fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80116fe:	b672      	cpsid	i
}
 8011700:	bf00      	nop

  EvtSet |= EvtId_bm;
 8011702:	4b09      	ldr	r3, [pc, #36]	@ (8011728 <UTIL_SEQ_SetEvt+0x3c>)
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4313      	orrs	r3, r2
 801170a:	4a07      	ldr	r2, [pc, #28]	@ (8011728 <UTIL_SEQ_SetEvt+0x3c>)
 801170c:	6013      	str	r3, [r2, #0]
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	f383 8810 	msr	PRIMASK, r3
}
 8011718:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801171a:	bf00      	nop
}
 801171c:	371c      	adds	r7, #28
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr
 8011726:	bf00      	nop
 8011728:	20000b7c 	.word	0x20000b7c

0801172c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b088      	sub	sp, #32
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8011734:	4b1f      	ldr	r3, [pc, #124]	@ (80117b4 <UTIL_SEQ_WaitEvt+0x88>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801173a:	4b1e      	ldr	r3, [pc, #120]	@ (80117b4 <UTIL_SEQ_WaitEvt+0x88>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011742:	d102      	bne.n	801174a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8011744:	2300      	movs	r3, #0
 8011746:	61fb      	str	r3, [r7, #28]
 8011748:	e005      	b.n	8011756 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801174a:	4b1a      	ldr	r3, [pc, #104]	@ (80117b4 <UTIL_SEQ_WaitEvt+0x88>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	2201      	movs	r2, #1
 8011750:	fa02 f303 	lsl.w	r3, r2, r3
 8011754:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8011756:	4b18      	ldr	r3, [pc, #96]	@ (80117b8 <UTIL_SEQ_WaitEvt+0x8c>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801175c:	4a16      	ldr	r2, [pc, #88]	@ (80117b8 <UTIL_SEQ_WaitEvt+0x8c>)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8011762:	e003      	b.n	801176c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8011764:	6879      	ldr	r1, [r7, #4]
 8011766:	69f8      	ldr	r0, [r7, #28]
 8011768:	f7f0 f994 	bl	8001a94 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801176c:	4b13      	ldr	r3, [pc, #76]	@ (80117bc <UTIL_SEQ_WaitEvt+0x90>)
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	4013      	ands	r3, r2
 8011774:	2b00      	cmp	r3, #0
 8011776:	d0f5      	beq.n	8011764 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8011778:	4a0e      	ldr	r2, [pc, #56]	@ (80117b4 <UTIL_SEQ_WaitEvt+0x88>)
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801177e:	f3ef 8310 	mrs	r3, PRIMASK
 8011782:	60bb      	str	r3, [r7, #8]
  return(result);
 8011784:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011788:	b672      	cpsid	i
}
 801178a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	43da      	mvns	r2, r3
 8011790:	4b0a      	ldr	r3, [pc, #40]	@ (80117bc <UTIL_SEQ_WaitEvt+0x90>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	4013      	ands	r3, r2
 8011796:	4a09      	ldr	r2, [pc, #36]	@ (80117bc <UTIL_SEQ_WaitEvt+0x90>)
 8011798:	6013      	str	r3, [r2, #0]
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f383 8810 	msr	PRIMASK, r3
}
 80117a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80117a6:	4a04      	ldr	r2, [pc, #16]	@ (80117b8 <UTIL_SEQ_WaitEvt+0x8c>)
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	6013      	str	r3, [r2, #0]
  return;
 80117ac:	bf00      	nop
}
 80117ae:	3720      	adds	r7, #32
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	20000b84 	.word	0x20000b84
 80117b8:	20000b80 	.word	0x20000b80
 80117bc:	20000b7c 	.word	0x20000b7c

080117c0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80117c0:	b480      	push	{r7}
 80117c2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80117c4:	bf00      	nop
}
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr

080117ce <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80117ce:	b480      	push	{r7}
 80117d0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80117d2:	bf00      	nop
}
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80117dc:	b480      	push	{r7}
 80117de:	b085      	sub	sp, #20
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80117e4:	2300      	movs	r3, #0
 80117e6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80117f2:	d204      	bcs.n	80117fe <SEQ_BitPosition+0x22>
 80117f4:	2310      	movs	r3, #16
 80117f6:	73fb      	strb	r3, [r7, #15]
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	041b      	lsls	r3, r3, #16
 80117fc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011804:	d205      	bcs.n	8011812 <SEQ_BitPosition+0x36>
 8011806:	7bfb      	ldrb	r3, [r7, #15]
 8011808:	3308      	adds	r3, #8
 801180a:	73fb      	strb	r3, [r7, #15]
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	021b      	lsls	r3, r3, #8
 8011810:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011818:	d205      	bcs.n	8011826 <SEQ_BitPosition+0x4a>
 801181a:	7bfb      	ldrb	r3, [r7, #15]
 801181c:	3304      	adds	r3, #4
 801181e:	73fb      	strb	r3, [r7, #15]
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	011b      	lsls	r3, r3, #4
 8011824:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	0f1b      	lsrs	r3, r3, #28
 801182a:	4a07      	ldr	r2, [pc, #28]	@ (8011848 <SEQ_BitPosition+0x6c>)
 801182c:	5cd2      	ldrb	r2, [r2, r3]
 801182e:	7bfb      	ldrb	r3, [r7, #15]
 8011830:	4413      	add	r3, r2
 8011832:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8011834:	7bfb      	ldrb	r3, [r7, #15]
 8011836:	f1c3 031f 	rsb	r3, r3, #31
 801183a:	b2db      	uxtb	r3, r3
}
 801183c:	4618      	mov	r0, r3
 801183e:	3714      	adds	r7, #20
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr
 8011848:	08014098 	.word	0x08014098

0801184c <std>:
 801184c:	2300      	movs	r3, #0
 801184e:	b510      	push	{r4, lr}
 8011850:	4604      	mov	r4, r0
 8011852:	e9c0 3300 	strd	r3, r3, [r0]
 8011856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801185a:	6083      	str	r3, [r0, #8]
 801185c:	8181      	strh	r1, [r0, #12]
 801185e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011860:	81c2      	strh	r2, [r0, #14]
 8011862:	6183      	str	r3, [r0, #24]
 8011864:	4619      	mov	r1, r3
 8011866:	2208      	movs	r2, #8
 8011868:	305c      	adds	r0, #92	@ 0x5c
 801186a:	f000 fa01 	bl	8011c70 <memset>
 801186e:	4b0d      	ldr	r3, [pc, #52]	@ (80118a4 <std+0x58>)
 8011870:	6263      	str	r3, [r4, #36]	@ 0x24
 8011872:	4b0d      	ldr	r3, [pc, #52]	@ (80118a8 <std+0x5c>)
 8011874:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011876:	4b0d      	ldr	r3, [pc, #52]	@ (80118ac <std+0x60>)
 8011878:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801187a:	4b0d      	ldr	r3, [pc, #52]	@ (80118b0 <std+0x64>)
 801187c:	6323      	str	r3, [r4, #48]	@ 0x30
 801187e:	4b0d      	ldr	r3, [pc, #52]	@ (80118b4 <std+0x68>)
 8011880:	6224      	str	r4, [r4, #32]
 8011882:	429c      	cmp	r4, r3
 8011884:	d006      	beq.n	8011894 <std+0x48>
 8011886:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801188a:	4294      	cmp	r4, r2
 801188c:	d002      	beq.n	8011894 <std+0x48>
 801188e:	33d0      	adds	r3, #208	@ 0xd0
 8011890:	429c      	cmp	r4, r3
 8011892:	d105      	bne.n	80118a0 <std+0x54>
 8011894:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801189c:	f000 ba76 	b.w	8011d8c <__retarget_lock_init_recursive>
 80118a0:	bd10      	pop	{r4, pc}
 80118a2:	bf00      	nop
 80118a4:	08011ac1 	.word	0x08011ac1
 80118a8:	08011ae3 	.word	0x08011ae3
 80118ac:	08011b1b 	.word	0x08011b1b
 80118b0:	08011b3f 	.word	0x08011b3f
 80118b4:	20000c18 	.word	0x20000c18

080118b8 <stdio_exit_handler>:
 80118b8:	4a02      	ldr	r2, [pc, #8]	@ (80118c4 <stdio_exit_handler+0xc>)
 80118ba:	4903      	ldr	r1, [pc, #12]	@ (80118c8 <stdio_exit_handler+0x10>)
 80118bc:	4803      	ldr	r0, [pc, #12]	@ (80118cc <stdio_exit_handler+0x14>)
 80118be:	f000 b869 	b.w	8011994 <_fwalk_sglue>
 80118c2:	bf00      	nop
 80118c4:	2000010c 	.word	0x2000010c
 80118c8:	08012649 	.word	0x08012649
 80118cc:	2000011c 	.word	0x2000011c

080118d0 <cleanup_stdio>:
 80118d0:	6841      	ldr	r1, [r0, #4]
 80118d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011904 <cleanup_stdio+0x34>)
 80118d4:	4299      	cmp	r1, r3
 80118d6:	b510      	push	{r4, lr}
 80118d8:	4604      	mov	r4, r0
 80118da:	d001      	beq.n	80118e0 <cleanup_stdio+0x10>
 80118dc:	f000 feb4 	bl	8012648 <_fflush_r>
 80118e0:	68a1      	ldr	r1, [r4, #8]
 80118e2:	4b09      	ldr	r3, [pc, #36]	@ (8011908 <cleanup_stdio+0x38>)
 80118e4:	4299      	cmp	r1, r3
 80118e6:	d002      	beq.n	80118ee <cleanup_stdio+0x1e>
 80118e8:	4620      	mov	r0, r4
 80118ea:	f000 fead 	bl	8012648 <_fflush_r>
 80118ee:	68e1      	ldr	r1, [r4, #12]
 80118f0:	4b06      	ldr	r3, [pc, #24]	@ (801190c <cleanup_stdio+0x3c>)
 80118f2:	4299      	cmp	r1, r3
 80118f4:	d004      	beq.n	8011900 <cleanup_stdio+0x30>
 80118f6:	4620      	mov	r0, r4
 80118f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118fc:	f000 bea4 	b.w	8012648 <_fflush_r>
 8011900:	bd10      	pop	{r4, pc}
 8011902:	bf00      	nop
 8011904:	20000c18 	.word	0x20000c18
 8011908:	20000c80 	.word	0x20000c80
 801190c:	20000ce8 	.word	0x20000ce8

08011910 <global_stdio_init.part.0>:
 8011910:	b510      	push	{r4, lr}
 8011912:	4b0b      	ldr	r3, [pc, #44]	@ (8011940 <global_stdio_init.part.0+0x30>)
 8011914:	4c0b      	ldr	r4, [pc, #44]	@ (8011944 <global_stdio_init.part.0+0x34>)
 8011916:	4a0c      	ldr	r2, [pc, #48]	@ (8011948 <global_stdio_init.part.0+0x38>)
 8011918:	601a      	str	r2, [r3, #0]
 801191a:	4620      	mov	r0, r4
 801191c:	2200      	movs	r2, #0
 801191e:	2104      	movs	r1, #4
 8011920:	f7ff ff94 	bl	801184c <std>
 8011924:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011928:	2201      	movs	r2, #1
 801192a:	2109      	movs	r1, #9
 801192c:	f7ff ff8e 	bl	801184c <std>
 8011930:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011934:	2202      	movs	r2, #2
 8011936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801193a:	2112      	movs	r1, #18
 801193c:	f7ff bf86 	b.w	801184c <std>
 8011940:	20000d50 	.word	0x20000d50
 8011944:	20000c18 	.word	0x20000c18
 8011948:	080118b9 	.word	0x080118b9

0801194c <__sfp_lock_acquire>:
 801194c:	4801      	ldr	r0, [pc, #4]	@ (8011954 <__sfp_lock_acquire+0x8>)
 801194e:	f000 ba1e 	b.w	8011d8e <__retarget_lock_acquire_recursive>
 8011952:	bf00      	nop
 8011954:	20000d59 	.word	0x20000d59

08011958 <__sfp_lock_release>:
 8011958:	4801      	ldr	r0, [pc, #4]	@ (8011960 <__sfp_lock_release+0x8>)
 801195a:	f000 ba19 	b.w	8011d90 <__retarget_lock_release_recursive>
 801195e:	bf00      	nop
 8011960:	20000d59 	.word	0x20000d59

08011964 <__sinit>:
 8011964:	b510      	push	{r4, lr}
 8011966:	4604      	mov	r4, r0
 8011968:	f7ff fff0 	bl	801194c <__sfp_lock_acquire>
 801196c:	6a23      	ldr	r3, [r4, #32]
 801196e:	b11b      	cbz	r3, 8011978 <__sinit+0x14>
 8011970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011974:	f7ff bff0 	b.w	8011958 <__sfp_lock_release>
 8011978:	4b04      	ldr	r3, [pc, #16]	@ (801198c <__sinit+0x28>)
 801197a:	6223      	str	r3, [r4, #32]
 801197c:	4b04      	ldr	r3, [pc, #16]	@ (8011990 <__sinit+0x2c>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d1f5      	bne.n	8011970 <__sinit+0xc>
 8011984:	f7ff ffc4 	bl	8011910 <global_stdio_init.part.0>
 8011988:	e7f2      	b.n	8011970 <__sinit+0xc>
 801198a:	bf00      	nop
 801198c:	080118d1 	.word	0x080118d1
 8011990:	20000d50 	.word	0x20000d50

08011994 <_fwalk_sglue>:
 8011994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011998:	4607      	mov	r7, r0
 801199a:	4688      	mov	r8, r1
 801199c:	4614      	mov	r4, r2
 801199e:	2600      	movs	r6, #0
 80119a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119a4:	f1b9 0901 	subs.w	r9, r9, #1
 80119a8:	d505      	bpl.n	80119b6 <_fwalk_sglue+0x22>
 80119aa:	6824      	ldr	r4, [r4, #0]
 80119ac:	2c00      	cmp	r4, #0
 80119ae:	d1f7      	bne.n	80119a0 <_fwalk_sglue+0xc>
 80119b0:	4630      	mov	r0, r6
 80119b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119b6:	89ab      	ldrh	r3, [r5, #12]
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d907      	bls.n	80119cc <_fwalk_sglue+0x38>
 80119bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119c0:	3301      	adds	r3, #1
 80119c2:	d003      	beq.n	80119cc <_fwalk_sglue+0x38>
 80119c4:	4629      	mov	r1, r5
 80119c6:	4638      	mov	r0, r7
 80119c8:	47c0      	blx	r8
 80119ca:	4306      	orrs	r6, r0
 80119cc:	3568      	adds	r5, #104	@ 0x68
 80119ce:	e7e9      	b.n	80119a4 <_fwalk_sglue+0x10>

080119d0 <iprintf>:
 80119d0:	b40f      	push	{r0, r1, r2, r3}
 80119d2:	b507      	push	{r0, r1, r2, lr}
 80119d4:	4906      	ldr	r1, [pc, #24]	@ (80119f0 <iprintf+0x20>)
 80119d6:	ab04      	add	r3, sp, #16
 80119d8:	6808      	ldr	r0, [r1, #0]
 80119da:	f853 2b04 	ldr.w	r2, [r3], #4
 80119de:	6881      	ldr	r1, [r0, #8]
 80119e0:	9301      	str	r3, [sp, #4]
 80119e2:	f000 fb07 	bl	8011ff4 <_vfiprintf_r>
 80119e6:	b003      	add	sp, #12
 80119e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80119ec:	b004      	add	sp, #16
 80119ee:	4770      	bx	lr
 80119f0:	20000118 	.word	0x20000118

080119f4 <putchar>:
 80119f4:	4b02      	ldr	r3, [pc, #8]	@ (8011a00 <putchar+0xc>)
 80119f6:	4601      	mov	r1, r0
 80119f8:	6818      	ldr	r0, [r3, #0]
 80119fa:	6882      	ldr	r2, [r0, #8]
 80119fc:	f000 beae 	b.w	801275c <_putc_r>
 8011a00:	20000118 	.word	0x20000118

08011a04 <_puts_r>:
 8011a04:	6a03      	ldr	r3, [r0, #32]
 8011a06:	b570      	push	{r4, r5, r6, lr}
 8011a08:	6884      	ldr	r4, [r0, #8]
 8011a0a:	4605      	mov	r5, r0
 8011a0c:	460e      	mov	r6, r1
 8011a0e:	b90b      	cbnz	r3, 8011a14 <_puts_r+0x10>
 8011a10:	f7ff ffa8 	bl	8011964 <__sinit>
 8011a14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a16:	07db      	lsls	r3, r3, #31
 8011a18:	d405      	bmi.n	8011a26 <_puts_r+0x22>
 8011a1a:	89a3      	ldrh	r3, [r4, #12]
 8011a1c:	0598      	lsls	r0, r3, #22
 8011a1e:	d402      	bmi.n	8011a26 <_puts_r+0x22>
 8011a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a22:	f000 f9b4 	bl	8011d8e <__retarget_lock_acquire_recursive>
 8011a26:	89a3      	ldrh	r3, [r4, #12]
 8011a28:	0719      	lsls	r1, r3, #28
 8011a2a:	d502      	bpl.n	8011a32 <_puts_r+0x2e>
 8011a2c:	6923      	ldr	r3, [r4, #16]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d135      	bne.n	8011a9e <_puts_r+0x9a>
 8011a32:	4621      	mov	r1, r4
 8011a34:	4628      	mov	r0, r5
 8011a36:	f000 f8c5 	bl	8011bc4 <__swsetup_r>
 8011a3a:	b380      	cbz	r0, 8011a9e <_puts_r+0x9a>
 8011a3c:	f04f 35ff 	mov.w	r5, #4294967295
 8011a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a42:	07da      	lsls	r2, r3, #31
 8011a44:	d405      	bmi.n	8011a52 <_puts_r+0x4e>
 8011a46:	89a3      	ldrh	r3, [r4, #12]
 8011a48:	059b      	lsls	r3, r3, #22
 8011a4a:	d402      	bmi.n	8011a52 <_puts_r+0x4e>
 8011a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a4e:	f000 f99f 	bl	8011d90 <__retarget_lock_release_recursive>
 8011a52:	4628      	mov	r0, r5
 8011a54:	bd70      	pop	{r4, r5, r6, pc}
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	da04      	bge.n	8011a64 <_puts_r+0x60>
 8011a5a:	69a2      	ldr	r2, [r4, #24]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	dc17      	bgt.n	8011a90 <_puts_r+0x8c>
 8011a60:	290a      	cmp	r1, #10
 8011a62:	d015      	beq.n	8011a90 <_puts_r+0x8c>
 8011a64:	6823      	ldr	r3, [r4, #0]
 8011a66:	1c5a      	adds	r2, r3, #1
 8011a68:	6022      	str	r2, [r4, #0]
 8011a6a:	7019      	strb	r1, [r3, #0]
 8011a6c:	68a3      	ldr	r3, [r4, #8]
 8011a6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011a72:	3b01      	subs	r3, #1
 8011a74:	60a3      	str	r3, [r4, #8]
 8011a76:	2900      	cmp	r1, #0
 8011a78:	d1ed      	bne.n	8011a56 <_puts_r+0x52>
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	da11      	bge.n	8011aa2 <_puts_r+0x9e>
 8011a7e:	4622      	mov	r2, r4
 8011a80:	210a      	movs	r1, #10
 8011a82:	4628      	mov	r0, r5
 8011a84:	f000 f85f 	bl	8011b46 <__swbuf_r>
 8011a88:	3001      	adds	r0, #1
 8011a8a:	d0d7      	beq.n	8011a3c <_puts_r+0x38>
 8011a8c:	250a      	movs	r5, #10
 8011a8e:	e7d7      	b.n	8011a40 <_puts_r+0x3c>
 8011a90:	4622      	mov	r2, r4
 8011a92:	4628      	mov	r0, r5
 8011a94:	f000 f857 	bl	8011b46 <__swbuf_r>
 8011a98:	3001      	adds	r0, #1
 8011a9a:	d1e7      	bne.n	8011a6c <_puts_r+0x68>
 8011a9c:	e7ce      	b.n	8011a3c <_puts_r+0x38>
 8011a9e:	3e01      	subs	r6, #1
 8011aa0:	e7e4      	b.n	8011a6c <_puts_r+0x68>
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	1c5a      	adds	r2, r3, #1
 8011aa6:	6022      	str	r2, [r4, #0]
 8011aa8:	220a      	movs	r2, #10
 8011aaa:	701a      	strb	r2, [r3, #0]
 8011aac:	e7ee      	b.n	8011a8c <_puts_r+0x88>
	...

08011ab0 <puts>:
 8011ab0:	4b02      	ldr	r3, [pc, #8]	@ (8011abc <puts+0xc>)
 8011ab2:	4601      	mov	r1, r0
 8011ab4:	6818      	ldr	r0, [r3, #0]
 8011ab6:	f7ff bfa5 	b.w	8011a04 <_puts_r>
 8011aba:	bf00      	nop
 8011abc:	20000118 	.word	0x20000118

08011ac0 <__sread>:
 8011ac0:	b510      	push	{r4, lr}
 8011ac2:	460c      	mov	r4, r1
 8011ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ac8:	f000 f912 	bl	8011cf0 <_read_r>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	bfab      	itete	ge
 8011ad0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8011ad4:	181b      	addge	r3, r3, r0
 8011ad6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011ada:	bfac      	ite	ge
 8011adc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011ade:	81a3      	strhlt	r3, [r4, #12]
 8011ae0:	bd10      	pop	{r4, pc}

08011ae2 <__swrite>:
 8011ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ae6:	461f      	mov	r7, r3
 8011ae8:	898b      	ldrh	r3, [r1, #12]
 8011aea:	05db      	lsls	r3, r3, #23
 8011aec:	4605      	mov	r5, r0
 8011aee:	460c      	mov	r4, r1
 8011af0:	4616      	mov	r6, r2
 8011af2:	d505      	bpl.n	8011b00 <__swrite+0x1e>
 8011af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af8:	2302      	movs	r3, #2
 8011afa:	2200      	movs	r2, #0
 8011afc:	f000 f8e6 	bl	8011ccc <_lseek_r>
 8011b00:	89a3      	ldrh	r3, [r4, #12]
 8011b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b0a:	81a3      	strh	r3, [r4, #12]
 8011b0c:	4632      	mov	r2, r6
 8011b0e:	463b      	mov	r3, r7
 8011b10:	4628      	mov	r0, r5
 8011b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b16:	f000 b8fd 	b.w	8011d14 <_write_r>

08011b1a <__sseek>:
 8011b1a:	b510      	push	{r4, lr}
 8011b1c:	460c      	mov	r4, r1
 8011b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b22:	f000 f8d3 	bl	8011ccc <_lseek_r>
 8011b26:	1c43      	adds	r3, r0, #1
 8011b28:	89a3      	ldrh	r3, [r4, #12]
 8011b2a:	bf15      	itete	ne
 8011b2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011b2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011b32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011b36:	81a3      	strheq	r3, [r4, #12]
 8011b38:	bf18      	it	ne
 8011b3a:	81a3      	strhne	r3, [r4, #12]
 8011b3c:	bd10      	pop	{r4, pc}

08011b3e <__sclose>:
 8011b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b42:	f000 b8b3 	b.w	8011cac <_close_r>

08011b46 <__swbuf_r>:
 8011b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b48:	460e      	mov	r6, r1
 8011b4a:	4614      	mov	r4, r2
 8011b4c:	4605      	mov	r5, r0
 8011b4e:	b118      	cbz	r0, 8011b58 <__swbuf_r+0x12>
 8011b50:	6a03      	ldr	r3, [r0, #32]
 8011b52:	b90b      	cbnz	r3, 8011b58 <__swbuf_r+0x12>
 8011b54:	f7ff ff06 	bl	8011964 <__sinit>
 8011b58:	69a3      	ldr	r3, [r4, #24]
 8011b5a:	60a3      	str	r3, [r4, #8]
 8011b5c:	89a3      	ldrh	r3, [r4, #12]
 8011b5e:	071a      	lsls	r2, r3, #28
 8011b60:	d501      	bpl.n	8011b66 <__swbuf_r+0x20>
 8011b62:	6923      	ldr	r3, [r4, #16]
 8011b64:	b943      	cbnz	r3, 8011b78 <__swbuf_r+0x32>
 8011b66:	4621      	mov	r1, r4
 8011b68:	4628      	mov	r0, r5
 8011b6a:	f000 f82b 	bl	8011bc4 <__swsetup_r>
 8011b6e:	b118      	cbz	r0, 8011b78 <__swbuf_r+0x32>
 8011b70:	f04f 37ff 	mov.w	r7, #4294967295
 8011b74:	4638      	mov	r0, r7
 8011b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	6922      	ldr	r2, [r4, #16]
 8011b7c:	1a98      	subs	r0, r3, r2
 8011b7e:	6963      	ldr	r3, [r4, #20]
 8011b80:	b2f6      	uxtb	r6, r6
 8011b82:	4283      	cmp	r3, r0
 8011b84:	4637      	mov	r7, r6
 8011b86:	dc05      	bgt.n	8011b94 <__swbuf_r+0x4e>
 8011b88:	4621      	mov	r1, r4
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	f000 fd5c 	bl	8012648 <_fflush_r>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d1ed      	bne.n	8011b70 <__swbuf_r+0x2a>
 8011b94:	68a3      	ldr	r3, [r4, #8]
 8011b96:	3b01      	subs	r3, #1
 8011b98:	60a3      	str	r3, [r4, #8]
 8011b9a:	6823      	ldr	r3, [r4, #0]
 8011b9c:	1c5a      	adds	r2, r3, #1
 8011b9e:	6022      	str	r2, [r4, #0]
 8011ba0:	701e      	strb	r6, [r3, #0]
 8011ba2:	6962      	ldr	r2, [r4, #20]
 8011ba4:	1c43      	adds	r3, r0, #1
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d004      	beq.n	8011bb4 <__swbuf_r+0x6e>
 8011baa:	89a3      	ldrh	r3, [r4, #12]
 8011bac:	07db      	lsls	r3, r3, #31
 8011bae:	d5e1      	bpl.n	8011b74 <__swbuf_r+0x2e>
 8011bb0:	2e0a      	cmp	r6, #10
 8011bb2:	d1df      	bne.n	8011b74 <__swbuf_r+0x2e>
 8011bb4:	4621      	mov	r1, r4
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	f000 fd46 	bl	8012648 <_fflush_r>
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	d0d9      	beq.n	8011b74 <__swbuf_r+0x2e>
 8011bc0:	e7d6      	b.n	8011b70 <__swbuf_r+0x2a>
	...

08011bc4 <__swsetup_r>:
 8011bc4:	b538      	push	{r3, r4, r5, lr}
 8011bc6:	4b29      	ldr	r3, [pc, #164]	@ (8011c6c <__swsetup_r+0xa8>)
 8011bc8:	4605      	mov	r5, r0
 8011bca:	6818      	ldr	r0, [r3, #0]
 8011bcc:	460c      	mov	r4, r1
 8011bce:	b118      	cbz	r0, 8011bd8 <__swsetup_r+0x14>
 8011bd0:	6a03      	ldr	r3, [r0, #32]
 8011bd2:	b90b      	cbnz	r3, 8011bd8 <__swsetup_r+0x14>
 8011bd4:	f7ff fec6 	bl	8011964 <__sinit>
 8011bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bdc:	0719      	lsls	r1, r3, #28
 8011bde:	d422      	bmi.n	8011c26 <__swsetup_r+0x62>
 8011be0:	06da      	lsls	r2, r3, #27
 8011be2:	d407      	bmi.n	8011bf4 <__swsetup_r+0x30>
 8011be4:	2209      	movs	r2, #9
 8011be6:	602a      	str	r2, [r5, #0]
 8011be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bec:	81a3      	strh	r3, [r4, #12]
 8011bee:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf2:	e033      	b.n	8011c5c <__swsetup_r+0x98>
 8011bf4:	0758      	lsls	r0, r3, #29
 8011bf6:	d512      	bpl.n	8011c1e <__swsetup_r+0x5a>
 8011bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011bfa:	b141      	cbz	r1, 8011c0e <__swsetup_r+0x4a>
 8011bfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c00:	4299      	cmp	r1, r3
 8011c02:	d002      	beq.n	8011c0a <__swsetup_r+0x46>
 8011c04:	4628      	mov	r0, r5
 8011c06:	f000 f8d3 	bl	8011db0 <_free_r>
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c0e:	89a3      	ldrh	r3, [r4, #12]
 8011c10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011c14:	81a3      	strh	r3, [r4, #12]
 8011c16:	2300      	movs	r3, #0
 8011c18:	6063      	str	r3, [r4, #4]
 8011c1a:	6923      	ldr	r3, [r4, #16]
 8011c1c:	6023      	str	r3, [r4, #0]
 8011c1e:	89a3      	ldrh	r3, [r4, #12]
 8011c20:	f043 0308 	orr.w	r3, r3, #8
 8011c24:	81a3      	strh	r3, [r4, #12]
 8011c26:	6923      	ldr	r3, [r4, #16]
 8011c28:	b94b      	cbnz	r3, 8011c3e <__swsetup_r+0x7a>
 8011c2a:	89a3      	ldrh	r3, [r4, #12]
 8011c2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c34:	d003      	beq.n	8011c3e <__swsetup_r+0x7a>
 8011c36:	4621      	mov	r1, r4
 8011c38:	4628      	mov	r0, r5
 8011c3a:	f000 fd53 	bl	80126e4 <__smakebuf_r>
 8011c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c42:	f013 0201 	ands.w	r2, r3, #1
 8011c46:	d00a      	beq.n	8011c5e <__swsetup_r+0x9a>
 8011c48:	2200      	movs	r2, #0
 8011c4a:	60a2      	str	r2, [r4, #8]
 8011c4c:	6962      	ldr	r2, [r4, #20]
 8011c4e:	4252      	negs	r2, r2
 8011c50:	61a2      	str	r2, [r4, #24]
 8011c52:	6922      	ldr	r2, [r4, #16]
 8011c54:	b942      	cbnz	r2, 8011c68 <__swsetup_r+0xa4>
 8011c56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011c5a:	d1c5      	bne.n	8011be8 <__swsetup_r+0x24>
 8011c5c:	bd38      	pop	{r3, r4, r5, pc}
 8011c5e:	0799      	lsls	r1, r3, #30
 8011c60:	bf58      	it	pl
 8011c62:	6962      	ldrpl	r2, [r4, #20]
 8011c64:	60a2      	str	r2, [r4, #8]
 8011c66:	e7f4      	b.n	8011c52 <__swsetup_r+0x8e>
 8011c68:	2000      	movs	r0, #0
 8011c6a:	e7f7      	b.n	8011c5c <__swsetup_r+0x98>
 8011c6c:	20000118 	.word	0x20000118

08011c70 <memset>:
 8011c70:	4402      	add	r2, r0
 8011c72:	4603      	mov	r3, r0
 8011c74:	4293      	cmp	r3, r2
 8011c76:	d100      	bne.n	8011c7a <memset+0xa>
 8011c78:	4770      	bx	lr
 8011c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8011c7e:	e7f9      	b.n	8011c74 <memset+0x4>

08011c80 <strrchr>:
 8011c80:	b538      	push	{r3, r4, r5, lr}
 8011c82:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8011c86:	4603      	mov	r3, r0
 8011c88:	d10e      	bne.n	8011ca8 <strrchr+0x28>
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c90:	f000 bd98 	b.w	80127c4 <strchr>
 8011c94:	1c43      	adds	r3, r0, #1
 8011c96:	4605      	mov	r5, r0
 8011c98:	4621      	mov	r1, r4
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f000 fd92 	bl	80127c4 <strchr>
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	d1f7      	bne.n	8011c94 <strrchr+0x14>
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	bd38      	pop	{r3, r4, r5, pc}
 8011ca8:	2500      	movs	r5, #0
 8011caa:	e7f5      	b.n	8011c98 <strrchr+0x18>

08011cac <_close_r>:
 8011cac:	b538      	push	{r3, r4, r5, lr}
 8011cae:	4d06      	ldr	r5, [pc, #24]	@ (8011cc8 <_close_r+0x1c>)
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	4608      	mov	r0, r1
 8011cb6:	602b      	str	r3, [r5, #0]
 8011cb8:	f7f1 fbc3 	bl	8003442 <_close>
 8011cbc:	1c43      	adds	r3, r0, #1
 8011cbe:	d102      	bne.n	8011cc6 <_close_r+0x1a>
 8011cc0:	682b      	ldr	r3, [r5, #0]
 8011cc2:	b103      	cbz	r3, 8011cc6 <_close_r+0x1a>
 8011cc4:	6023      	str	r3, [r4, #0]
 8011cc6:	bd38      	pop	{r3, r4, r5, pc}
 8011cc8:	20000d54 	.word	0x20000d54

08011ccc <_lseek_r>:
 8011ccc:	b538      	push	{r3, r4, r5, lr}
 8011cce:	4d07      	ldr	r5, [pc, #28]	@ (8011cec <_lseek_r+0x20>)
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	4608      	mov	r0, r1
 8011cd4:	4611      	mov	r1, r2
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	602a      	str	r2, [r5, #0]
 8011cda:	461a      	mov	r2, r3
 8011cdc:	f7f1 fbd8 	bl	8003490 <_lseek>
 8011ce0:	1c43      	adds	r3, r0, #1
 8011ce2:	d102      	bne.n	8011cea <_lseek_r+0x1e>
 8011ce4:	682b      	ldr	r3, [r5, #0]
 8011ce6:	b103      	cbz	r3, 8011cea <_lseek_r+0x1e>
 8011ce8:	6023      	str	r3, [r4, #0]
 8011cea:	bd38      	pop	{r3, r4, r5, pc}
 8011cec:	20000d54 	.word	0x20000d54

08011cf0 <_read_r>:
 8011cf0:	b538      	push	{r3, r4, r5, lr}
 8011cf2:	4d07      	ldr	r5, [pc, #28]	@ (8011d10 <_read_r+0x20>)
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	4608      	mov	r0, r1
 8011cf8:	4611      	mov	r1, r2
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	602a      	str	r2, [r5, #0]
 8011cfe:	461a      	mov	r2, r3
 8011d00:	f7f1 fb82 	bl	8003408 <_read>
 8011d04:	1c43      	adds	r3, r0, #1
 8011d06:	d102      	bne.n	8011d0e <_read_r+0x1e>
 8011d08:	682b      	ldr	r3, [r5, #0]
 8011d0a:	b103      	cbz	r3, 8011d0e <_read_r+0x1e>
 8011d0c:	6023      	str	r3, [r4, #0]
 8011d0e:	bd38      	pop	{r3, r4, r5, pc}
 8011d10:	20000d54 	.word	0x20000d54

08011d14 <_write_r>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	4d07      	ldr	r5, [pc, #28]	@ (8011d34 <_write_r+0x20>)
 8011d18:	4604      	mov	r4, r0
 8011d1a:	4608      	mov	r0, r1
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	2200      	movs	r2, #0
 8011d20:	602a      	str	r2, [r5, #0]
 8011d22:	461a      	mov	r2, r3
 8011d24:	f7fd f9c2 	bl	800f0ac <_write>
 8011d28:	1c43      	adds	r3, r0, #1
 8011d2a:	d102      	bne.n	8011d32 <_write_r+0x1e>
 8011d2c:	682b      	ldr	r3, [r5, #0]
 8011d2e:	b103      	cbz	r3, 8011d32 <_write_r+0x1e>
 8011d30:	6023      	str	r3, [r4, #0]
 8011d32:	bd38      	pop	{r3, r4, r5, pc}
 8011d34:	20000d54 	.word	0x20000d54

08011d38 <__errno>:
 8011d38:	4b01      	ldr	r3, [pc, #4]	@ (8011d40 <__errno+0x8>)
 8011d3a:	6818      	ldr	r0, [r3, #0]
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	20000118 	.word	0x20000118

08011d44 <__libc_init_array>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	4d0d      	ldr	r5, [pc, #52]	@ (8011d7c <__libc_init_array+0x38>)
 8011d48:	4c0d      	ldr	r4, [pc, #52]	@ (8011d80 <__libc_init_array+0x3c>)
 8011d4a:	1b64      	subs	r4, r4, r5
 8011d4c:	10a4      	asrs	r4, r4, #2
 8011d4e:	2600      	movs	r6, #0
 8011d50:	42a6      	cmp	r6, r4
 8011d52:	d109      	bne.n	8011d68 <__libc_init_array+0x24>
 8011d54:	4d0b      	ldr	r5, [pc, #44]	@ (8011d84 <__libc_init_array+0x40>)
 8011d56:	4c0c      	ldr	r4, [pc, #48]	@ (8011d88 <__libc_init_array+0x44>)
 8011d58:	f000 fdf2 	bl	8012940 <_init>
 8011d5c:	1b64      	subs	r4, r4, r5
 8011d5e:	10a4      	asrs	r4, r4, #2
 8011d60:	2600      	movs	r6, #0
 8011d62:	42a6      	cmp	r6, r4
 8011d64:	d105      	bne.n	8011d72 <__libc_init_array+0x2e>
 8011d66:	bd70      	pop	{r4, r5, r6, pc}
 8011d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d6c:	4798      	blx	r3
 8011d6e:	3601      	adds	r6, #1
 8011d70:	e7ee      	b.n	8011d50 <__libc_init_array+0xc>
 8011d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d76:	4798      	blx	r3
 8011d78:	3601      	adds	r6, #1
 8011d7a:	e7f2      	b.n	8011d62 <__libc_init_array+0x1e>
 8011d7c:	080140e4 	.word	0x080140e4
 8011d80:	080140e4 	.word	0x080140e4
 8011d84:	080140e4 	.word	0x080140e4
 8011d88:	080140e8 	.word	0x080140e8

08011d8c <__retarget_lock_init_recursive>:
 8011d8c:	4770      	bx	lr

08011d8e <__retarget_lock_acquire_recursive>:
 8011d8e:	4770      	bx	lr

08011d90 <__retarget_lock_release_recursive>:
 8011d90:	4770      	bx	lr

08011d92 <memcpy>:
 8011d92:	440a      	add	r2, r1
 8011d94:	4291      	cmp	r1, r2
 8011d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d9a:	d100      	bne.n	8011d9e <memcpy+0xc>
 8011d9c:	4770      	bx	lr
 8011d9e:	b510      	push	{r4, lr}
 8011da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011da8:	4291      	cmp	r1, r2
 8011daa:	d1f9      	bne.n	8011da0 <memcpy+0xe>
 8011dac:	bd10      	pop	{r4, pc}
	...

08011db0 <_free_r>:
 8011db0:	b538      	push	{r3, r4, r5, lr}
 8011db2:	4605      	mov	r5, r0
 8011db4:	2900      	cmp	r1, #0
 8011db6:	d041      	beq.n	8011e3c <_free_r+0x8c>
 8011db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dbc:	1f0c      	subs	r4, r1, #4
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	bfb8      	it	lt
 8011dc2:	18e4      	addlt	r4, r4, r3
 8011dc4:	f000 f8e0 	bl	8011f88 <__malloc_lock>
 8011dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8011e40 <_free_r+0x90>)
 8011dca:	6813      	ldr	r3, [r2, #0]
 8011dcc:	b933      	cbnz	r3, 8011ddc <_free_r+0x2c>
 8011dce:	6063      	str	r3, [r4, #4]
 8011dd0:	6014      	str	r4, [r2, #0]
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dd8:	f000 b8dc 	b.w	8011f94 <__malloc_unlock>
 8011ddc:	42a3      	cmp	r3, r4
 8011dde:	d908      	bls.n	8011df2 <_free_r+0x42>
 8011de0:	6820      	ldr	r0, [r4, #0]
 8011de2:	1821      	adds	r1, r4, r0
 8011de4:	428b      	cmp	r3, r1
 8011de6:	bf01      	itttt	eq
 8011de8:	6819      	ldreq	r1, [r3, #0]
 8011dea:	685b      	ldreq	r3, [r3, #4]
 8011dec:	1809      	addeq	r1, r1, r0
 8011dee:	6021      	streq	r1, [r4, #0]
 8011df0:	e7ed      	b.n	8011dce <_free_r+0x1e>
 8011df2:	461a      	mov	r2, r3
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	b10b      	cbz	r3, 8011dfc <_free_r+0x4c>
 8011df8:	42a3      	cmp	r3, r4
 8011dfa:	d9fa      	bls.n	8011df2 <_free_r+0x42>
 8011dfc:	6811      	ldr	r1, [r2, #0]
 8011dfe:	1850      	adds	r0, r2, r1
 8011e00:	42a0      	cmp	r0, r4
 8011e02:	d10b      	bne.n	8011e1c <_free_r+0x6c>
 8011e04:	6820      	ldr	r0, [r4, #0]
 8011e06:	4401      	add	r1, r0
 8011e08:	1850      	adds	r0, r2, r1
 8011e0a:	4283      	cmp	r3, r0
 8011e0c:	6011      	str	r1, [r2, #0]
 8011e0e:	d1e0      	bne.n	8011dd2 <_free_r+0x22>
 8011e10:	6818      	ldr	r0, [r3, #0]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	6053      	str	r3, [r2, #4]
 8011e16:	4408      	add	r0, r1
 8011e18:	6010      	str	r0, [r2, #0]
 8011e1a:	e7da      	b.n	8011dd2 <_free_r+0x22>
 8011e1c:	d902      	bls.n	8011e24 <_free_r+0x74>
 8011e1e:	230c      	movs	r3, #12
 8011e20:	602b      	str	r3, [r5, #0]
 8011e22:	e7d6      	b.n	8011dd2 <_free_r+0x22>
 8011e24:	6820      	ldr	r0, [r4, #0]
 8011e26:	1821      	adds	r1, r4, r0
 8011e28:	428b      	cmp	r3, r1
 8011e2a:	bf04      	itt	eq
 8011e2c:	6819      	ldreq	r1, [r3, #0]
 8011e2e:	685b      	ldreq	r3, [r3, #4]
 8011e30:	6063      	str	r3, [r4, #4]
 8011e32:	bf04      	itt	eq
 8011e34:	1809      	addeq	r1, r1, r0
 8011e36:	6021      	streq	r1, [r4, #0]
 8011e38:	6054      	str	r4, [r2, #4]
 8011e3a:	e7ca      	b.n	8011dd2 <_free_r+0x22>
 8011e3c:	bd38      	pop	{r3, r4, r5, pc}
 8011e3e:	bf00      	nop
 8011e40:	20000d60 	.word	0x20000d60

08011e44 <sbrk_aligned>:
 8011e44:	b570      	push	{r4, r5, r6, lr}
 8011e46:	4e0f      	ldr	r6, [pc, #60]	@ (8011e84 <sbrk_aligned+0x40>)
 8011e48:	460c      	mov	r4, r1
 8011e4a:	6831      	ldr	r1, [r6, #0]
 8011e4c:	4605      	mov	r5, r0
 8011e4e:	b911      	cbnz	r1, 8011e56 <sbrk_aligned+0x12>
 8011e50:	f000 fce8 	bl	8012824 <_sbrk_r>
 8011e54:	6030      	str	r0, [r6, #0]
 8011e56:	4621      	mov	r1, r4
 8011e58:	4628      	mov	r0, r5
 8011e5a:	f000 fce3 	bl	8012824 <_sbrk_r>
 8011e5e:	1c43      	adds	r3, r0, #1
 8011e60:	d103      	bne.n	8011e6a <sbrk_aligned+0x26>
 8011e62:	f04f 34ff 	mov.w	r4, #4294967295
 8011e66:	4620      	mov	r0, r4
 8011e68:	bd70      	pop	{r4, r5, r6, pc}
 8011e6a:	1cc4      	adds	r4, r0, #3
 8011e6c:	f024 0403 	bic.w	r4, r4, #3
 8011e70:	42a0      	cmp	r0, r4
 8011e72:	d0f8      	beq.n	8011e66 <sbrk_aligned+0x22>
 8011e74:	1a21      	subs	r1, r4, r0
 8011e76:	4628      	mov	r0, r5
 8011e78:	f000 fcd4 	bl	8012824 <_sbrk_r>
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	d1f2      	bne.n	8011e66 <sbrk_aligned+0x22>
 8011e80:	e7ef      	b.n	8011e62 <sbrk_aligned+0x1e>
 8011e82:	bf00      	nop
 8011e84:	20000d5c 	.word	0x20000d5c

08011e88 <_malloc_r>:
 8011e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e8c:	1ccd      	adds	r5, r1, #3
 8011e8e:	f025 0503 	bic.w	r5, r5, #3
 8011e92:	3508      	adds	r5, #8
 8011e94:	2d0c      	cmp	r5, #12
 8011e96:	bf38      	it	cc
 8011e98:	250c      	movcc	r5, #12
 8011e9a:	2d00      	cmp	r5, #0
 8011e9c:	4606      	mov	r6, r0
 8011e9e:	db01      	blt.n	8011ea4 <_malloc_r+0x1c>
 8011ea0:	42a9      	cmp	r1, r5
 8011ea2:	d904      	bls.n	8011eae <_malloc_r+0x26>
 8011ea4:	230c      	movs	r3, #12
 8011ea6:	6033      	str	r3, [r6, #0]
 8011ea8:	2000      	movs	r0, #0
 8011eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011f84 <_malloc_r+0xfc>
 8011eb2:	f000 f869 	bl	8011f88 <__malloc_lock>
 8011eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8011eba:	461c      	mov	r4, r3
 8011ebc:	bb44      	cbnz	r4, 8011f10 <_malloc_r+0x88>
 8011ebe:	4629      	mov	r1, r5
 8011ec0:	4630      	mov	r0, r6
 8011ec2:	f7ff ffbf 	bl	8011e44 <sbrk_aligned>
 8011ec6:	1c43      	adds	r3, r0, #1
 8011ec8:	4604      	mov	r4, r0
 8011eca:	d158      	bne.n	8011f7e <_malloc_r+0xf6>
 8011ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8011ed0:	4627      	mov	r7, r4
 8011ed2:	2f00      	cmp	r7, #0
 8011ed4:	d143      	bne.n	8011f5e <_malloc_r+0xd6>
 8011ed6:	2c00      	cmp	r4, #0
 8011ed8:	d04b      	beq.n	8011f72 <_malloc_r+0xea>
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	4639      	mov	r1, r7
 8011ede:	4630      	mov	r0, r6
 8011ee0:	eb04 0903 	add.w	r9, r4, r3
 8011ee4:	f000 fc9e 	bl	8012824 <_sbrk_r>
 8011ee8:	4581      	cmp	r9, r0
 8011eea:	d142      	bne.n	8011f72 <_malloc_r+0xea>
 8011eec:	6821      	ldr	r1, [r4, #0]
 8011eee:	1a6d      	subs	r5, r5, r1
 8011ef0:	4629      	mov	r1, r5
 8011ef2:	4630      	mov	r0, r6
 8011ef4:	f7ff ffa6 	bl	8011e44 <sbrk_aligned>
 8011ef8:	3001      	adds	r0, #1
 8011efa:	d03a      	beq.n	8011f72 <_malloc_r+0xea>
 8011efc:	6823      	ldr	r3, [r4, #0]
 8011efe:	442b      	add	r3, r5
 8011f00:	6023      	str	r3, [r4, #0]
 8011f02:	f8d8 3000 	ldr.w	r3, [r8]
 8011f06:	685a      	ldr	r2, [r3, #4]
 8011f08:	bb62      	cbnz	r2, 8011f64 <_malloc_r+0xdc>
 8011f0a:	f8c8 7000 	str.w	r7, [r8]
 8011f0e:	e00f      	b.n	8011f30 <_malloc_r+0xa8>
 8011f10:	6822      	ldr	r2, [r4, #0]
 8011f12:	1b52      	subs	r2, r2, r5
 8011f14:	d420      	bmi.n	8011f58 <_malloc_r+0xd0>
 8011f16:	2a0b      	cmp	r2, #11
 8011f18:	d917      	bls.n	8011f4a <_malloc_r+0xc2>
 8011f1a:	1961      	adds	r1, r4, r5
 8011f1c:	42a3      	cmp	r3, r4
 8011f1e:	6025      	str	r5, [r4, #0]
 8011f20:	bf18      	it	ne
 8011f22:	6059      	strne	r1, [r3, #4]
 8011f24:	6863      	ldr	r3, [r4, #4]
 8011f26:	bf08      	it	eq
 8011f28:	f8c8 1000 	streq.w	r1, [r8]
 8011f2c:	5162      	str	r2, [r4, r5]
 8011f2e:	604b      	str	r3, [r1, #4]
 8011f30:	4630      	mov	r0, r6
 8011f32:	f000 f82f 	bl	8011f94 <__malloc_unlock>
 8011f36:	f104 000b 	add.w	r0, r4, #11
 8011f3a:	1d23      	adds	r3, r4, #4
 8011f3c:	f020 0007 	bic.w	r0, r0, #7
 8011f40:	1ac2      	subs	r2, r0, r3
 8011f42:	bf1c      	itt	ne
 8011f44:	1a1b      	subne	r3, r3, r0
 8011f46:	50a3      	strne	r3, [r4, r2]
 8011f48:	e7af      	b.n	8011eaa <_malloc_r+0x22>
 8011f4a:	6862      	ldr	r2, [r4, #4]
 8011f4c:	42a3      	cmp	r3, r4
 8011f4e:	bf0c      	ite	eq
 8011f50:	f8c8 2000 	streq.w	r2, [r8]
 8011f54:	605a      	strne	r2, [r3, #4]
 8011f56:	e7eb      	b.n	8011f30 <_malloc_r+0xa8>
 8011f58:	4623      	mov	r3, r4
 8011f5a:	6864      	ldr	r4, [r4, #4]
 8011f5c:	e7ae      	b.n	8011ebc <_malloc_r+0x34>
 8011f5e:	463c      	mov	r4, r7
 8011f60:	687f      	ldr	r7, [r7, #4]
 8011f62:	e7b6      	b.n	8011ed2 <_malloc_r+0x4a>
 8011f64:	461a      	mov	r2, r3
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	42a3      	cmp	r3, r4
 8011f6a:	d1fb      	bne.n	8011f64 <_malloc_r+0xdc>
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	6053      	str	r3, [r2, #4]
 8011f70:	e7de      	b.n	8011f30 <_malloc_r+0xa8>
 8011f72:	230c      	movs	r3, #12
 8011f74:	6033      	str	r3, [r6, #0]
 8011f76:	4630      	mov	r0, r6
 8011f78:	f000 f80c 	bl	8011f94 <__malloc_unlock>
 8011f7c:	e794      	b.n	8011ea8 <_malloc_r+0x20>
 8011f7e:	6005      	str	r5, [r0, #0]
 8011f80:	e7d6      	b.n	8011f30 <_malloc_r+0xa8>
 8011f82:	bf00      	nop
 8011f84:	20000d60 	.word	0x20000d60

08011f88 <__malloc_lock>:
 8011f88:	4801      	ldr	r0, [pc, #4]	@ (8011f90 <__malloc_lock+0x8>)
 8011f8a:	f7ff bf00 	b.w	8011d8e <__retarget_lock_acquire_recursive>
 8011f8e:	bf00      	nop
 8011f90:	20000d58 	.word	0x20000d58

08011f94 <__malloc_unlock>:
 8011f94:	4801      	ldr	r0, [pc, #4]	@ (8011f9c <__malloc_unlock+0x8>)
 8011f96:	f7ff befb 	b.w	8011d90 <__retarget_lock_release_recursive>
 8011f9a:	bf00      	nop
 8011f9c:	20000d58 	.word	0x20000d58

08011fa0 <__sfputc_r>:
 8011fa0:	6893      	ldr	r3, [r2, #8]
 8011fa2:	3b01      	subs	r3, #1
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	b410      	push	{r4}
 8011fa8:	6093      	str	r3, [r2, #8]
 8011faa:	da08      	bge.n	8011fbe <__sfputc_r+0x1e>
 8011fac:	6994      	ldr	r4, [r2, #24]
 8011fae:	42a3      	cmp	r3, r4
 8011fb0:	db01      	blt.n	8011fb6 <__sfputc_r+0x16>
 8011fb2:	290a      	cmp	r1, #10
 8011fb4:	d103      	bne.n	8011fbe <__sfputc_r+0x1e>
 8011fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fba:	f7ff bdc4 	b.w	8011b46 <__swbuf_r>
 8011fbe:	6813      	ldr	r3, [r2, #0]
 8011fc0:	1c58      	adds	r0, r3, #1
 8011fc2:	6010      	str	r0, [r2, #0]
 8011fc4:	7019      	strb	r1, [r3, #0]
 8011fc6:	4608      	mov	r0, r1
 8011fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fcc:	4770      	bx	lr

08011fce <__sfputs_r>:
 8011fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fd0:	4606      	mov	r6, r0
 8011fd2:	460f      	mov	r7, r1
 8011fd4:	4614      	mov	r4, r2
 8011fd6:	18d5      	adds	r5, r2, r3
 8011fd8:	42ac      	cmp	r4, r5
 8011fda:	d101      	bne.n	8011fe0 <__sfputs_r+0x12>
 8011fdc:	2000      	movs	r0, #0
 8011fde:	e007      	b.n	8011ff0 <__sfputs_r+0x22>
 8011fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fe4:	463a      	mov	r2, r7
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	f7ff ffda 	bl	8011fa0 <__sfputc_r>
 8011fec:	1c43      	adds	r3, r0, #1
 8011fee:	d1f3      	bne.n	8011fd8 <__sfputs_r+0xa>
 8011ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ff4 <_vfiprintf_r>:
 8011ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff8:	460d      	mov	r5, r1
 8011ffa:	b09d      	sub	sp, #116	@ 0x74
 8011ffc:	4614      	mov	r4, r2
 8011ffe:	4698      	mov	r8, r3
 8012000:	4606      	mov	r6, r0
 8012002:	b118      	cbz	r0, 801200c <_vfiprintf_r+0x18>
 8012004:	6a03      	ldr	r3, [r0, #32]
 8012006:	b90b      	cbnz	r3, 801200c <_vfiprintf_r+0x18>
 8012008:	f7ff fcac 	bl	8011964 <__sinit>
 801200c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801200e:	07d9      	lsls	r1, r3, #31
 8012010:	d405      	bmi.n	801201e <_vfiprintf_r+0x2a>
 8012012:	89ab      	ldrh	r3, [r5, #12]
 8012014:	059a      	lsls	r2, r3, #22
 8012016:	d402      	bmi.n	801201e <_vfiprintf_r+0x2a>
 8012018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801201a:	f7ff feb8 	bl	8011d8e <__retarget_lock_acquire_recursive>
 801201e:	89ab      	ldrh	r3, [r5, #12]
 8012020:	071b      	lsls	r3, r3, #28
 8012022:	d501      	bpl.n	8012028 <_vfiprintf_r+0x34>
 8012024:	692b      	ldr	r3, [r5, #16]
 8012026:	b99b      	cbnz	r3, 8012050 <_vfiprintf_r+0x5c>
 8012028:	4629      	mov	r1, r5
 801202a:	4630      	mov	r0, r6
 801202c:	f7ff fdca 	bl	8011bc4 <__swsetup_r>
 8012030:	b170      	cbz	r0, 8012050 <_vfiprintf_r+0x5c>
 8012032:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012034:	07dc      	lsls	r4, r3, #31
 8012036:	d504      	bpl.n	8012042 <_vfiprintf_r+0x4e>
 8012038:	f04f 30ff 	mov.w	r0, #4294967295
 801203c:	b01d      	add	sp, #116	@ 0x74
 801203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012042:	89ab      	ldrh	r3, [r5, #12]
 8012044:	0598      	lsls	r0, r3, #22
 8012046:	d4f7      	bmi.n	8012038 <_vfiprintf_r+0x44>
 8012048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801204a:	f7ff fea1 	bl	8011d90 <__retarget_lock_release_recursive>
 801204e:	e7f3      	b.n	8012038 <_vfiprintf_r+0x44>
 8012050:	2300      	movs	r3, #0
 8012052:	9309      	str	r3, [sp, #36]	@ 0x24
 8012054:	2320      	movs	r3, #32
 8012056:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801205a:	f8cd 800c 	str.w	r8, [sp, #12]
 801205e:	2330      	movs	r3, #48	@ 0x30
 8012060:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012210 <_vfiprintf_r+0x21c>
 8012064:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012068:	f04f 0901 	mov.w	r9, #1
 801206c:	4623      	mov	r3, r4
 801206e:	469a      	mov	sl, r3
 8012070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012074:	b10a      	cbz	r2, 801207a <_vfiprintf_r+0x86>
 8012076:	2a25      	cmp	r2, #37	@ 0x25
 8012078:	d1f9      	bne.n	801206e <_vfiprintf_r+0x7a>
 801207a:	ebba 0b04 	subs.w	fp, sl, r4
 801207e:	d00b      	beq.n	8012098 <_vfiprintf_r+0xa4>
 8012080:	465b      	mov	r3, fp
 8012082:	4622      	mov	r2, r4
 8012084:	4629      	mov	r1, r5
 8012086:	4630      	mov	r0, r6
 8012088:	f7ff ffa1 	bl	8011fce <__sfputs_r>
 801208c:	3001      	adds	r0, #1
 801208e:	f000 80a7 	beq.w	80121e0 <_vfiprintf_r+0x1ec>
 8012092:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012094:	445a      	add	r2, fp
 8012096:	9209      	str	r2, [sp, #36]	@ 0x24
 8012098:	f89a 3000 	ldrb.w	r3, [sl]
 801209c:	2b00      	cmp	r3, #0
 801209e:	f000 809f 	beq.w	80121e0 <_vfiprintf_r+0x1ec>
 80120a2:	2300      	movs	r3, #0
 80120a4:	f04f 32ff 	mov.w	r2, #4294967295
 80120a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120ac:	f10a 0a01 	add.w	sl, sl, #1
 80120b0:	9304      	str	r3, [sp, #16]
 80120b2:	9307      	str	r3, [sp, #28]
 80120b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80120b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80120ba:	4654      	mov	r4, sl
 80120bc:	2205      	movs	r2, #5
 80120be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120c2:	4853      	ldr	r0, [pc, #332]	@ (8012210 <_vfiprintf_r+0x21c>)
 80120c4:	f7ee f864 	bl	8000190 <memchr>
 80120c8:	9a04      	ldr	r2, [sp, #16]
 80120ca:	b9d8      	cbnz	r0, 8012104 <_vfiprintf_r+0x110>
 80120cc:	06d1      	lsls	r1, r2, #27
 80120ce:	bf44      	itt	mi
 80120d0:	2320      	movmi	r3, #32
 80120d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120d6:	0713      	lsls	r3, r2, #28
 80120d8:	bf44      	itt	mi
 80120da:	232b      	movmi	r3, #43	@ 0x2b
 80120dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120e0:	f89a 3000 	ldrb.w	r3, [sl]
 80120e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80120e6:	d015      	beq.n	8012114 <_vfiprintf_r+0x120>
 80120e8:	9a07      	ldr	r2, [sp, #28]
 80120ea:	4654      	mov	r4, sl
 80120ec:	2000      	movs	r0, #0
 80120ee:	f04f 0c0a 	mov.w	ip, #10
 80120f2:	4621      	mov	r1, r4
 80120f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120f8:	3b30      	subs	r3, #48	@ 0x30
 80120fa:	2b09      	cmp	r3, #9
 80120fc:	d94b      	bls.n	8012196 <_vfiprintf_r+0x1a2>
 80120fe:	b1b0      	cbz	r0, 801212e <_vfiprintf_r+0x13a>
 8012100:	9207      	str	r2, [sp, #28]
 8012102:	e014      	b.n	801212e <_vfiprintf_r+0x13a>
 8012104:	eba0 0308 	sub.w	r3, r0, r8
 8012108:	fa09 f303 	lsl.w	r3, r9, r3
 801210c:	4313      	orrs	r3, r2
 801210e:	9304      	str	r3, [sp, #16]
 8012110:	46a2      	mov	sl, r4
 8012112:	e7d2      	b.n	80120ba <_vfiprintf_r+0xc6>
 8012114:	9b03      	ldr	r3, [sp, #12]
 8012116:	1d19      	adds	r1, r3, #4
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	9103      	str	r1, [sp, #12]
 801211c:	2b00      	cmp	r3, #0
 801211e:	bfbb      	ittet	lt
 8012120:	425b      	neglt	r3, r3
 8012122:	f042 0202 	orrlt.w	r2, r2, #2
 8012126:	9307      	strge	r3, [sp, #28]
 8012128:	9307      	strlt	r3, [sp, #28]
 801212a:	bfb8      	it	lt
 801212c:	9204      	strlt	r2, [sp, #16]
 801212e:	7823      	ldrb	r3, [r4, #0]
 8012130:	2b2e      	cmp	r3, #46	@ 0x2e
 8012132:	d10a      	bne.n	801214a <_vfiprintf_r+0x156>
 8012134:	7863      	ldrb	r3, [r4, #1]
 8012136:	2b2a      	cmp	r3, #42	@ 0x2a
 8012138:	d132      	bne.n	80121a0 <_vfiprintf_r+0x1ac>
 801213a:	9b03      	ldr	r3, [sp, #12]
 801213c:	1d1a      	adds	r2, r3, #4
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	9203      	str	r2, [sp, #12]
 8012142:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012146:	3402      	adds	r4, #2
 8012148:	9305      	str	r3, [sp, #20]
 801214a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012220 <_vfiprintf_r+0x22c>
 801214e:	7821      	ldrb	r1, [r4, #0]
 8012150:	2203      	movs	r2, #3
 8012152:	4650      	mov	r0, sl
 8012154:	f7ee f81c 	bl	8000190 <memchr>
 8012158:	b138      	cbz	r0, 801216a <_vfiprintf_r+0x176>
 801215a:	9b04      	ldr	r3, [sp, #16]
 801215c:	eba0 000a 	sub.w	r0, r0, sl
 8012160:	2240      	movs	r2, #64	@ 0x40
 8012162:	4082      	lsls	r2, r0
 8012164:	4313      	orrs	r3, r2
 8012166:	3401      	adds	r4, #1
 8012168:	9304      	str	r3, [sp, #16]
 801216a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801216e:	4829      	ldr	r0, [pc, #164]	@ (8012214 <_vfiprintf_r+0x220>)
 8012170:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012174:	2206      	movs	r2, #6
 8012176:	f7ee f80b 	bl	8000190 <memchr>
 801217a:	2800      	cmp	r0, #0
 801217c:	d03f      	beq.n	80121fe <_vfiprintf_r+0x20a>
 801217e:	4b26      	ldr	r3, [pc, #152]	@ (8012218 <_vfiprintf_r+0x224>)
 8012180:	bb1b      	cbnz	r3, 80121ca <_vfiprintf_r+0x1d6>
 8012182:	9b03      	ldr	r3, [sp, #12]
 8012184:	3307      	adds	r3, #7
 8012186:	f023 0307 	bic.w	r3, r3, #7
 801218a:	3308      	adds	r3, #8
 801218c:	9303      	str	r3, [sp, #12]
 801218e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012190:	443b      	add	r3, r7
 8012192:	9309      	str	r3, [sp, #36]	@ 0x24
 8012194:	e76a      	b.n	801206c <_vfiprintf_r+0x78>
 8012196:	fb0c 3202 	mla	r2, ip, r2, r3
 801219a:	460c      	mov	r4, r1
 801219c:	2001      	movs	r0, #1
 801219e:	e7a8      	b.n	80120f2 <_vfiprintf_r+0xfe>
 80121a0:	2300      	movs	r3, #0
 80121a2:	3401      	adds	r4, #1
 80121a4:	9305      	str	r3, [sp, #20]
 80121a6:	4619      	mov	r1, r3
 80121a8:	f04f 0c0a 	mov.w	ip, #10
 80121ac:	4620      	mov	r0, r4
 80121ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121b2:	3a30      	subs	r2, #48	@ 0x30
 80121b4:	2a09      	cmp	r2, #9
 80121b6:	d903      	bls.n	80121c0 <_vfiprintf_r+0x1cc>
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d0c6      	beq.n	801214a <_vfiprintf_r+0x156>
 80121bc:	9105      	str	r1, [sp, #20]
 80121be:	e7c4      	b.n	801214a <_vfiprintf_r+0x156>
 80121c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80121c4:	4604      	mov	r4, r0
 80121c6:	2301      	movs	r3, #1
 80121c8:	e7f0      	b.n	80121ac <_vfiprintf_r+0x1b8>
 80121ca:	ab03      	add	r3, sp, #12
 80121cc:	9300      	str	r3, [sp, #0]
 80121ce:	462a      	mov	r2, r5
 80121d0:	4b12      	ldr	r3, [pc, #72]	@ (801221c <_vfiprintf_r+0x228>)
 80121d2:	a904      	add	r1, sp, #16
 80121d4:	4630      	mov	r0, r6
 80121d6:	f3af 8000 	nop.w
 80121da:	4607      	mov	r7, r0
 80121dc:	1c78      	adds	r0, r7, #1
 80121de:	d1d6      	bne.n	801218e <_vfiprintf_r+0x19a>
 80121e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121e2:	07d9      	lsls	r1, r3, #31
 80121e4:	d405      	bmi.n	80121f2 <_vfiprintf_r+0x1fe>
 80121e6:	89ab      	ldrh	r3, [r5, #12]
 80121e8:	059a      	lsls	r2, r3, #22
 80121ea:	d402      	bmi.n	80121f2 <_vfiprintf_r+0x1fe>
 80121ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80121ee:	f7ff fdcf 	bl	8011d90 <__retarget_lock_release_recursive>
 80121f2:	89ab      	ldrh	r3, [r5, #12]
 80121f4:	065b      	lsls	r3, r3, #25
 80121f6:	f53f af1f 	bmi.w	8012038 <_vfiprintf_r+0x44>
 80121fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121fc:	e71e      	b.n	801203c <_vfiprintf_r+0x48>
 80121fe:	ab03      	add	r3, sp, #12
 8012200:	9300      	str	r3, [sp, #0]
 8012202:	462a      	mov	r2, r5
 8012204:	4b05      	ldr	r3, [pc, #20]	@ (801221c <_vfiprintf_r+0x228>)
 8012206:	a904      	add	r1, sp, #16
 8012208:	4630      	mov	r0, r6
 801220a:	f000 f879 	bl	8012300 <_printf_i>
 801220e:	e7e4      	b.n	80121da <_vfiprintf_r+0x1e6>
 8012210:	080140a8 	.word	0x080140a8
 8012214:	080140b2 	.word	0x080140b2
 8012218:	00000000 	.word	0x00000000
 801221c:	08011fcf 	.word	0x08011fcf
 8012220:	080140ae 	.word	0x080140ae

08012224 <_printf_common>:
 8012224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012228:	4616      	mov	r6, r2
 801222a:	4698      	mov	r8, r3
 801222c:	688a      	ldr	r2, [r1, #8]
 801222e:	690b      	ldr	r3, [r1, #16]
 8012230:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012234:	4293      	cmp	r3, r2
 8012236:	bfb8      	it	lt
 8012238:	4613      	movlt	r3, r2
 801223a:	6033      	str	r3, [r6, #0]
 801223c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012240:	4607      	mov	r7, r0
 8012242:	460c      	mov	r4, r1
 8012244:	b10a      	cbz	r2, 801224a <_printf_common+0x26>
 8012246:	3301      	adds	r3, #1
 8012248:	6033      	str	r3, [r6, #0]
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	0699      	lsls	r1, r3, #26
 801224e:	bf42      	ittt	mi
 8012250:	6833      	ldrmi	r3, [r6, #0]
 8012252:	3302      	addmi	r3, #2
 8012254:	6033      	strmi	r3, [r6, #0]
 8012256:	6825      	ldr	r5, [r4, #0]
 8012258:	f015 0506 	ands.w	r5, r5, #6
 801225c:	d106      	bne.n	801226c <_printf_common+0x48>
 801225e:	f104 0a19 	add.w	sl, r4, #25
 8012262:	68e3      	ldr	r3, [r4, #12]
 8012264:	6832      	ldr	r2, [r6, #0]
 8012266:	1a9b      	subs	r3, r3, r2
 8012268:	42ab      	cmp	r3, r5
 801226a:	dc26      	bgt.n	80122ba <_printf_common+0x96>
 801226c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012270:	6822      	ldr	r2, [r4, #0]
 8012272:	3b00      	subs	r3, #0
 8012274:	bf18      	it	ne
 8012276:	2301      	movne	r3, #1
 8012278:	0692      	lsls	r2, r2, #26
 801227a:	d42b      	bmi.n	80122d4 <_printf_common+0xb0>
 801227c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012280:	4641      	mov	r1, r8
 8012282:	4638      	mov	r0, r7
 8012284:	47c8      	blx	r9
 8012286:	3001      	adds	r0, #1
 8012288:	d01e      	beq.n	80122c8 <_printf_common+0xa4>
 801228a:	6823      	ldr	r3, [r4, #0]
 801228c:	6922      	ldr	r2, [r4, #16]
 801228e:	f003 0306 	and.w	r3, r3, #6
 8012292:	2b04      	cmp	r3, #4
 8012294:	bf02      	ittt	eq
 8012296:	68e5      	ldreq	r5, [r4, #12]
 8012298:	6833      	ldreq	r3, [r6, #0]
 801229a:	1aed      	subeq	r5, r5, r3
 801229c:	68a3      	ldr	r3, [r4, #8]
 801229e:	bf0c      	ite	eq
 80122a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122a4:	2500      	movne	r5, #0
 80122a6:	4293      	cmp	r3, r2
 80122a8:	bfc4      	itt	gt
 80122aa:	1a9b      	subgt	r3, r3, r2
 80122ac:	18ed      	addgt	r5, r5, r3
 80122ae:	2600      	movs	r6, #0
 80122b0:	341a      	adds	r4, #26
 80122b2:	42b5      	cmp	r5, r6
 80122b4:	d11a      	bne.n	80122ec <_printf_common+0xc8>
 80122b6:	2000      	movs	r0, #0
 80122b8:	e008      	b.n	80122cc <_printf_common+0xa8>
 80122ba:	2301      	movs	r3, #1
 80122bc:	4652      	mov	r2, sl
 80122be:	4641      	mov	r1, r8
 80122c0:	4638      	mov	r0, r7
 80122c2:	47c8      	blx	r9
 80122c4:	3001      	adds	r0, #1
 80122c6:	d103      	bne.n	80122d0 <_printf_common+0xac>
 80122c8:	f04f 30ff 	mov.w	r0, #4294967295
 80122cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122d0:	3501      	adds	r5, #1
 80122d2:	e7c6      	b.n	8012262 <_printf_common+0x3e>
 80122d4:	18e1      	adds	r1, r4, r3
 80122d6:	1c5a      	adds	r2, r3, #1
 80122d8:	2030      	movs	r0, #48	@ 0x30
 80122da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80122de:	4422      	add	r2, r4
 80122e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80122e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80122e8:	3302      	adds	r3, #2
 80122ea:	e7c7      	b.n	801227c <_printf_common+0x58>
 80122ec:	2301      	movs	r3, #1
 80122ee:	4622      	mov	r2, r4
 80122f0:	4641      	mov	r1, r8
 80122f2:	4638      	mov	r0, r7
 80122f4:	47c8      	blx	r9
 80122f6:	3001      	adds	r0, #1
 80122f8:	d0e6      	beq.n	80122c8 <_printf_common+0xa4>
 80122fa:	3601      	adds	r6, #1
 80122fc:	e7d9      	b.n	80122b2 <_printf_common+0x8e>
	...

08012300 <_printf_i>:
 8012300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012304:	7e0f      	ldrb	r7, [r1, #24]
 8012306:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012308:	2f78      	cmp	r7, #120	@ 0x78
 801230a:	4691      	mov	r9, r2
 801230c:	4680      	mov	r8, r0
 801230e:	460c      	mov	r4, r1
 8012310:	469a      	mov	sl, r3
 8012312:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012316:	d807      	bhi.n	8012328 <_printf_i+0x28>
 8012318:	2f62      	cmp	r7, #98	@ 0x62
 801231a:	d80a      	bhi.n	8012332 <_printf_i+0x32>
 801231c:	2f00      	cmp	r7, #0
 801231e:	f000 80d2 	beq.w	80124c6 <_printf_i+0x1c6>
 8012322:	2f58      	cmp	r7, #88	@ 0x58
 8012324:	f000 80b9 	beq.w	801249a <_printf_i+0x19a>
 8012328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801232c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012330:	e03a      	b.n	80123a8 <_printf_i+0xa8>
 8012332:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012336:	2b15      	cmp	r3, #21
 8012338:	d8f6      	bhi.n	8012328 <_printf_i+0x28>
 801233a:	a101      	add	r1, pc, #4	@ (adr r1, 8012340 <_printf_i+0x40>)
 801233c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012340:	08012399 	.word	0x08012399
 8012344:	080123ad 	.word	0x080123ad
 8012348:	08012329 	.word	0x08012329
 801234c:	08012329 	.word	0x08012329
 8012350:	08012329 	.word	0x08012329
 8012354:	08012329 	.word	0x08012329
 8012358:	080123ad 	.word	0x080123ad
 801235c:	08012329 	.word	0x08012329
 8012360:	08012329 	.word	0x08012329
 8012364:	08012329 	.word	0x08012329
 8012368:	08012329 	.word	0x08012329
 801236c:	080124ad 	.word	0x080124ad
 8012370:	080123d7 	.word	0x080123d7
 8012374:	08012467 	.word	0x08012467
 8012378:	08012329 	.word	0x08012329
 801237c:	08012329 	.word	0x08012329
 8012380:	080124cf 	.word	0x080124cf
 8012384:	08012329 	.word	0x08012329
 8012388:	080123d7 	.word	0x080123d7
 801238c:	08012329 	.word	0x08012329
 8012390:	08012329 	.word	0x08012329
 8012394:	0801246f 	.word	0x0801246f
 8012398:	6833      	ldr	r3, [r6, #0]
 801239a:	1d1a      	adds	r2, r3, #4
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	6032      	str	r2, [r6, #0]
 80123a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80123a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80123a8:	2301      	movs	r3, #1
 80123aa:	e09d      	b.n	80124e8 <_printf_i+0x1e8>
 80123ac:	6833      	ldr	r3, [r6, #0]
 80123ae:	6820      	ldr	r0, [r4, #0]
 80123b0:	1d19      	adds	r1, r3, #4
 80123b2:	6031      	str	r1, [r6, #0]
 80123b4:	0606      	lsls	r6, r0, #24
 80123b6:	d501      	bpl.n	80123bc <_printf_i+0xbc>
 80123b8:	681d      	ldr	r5, [r3, #0]
 80123ba:	e003      	b.n	80123c4 <_printf_i+0xc4>
 80123bc:	0645      	lsls	r5, r0, #25
 80123be:	d5fb      	bpl.n	80123b8 <_printf_i+0xb8>
 80123c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80123c4:	2d00      	cmp	r5, #0
 80123c6:	da03      	bge.n	80123d0 <_printf_i+0xd0>
 80123c8:	232d      	movs	r3, #45	@ 0x2d
 80123ca:	426d      	negs	r5, r5
 80123cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80123d0:	4859      	ldr	r0, [pc, #356]	@ (8012538 <_printf_i+0x238>)
 80123d2:	230a      	movs	r3, #10
 80123d4:	e011      	b.n	80123fa <_printf_i+0xfa>
 80123d6:	6821      	ldr	r1, [r4, #0]
 80123d8:	6833      	ldr	r3, [r6, #0]
 80123da:	0608      	lsls	r0, r1, #24
 80123dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80123e0:	d402      	bmi.n	80123e8 <_printf_i+0xe8>
 80123e2:	0649      	lsls	r1, r1, #25
 80123e4:	bf48      	it	mi
 80123e6:	b2ad      	uxthmi	r5, r5
 80123e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80123ea:	4853      	ldr	r0, [pc, #332]	@ (8012538 <_printf_i+0x238>)
 80123ec:	6033      	str	r3, [r6, #0]
 80123ee:	bf14      	ite	ne
 80123f0:	230a      	movne	r3, #10
 80123f2:	2308      	moveq	r3, #8
 80123f4:	2100      	movs	r1, #0
 80123f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80123fa:	6866      	ldr	r6, [r4, #4]
 80123fc:	60a6      	str	r6, [r4, #8]
 80123fe:	2e00      	cmp	r6, #0
 8012400:	bfa2      	ittt	ge
 8012402:	6821      	ldrge	r1, [r4, #0]
 8012404:	f021 0104 	bicge.w	r1, r1, #4
 8012408:	6021      	strge	r1, [r4, #0]
 801240a:	b90d      	cbnz	r5, 8012410 <_printf_i+0x110>
 801240c:	2e00      	cmp	r6, #0
 801240e:	d04b      	beq.n	80124a8 <_printf_i+0x1a8>
 8012410:	4616      	mov	r6, r2
 8012412:	fbb5 f1f3 	udiv	r1, r5, r3
 8012416:	fb03 5711 	mls	r7, r3, r1, r5
 801241a:	5dc7      	ldrb	r7, [r0, r7]
 801241c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012420:	462f      	mov	r7, r5
 8012422:	42bb      	cmp	r3, r7
 8012424:	460d      	mov	r5, r1
 8012426:	d9f4      	bls.n	8012412 <_printf_i+0x112>
 8012428:	2b08      	cmp	r3, #8
 801242a:	d10b      	bne.n	8012444 <_printf_i+0x144>
 801242c:	6823      	ldr	r3, [r4, #0]
 801242e:	07df      	lsls	r7, r3, #31
 8012430:	d508      	bpl.n	8012444 <_printf_i+0x144>
 8012432:	6923      	ldr	r3, [r4, #16]
 8012434:	6861      	ldr	r1, [r4, #4]
 8012436:	4299      	cmp	r1, r3
 8012438:	bfde      	ittt	le
 801243a:	2330      	movle	r3, #48	@ 0x30
 801243c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012440:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012444:	1b92      	subs	r2, r2, r6
 8012446:	6122      	str	r2, [r4, #16]
 8012448:	f8cd a000 	str.w	sl, [sp]
 801244c:	464b      	mov	r3, r9
 801244e:	aa03      	add	r2, sp, #12
 8012450:	4621      	mov	r1, r4
 8012452:	4640      	mov	r0, r8
 8012454:	f7ff fee6 	bl	8012224 <_printf_common>
 8012458:	3001      	adds	r0, #1
 801245a:	d14a      	bne.n	80124f2 <_printf_i+0x1f2>
 801245c:	f04f 30ff 	mov.w	r0, #4294967295
 8012460:	b004      	add	sp, #16
 8012462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012466:	6823      	ldr	r3, [r4, #0]
 8012468:	f043 0320 	orr.w	r3, r3, #32
 801246c:	6023      	str	r3, [r4, #0]
 801246e:	4833      	ldr	r0, [pc, #204]	@ (801253c <_printf_i+0x23c>)
 8012470:	2778      	movs	r7, #120	@ 0x78
 8012472:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012476:	6823      	ldr	r3, [r4, #0]
 8012478:	6831      	ldr	r1, [r6, #0]
 801247a:	061f      	lsls	r7, r3, #24
 801247c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012480:	d402      	bmi.n	8012488 <_printf_i+0x188>
 8012482:	065f      	lsls	r7, r3, #25
 8012484:	bf48      	it	mi
 8012486:	b2ad      	uxthmi	r5, r5
 8012488:	6031      	str	r1, [r6, #0]
 801248a:	07d9      	lsls	r1, r3, #31
 801248c:	bf44      	itt	mi
 801248e:	f043 0320 	orrmi.w	r3, r3, #32
 8012492:	6023      	strmi	r3, [r4, #0]
 8012494:	b11d      	cbz	r5, 801249e <_printf_i+0x19e>
 8012496:	2310      	movs	r3, #16
 8012498:	e7ac      	b.n	80123f4 <_printf_i+0xf4>
 801249a:	4827      	ldr	r0, [pc, #156]	@ (8012538 <_printf_i+0x238>)
 801249c:	e7e9      	b.n	8012472 <_printf_i+0x172>
 801249e:	6823      	ldr	r3, [r4, #0]
 80124a0:	f023 0320 	bic.w	r3, r3, #32
 80124a4:	6023      	str	r3, [r4, #0]
 80124a6:	e7f6      	b.n	8012496 <_printf_i+0x196>
 80124a8:	4616      	mov	r6, r2
 80124aa:	e7bd      	b.n	8012428 <_printf_i+0x128>
 80124ac:	6833      	ldr	r3, [r6, #0]
 80124ae:	6825      	ldr	r5, [r4, #0]
 80124b0:	6961      	ldr	r1, [r4, #20]
 80124b2:	1d18      	adds	r0, r3, #4
 80124b4:	6030      	str	r0, [r6, #0]
 80124b6:	062e      	lsls	r6, r5, #24
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	d501      	bpl.n	80124c0 <_printf_i+0x1c0>
 80124bc:	6019      	str	r1, [r3, #0]
 80124be:	e002      	b.n	80124c6 <_printf_i+0x1c6>
 80124c0:	0668      	lsls	r0, r5, #25
 80124c2:	d5fb      	bpl.n	80124bc <_printf_i+0x1bc>
 80124c4:	8019      	strh	r1, [r3, #0]
 80124c6:	2300      	movs	r3, #0
 80124c8:	6123      	str	r3, [r4, #16]
 80124ca:	4616      	mov	r6, r2
 80124cc:	e7bc      	b.n	8012448 <_printf_i+0x148>
 80124ce:	6833      	ldr	r3, [r6, #0]
 80124d0:	1d1a      	adds	r2, r3, #4
 80124d2:	6032      	str	r2, [r6, #0]
 80124d4:	681e      	ldr	r6, [r3, #0]
 80124d6:	6862      	ldr	r2, [r4, #4]
 80124d8:	2100      	movs	r1, #0
 80124da:	4630      	mov	r0, r6
 80124dc:	f7ed fe58 	bl	8000190 <memchr>
 80124e0:	b108      	cbz	r0, 80124e6 <_printf_i+0x1e6>
 80124e2:	1b80      	subs	r0, r0, r6
 80124e4:	6060      	str	r0, [r4, #4]
 80124e6:	6863      	ldr	r3, [r4, #4]
 80124e8:	6123      	str	r3, [r4, #16]
 80124ea:	2300      	movs	r3, #0
 80124ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80124f0:	e7aa      	b.n	8012448 <_printf_i+0x148>
 80124f2:	6923      	ldr	r3, [r4, #16]
 80124f4:	4632      	mov	r2, r6
 80124f6:	4649      	mov	r1, r9
 80124f8:	4640      	mov	r0, r8
 80124fa:	47d0      	blx	sl
 80124fc:	3001      	adds	r0, #1
 80124fe:	d0ad      	beq.n	801245c <_printf_i+0x15c>
 8012500:	6823      	ldr	r3, [r4, #0]
 8012502:	079b      	lsls	r3, r3, #30
 8012504:	d413      	bmi.n	801252e <_printf_i+0x22e>
 8012506:	68e0      	ldr	r0, [r4, #12]
 8012508:	9b03      	ldr	r3, [sp, #12]
 801250a:	4298      	cmp	r0, r3
 801250c:	bfb8      	it	lt
 801250e:	4618      	movlt	r0, r3
 8012510:	e7a6      	b.n	8012460 <_printf_i+0x160>
 8012512:	2301      	movs	r3, #1
 8012514:	4632      	mov	r2, r6
 8012516:	4649      	mov	r1, r9
 8012518:	4640      	mov	r0, r8
 801251a:	47d0      	blx	sl
 801251c:	3001      	adds	r0, #1
 801251e:	d09d      	beq.n	801245c <_printf_i+0x15c>
 8012520:	3501      	adds	r5, #1
 8012522:	68e3      	ldr	r3, [r4, #12]
 8012524:	9903      	ldr	r1, [sp, #12]
 8012526:	1a5b      	subs	r3, r3, r1
 8012528:	42ab      	cmp	r3, r5
 801252a:	dcf2      	bgt.n	8012512 <_printf_i+0x212>
 801252c:	e7eb      	b.n	8012506 <_printf_i+0x206>
 801252e:	2500      	movs	r5, #0
 8012530:	f104 0619 	add.w	r6, r4, #25
 8012534:	e7f5      	b.n	8012522 <_printf_i+0x222>
 8012536:	bf00      	nop
 8012538:	080140b9 	.word	0x080140b9
 801253c:	080140ca 	.word	0x080140ca

08012540 <__sflush_r>:
 8012540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012548:	0716      	lsls	r6, r2, #28
 801254a:	4605      	mov	r5, r0
 801254c:	460c      	mov	r4, r1
 801254e:	d454      	bmi.n	80125fa <__sflush_r+0xba>
 8012550:	684b      	ldr	r3, [r1, #4]
 8012552:	2b00      	cmp	r3, #0
 8012554:	dc02      	bgt.n	801255c <__sflush_r+0x1c>
 8012556:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012558:	2b00      	cmp	r3, #0
 801255a:	dd48      	ble.n	80125ee <__sflush_r+0xae>
 801255c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801255e:	2e00      	cmp	r6, #0
 8012560:	d045      	beq.n	80125ee <__sflush_r+0xae>
 8012562:	2300      	movs	r3, #0
 8012564:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012568:	682f      	ldr	r7, [r5, #0]
 801256a:	6a21      	ldr	r1, [r4, #32]
 801256c:	602b      	str	r3, [r5, #0]
 801256e:	d030      	beq.n	80125d2 <__sflush_r+0x92>
 8012570:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012572:	89a3      	ldrh	r3, [r4, #12]
 8012574:	0759      	lsls	r1, r3, #29
 8012576:	d505      	bpl.n	8012584 <__sflush_r+0x44>
 8012578:	6863      	ldr	r3, [r4, #4]
 801257a:	1ad2      	subs	r2, r2, r3
 801257c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801257e:	b10b      	cbz	r3, 8012584 <__sflush_r+0x44>
 8012580:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012582:	1ad2      	subs	r2, r2, r3
 8012584:	2300      	movs	r3, #0
 8012586:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012588:	6a21      	ldr	r1, [r4, #32]
 801258a:	4628      	mov	r0, r5
 801258c:	47b0      	blx	r6
 801258e:	1c43      	adds	r3, r0, #1
 8012590:	89a3      	ldrh	r3, [r4, #12]
 8012592:	d106      	bne.n	80125a2 <__sflush_r+0x62>
 8012594:	6829      	ldr	r1, [r5, #0]
 8012596:	291d      	cmp	r1, #29
 8012598:	d82b      	bhi.n	80125f2 <__sflush_r+0xb2>
 801259a:	4a2a      	ldr	r2, [pc, #168]	@ (8012644 <__sflush_r+0x104>)
 801259c:	410a      	asrs	r2, r1
 801259e:	07d6      	lsls	r6, r2, #31
 80125a0:	d427      	bmi.n	80125f2 <__sflush_r+0xb2>
 80125a2:	2200      	movs	r2, #0
 80125a4:	6062      	str	r2, [r4, #4]
 80125a6:	04d9      	lsls	r1, r3, #19
 80125a8:	6922      	ldr	r2, [r4, #16]
 80125aa:	6022      	str	r2, [r4, #0]
 80125ac:	d504      	bpl.n	80125b8 <__sflush_r+0x78>
 80125ae:	1c42      	adds	r2, r0, #1
 80125b0:	d101      	bne.n	80125b6 <__sflush_r+0x76>
 80125b2:	682b      	ldr	r3, [r5, #0]
 80125b4:	b903      	cbnz	r3, 80125b8 <__sflush_r+0x78>
 80125b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80125b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80125ba:	602f      	str	r7, [r5, #0]
 80125bc:	b1b9      	cbz	r1, 80125ee <__sflush_r+0xae>
 80125be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80125c2:	4299      	cmp	r1, r3
 80125c4:	d002      	beq.n	80125cc <__sflush_r+0x8c>
 80125c6:	4628      	mov	r0, r5
 80125c8:	f7ff fbf2 	bl	8011db0 <_free_r>
 80125cc:	2300      	movs	r3, #0
 80125ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80125d0:	e00d      	b.n	80125ee <__sflush_r+0xae>
 80125d2:	2301      	movs	r3, #1
 80125d4:	4628      	mov	r0, r5
 80125d6:	47b0      	blx	r6
 80125d8:	4602      	mov	r2, r0
 80125da:	1c50      	adds	r0, r2, #1
 80125dc:	d1c9      	bne.n	8012572 <__sflush_r+0x32>
 80125de:	682b      	ldr	r3, [r5, #0]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d0c6      	beq.n	8012572 <__sflush_r+0x32>
 80125e4:	2b1d      	cmp	r3, #29
 80125e6:	d001      	beq.n	80125ec <__sflush_r+0xac>
 80125e8:	2b16      	cmp	r3, #22
 80125ea:	d11e      	bne.n	801262a <__sflush_r+0xea>
 80125ec:	602f      	str	r7, [r5, #0]
 80125ee:	2000      	movs	r0, #0
 80125f0:	e022      	b.n	8012638 <__sflush_r+0xf8>
 80125f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125f6:	b21b      	sxth	r3, r3
 80125f8:	e01b      	b.n	8012632 <__sflush_r+0xf2>
 80125fa:	690f      	ldr	r7, [r1, #16]
 80125fc:	2f00      	cmp	r7, #0
 80125fe:	d0f6      	beq.n	80125ee <__sflush_r+0xae>
 8012600:	0793      	lsls	r3, r2, #30
 8012602:	680e      	ldr	r6, [r1, #0]
 8012604:	bf08      	it	eq
 8012606:	694b      	ldreq	r3, [r1, #20]
 8012608:	600f      	str	r7, [r1, #0]
 801260a:	bf18      	it	ne
 801260c:	2300      	movne	r3, #0
 801260e:	eba6 0807 	sub.w	r8, r6, r7
 8012612:	608b      	str	r3, [r1, #8]
 8012614:	f1b8 0f00 	cmp.w	r8, #0
 8012618:	dde9      	ble.n	80125ee <__sflush_r+0xae>
 801261a:	6a21      	ldr	r1, [r4, #32]
 801261c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801261e:	4643      	mov	r3, r8
 8012620:	463a      	mov	r2, r7
 8012622:	4628      	mov	r0, r5
 8012624:	47b0      	blx	r6
 8012626:	2800      	cmp	r0, #0
 8012628:	dc08      	bgt.n	801263c <__sflush_r+0xfc>
 801262a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801262e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012632:	81a3      	strh	r3, [r4, #12]
 8012634:	f04f 30ff 	mov.w	r0, #4294967295
 8012638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801263c:	4407      	add	r7, r0
 801263e:	eba8 0800 	sub.w	r8, r8, r0
 8012642:	e7e7      	b.n	8012614 <__sflush_r+0xd4>
 8012644:	dfbffffe 	.word	0xdfbffffe

08012648 <_fflush_r>:
 8012648:	b538      	push	{r3, r4, r5, lr}
 801264a:	690b      	ldr	r3, [r1, #16]
 801264c:	4605      	mov	r5, r0
 801264e:	460c      	mov	r4, r1
 8012650:	b913      	cbnz	r3, 8012658 <_fflush_r+0x10>
 8012652:	2500      	movs	r5, #0
 8012654:	4628      	mov	r0, r5
 8012656:	bd38      	pop	{r3, r4, r5, pc}
 8012658:	b118      	cbz	r0, 8012662 <_fflush_r+0x1a>
 801265a:	6a03      	ldr	r3, [r0, #32]
 801265c:	b90b      	cbnz	r3, 8012662 <_fflush_r+0x1a>
 801265e:	f7ff f981 	bl	8011964 <__sinit>
 8012662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d0f3      	beq.n	8012652 <_fflush_r+0xa>
 801266a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801266c:	07d0      	lsls	r0, r2, #31
 801266e:	d404      	bmi.n	801267a <_fflush_r+0x32>
 8012670:	0599      	lsls	r1, r3, #22
 8012672:	d402      	bmi.n	801267a <_fflush_r+0x32>
 8012674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012676:	f7ff fb8a 	bl	8011d8e <__retarget_lock_acquire_recursive>
 801267a:	4628      	mov	r0, r5
 801267c:	4621      	mov	r1, r4
 801267e:	f7ff ff5f 	bl	8012540 <__sflush_r>
 8012682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012684:	07da      	lsls	r2, r3, #31
 8012686:	4605      	mov	r5, r0
 8012688:	d4e4      	bmi.n	8012654 <_fflush_r+0xc>
 801268a:	89a3      	ldrh	r3, [r4, #12]
 801268c:	059b      	lsls	r3, r3, #22
 801268e:	d4e1      	bmi.n	8012654 <_fflush_r+0xc>
 8012690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012692:	f7ff fb7d 	bl	8011d90 <__retarget_lock_release_recursive>
 8012696:	e7dd      	b.n	8012654 <_fflush_r+0xc>

08012698 <__swhatbuf_r>:
 8012698:	b570      	push	{r4, r5, r6, lr}
 801269a:	460c      	mov	r4, r1
 801269c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126a0:	2900      	cmp	r1, #0
 80126a2:	b096      	sub	sp, #88	@ 0x58
 80126a4:	4615      	mov	r5, r2
 80126a6:	461e      	mov	r6, r3
 80126a8:	da0d      	bge.n	80126c6 <__swhatbuf_r+0x2e>
 80126aa:	89a3      	ldrh	r3, [r4, #12]
 80126ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80126b0:	f04f 0100 	mov.w	r1, #0
 80126b4:	bf14      	ite	ne
 80126b6:	2340      	movne	r3, #64	@ 0x40
 80126b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80126bc:	2000      	movs	r0, #0
 80126be:	6031      	str	r1, [r6, #0]
 80126c0:	602b      	str	r3, [r5, #0]
 80126c2:	b016      	add	sp, #88	@ 0x58
 80126c4:	bd70      	pop	{r4, r5, r6, pc}
 80126c6:	466a      	mov	r2, sp
 80126c8:	f000 f88a 	bl	80127e0 <_fstat_r>
 80126cc:	2800      	cmp	r0, #0
 80126ce:	dbec      	blt.n	80126aa <__swhatbuf_r+0x12>
 80126d0:	9901      	ldr	r1, [sp, #4]
 80126d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80126d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80126da:	4259      	negs	r1, r3
 80126dc:	4159      	adcs	r1, r3
 80126de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80126e2:	e7eb      	b.n	80126bc <__swhatbuf_r+0x24>

080126e4 <__smakebuf_r>:
 80126e4:	898b      	ldrh	r3, [r1, #12]
 80126e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126e8:	079d      	lsls	r5, r3, #30
 80126ea:	4606      	mov	r6, r0
 80126ec:	460c      	mov	r4, r1
 80126ee:	d507      	bpl.n	8012700 <__smakebuf_r+0x1c>
 80126f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80126f4:	6023      	str	r3, [r4, #0]
 80126f6:	6123      	str	r3, [r4, #16]
 80126f8:	2301      	movs	r3, #1
 80126fa:	6163      	str	r3, [r4, #20]
 80126fc:	b003      	add	sp, #12
 80126fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012700:	ab01      	add	r3, sp, #4
 8012702:	466a      	mov	r2, sp
 8012704:	f7ff ffc8 	bl	8012698 <__swhatbuf_r>
 8012708:	9f00      	ldr	r7, [sp, #0]
 801270a:	4605      	mov	r5, r0
 801270c:	4639      	mov	r1, r7
 801270e:	4630      	mov	r0, r6
 8012710:	f7ff fbba 	bl	8011e88 <_malloc_r>
 8012714:	b948      	cbnz	r0, 801272a <__smakebuf_r+0x46>
 8012716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801271a:	059a      	lsls	r2, r3, #22
 801271c:	d4ee      	bmi.n	80126fc <__smakebuf_r+0x18>
 801271e:	f023 0303 	bic.w	r3, r3, #3
 8012722:	f043 0302 	orr.w	r3, r3, #2
 8012726:	81a3      	strh	r3, [r4, #12]
 8012728:	e7e2      	b.n	80126f0 <__smakebuf_r+0xc>
 801272a:	89a3      	ldrh	r3, [r4, #12]
 801272c:	6020      	str	r0, [r4, #0]
 801272e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012732:	81a3      	strh	r3, [r4, #12]
 8012734:	9b01      	ldr	r3, [sp, #4]
 8012736:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801273a:	b15b      	cbz	r3, 8012754 <__smakebuf_r+0x70>
 801273c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012740:	4630      	mov	r0, r6
 8012742:	f000 f85f 	bl	8012804 <_isatty_r>
 8012746:	b128      	cbz	r0, 8012754 <__smakebuf_r+0x70>
 8012748:	89a3      	ldrh	r3, [r4, #12]
 801274a:	f023 0303 	bic.w	r3, r3, #3
 801274e:	f043 0301 	orr.w	r3, r3, #1
 8012752:	81a3      	strh	r3, [r4, #12]
 8012754:	89a3      	ldrh	r3, [r4, #12]
 8012756:	431d      	orrs	r5, r3
 8012758:	81a5      	strh	r5, [r4, #12]
 801275a:	e7cf      	b.n	80126fc <__smakebuf_r+0x18>

0801275c <_putc_r>:
 801275c:	b570      	push	{r4, r5, r6, lr}
 801275e:	460d      	mov	r5, r1
 8012760:	4614      	mov	r4, r2
 8012762:	4606      	mov	r6, r0
 8012764:	b118      	cbz	r0, 801276e <_putc_r+0x12>
 8012766:	6a03      	ldr	r3, [r0, #32]
 8012768:	b90b      	cbnz	r3, 801276e <_putc_r+0x12>
 801276a:	f7ff f8fb 	bl	8011964 <__sinit>
 801276e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012770:	07d8      	lsls	r0, r3, #31
 8012772:	d405      	bmi.n	8012780 <_putc_r+0x24>
 8012774:	89a3      	ldrh	r3, [r4, #12]
 8012776:	0599      	lsls	r1, r3, #22
 8012778:	d402      	bmi.n	8012780 <_putc_r+0x24>
 801277a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801277c:	f7ff fb07 	bl	8011d8e <__retarget_lock_acquire_recursive>
 8012780:	68a3      	ldr	r3, [r4, #8]
 8012782:	3b01      	subs	r3, #1
 8012784:	2b00      	cmp	r3, #0
 8012786:	60a3      	str	r3, [r4, #8]
 8012788:	da05      	bge.n	8012796 <_putc_r+0x3a>
 801278a:	69a2      	ldr	r2, [r4, #24]
 801278c:	4293      	cmp	r3, r2
 801278e:	db12      	blt.n	80127b6 <_putc_r+0x5a>
 8012790:	b2eb      	uxtb	r3, r5
 8012792:	2b0a      	cmp	r3, #10
 8012794:	d00f      	beq.n	80127b6 <_putc_r+0x5a>
 8012796:	6823      	ldr	r3, [r4, #0]
 8012798:	1c5a      	adds	r2, r3, #1
 801279a:	6022      	str	r2, [r4, #0]
 801279c:	701d      	strb	r5, [r3, #0]
 801279e:	b2ed      	uxtb	r5, r5
 80127a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127a2:	07da      	lsls	r2, r3, #31
 80127a4:	d405      	bmi.n	80127b2 <_putc_r+0x56>
 80127a6:	89a3      	ldrh	r3, [r4, #12]
 80127a8:	059b      	lsls	r3, r3, #22
 80127aa:	d402      	bmi.n	80127b2 <_putc_r+0x56>
 80127ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127ae:	f7ff faef 	bl	8011d90 <__retarget_lock_release_recursive>
 80127b2:	4628      	mov	r0, r5
 80127b4:	bd70      	pop	{r4, r5, r6, pc}
 80127b6:	4629      	mov	r1, r5
 80127b8:	4622      	mov	r2, r4
 80127ba:	4630      	mov	r0, r6
 80127bc:	f7ff f9c3 	bl	8011b46 <__swbuf_r>
 80127c0:	4605      	mov	r5, r0
 80127c2:	e7ed      	b.n	80127a0 <_putc_r+0x44>

080127c4 <strchr>:
 80127c4:	b2c9      	uxtb	r1, r1
 80127c6:	4603      	mov	r3, r0
 80127c8:	4618      	mov	r0, r3
 80127ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127ce:	b112      	cbz	r2, 80127d6 <strchr+0x12>
 80127d0:	428a      	cmp	r2, r1
 80127d2:	d1f9      	bne.n	80127c8 <strchr+0x4>
 80127d4:	4770      	bx	lr
 80127d6:	2900      	cmp	r1, #0
 80127d8:	bf18      	it	ne
 80127da:	2000      	movne	r0, #0
 80127dc:	4770      	bx	lr
	...

080127e0 <_fstat_r>:
 80127e0:	b538      	push	{r3, r4, r5, lr}
 80127e2:	4d07      	ldr	r5, [pc, #28]	@ (8012800 <_fstat_r+0x20>)
 80127e4:	2300      	movs	r3, #0
 80127e6:	4604      	mov	r4, r0
 80127e8:	4608      	mov	r0, r1
 80127ea:	4611      	mov	r1, r2
 80127ec:	602b      	str	r3, [r5, #0]
 80127ee:	f7f0 fe34 	bl	800345a <_fstat>
 80127f2:	1c43      	adds	r3, r0, #1
 80127f4:	d102      	bne.n	80127fc <_fstat_r+0x1c>
 80127f6:	682b      	ldr	r3, [r5, #0]
 80127f8:	b103      	cbz	r3, 80127fc <_fstat_r+0x1c>
 80127fa:	6023      	str	r3, [r4, #0]
 80127fc:	bd38      	pop	{r3, r4, r5, pc}
 80127fe:	bf00      	nop
 8012800:	20000d54 	.word	0x20000d54

08012804 <_isatty_r>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	4d06      	ldr	r5, [pc, #24]	@ (8012820 <_isatty_r+0x1c>)
 8012808:	2300      	movs	r3, #0
 801280a:	4604      	mov	r4, r0
 801280c:	4608      	mov	r0, r1
 801280e:	602b      	str	r3, [r5, #0]
 8012810:	f7f0 fe33 	bl	800347a <_isatty>
 8012814:	1c43      	adds	r3, r0, #1
 8012816:	d102      	bne.n	801281e <_isatty_r+0x1a>
 8012818:	682b      	ldr	r3, [r5, #0]
 801281a:	b103      	cbz	r3, 801281e <_isatty_r+0x1a>
 801281c:	6023      	str	r3, [r4, #0]
 801281e:	bd38      	pop	{r3, r4, r5, pc}
 8012820:	20000d54 	.word	0x20000d54

08012824 <_sbrk_r>:
 8012824:	b538      	push	{r3, r4, r5, lr}
 8012826:	4d06      	ldr	r5, [pc, #24]	@ (8012840 <_sbrk_r+0x1c>)
 8012828:	2300      	movs	r3, #0
 801282a:	4604      	mov	r4, r0
 801282c:	4608      	mov	r0, r1
 801282e:	602b      	str	r3, [r5, #0]
 8012830:	f7f0 fe3c 	bl	80034ac <_sbrk>
 8012834:	1c43      	adds	r3, r0, #1
 8012836:	d102      	bne.n	801283e <_sbrk_r+0x1a>
 8012838:	682b      	ldr	r3, [r5, #0]
 801283a:	b103      	cbz	r3, 801283e <_sbrk_r+0x1a>
 801283c:	6023      	str	r3, [r4, #0]
 801283e:	bd38      	pop	{r3, r4, r5, pc}
 8012840:	20000d54 	.word	0x20000d54

08012844 <fmax>:
 8012844:	b508      	push	{r3, lr}
 8012846:	ed2d 8b04 	vpush	{d8-d9}
 801284a:	eeb0 8a40 	vmov.f32	s16, s0
 801284e:	eef0 8a60 	vmov.f32	s17, s1
 8012852:	eeb0 9a41 	vmov.f32	s18, s2
 8012856:	eef0 9a61 	vmov.f32	s19, s3
 801285a:	f000 f847 	bl	80128ec <__fpclassifyd>
 801285e:	b950      	cbnz	r0, 8012876 <fmax+0x32>
 8012860:	eeb0 8a49 	vmov.f32	s16, s18
 8012864:	eef0 8a69 	vmov.f32	s17, s19
 8012868:	eeb0 0a48 	vmov.f32	s0, s16
 801286c:	eef0 0a68 	vmov.f32	s1, s17
 8012870:	ecbd 8b04 	vpop	{d8-d9}
 8012874:	bd08      	pop	{r3, pc}
 8012876:	eeb0 0a49 	vmov.f32	s0, s18
 801287a:	eef0 0a69 	vmov.f32	s1, s19
 801287e:	f000 f835 	bl	80128ec <__fpclassifyd>
 8012882:	2800      	cmp	r0, #0
 8012884:	d0f0      	beq.n	8012868 <fmax+0x24>
 8012886:	ec53 2b19 	vmov	r2, r3, d9
 801288a:	ec51 0b18 	vmov	r0, r1, d8
 801288e:	f7ee f833 	bl	80008f8 <__aeabi_dcmpgt>
 8012892:	2800      	cmp	r0, #0
 8012894:	d0e4      	beq.n	8012860 <fmax+0x1c>
 8012896:	e7e7      	b.n	8012868 <fmax+0x24>

08012898 <fmin>:
 8012898:	b508      	push	{r3, lr}
 801289a:	ed2d 8b04 	vpush	{d8-d9}
 801289e:	eeb0 8a40 	vmov.f32	s16, s0
 80128a2:	eef0 8a60 	vmov.f32	s17, s1
 80128a6:	eeb0 9a41 	vmov.f32	s18, s2
 80128aa:	eef0 9a61 	vmov.f32	s19, s3
 80128ae:	f000 f81d 	bl	80128ec <__fpclassifyd>
 80128b2:	b950      	cbnz	r0, 80128ca <fmin+0x32>
 80128b4:	eeb0 8a49 	vmov.f32	s16, s18
 80128b8:	eef0 8a69 	vmov.f32	s17, s19
 80128bc:	eeb0 0a48 	vmov.f32	s0, s16
 80128c0:	eef0 0a68 	vmov.f32	s1, s17
 80128c4:	ecbd 8b04 	vpop	{d8-d9}
 80128c8:	bd08      	pop	{r3, pc}
 80128ca:	eeb0 0a49 	vmov.f32	s0, s18
 80128ce:	eef0 0a69 	vmov.f32	s1, s19
 80128d2:	f000 f80b 	bl	80128ec <__fpclassifyd>
 80128d6:	2800      	cmp	r0, #0
 80128d8:	d0f0      	beq.n	80128bc <fmin+0x24>
 80128da:	ec53 2b19 	vmov	r2, r3, d9
 80128de:	ec51 0b18 	vmov	r0, r1, d8
 80128e2:	f7ed ffeb 	bl	80008bc <__aeabi_dcmplt>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	d0e4      	beq.n	80128b4 <fmin+0x1c>
 80128ea:	e7e7      	b.n	80128bc <fmin+0x24>

080128ec <__fpclassifyd>:
 80128ec:	ec51 0b10 	vmov	r0, r1, d0
 80128f0:	b510      	push	{r4, lr}
 80128f2:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80128f6:	460b      	mov	r3, r1
 80128f8:	d019      	beq.n	801292e <__fpclassifyd+0x42>
 80128fa:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80128fe:	490e      	ldr	r1, [pc, #56]	@ (8012938 <__fpclassifyd+0x4c>)
 8012900:	428a      	cmp	r2, r1
 8012902:	d90e      	bls.n	8012922 <__fpclassifyd+0x36>
 8012904:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8012908:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801290c:	428a      	cmp	r2, r1
 801290e:	d908      	bls.n	8012922 <__fpclassifyd+0x36>
 8012910:	4a0a      	ldr	r2, [pc, #40]	@ (801293c <__fpclassifyd+0x50>)
 8012912:	4213      	tst	r3, r2
 8012914:	d007      	beq.n	8012926 <__fpclassifyd+0x3a>
 8012916:	4294      	cmp	r4, r2
 8012918:	d107      	bne.n	801292a <__fpclassifyd+0x3e>
 801291a:	fab0 f080 	clz	r0, r0
 801291e:	0940      	lsrs	r0, r0, #5
 8012920:	bd10      	pop	{r4, pc}
 8012922:	2004      	movs	r0, #4
 8012924:	e7fc      	b.n	8012920 <__fpclassifyd+0x34>
 8012926:	2003      	movs	r0, #3
 8012928:	e7fa      	b.n	8012920 <__fpclassifyd+0x34>
 801292a:	2000      	movs	r0, #0
 801292c:	e7f8      	b.n	8012920 <__fpclassifyd+0x34>
 801292e:	2800      	cmp	r0, #0
 8012930:	d1ee      	bne.n	8012910 <__fpclassifyd+0x24>
 8012932:	2002      	movs	r0, #2
 8012934:	e7f4      	b.n	8012920 <__fpclassifyd+0x34>
 8012936:	bf00      	nop
 8012938:	7fdfffff 	.word	0x7fdfffff
 801293c:	7ff00000 	.word	0x7ff00000

08012940 <_init>:
 8012940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012942:	bf00      	nop
 8012944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012946:	bc08      	pop	{r3}
 8012948:	469e      	mov	lr, r3
 801294a:	4770      	bx	lr

0801294c <_fini>:
 801294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294e:	bf00      	nop
 8012950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012952:	bc08      	pop	{r3}
 8012954:	469e      	mov	lr, r3
 8012956:	4770      	bx	lr
